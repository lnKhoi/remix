"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/server.ts
var server_exports = {};
__export(server_exports, {
  augmentLoadersAndActions: () => augmentLoadersAndActions,
  defineServerConfig: () => defineServerConfig,
  withServerDevTools: () => withServerDevTools
});
module.exports = __toCommonJS(server_exports);

// src/dev-server/singleton.ts
var global = {};
function singleton(name, value) {
  const yolo = global;
  yolo.__singletons ??= {};
  yolo.__singletons[name] ??= value();
  return yolo.__singletons[name];
}
function setSingleton(name, value) {
  const yolo = global;
  yolo.__singletons ??= {};
  yolo.__singletons[name] = value;
}

// src/dev-server/config.ts
var defineServerConfig = (config) => config;
var setConfig = (config) => singleton("config", () => config ?? {});
var getConfig = () => singleton("config", () => ({}));

// src/dev-server/init.ts
var import_ws = require("ws");

// node_modules/chalk/source/vendor/ansi-styles/index.js
var ANSI_BACKGROUND_OFFSET = 10;
var wrapAnsi16 = (offset = 0) => (code) => `\x1B[${code + offset}m`;
var wrapAnsi256 = (offset = 0) => (code) => `\x1B[${38 + offset};5;${code}m`;
var wrapAnsi16m = (offset = 0) => (red, green, blue) => `\x1B[${38 + offset};2;${red};${green};${blue}m`;
var styles = {
  modifier: {
    reset: [0, 0],
    // 21 isn't widely supported and 22 does the same thing
    bold: [1, 22],
    dim: [2, 22],
    italic: [3, 23],
    underline: [4, 24],
    overline: [53, 55],
    inverse: [7, 27],
    hidden: [8, 28],
    strikethrough: [9, 29]
  },
  color: {
    black: [30, 39],
    red: [31, 39],
    green: [32, 39],
    yellow: [33, 39],
    blue: [34, 39],
    magenta: [35, 39],
    cyan: [36, 39],
    white: [37, 39],
    // Bright color
    blackBright: [90, 39],
    gray: [90, 39],
    // Alias of `blackBright`
    grey: [90, 39],
    // Alias of `blackBright`
    redBright: [91, 39],
    greenBright: [92, 39],
    yellowBright: [93, 39],
    blueBright: [94, 39],
    magentaBright: [95, 39],
    cyanBright: [96, 39],
    whiteBright: [97, 39]
  },
  bgColor: {
    bgBlack: [40, 49],
    bgRed: [41, 49],
    bgGreen: [42, 49],
    bgYellow: [43, 49],
    bgBlue: [44, 49],
    bgMagenta: [45, 49],
    bgCyan: [46, 49],
    bgWhite: [47, 49],
    // Bright color
    bgBlackBright: [100, 49],
    bgGray: [100, 49],
    // Alias of `bgBlackBright`
    bgGrey: [100, 49],
    // Alias of `bgBlackBright`
    bgRedBright: [101, 49],
    bgGreenBright: [102, 49],
    bgYellowBright: [103, 49],
    bgBlueBright: [104, 49],
    bgMagentaBright: [105, 49],
    bgCyanBright: [106, 49],
    bgWhiteBright: [107, 49]
  }
};
var modifierNames = Object.keys(styles.modifier);
var foregroundColorNames = Object.keys(styles.color);
var backgroundColorNames = Object.keys(styles.bgColor);
var colorNames = [...foregroundColorNames, ...backgroundColorNames];
function assembleStyles() {
  const codes = /* @__PURE__ */ new Map();
  for (const [groupName, group] of Object.entries(styles)) {
    for (const [styleName, style] of Object.entries(group)) {
      styles[styleName] = {
        open: `\x1B[${style[0]}m`,
        close: `\x1B[${style[1]}m`
      };
      group[styleName] = styles[styleName];
      codes.set(style[0], style[1]);
    }
    Object.defineProperty(styles, groupName, {
      value: group,
      enumerable: false
    });
  }
  Object.defineProperty(styles, "codes", {
    value: codes,
    enumerable: false
  });
  styles.color.close = "\x1B[39m";
  styles.bgColor.close = "\x1B[49m";
  styles.color.ansi = wrapAnsi16();
  styles.color.ansi256 = wrapAnsi256();
  styles.color.ansi16m = wrapAnsi16m();
  styles.bgColor.ansi = wrapAnsi16(ANSI_BACKGROUND_OFFSET);
  styles.bgColor.ansi256 = wrapAnsi256(ANSI_BACKGROUND_OFFSET);
  styles.bgColor.ansi16m = wrapAnsi16m(ANSI_BACKGROUND_OFFSET);
  Object.defineProperties(styles, {
    rgbToAnsi256: {
      value(red, green, blue) {
        if (red === green && green === blue) {
          if (red < 8) {
            return 16;
          }
          if (red > 248) {
            return 231;
          }
          return Math.round((red - 8) / 247 * 24) + 232;
        }
        return 16 + 36 * Math.round(red / 255 * 5) + 6 * Math.round(green / 255 * 5) + Math.round(blue / 255 * 5);
      },
      enumerable: false
    },
    hexToRgb: {
      value(hex) {
        const matches = /[a-f\d]{6}|[a-f\d]{3}/i.exec(hex.toString(16));
        if (!matches) {
          return [0, 0, 0];
        }
        let [colorString] = matches;
        if (colorString.length === 3) {
          colorString = [...colorString].map((character) => character + character).join("");
        }
        const integer = Number.parseInt(colorString, 16);
        return [
          /* eslint-disable no-bitwise */
          integer >> 16 & 255,
          integer >> 8 & 255,
          integer & 255
          /* eslint-enable no-bitwise */
        ];
      },
      enumerable: false
    },
    hexToAnsi256: {
      value: (hex) => styles.rgbToAnsi256(...styles.hexToRgb(hex)),
      enumerable: false
    },
    ansi256ToAnsi: {
      value(code) {
        if (code < 8) {
          return 30 + code;
        }
        if (code < 16) {
          return 90 + (code - 8);
        }
        let red;
        let green;
        let blue;
        if (code >= 232) {
          red = ((code - 232) * 10 + 8) / 255;
          green = red;
          blue = red;
        } else {
          code -= 16;
          const remainder = code % 36;
          red = Math.floor(code / 36) / 5;
          green = Math.floor(remainder / 6) / 5;
          blue = remainder % 6 / 5;
        }
        const value = Math.max(red, green, blue) * 2;
        if (value === 0) {
          return 30;
        }
        let result = 30 + (Math.round(blue) << 2 | Math.round(green) << 1 | Math.round(red));
        if (value === 2) {
          result += 60;
        }
        return result;
      },
      enumerable: false
    },
    rgbToAnsi: {
      value: (red, green, blue) => styles.ansi256ToAnsi(styles.rgbToAnsi256(red, green, blue)),
      enumerable: false
    },
    hexToAnsi: {
      value: (hex) => styles.ansi256ToAnsi(styles.hexToAnsi256(hex)),
      enumerable: false
    }
  });
  return styles;
}
var ansiStyles = assembleStyles();
var ansi_styles_default = ansiStyles;

// node_modules/chalk/source/vendor/supports-color/index.js
var import_node_process = __toESM(require("process"), 1);
var import_node_os = __toESM(require("os"), 1);
var import_node_tty = __toESM(require("tty"), 1);
function hasFlag(flag, argv = globalThis.Deno ? globalThis.Deno.args : import_node_process.default.argv) {
  const prefix = flag.startsWith("-") ? "" : flag.length === 1 ? "-" : "--";
  const position = argv.indexOf(prefix + flag);
  const terminatorPosition = argv.indexOf("--");
  return position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);
}
var { env } = import_node_process.default;
var flagForceColor;
if (hasFlag("no-color") || hasFlag("no-colors") || hasFlag("color=false") || hasFlag("color=never")) {
  flagForceColor = 0;
} else if (hasFlag("color") || hasFlag("colors") || hasFlag("color=true") || hasFlag("color=always")) {
  flagForceColor = 1;
}
function envForceColor() {
  if ("FORCE_COLOR" in env) {
    if (env.FORCE_COLOR === "true") {
      return 1;
    }
    if (env.FORCE_COLOR === "false") {
      return 0;
    }
    return env.FORCE_COLOR.length === 0 ? 1 : Math.min(Number.parseInt(env.FORCE_COLOR, 10), 3);
  }
}
function translateLevel(level) {
  if (level === 0) {
    return false;
  }
  return {
    level,
    hasBasic: true,
    has256: level >= 2,
    has16m: level >= 3
  };
}
function _supportsColor(haveStream, { streamIsTTY, sniffFlags = true } = {}) {
  const noFlagForceColor = envForceColor();
  if (noFlagForceColor !== void 0) {
    flagForceColor = noFlagForceColor;
  }
  const forceColor = sniffFlags ? flagForceColor : noFlagForceColor;
  if (forceColor === 0) {
    return 0;
  }
  if (sniffFlags) {
    if (hasFlag("color=16m") || hasFlag("color=full") || hasFlag("color=truecolor")) {
      return 3;
    }
    if (hasFlag("color=256")) {
      return 2;
    }
  }
  if ("TF_BUILD" in env && "AGENT_NAME" in env) {
    return 1;
  }
  if (haveStream && !streamIsTTY && forceColor === void 0) {
    return 0;
  }
  const min = forceColor || 0;
  if (env.TERM === "dumb") {
    return min;
  }
  if (import_node_process.default.platform === "win32") {
    const osRelease = import_node_os.default.release().split(".");
    if (Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {
      return Number(osRelease[2]) >= 14931 ? 3 : 2;
    }
    return 1;
  }
  if ("CI" in env) {
    if ("GITHUB_ACTIONS" in env || "GITEA_ACTIONS" in env) {
      return 3;
    }
    if (["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI", "BUILDKITE", "DRONE"].some((sign) => sign in env) || env.CI_NAME === "codeship") {
      return 1;
    }
    return min;
  }
  if ("TEAMCITY_VERSION" in env) {
    return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
  }
  if (env.COLORTERM === "truecolor") {
    return 3;
  }
  if (env.TERM === "xterm-kitty") {
    return 3;
  }
  if ("TERM_PROGRAM" in env) {
    const version = Number.parseInt((env.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
    switch (env.TERM_PROGRAM) {
      case "iTerm.app": {
        return version >= 3 ? 3 : 2;
      }
      case "Apple_Terminal": {
        return 2;
      }
    }
  }
  if (/-256(color)?$/i.test(env.TERM)) {
    return 2;
  }
  if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
    return 1;
  }
  if ("COLORTERM" in env) {
    return 1;
  }
  return min;
}
function createSupportsColor(stream, options = {}) {
  const level = _supportsColor(stream, {
    streamIsTTY: stream && stream.isTTY,
    ...options
  });
  return translateLevel(level);
}
var supportsColor = {
  stdout: createSupportsColor({ isTTY: import_node_tty.default.isatty(1) }),
  stderr: createSupportsColor({ isTTY: import_node_tty.default.isatty(2) })
};
var supports_color_default = supportsColor;

// node_modules/chalk/source/utilities.js
function stringReplaceAll(string, substring, replacer) {
  let index = string.indexOf(substring);
  if (index === -1) {
    return string;
  }
  const substringLength = substring.length;
  let endIndex = 0;
  let returnValue = "";
  do {
    returnValue += string.slice(endIndex, index) + substring + replacer;
    endIndex = index + substringLength;
    index = string.indexOf(substring, endIndex);
  } while (index !== -1);
  returnValue += string.slice(endIndex);
  return returnValue;
}
function stringEncaseCRLFWithFirstIndex(string, prefix, postfix, index) {
  let endIndex = 0;
  let returnValue = "";
  do {
    const gotCR = string[index - 1] === "\r";
    returnValue += string.slice(endIndex, gotCR ? index - 1 : index) + prefix + (gotCR ? "\r\n" : "\n") + postfix;
    endIndex = index + 1;
    index = string.indexOf("\n", endIndex);
  } while (index !== -1);
  returnValue += string.slice(endIndex);
  return returnValue;
}

// node_modules/chalk/source/index.js
var { stdout: stdoutColor, stderr: stderrColor } = supports_color_default;
var GENERATOR = Symbol("GENERATOR");
var STYLER = Symbol("STYLER");
var IS_EMPTY = Symbol("IS_EMPTY");
var levelMapping = [
  "ansi",
  "ansi",
  "ansi256",
  "ansi16m"
];
var styles2 = /* @__PURE__ */ Object.create(null);
var applyOptions = (object, options = {}) => {
  if (options.level && !(Number.isInteger(options.level) && options.level >= 0 && options.level <= 3)) {
    throw new Error("The `level` option should be an integer from 0 to 3");
  }
  const colorLevel = stdoutColor ? stdoutColor.level : 0;
  object.level = options.level === void 0 ? colorLevel : options.level;
};
var chalkFactory = (options) => {
  const chalk2 = (...strings) => strings.join(" ");
  applyOptions(chalk2, options);
  Object.setPrototypeOf(chalk2, createChalk.prototype);
  return chalk2;
};
function createChalk(options) {
  return chalkFactory(options);
}
Object.setPrototypeOf(createChalk.prototype, Function.prototype);
for (const [styleName, style] of Object.entries(ansi_styles_default)) {
  styles2[styleName] = {
    get() {
      const builder = createBuilder(this, createStyler(style.open, style.close, this[STYLER]), this[IS_EMPTY]);
      Object.defineProperty(this, styleName, { value: builder });
      return builder;
    }
  };
}
styles2.visible = {
  get() {
    const builder = createBuilder(this, this[STYLER], true);
    Object.defineProperty(this, "visible", { value: builder });
    return builder;
  }
};
var getModelAnsi = (model, level, type, ...arguments_) => {
  if (model === "rgb") {
    if (level === "ansi16m") {
      return ansi_styles_default[type].ansi16m(...arguments_);
    }
    if (level === "ansi256") {
      return ansi_styles_default[type].ansi256(ansi_styles_default.rgbToAnsi256(...arguments_));
    }
    return ansi_styles_default[type].ansi(ansi_styles_default.rgbToAnsi(...arguments_));
  }
  if (model === "hex") {
    return getModelAnsi("rgb", level, type, ...ansi_styles_default.hexToRgb(...arguments_));
  }
  return ansi_styles_default[type][model](...arguments_);
};
var usedModels = ["rgb", "hex", "ansi256"];
for (const model of usedModels) {
  styles2[model] = {
    get() {
      const { level } = this;
      return function(...arguments_) {
        const styler = createStyler(getModelAnsi(model, levelMapping[level], "color", ...arguments_), ansi_styles_default.color.close, this[STYLER]);
        return createBuilder(this, styler, this[IS_EMPTY]);
      };
    }
  };
  const bgModel = "bg" + model[0].toUpperCase() + model.slice(1);
  styles2[bgModel] = {
    get() {
      const { level } = this;
      return function(...arguments_) {
        const styler = createStyler(getModelAnsi(model, levelMapping[level], "bgColor", ...arguments_), ansi_styles_default.bgColor.close, this[STYLER]);
        return createBuilder(this, styler, this[IS_EMPTY]);
      };
    }
  };
}
var proto = Object.defineProperties(() => {
}, {
  ...styles2,
  level: {
    enumerable: true,
    get() {
      return this[GENERATOR].level;
    },
    set(level) {
      this[GENERATOR].level = level;
    }
  }
});
var createStyler = (open, close, parent) => {
  let openAll;
  let closeAll;
  if (parent === void 0) {
    openAll = open;
    closeAll = close;
  } else {
    openAll = parent.openAll + open;
    closeAll = close + parent.closeAll;
  }
  return {
    open,
    close,
    openAll,
    closeAll,
    parent
  };
};
var createBuilder = (self, _styler, _isEmpty) => {
  const builder = (...arguments_) => applyStyle(builder, arguments_.length === 1 ? "" + arguments_[0] : arguments_.join(" "));
  Object.setPrototypeOf(builder, proto);
  builder[GENERATOR] = self;
  builder[STYLER] = _styler;
  builder[IS_EMPTY] = _isEmpty;
  return builder;
};
var applyStyle = (self, string) => {
  if (self.level <= 0 || !string) {
    return self[IS_EMPTY] ? "" : string;
  }
  let styler = self[STYLER];
  if (styler === void 0) {
    return string;
  }
  const { openAll, closeAll } = styler;
  if (string.includes("\x1B")) {
    while (styler !== void 0) {
      string = stringReplaceAll(string, styler.close, styler.open);
      styler = styler.parent;
    }
  }
  const lfIndex = string.indexOf("\n");
  if (lfIndex !== -1) {
    string = stringEncaseCRLFWithFirstIndex(string, closeAll, openAll, lfIndex);
  }
  return openAll + string + closeAll;
};
Object.defineProperties(createChalk.prototype, styles2);
var chalk = createChalk();
var chalkStderr = createChalk({ level: stderrColor ? stderrColor.level : 0 });
var source_default = chalk;

// src/dev-server/logger.ts
var log = (message) => {
  const config = getConfig();
  if (config.silent) {
    return;
  }
  console.log(message);
};
var errorLog = (message) => {
  log(`${source_default.redBright.bold("ERROR")} ${message}`);
};
var redirectLog = (message) => {
  log(`${source_default.redBright.bold("REDIRECT")} ${message}`);
};
var infoLog = (message) => {
  log(`${source_default.blueBright.bold("INFO")} ${message}`);
};
var loaderLog = (message) => {
  const config = getConfig();
  if (config.logs?.loaders === false) {
    return;
  }
  log(`${source_default.green.bold("LOADER")} ${message}`);
};
var actionLog = (message) => {
  const config = getConfig();
  if (config.logs?.actions === false) {
    return;
  }
  log(`${source_default.yellowBright.bold("ACTION")} ${message}`);
};
var successLog = (message) => {
  log(`${source_default.greenBright.bold("SUCCESS")} ${message}`);
};

// src/dev-server/perf.ts
var diffInMs = (start, end = performance.now()) => Number((end - start).toFixed(2));
var secondsToHuman = (s) => {
  if (s > 3600) {
    const hours = Math.floor(s / 3600);
    const minutes = Math.floor(s % 3600 / 60);
    const seconds = Math.floor(s % 3600 % 60);
    if (minutes === 0 && seconds === 0)
      return `${hours}h`;
    if (seconds === 0)
      return `${hours}:${minutes}h`;
    return `${hours}:${minutes}:${seconds}h`;
  }
  if (s > 60) {
    const minutes = Math.floor(s / 60);
    const seconds = Math.floor(s % 60);
    if (seconds === 0)
      return `${minutes}m`;
    return `${minutes}:${seconds}m`;
  }
  return `${s}s`;
};

// src/dev-server/event-queue.ts
singleton("rdtEventQueue", () => []);
var storeEvent = (event) => {
  const queue = singleton("rdtEventQueue", () => {
    return [];
  });
  queue.push(event);
  if (queue.length > 40) {
    setSingleton("rdtEventQueue", queue.slice(queue.length - 40, queue.length));
  }
};

// src/dev-server/utils.ts
var analyzeCookies = (route, config, headers) => {
  if (config.logs?.cookies === false) {
    return;
  }
  if (headers.get("Set-Cookie")) {
    infoLog(`\u{1F36A} Cookie set by ${source_default.blueBright(route.id)}`);
  }
};
var analyzeCache = (route, config, headers) => {
  if (config.logs?.cache === false) {
    return;
  }
  if (headers.get("Cache-Control")) {
    const cacheDuration = headers.get("Cache-Control")?.split(" ").map((x) => x.trim().replace(",", ""));
    const age = cacheDuration?.find((x) => x.includes("max-age"));
    const serverAge = cacheDuration?.find((x) => x.includes("s-maxage"));
    const isPrivate = cacheDuration?.find((x) => x.includes("private"));
    if (age && serverAge && !isPrivate) {
      const duration = serverAge.split("=")[1];
      const durationNumber = isNaN(parseInt(duration)) ? 0 : parseInt(duration);
      return infoLog(
        `\u{1F4E6} Route ${source_default.blueBright(route.id)} cached for ${source_default.green(secondsToHuman(durationNumber))} ${source_default.green(
          "[Shared Cache]"
        )}`
      );
    }
    if (age) {
      const duration = age.split("=")[1];
      const durationNumber = isNaN(parseInt(duration)) ? 0 : parseInt(duration);
      infoLog(
        `\u{1F4E6} Route ${source_default.blueBright(route.id)} cached for ${source_default.green(secondsToHuman(durationNumber))} ${source_default.green(
          `[${isPrivate ? "Private Cache" : "Shared Cache"}]`
        )}`
      );
    }
    if (serverAge) {
      const duration = serverAge.split("=")[1];
      const durationNumber = isNaN(parseInt(duration)) ? 0 : parseInt(duration);
      infoLog(
        `\u{1F4E6} Route ${source_default.blueBright(route.id)} cached for ${source_default.green(secondsToHuman(durationNumber))} ${source_default.green(
          "[Shared Cache]"
        )}`
      );
    }
  }
};
var analyzeClearSite = (route, config, headers) => {
  if (config.logs?.siteClear === false) {
    return;
  }
  if (headers.get("Clear-Site-Data")) {
    const data = headers.get("Clear-Site-Data");
    infoLog(`\u{1F9F9} Site data cleared by ${source_default.blueBright(route.id)} ${source_default.green(`[${data}]`)}`);
  }
};
var analyzeHeaders = (route, response) => {
  if (!(response instanceof Response)) {
    return;
  }
  const headers = new Headers(response.headers);
  const config = getConfig();
  analyzeCookies(route, config, headers);
  analyzeCache(route, config, headers);
  analyzeClearSite(route, config, headers);
};
var analyzeDeferred = (id, start, response) => {
  const config = getConfig();
  if (config.logs?.defer === false) {
    return;
  }
  if (response && response.deferredKeys) {
    infoLog(`Deferred values detected in ${source_default.blueBright(id)} - ${source_default.white(response.deferredKeys.join(", "))}`);
    response.deferredKeys.map((key) => {
      response.data[key].then(() => {
        const end = diffInMs(start);
        infoLog(`Deferred value ${source_default.white(key)} resolved in ${source_default.blueBright(id)} - ${source_default.white(`${end}ms`)}`);
      });
    });
  }
};
var isAsyncFunction = (fn) => {
  return fn.constructor.name === "AsyncFunction";
};
var unAwaited = async (promise) => {
  promise();
};
var errorHandler = (routeId, e, shouldThrow = false) => {
  unAwaited(() => {
    if (e instanceof Response) {
      const headers = new Headers(e.headers);
      const location = headers.get("Location");
      if (location) {
        redirectLog(`${source_default.blueBright(routeId)} threw a response!`);
        redirectLog(`${source_default.blueBright(routeId)} redirected to ${source_default.green(location)}`);
      } else {
        errorLog(`${source_default.blueBright(routeId)} threw a response!`);
        errorLog(`${source_default.blueBright(routeId)} responded with ${source_default.white(e.status)} ${source_default.white(e.statusText)}`);
      }
    } else {
      errorLog(`${source_default.blueBright(routeId)} threw an error!`);
      errorLog(`${e?.message}`);
    }
  });
  if (shouldThrow) {
    throw e;
  }
};
var logTrigger = (id, type, end) => {
  if (type === "action") {
    actionLog(`${source_default.blueBright(id)} triggered - ${source_default.white(`${end} ms`)}`);
  } else {
    loaderLog(`${source_default.blueBright(id)} triggered - ${source_default.white(`${end} ms`)}`);
  }
};
var extractHeadersFromResponseOrRequest = (response) => {
  const headers = new Headers(response.headers);
  return Object.fromEntries(headers.entries());
};
var storeAndEmitActionOrLoaderInfo = async (type, route, response, end, args) => {
  const isResponse = response instanceof Response;
  const responseHeaders = isResponse ? extractHeadersFromResponseOrRequest(response) : null;
  const requestHeaders = extractHeadersFromResponseOrRequest(args.request);
  const event = {
    type,
    data: {
      id: route.id,
      executionTime: end,
      timestamp: (/* @__PURE__ */ new Date()).getTime(),
      //requestData: await extractDataFromResponseOrRequest(args.request),
      requestHeaders,
      responseHeaders
    }
  };
  const port = (
    // @ts-expect-error
    typeof __REMIX_DEVELOPMENT_TOOL_SERVER_PORT__ === "number" ? __REMIX_DEVELOPMENT_TOOL_SERVER_PORT__ : void 0
  );
  if (port) {
    fetch(`http://localhost:${port}/remix-dev-tools`, {
      method: "POST",
      body: JSON.stringify(event)
    }).then(() => {
    }).catch(() => {
    });
  }
  storeEvent(event);
  const ws = getSocket();
  ws?.clients.forEach((client) => {
    client.send(JSON.stringify(event));
  });
};
var syncAnalysis = (route, type, loaderOrAction) => (args) => {
  const start = performance.now();
  try {
    const response = loaderOrAction(args);
    unAwaited(() => {
      const end = diffInMs(start);
      logTrigger(route.id, type, end);
      storeAndEmitActionOrLoaderInfo(type, route, response, end, args);
      analyzeHeaders(route, response);
    });
    return response;
  } catch (err) {
    errorHandler(route.id, err, true);
  }
};
var asyncAnalysis = (route, type, loaderOrAction) => async (args) => {
  const start = performance.now();
  const response = loaderOrAction(args);
  response.then((response2) => {
    unAwaited(() => {
      const end = diffInMs(start);
      storeAndEmitActionOrLoaderInfo(type, route, response2, end, args);
      if (type === "action") {
        actionLog(`${source_default.blueBright(route.id)} triggered - ${source_default.white(`${end} ms`)}`);
      } else {
        loaderLog(`${source_default.blueBright(route.id)} triggered - ${source_default.white(`${end} ms`)}`);
      }
      analyzeDeferred(route.id, start, response2);
      analyzeHeaders(route, response2);
    });
    return response2;
  }).catch((err) => errorHandler(route.id, err));
  return response;
};
var hasExtension = (path) => path.endsWith(".tsx") || path.endsWith(".jsx") || path.endsWith(".js") || path.endsWith(".ts");

// src/dev-server/loader.ts
var asyncLoader = (route, loader) => asyncAnalysis(route, "loader", loader);
var syncLoader = (route, loader) => syncAnalysis(route, "loader", loader);
var augmentLoader = (route, loader) => {
  return isAsyncFunction(loader) ? asyncLoader(route, loader) : syncLoader(route, loader);
};

// src/dev-server/action.ts
var asyncAction = (route, action) => asyncAnalysis(route, "action", action);
var syncAction = (route, action) => syncAnalysis(route, "action", action);
var augmentAction = (route, action) => {
  return isAsyncFunction(action) ? asyncAction(route, action) : syncAction(route, action);
};

// src/RemixDevTools/utils/sanitize.ts
var tryParseJson = (json) => {
  if (!json)
    return void 0;
  try {
    return JSON.parse(json);
  } catch (e) {
    return void 0;
  }
};

// src/dev-server/init.ts
var import_child_process = require("child_process");
var import_fs = require("fs");
var getSocket = () => singleton("rdt-ws", () => void 0);
var isWsEventType = (obj) => {
  return typeof obj === "object" && obj !== null && "type" in obj && "data" in obj;
};
var handleGoToSource = (data) => {
  if (!isWsEventType(data))
    return;
  if (data.type !== "open-source")
    return;
  const source = data.data.source;
  const line = data.data.line;
  if (hasExtension(source))
    return (0, import_child_process.exec)(`code -g "${source}:${line}"`);
  try {
    (0, import_fs.readFileSync)(source + ".tsx");
    return (0, import_child_process.exec)(`code -g "${source}.tsx"`);
  } catch (e) {
  }
  try {
    (0, import_fs.readFileSync)(source + ".jsx");
    return (0, import_child_process.exec)(`code -g "${source}.jsx"`);
  } catch (e) {
    return;
  }
};
var handleWsMessage = (message, client) => {
  const data = tryParseJson(message);
  if (!isWsEventType(data))
    return;
  handleGoToSource(data);
  if (data.type === "pull_and_clear") {
    const queue = singleton("rdtEventQueue", () => {
      return [];
    });
    client.send(JSON.stringify({ type: "events", data: queue }));
    setSingleton("rdtEventQueue", []);
  }
  if (data.type === "pull") {
    const queue = singleton("rdtEventQueue", () => {
      return [];
    });
    client.send(JSON.stringify({ type: "events", data: queue }));
  }
};
var installDevToolsGlobals = (config) => {
  const ws = singleton("rdt-ws", () => {
    if (config?.withWebsocket === false)
      return;
    const port = config?.wsPort || 8080;
    const ws2 = new import_ws.WebSocketServer({ port });
    ws2.on("listening", () => {
      successLog(`\u{1F30D}  DevTools Websocket Server started on port ${source_default.green(port)}`);
    });
    ws2.on("error", () => {
      errorLog(`\u{1F30D}  DevTools Websocket Server failed to start, port ${port} already in use!`);
    });
    ws2.on("connection", (client) => {
      client.on("message", (message) => {
        handleWsMessage(message.toString(), client);
      });
    });
    ["SIGINT", "SIGTERM"].forEach((event) => {
      process.on(event, () => {
        ws2.clients.forEach((client) => {
          client.close();
        });
        ws2.close();
      });
    });
    return ws2;
  });
  return { ws };
};
var withServerDevTools = (build, config) => {
  setConfig(config);
  installDevToolsGlobals(config);
  const routes = build.routes;
  return {
    ...build,
    routes: augmentLoadersAndActions(routes)
  };
};
var augmentLoadersAndActions = (routes) => {
  return Object.entries(routes).reduce((acc, [name, route]) => {
    return {
      ...acc,
      [name]: {
        ...route,
        module: {
          ...route.module,
          ...route.module.loader ? { loader: augmentLoader(route, route.module.loader) } : {},
          ...route.module.action ? { action: augmentAction(route, route.module.action) } : {}
        }
      }
    };
  }, {});
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  augmentLoadersAndActions,
  defineServerConfig,
  withServerDevTools
});
