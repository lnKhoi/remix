import * as react_jsx_runtime from 'react/jsx-runtime';

interface Tab {
    name: string | JSX.Element;
    icon: JSX.Element;
    id: string;
    component: JSX.Element;
    requiresForge: boolean;
    hideTimeline: boolean;
}

declare enum ReadyState {
    UNINSTANTIATED = -1,
    CONNECTING = 0,
    OPEN = 1,
    CLOSING = 2,
    CLOSED = 3
}

interface QueryParams {
    [key: string]: string | number;
}
interface Options {
    fromSocketIO?: boolean;
    queryParams?: QueryParams;
    protocols?: string | string[];
    share?: boolean;
    onOpen?: (event: WebSocketEventMap['open']) => void;
    onClose?: (event: WebSocketEventMap['close']) => void;
    onMessage?: (event: WebSocketEventMap['message']) => void;
    onError?: (event: WebSocketEventMap['error']) => void;
    onReconnectStop?: (numAttempts: number) => void;
    shouldReconnect?: (event: WebSocketEventMap['close']) => boolean;
    reconnectInterval?: number | ((lastAttemptNumber: number) => number);
    reconnectAttempts?: number;
    filter?: (message: WebSocketEventMap['message']) => boolean;
    retryOnError?: boolean;
    eventSourceOptions?: EventSourceOnly;
    skipAssert?: boolean;
}
type EventSourceOnly = Omit<Options, 'eventSourceOptions'> & EventSourceInit;
type WebSocketMessage = string | ArrayBuffer | SharedArrayBuffer | Blob | ArrayBufferView;
type SendMessage = (message: WebSocketMessage, keep?: boolean) => void;
type SendJsonMessage = <T = unknown>(jsonMessage: T, keep?: boolean) => void;
type WebSocketLike = WebSocket | EventSource;

declare const useRemixForgeSocket: (options?: Options) => {
    connectionStatus: string;
    isConnected: boolean;
    isConnecting: boolean;
    sendMessage: SendMessage;
    sendJsonMessage: SendJsonMessage;
    lastMessage: MessageEvent<any> | null;
    lastJsonMessage: unknown;
    readyState: ReadyState;
    getWebSocket: () => WebSocketLike | null;
};

interface EmbeddedDevToolsProps extends RemixDevToolsProps {
    mainPanelClassName?: string;
    className?: string;
}
declare const EmbeddedDevTools: ({ plugins, mainPanelClassName, className }: EmbeddedDevToolsProps) => react_jsx_runtime.JSX.Element | null;

type RdtPlugin$1 = (...args: any) => Tab;

interface RemixDevToolsProps {
    plugins?: (Tab | RdtPlugin$1)[];
}

declare const defineClientConfig: (config: RemixDevToolsProps) => RemixDevToolsProps;
declare const withDevTools: (Component: any, config?: RemixDevToolsProps) => () => react_jsx_runtime.JSX.Element;
declare const withViteDevTools: (Component: any, config?: RemixDevToolsProps) => () => (props: any) => react_jsx_runtime.JSX.Element;

type RdtPlugin = (...args: any) => Tab;

export { EmbeddedDevTools, EmbeddedDevToolsProps, RdtPlugin, RemixDevToolsProps, defineClientConfig, useRemixForgeSocket, withDevTools, withViteDevTools };
