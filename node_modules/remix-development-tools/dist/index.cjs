"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  EmbeddedDevTools: () => EmbeddedDevTools,
  defineClientConfig: () => defineClientConfig,
  useRemixForgeSocket: () => useRemixForgeSocket,
  withDevTools: () => withDevTools,
  withViteDevTools: () => withViteDevTools
});
module.exports = __toCommonJS(src_exports);

// src/RemixDevTools/RemixDevTools.tsx
var import_react56 = require("react");

// src/RemixDevTools/context/RDTContext.tsx
var import_react2 = require("react");

// src/RemixDevTools/utils/common.ts
var cutArrayToLastN = (arr, n) => {
  if (arr.length < n)
    return arr;
  return arr.slice(arr.length - n);
};
var cutArrayToFirstN = (arr, n) => {
  if (arr.length < n)
    return arr;
  return arr.slice(0, n);
};

// src/RemixDevTools/context/rdtReducer.ts
var defaultServerRouteState = {
  highestExecutionTime: 0,
  lowestExecutionTime: 0,
  averageExecutionTime: 0,
  loaderTriggerCount: 0,
  actionTriggerCount: 0,
  lastAction: {},
  lastLoader: {},
  loaders: [],
  actions: []
};
var ROUTE_BOUNDARY_GRADIENTS = {
  sea: "rdt-bg-green-100 rdt-bg-gradient-to-r rdt-from-cyan-500/50 rdt-to-blue-500/50",
  hyper: "rdt-bg-gradient-to-r rdt-from-pink-500 rdt-via-red-500 rdt-to-yellow-500",
  gotham: "rdt-bg-gradient-to-r rdt-from-gray-700 rdt-via-gray-900 rdt-to-black",
  gray: "rdt-bg-gradient-to-r rdt-from-gray-700/50 rdt-via-gray-900/50 rdt-to-black/50",
  watermelon: "rdt-bg-gradient-to-r rdt-from-red-500 rdt-to-green-500",
  ice: "rdt-bg-gradient-to-r rdt-from-rose-100 rdt-to-teal-100",
  silver: "rdt-bg-gradient-to-r rdt-from-gray-100 rdt-to-gray-300"
};
var RouteBoundaryOptions = Object.keys(ROUTE_BOUNDARY_GRADIENTS);
var initialState = {
  timeline: [],
  terminals: [{ id: 0, locked: false, output: [], history: [] }],
  server: void 0,
  settings: {
    routeBoundaryGradient: "silver",
    routeWildcards: {},
    activeTab: "page",
    shouldConnectWithForge: false,
    port: 3003,
    height: 400,
    maxHeight: 600,
    minHeight: 200,
    defaultOpen: false,
    hideUntilHover: false,
    position: "bottom-right",
    expansionLevel: 0,
    hoveredRoute: "",
    isHoveringRoute: false,
    routeViewMode: "tree",
    panelLocation: "bottom",
    withServerDevTools: true,
    wsPort: 8080,
    requireUrlFlag: false,
    urlFlag: "rdt"
  },
  htmlErrors: [],
  persistOpen: false,
  detachedWindow: false,
  detachedWindowOwner: false
};
var rdtReducer = (state = initialState, { type, payload }) => {
  switch (type) {
    case "SET_DETACHED_WINDOW_OWNER":
      return {
        ...state,
        detachedWindowOwner: payload
      };
    case "SET_HTML_ERRORS":
      return {
        ...state,
        htmlErrors: [...payload]
      };
    case "SET_SERVER_INFO":
      return {
        ...state,
        server: payload
      };
    case "SET_SETTINGS":
      return {
        ...state,
        settings: {
          ...state.settings,
          ...payload
        }
      };
    case "SET_TIMELINE_EVENT":
      return {
        ...state,
        timeline: cutArrayToFirstN([payload, ...state.timeline], 30)
      };
    case "SET_WHOLE_STATE": {
      return {
        ...payload
      };
    }
    case "PURGE_TIMELINE":
      return {
        ...state,
        timeline: []
      };
    case "SET_IS_SUBMITTED":
      return {
        ...state,
        ...payload,
        isSubmitted: true
      };
    case "SET_PROCESS_ID":
      return {
        ...state,
        terminals: state.terminals.map((terminal) => {
          if (terminal.id === payload.terminalId) {
            return {
              ...terminal,
              processId: payload.processId
            };
          }
          return terminal;
        })
      };
    case "TOGGLE_TERMINAL_LOCK":
      return {
        ...state,
        terminals: state.terminals.map((terminal) => {
          if (terminal.id === payload.terminalId) {
            return {
              ...terminal,
              locked: payload.locked ?? !terminal.locked
            };
          }
          return terminal;
        })
      };
    case "ADD_OR_REMOVE_TERMINAL": {
      const terminalExists = state.terminals.some((terminal) => terminal.id === payload);
      if (terminalExists) {
        return {
          ...state,
          terminals: state.terminals.filter((terminal) => terminal.id !== payload).map((terminal, i) => ({ ...terminal, id: i }))
        };
      }
      return {
        ...state,
        terminals: [
          ...state.terminals,
          {
            id: state.terminals.length,
            locked: false,
            history: [],
            output: []
          }
        ]
      };
    }
    case "ADD_TERMINAL_OUTPUT":
      return {
        ...state,
        terminals: state.terminals.map((terminal) => {
          if (terminal.id === payload.terminalId) {
            return {
              ...terminal,
              output: [...terminal.output, payload.output]
            };
          }
          return terminal;
        })
      };
    case "CLEAR_TERMINAL_OUTPUT":
      return {
        ...state,
        terminals: state.terminals.map((terminal) => {
          if (terminal.id === payload) {
            return {
              ...terminal,
              output: []
            };
          }
          return terminal;
        })
      };
    case "ADD_TERMINAL_HISTORY":
      return {
        ...state,
        terminals: state.terminals.map((terminal) => {
          if (terminal.id === payload.terminalId) {
            return {
              ...terminal,
              history: [...terminal.history, payload.history]
            };
          }
          return terminal;
        })
      };
    case "SET_PERSIST_OPEN":
      return {
        ...state,
        persistOpen: payload
      };
    default:
      return state;
  }
};

// src/RemixDevTools/hooks/detached/useRemoveBody.ts
var import_react = require("react");

// src/RemixDevTools/utils/storage.ts
var getStorageItem = (key) => localStorage.getItem(key);
var setStorageItem = (key, value) => localStorage.setItem(key, value);
var getSessionItem = (key) => sessionStorage.getItem(key);
var setSessionItem = (key, value) => sessionStorage.setItem(key, value);
var getBooleanFromStorage = (key) => getStorageItem(key) === "true";
var getBooleanFromSession = (key) => getSessionItem(key) === "true";
var REMIX_DEV_TOOLS = "remixDevTools";
var REMIX_DEV_TOOLS_STATE = "remixDevTools_state";
var REMIX_DEV_TOOLS_SETTINGS = "remixDevTools_settings";
var REMIX_DEV_TOOLS_DETACHED = "remixDevTools_detached";
var REMIX_DEV_TOOLS_DETACHED_OWNER = "remixDevTools_detached_owner";
var REMIX_DEV_TOOLS_IS_DETACHED = "remixDevTools_is_detached";
var REMIX_DEV_TOOLS_CHECK_DETACHED = "remixDevTools_check_detached";

// src/RemixDevTools/hooks/detached/useRemoveBody.ts
var useRemoveBody = (state) => {
  (0, import_react.useEffect)(() => {
    if (!state.detachedWindow) {
      return;
    }
    const elements = document.body.children;
    document.body.classList.add("rdt-bg-[#212121]");
    for (let i = 0; i < elements.length; i++) {
      const element = elements[i];
      if (element.id !== REMIX_DEV_TOOLS) {
        element.classList.add("rdt-hidden");
      }
    }
  }, [state]);
};

// src/RemixDevTools/utils/detached.ts
var checkIsDetachedWindow = () => getBooleanFromSession(REMIX_DEV_TOOLS_DETACHED);
var checkIsDetached = () => getBooleanFromStorage(REMIX_DEV_TOOLS_IS_DETACHED);
var checkIsDetachedOwner = () => getBooleanFromSession(REMIX_DEV_TOOLS_DETACHED_OWNER);

// src/RemixDevTools/utils/sanitize.ts
var convertRemixPathToUrl = (routes, route) => {
  let currentRoute = route;
  const path2 = [];
  while (currentRoute) {
    path2.push(currentRoute.path);
    if (!currentRoute.parentId)
      break;
    if (!routes[currentRoute.parentId])
      break;
    currentRoute = routes[currentRoute.parentId];
  }
  const output = path2.reverse().filter(Boolean).join("/");
  return output === "" ? "/" : output;
};
var findParentErrorBoundary = (routes, route) => {
  let currentRoute = route;
  while (currentRoute) {
    const hasErrorBoundary = currentRoute.hasErrorBoundary;
    if (hasErrorBoundary)
      return { hasErrorBoundary, errorBoundaryId: currentRoute.id };
    if (!currentRoute.parentId)
      break;
    if (!routes[currentRoute.parentId])
      break;
    currentRoute = routes[currentRoute.parentId];
  }
  return { hasErrorBoundary: false, errorBoundaryId: null };
};
var tryParseJson = (json) => {
  if (!json)
    return void 0;
  try {
    return JSON.parse(json);
  } catch (e) {
    return void 0;
  }
};
var constructTree = (routes, parentId) => {
  const nodes = [];
  Object.keys(routes).forEach((key) => {
    const route = routes[key];
    if (route.parentId === parentId) {
      const url = convertRemixPathToUrl(routes, route);
      const node = {
        name: url,
        attributes: {
          ...route,
          url
        },
        errorBoundary: findParentErrorBoundary(routes, route),
        children: constructTree(routes, route.id)
      };
      nodes.push(node);
    }
  });
  return nodes;
};
var createRouteTree = (routes) => {
  return constructTree(routes);
};
var uppercaseFirstLetter = (str) => {
  return str.charAt(0).toUpperCase() + str.slice(1);
};

// src/RemixDevTools/context/RDTContext.tsx
var import_jsx_runtime = require("react/jsx-runtime");
var RDTContext = (0, import_react2.createContext)({ state: initialState, dispatch: () => null });
RDTContext.displayName = "RDTContext";
var setIsDetachedIfRequired = () => {
  const isDetachedWindow = checkIsDetachedWindow();
  if (!isDetachedWindow && window.RDT_MOUNTED) {
    setSessionItem(REMIX_DEV_TOOLS_DETACHED, "true");
  }
};
var resetIsDetachedCheck = () => {
  setStorageItem(REMIX_DEV_TOOLS_CHECK_DETACHED, "false");
};
var detachedModeSetup = () => {
  resetIsDetachedCheck();
  setIsDetachedIfRequired();
  const isDetachedWindow = checkIsDetachedWindow();
  const isDetached = checkIsDetached();
  const isDetachedOwner = checkIsDetachedOwner();
  if (isDetachedWindow && !isDetached) {
    window.close();
  }
  if (!isDetached && isDetachedOwner) {
  }
  return {
    detachedWindow: window.RDT_MOUNTED ?? isDetachedWindow,
    detachedWindowOwner: isDetachedOwner
  };
};
var getSettings = () => {
  const settingsString = getStorageItem(REMIX_DEV_TOOLS_SETTINGS);
  const settings = tryParseJson(settingsString);
  return {
    ...initialState.settings,
    ...settings
  };
};
var getExistingStateFromStorage = () => {
  const existingState = getStorageItem(REMIX_DEV_TOOLS_STATE);
  const settings = getSettings();
  const { detachedWindow, detachedWindowOwner } = detachedModeSetup();
  const state = {
    ...initialState,
    ...existingState ? JSON.parse(existingState) : {},
    settings,
    detachedWindow,
    detachedWindowOwner
  };
  return state;
};
var RDTContextProvider = ({ children: children2 }) => {
  const [state, dispatch2] = (0, import_react2.useReducer)(rdtReducer, getExistingStateFromStorage());
  const value = (0, import_react2.useMemo)(() => ({ state, dispatch: dispatch2 }), [state, dispatch2]);
  useRemoveBody(state);
  (0, import_react2.useEffect)(() => {
    const { settings, detachedWindow, detachedWindowOwner, ...rest } = state;
    setStorageItem(REMIX_DEV_TOOLS_SETTINGS, JSON.stringify(settings));
    setStorageItem(REMIX_DEV_TOOLS_STATE, JSON.stringify(rest));
  }, [state]);
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(RDTContext.Provider, { value, children: children2 });
};

// src/RemixDevTools/hooks/useTimelineHandler.ts
var import_react4 = require("@remix-run/react");
var import_react5 = require("react");

// src/RemixDevTools/context/useRDTContext.ts
var import_react3 = require("react");
var useRDTContext = () => {
  const context = (0, import_react3.useContext)(RDTContext);
  if (context === void 0) {
    throw new Error("useRDTContext must be used within a RDTContextProvider");
  }
  const { state, dispatch: dispatch2 } = context;
  return {
    dispatch: dispatch2,
    state
  };
};
var useHtmlErrors = () => {
  const { state, dispatch: dispatch2 } = useRDTContext();
  const { htmlErrors } = state;
  const setHtmlErrors = (0, import_react3.useCallback)(
    (htmlErrors2) => {
      dispatch2({
        type: "SET_HTML_ERRORS",
        payload: htmlErrors2
      });
    },
    [dispatch2]
  );
  return { htmlErrors, setHtmlErrors };
};
var useServerInfo = () => {
  const { state, dispatch: dispatch2 } = useRDTContext();
  const { server } = state;
  const setServerInfo = (0, import_react3.useCallback)(
    (serverInfo) => {
      dispatch2({
        type: "SET_SERVER_INFO",
        payload: {
          ...server,
          ...serverInfo,
          routes: {
            ...server?.routes,
            ...serverInfo?.routes
          }
        }
      });
    },
    [dispatch2, server]
  );
  return { server, setServerInfo };
};
var useDetachedWindowControls = () => {
  const { state, dispatch: dispatch2 } = useRDTContext();
  const { detachedWindow, detachedWindowOwner } = state;
  const setDetachedWindowOwner = (0, import_react3.useCallback)(
    (isDetachedWindowOwner) => {
      dispatch2({
        type: "SET_DETACHED_WINDOW_OWNER",
        payload: isDetachedWindowOwner
      });
    },
    [dispatch2]
  );
  return {
    detachedWindow: detachedWindow || window.RDT_MOUNTED,
    detachedWindowOwner,
    setDetachedWindowOwner,
    isDetached: detachedWindow || detachedWindowOwner
  };
};
var useSettingsContext = () => {
  const { dispatch: dispatch2, state } = useRDTContext();
  const { settings } = state;
  const setSettings = (0, import_react3.useCallback)(
    (settings2) => {
      dispatch2({
        type: "SET_SETTINGS",
        payload: settings2
      });
    },
    [dispatch2]
  );
  return { setSettings, settings };
};
var usePersistOpen = () => {
  const { dispatch: dispatch2, state } = useRDTContext();
  const { persistOpen } = state;
  const setPersistOpen = (0, import_react3.useCallback)(
    (persistOpen2) => {
      dispatch2({
        type: "SET_PERSIST_OPEN",
        payload: persistOpen2
      });
    },
    [dispatch2]
  );
  return { persistOpen, setPersistOpen };
};
var useTimelineContext = () => {
  const { state, dispatch: dispatch2 } = useRDTContext();
  const { timeline } = state;
  const setTimelineEvent = (0, import_react3.useCallback)(
    (payload) => {
      dispatch2({ type: "SET_TIMELINE_EVENT", payload });
    },
    [dispatch2]
  );
  const clearTimeline = (0, import_react3.useCallback)(() => {
    dispatch2({ type: "PURGE_TIMELINE", payload: void 0 });
  }, [dispatch2]);
  return { setTimelineEvent, timeline, clearTimeline };
};
var useTerminalContext = () => {
  const { state, dispatch: dispatch2 } = useRDTContext();
  const { terminals } = state;
  const addOrRemoveTerminal = (0, import_react3.useCallback)(
    (terminalId) => {
      dispatch2({ type: "ADD_OR_REMOVE_TERMINAL", payload: terminalId });
    },
    [dispatch2]
  );
  const toggleTerminalLock = (0, import_react3.useCallback)(
    (terminalId, locked) => {
      dispatch2({
        type: "TOGGLE_TERMINAL_LOCK",
        payload: { terminalId, locked }
      });
    },
    [dispatch2]
  );
  const addTerminalOutput = (0, import_react3.useCallback)(
    (terminalId, output) => {
      dispatch2({
        type: "ADD_TERMINAL_OUTPUT",
        payload: { terminalId, output }
      });
    },
    [dispatch2]
  );
  const clearTerminalOutput = (0, import_react3.useCallback)(
    (terminalId) => {
      dispatch2({ type: "CLEAR_TERMINAL_OUTPUT", payload: terminalId });
    },
    [dispatch2]
  );
  const addTerminalHistory = (0, import_react3.useCallback)(
    (terminalId, history2) => {
      dispatch2({
        type: "ADD_TERMINAL_HISTORY",
        payload: { terminalId, history: history2 }
      });
    },
    [dispatch2]
  );
  const setProcessId = (0, import_react3.useCallback)(
    (terminalId, processId) => {
      dispatch2({
        type: "SET_PROCESS_ID",
        payload: { terminalId, processId }
      });
    },
    [dispatch2]
  );
  return {
    terminals,
    addOrRemoveTerminal,
    toggleTerminalLock,
    addTerminalOutput,
    clearTerminalOutput,
    addTerminalHistory,
    setProcessId
  };
};

// src/RemixDevTools/hooks/useTimelineHandler.ts
var uniqueId = () => (Math.random() * Date.now()).toString();
var convertFormDataToObject = (formData) => {
  const obj = {};
  if (!formData) {
    return void 0;
  }
  for (const key of formData.keys()) {
    if (key.includes(".")) {
      const [prefix, suffix] = key.split(".");
      if (isNaN(parseInt(suffix))) {
        obj[prefix] ??= {};
        for (const [_, element] of formData.getAll(key).entries()) {
          obj[prefix][suffix] = element;
        }
      } else {
        obj[prefix] ??= [];
        for (const [index, element] of formData.getAll(key).entries()) {
          if (index > 1) {
            obj[prefix][suffix] = [...obj[prefix][suffix], element];
          } else if (index === 1) {
            obj[prefix][suffix] = [obj[prefix][suffix], element];
          } else {
            obj[prefix][suffix] = element;
          }
        }
      }
    } else {
      for (const [index, element] of formData.getAll(key).entries()) {
        if (index > 1) {
          obj[key] = [...obj[key], element];
        } else if (index === 1) {
          obj[key] = [obj[key], element];
        } else {
          obj[key] = element;
        }
      }
    }
  }
  if (Object.keys(obj).length === 0) {
    return void 0;
  }
  return obj;
};
var useTimelineHandler = () => {
  const navigation = (0, import_react4.useNavigation)();
  const fetchers = (0, import_react4.useFetchers)();
  const navigationEventQueue = (0, import_react5.useRef)([]);
  const { setTimelineEvent } = useTimelineContext();
  const responseData = (0, import_react4.useActionData)();
  const { detachedWindow } = useDetachedWindowControls();
  (0, import_react5.useEffect)(() => {
    if (detachedWindow) {
      return;
    }
    const { state, location, formAction, formData, formMethod, formEncType } = navigation;
    if (state === "idle") {
      navigationEventQueue.current.map(
        (event) => setTimelineEvent({
          ...event,
          id: uniqueId()
        })
      );
      navigationEventQueue.current = [];
      return;
    }
    const { state: locState, pathname, search, hash } = location;
    const data = convertFormDataToObject(formData);
    if (state === "submitting") {
      navigationEventQueue.current.push({
        type: "FORM_SUBMISSION",
        from: pathname,
        to: formAction,
        method: formMethod,
        data,
        encType: formEncType,
        id: uniqueId()
      });
      return;
    }
    if (state === "loading") {
      if (formAction && formData && formMethod && locState?._isRedirect) {
        navigationEventQueue.current.push({
          type: "ACTION_REDIRECT",
          from: pathname,
          to: formAction,
          method: formMethod,
          data,
          encType: formEncType,
          responseData,
          id: uniqueId()
        });
        return;
      }
      if (formAction && formData && formMethod) {
        navigationEventQueue.current.push({
          type: "ACTION_RESPONSE",
          from: pathname,
          to: formAction,
          method: formMethod,
          data,
          encType: formEncType,
          responseData,
          id: uniqueId()
        });
        return;
      }
      navigationEventQueue.current.push({
        type: locState?._isFetchActionRedirect || locState?._isFetchLoaderRedirect ? "FETCHER_REDIRECT" : "REDIRECT",
        to: pathname,
        search,
        hash,
        method: "GET",
        id: uniqueId()
      });
      return;
    }
  }, [navigation, responseData, setTimelineEvent, detachedWindow]);
  const fetcherEventQueue = (0, import_react5.useRef)([]);
  (0, import_react5.useEffect)(() => {
    if (navigation.state !== "idle")
      return;
    const activeFetchers = fetchers.filter((f) => f.state !== "idle");
    if (activeFetchers.length === 0 && fetcherEventQueue.current.length > 0) {
      fetcherEventQueue.current.map(
        ({ position, ...event }) => setTimelineEvent({
          ...event,
          responseData: (
            // If the fetcher is a GET request, the response data is stored in the fetcher, otherwise it's already set at this point
            event.method === "GET" ? fetchers[position]?.data : event.responseData
          )
        })
      );
      fetcherEventQueue.current = [];
      return;
    }
    fetchers.forEach((fetcher, i) => {
      if (fetcher.state === "idle")
        return;
      const { data, formAction, formData, formEncType, formMethod } = fetcher;
      if (formAction && formMethod) {
        const form = convertFormDataToObject(formData);
        const event = {
          type: fetcher.state === "loading" ? "FETCHER_RESPONSE" : "FETCHER_SUBMIT",
          to: formAction,
          method: formMethod,
          data: form,
          encType: formEncType,
          responseData: fetcher.state === "submitting" ? void 0 : data,
          position: i,
          id: uniqueId()
        };
        fetcherEventQueue.current.push(event);
      }
    });
  }, [fetchers, navigation.state, setTimelineEvent]);
};

// src/RemixDevTools/RemixDevTools.tsx
var import_react57 = require("@remix-run/react");

// src/RemixDevTools/components/Trigger.tsx
var import_clsx = __toESM(require("clsx"), 1);

// src/RemixDevTools/components/Logo.tsx
var import_jsx_runtime2 = require("react/jsx-runtime");
var Logo = ({ className, style }) => {
  return /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(
    "svg",
    {
      style,
      className,
      width: "800",
      height: "800",
      viewBox: "0 0 800 800",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("rect", { width: "800", height: "800", fill: "#212121" }),
        /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
          "path",
          {
            fillRule: "evenodd",
            clipRule: "evenodd",
            d: "M587.947 527.768C592.201 582.418 592.201 608.036 592.201 636H465.756C465.756 629.909 465.865 624.337 465.975 618.687C466.317 601.123 466.674 582.807 463.828 545.819C460.067 491.667 436.748 479.634 393.871 479.634H355.883H195V381.109H399.889C454.049 381.109 481.13 364.633 481.13 321.011C481.13 282.654 454.049 259.41 399.889 259.41H195V163H422.456C545.069 163 606 220.912 606 313.42C606 382.613 563.123 427.739 505.201 435.26C554.096 445.037 582.681 472.865 587.947 527.768Z",
            fill: "white"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("path", { d: "M195 636V562.553H328.697C351.029 562.553 355.878 579.116 355.878 588.994V636H195Z", fill: "white" }),
        /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
          "path",
          {
            d: "M194.5 636V636.5H195H355.878H356.378V636V588.994C356.378 583.988 355.152 577.26 351.063 571.77C346.955 566.255 340.004 562.053 328.697 562.053H195H194.5V562.553V636Z",
            stroke: "white",
            strokeOpacity: "0.8"
          }
        )
      ]
    }
  );
};

// src/RemixDevTools/components/Trigger.tsx
var import_jsx_runtime3 = require("react/jsx-runtime");
var Trigger = ({
  isOpen,
  setIsOpen
}) => {
  const { settings } = useSettingsContext();
  const { setPersistOpen } = usePersistOpen();
  const { hideUntilHover, position } = settings;
  const handleHover = (e, event) => {
    if (!hideUntilHover)
      return;
    const classesToRemove = "rdt-opacity-0";
    const classesToAdd = "rdt-opacity-100";
    if (event === "enter") {
      e.currentTarget.classList.remove(classesToRemove);
      e.currentTarget.classList.add(classesToAdd);
    }
    if (event === "leave") {
      e.currentTarget.classList.remove(classesToAdd);
      e.currentTarget.classList.add(classesToRemove);
    }
  };
  return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
    "div",
    {
      style: { zIndex: 9999 },
      onClick: () => {
        setIsOpen(!isOpen);
        setPersistOpen(!isOpen);
      },
      onMouseEnter: (e) => handleHover(e, "enter"),
      onMouseLeave: (e) => handleHover(e, "leave"),
      className: (0, import_clsx.default)(
        "rdt-fixed rdt-m-1.5 rdt-h-14 rdt-w-14 rdt-cursor-pointer rdt-rounded-full rdt-transition-all ",
        hideUntilHover && "rdt-opacity-0",
        position === "bottom-right" && "rdt-bottom-0 rdt-right-0",
        position === "bottom-left" && "rdt-bottom-0 rdt-left-0",
        position === "top-right" && "rdt-right-0 rdt-top-0",
        position === "top-left" && "rdt-left-0 rdt-top-0",
        position === "middle-right" && "rdt-right-0 rdt-top-1/2 -rdt-translate-y-1/2",
        position === "middle-left" && "rdt-left-0 rdt-top-1/2 -rdt-translate-y-1/2",
        isOpen && "rdt-hidden"
        // Hide the button when the dev tools is open
      ),
      children: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
        Logo,
        {
          className: (0, import_clsx.default)(
            "rdt-h-14 rdt-w-14 rdt-rounded-full rdt-transition-all rdt-duration-200",
            "rdt-hover:cursor-pointer rdt-hover:ring-2 rdt-ring-slate-600"
          )
        }
      )
    }
  );
};

// src/RemixDevTools/layout/MainPanel.tsx
var import_clsx2 = __toESM(require("clsx"), 1);

// src/RemixDevTools/hooks/useResize.ts
var import_react6 = require("react");
var useResize = () => {
  const { setSettings, settings } = useSettingsContext();
  const { height, maxHeight, minHeight, panelLocation } = settings;
  const [isResizing, setIsResizing] = (0, import_react6.useState)(false);
  const enableResize = (0, import_react6.useCallback)(() => {
    setIsResizing(true);
  }, [setIsResizing]);
  const disableResize = (0, import_react6.useCallback)(() => {
    setIsResizing(false);
  }, [setIsResizing]);
  const resize = (0, import_react6.useCallback)(
    (e) => {
      if (isResizing) {
        window.getSelection()?.removeAllRanges();
        const newHeight = panelLocation === "top" ? e.clientY : window.innerHeight - e.clientY;
        if (newHeight > maxHeight) {
          setSettings({ height: maxHeight });
          return;
        }
        if (newHeight < minHeight) {
          setSettings({ height: minHeight });
          return;
        }
        setSettings({ height: newHeight });
      }
    },
    [isResizing, maxHeight, minHeight, setSettings, panelLocation]
  );
  (0, import_react6.useEffect)(() => {
    document.addEventListener("mousemove", resize);
    document.addEventListener("mouseup", disableResize);
    return () => {
      document.removeEventListener("mousemove", resize);
      document.removeEventListener("mouseup", disableResize);
    };
  }, [disableResize, resize]);
  return { height, enableResize, disableResize, isResizing };
};

// src/RemixDevTools/layout/MainPanel.tsx
var import_react9 = require("react");

// src/RemixDevTools/hooks/useAttachListener.ts
var import_react7 = require("react");
var getAttachment = (target) => {
  switch (target) {
    case "window":
      return typeof window != "undefined" ? window : null;
    case "document":
      return typeof document != "undefined" ? document : null;
    case "body":
      return typeof document != "undefined" ? document.body : null;
  }
};
var useAttachListener = (listener, attachTarget, fn, shouldAttach = true) => useAttachListenerToNode(listener, getAttachment(attachTarget), fn, shouldAttach);
var useAttachListenerToNode = (listener, node, fn, shouldAttach = true) => {
  const callbackRef = (0, import_react7.useRef)(fn);
  (0, import_react7.useEffect)(() => {
    callbackRef.current = fn;
  });
  (0, import_react7.useEffect)(() => {
    if (!shouldAttach)
      return;
    node?.addEventListener(listener, (e) => callbackRef.current(e));
    return () => node?.removeEventListener(listener, (e) => callbackRef.current(e));
  }, [listener, node, shouldAttach]);
};
var useAttachWindowListener = (listener, fn, shouldAttach = true) => {
  return useAttachListener(listener, "window", fn, shouldAttach);
};
var useAttachDocumentListener = (listener, fn, shouldAttach = true) => {
  return useAttachListener(listener, "document", fn, shouldAttach);
};
var useAttachBodyListener = (listener, fn, shouldAttach = true) => {
  return useAttachListener(listener, "body", fn, shouldAttach);
};

// src/RemixDevTools/hooks/useDebounce.ts
var import_react8 = __toESM(require("react"), 1);
function debounce(func, timeout2 = 300) {
  let timer2;
  return (...args) => {
    clearTimeout(timer2);
    timer2 = setTimeout(() => {
      func.apply(this, args);
    }, timeout2);
  };
}
function useDebounce(callback, delay = 300) {
  const callbackRef = import_react8.default.useRef(callback);
  import_react8.default.useEffect(() => {
    callbackRef.current = callback;
  });
  return import_react8.default.useMemo(() => debounce((...args) => callbackRef.current(...args), delay), [delay]);
}

// src/RemixDevTools/layout/MainPanel.tsx
var import_jsx_runtime4 = require("react/jsx-runtime");
var useResizeDetachedPanel = () => {
  const { isDetached } = useDetachedWindowControls();
  const [state, setState] = (0, import_react9.useState)(0);
  const debounce2 = useDebounce(() => {
    setState(state + 1);
  });
  useAttachWindowListener("resize", debounce2, isDetached);
};
var MainPanel = ({ children: children2, isOpen, isEmbedded = false, className }) => {
  const { settings } = useSettingsContext();
  const { detachedWindow } = useDetachedWindowControls();
  const { height, panelLocation } = settings;
  const { enableResize, disableResize, isResizing } = useResize();
  useResizeDetachedPanel();
  return /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(
    "div",
    {
      style: {
        zIndex: 9998,
        ...!isEmbedded && { height: detachedWindow ? window.innerHeight : height }
      },
      className: (0, import_clsx2.default)(
        "rdt-duration-600 rdt-box-border rdt-flex rdt-w-screen rdt-flex-col rdt-overflow-auto rdt-bg-main rdt-text-white rdt-opacity-0 rdt-transition-all",
        isOpen ? "rdt-opacity-100 rdt-drop-shadow-2xl" : "rdt-h-0",
        isResizing && "rdt-cursor-grabbing ",
        !isEmbedded ? `rdt-fixed rdt-left-0 ${panelLocation === "bottom" ? "rdt-bottom-0" : "rdt-top-0 rdt-border-b-2 rdt-border-main"}` : "",
        className
      ),
      children: [
        panelLocation === "bottom" && /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
          "div",
          {
            onMouseDown: enableResize,
            onMouseUp: disableResize,
            className: (0, import_clsx2.default)(
              "rdt-absolute rdt-z-50 rdt-h-1 rdt-w-full",
              isResizing ? "rdt-cursor-grabbing" : "rdt-cursor-ns-resize"
            )
          }
        ),
        children2,
        panelLocation === "top" && /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
          "div",
          {
            onMouseDown: enableResize,
            onMouseUp: disableResize,
            className: (0, import_clsx2.default)(
              "rdt-absolute rdt-bottom-0 rdt-z-50 rdt-h-1 rdt-w-full",
              isResizing ? "rdt-cursor-grabbing" : "rdt-cursor-ns-resize"
            )
          }
        )
      ]
    }
  );
};

// src/RemixDevTools/layout/Tabs.tsx
var import_clsx17 = __toESM(require("clsx"), 1);

// src/external/react-use-websocket/use-websocket.ts
var import_react10 = require("react");
var import_react_dom = require("react-dom");

// src/external/react-use-websocket/constants.ts
var MILLISECONDS = 1;
var SECONDS = 1e3 * MILLISECONDS;
var DEFAULT_OPTIONS = {};
var SOCKET_IO_PING_INTERVAL = 25 * SECONDS;
var SOCKET_IO_PATH = "/socket.io/?EIO=3&transport=websocket";
var SOCKET_IO_PING_CODE = "2";
var DEFAULT_RECONNECT_LIMIT = 20;
var DEFAULT_RECONNECT_INTERVAL_MS = 5e3;
var UNPARSABLE_JSON_OBJECT = {};
var eventSourceSupported = () => {
  try {
    return "EventSource" in globalThis;
  } catch (e) {
    return false;
  }
};
var isReactNative = typeof navigator !== "undefined" && navigator.product === "ReactNative";
var isEventSourceSupported = !isReactNative && eventSourceSupported();

// src/external/react-use-websocket/globals.ts
var sharedWebSockets = {};

// src/external/react-use-websocket/socket-io.ts
var parseSocketIOUrl = (url) => {
  if (url) {
    const isSecure = /^https|wss/.test(url);
    const strippedProtocol = url.replace(/^(https?|wss?)(:\/\/)?/, "");
    const removedFinalBackSlack = strippedProtocol.replace(/\/$/, "");
    const protocol = isSecure ? "wss" : "ws";
    return `${protocol}://${removedFinalBackSlack}${SOCKET_IO_PATH}`;
  } else if (url === "") {
    const isSecure = /^https/.test(window.location.protocol);
    const protocol = isSecure ? "wss" : "ws";
    const port = window.location.port ? `:${window.location.port}` : "";
    return `${protocol}://${window.location.hostname}${port}${SOCKET_IO_PATH}`;
  }
  return url;
};
var appendQueryParams = (url, params = {}) => {
  const hasParamsRegex = /\?([\w]+=[\w]+)/;
  const alreadyHasParams = hasParamsRegex.test(url);
  const stringified = `${Object.entries(params).reduce((next, [key, value]) => {
    return next + `${key}=${value}&`;
  }, "").slice(0, -1)}`;
  return `${url}${alreadyHasParams ? "&" : "?"}${stringified}`;
};
var setUpSocketIOPing = (sendMessage, interval2 = SOCKET_IO_PING_INTERVAL) => {
  const ping = () => sendMessage(SOCKET_IO_PING_CODE);
  return window.setInterval(ping, interval2);
};

// src/external/react-use-websocket/manage-subscribers.ts
var subscribers = {};
var EMPTY_LIST = [];
var getSubscribers = (url) => {
  if (hasSubscribers(url)) {
    return Array.from(subscribers[url]);
  }
  return EMPTY_LIST;
};
var hasSubscribers = (url) => {
  return subscribers[url]?.size > 0;
};
var addSubscriber = (url, subscriber) => {
  subscribers[url] = subscribers[url] || /* @__PURE__ */ new Set();
  subscribers[url].add(subscriber);
};
var removeSubscriber = (url, subscriber) => {
  subscribers[url].delete(subscriber);
};

// src/external/react-use-websocket/util.ts
function assertIsWebSocket(webSocketInstance, skip) {
  if (!skip && webSocketInstance instanceof WebSocket === false)
    throw new Error("");
}

// src/external/react-use-websocket/attach-listener.ts
var bindMessageHandler = (webSocketInstance, optionsRef, setLastMessage) => {
  webSocketInstance.onmessage = (message) => {
    optionsRef.current.onMessage && optionsRef.current.onMessage(message);
    if (typeof optionsRef.current.filter === "function" && optionsRef.current.filter(message) !== true) {
      return;
    }
    setLastMessage(message);
  };
};
var bindOpenHandler = (webSocketInstance, optionsRef, setReadyState, reconnectCount) => {
  webSocketInstance.onopen = (event) => {
    optionsRef.current.onOpen && optionsRef.current.onOpen(event);
    reconnectCount.current = 0;
    setReadyState(1 /* OPEN */);
  };
};
var bindCloseHandler = (webSocketInstance, optionsRef, setReadyState, reconnect, reconnectCount) => {
  if (isEventSourceSupported && webSocketInstance instanceof EventSource) {
    return () => {
    };
  }
  assertIsWebSocket(webSocketInstance, optionsRef.current.skipAssert);
  let reconnectTimeout;
  webSocketInstance.onclose = (event) => {
    optionsRef.current.onClose && optionsRef.current.onClose(event);
    setReadyState(3 /* CLOSED */);
    if (optionsRef.current.shouldReconnect && optionsRef.current.shouldReconnect(event)) {
      const reconnectAttempts = optionsRef.current.reconnectAttempts ?? DEFAULT_RECONNECT_LIMIT;
      if (reconnectCount.current < reconnectAttempts) {
        const nextReconnectInterval = typeof optionsRef.current.reconnectInterval === "function" ? optionsRef.current.reconnectInterval(reconnectCount.current) : optionsRef.current.reconnectInterval;
        reconnectTimeout = window.setTimeout(() => {
          reconnectCount.current++;
          reconnect();
        }, nextReconnectInterval ?? DEFAULT_RECONNECT_INTERVAL_MS);
      } else {
        optionsRef.current.onReconnectStop && optionsRef.current.onReconnectStop(reconnectAttempts);
        console.warn(`Max reconnect attempts of ${reconnectAttempts} exceeded`);
      }
    }
  };
  return () => reconnectTimeout && window.clearTimeout(reconnectTimeout);
};
var bindErrorHandler = (webSocketInstance, optionsRef, setReadyState, reconnect, reconnectCount) => {
  let reconnectTimeout;
  webSocketInstance.onerror = (error) => {
    optionsRef.current.onError && optionsRef.current.onError(error);
    if (isEventSourceSupported && webSocketInstance instanceof EventSource) {
      optionsRef.current.onClose && optionsRef.current.onClose({
        ...error,
        code: 1006,
        reason: `An error occurred with the EventSource: ${error}`,
        wasClean: false
      });
      setReadyState(3 /* CLOSED */);
      webSocketInstance.close();
    }
    if (optionsRef.current.retryOnError) {
      if (reconnectCount.current < (optionsRef.current.reconnectAttempts ?? DEFAULT_RECONNECT_LIMIT)) {
        const nextReconnectInterval = typeof optionsRef.current.reconnectInterval === "function" ? optionsRef.current.reconnectInterval(reconnectCount.current) : optionsRef.current.reconnectInterval;
        reconnectTimeout = window.setTimeout(() => {
          reconnectCount.current++;
          reconnect();
        }, nextReconnectInterval ?? DEFAULT_RECONNECT_INTERVAL_MS);
      } else {
        optionsRef.current.onReconnectStop && optionsRef.current.onReconnectStop(optionsRef.current.reconnectAttempts);
        console.warn(`Max reconnect attempts of ${optionsRef.current.reconnectAttempts} exceeded`);
      }
    }
  };
  return () => reconnectTimeout && window.clearTimeout(reconnectTimeout);
};
var attachListeners = (webSocketInstance, setters, optionsRef, reconnect, reconnectCount, sendMessage) => {
  const { setLastMessage, setReadyState } = setters;
  let interval2;
  let cancelReconnectOnClose;
  let cancelReconnectOnError;
  if (optionsRef.current.fromSocketIO) {
    interval2 = setUpSocketIOPing(sendMessage);
  }
  bindMessageHandler(
    webSocketInstance,
    optionsRef,
    setLastMessage
  );
  bindOpenHandler(
    webSocketInstance,
    optionsRef,
    setReadyState,
    reconnectCount
  );
  cancelReconnectOnClose = bindCloseHandler(
    webSocketInstance,
    optionsRef,
    setReadyState,
    reconnect,
    reconnectCount
  );
  cancelReconnectOnError = bindErrorHandler(
    webSocketInstance,
    optionsRef,
    setReadyState,
    reconnect,
    reconnectCount
  );
  return () => {
    setReadyState(2 /* CLOSING */);
    cancelReconnectOnClose();
    cancelReconnectOnError();
    webSocketInstance.close();
    if (interval2)
      clearInterval(interval2);
  };
};

// src/external/react-use-websocket/attach-shared-listeners.ts
var bindMessageHandler2 = (webSocketInstance, url) => {
  webSocketInstance.onmessage = (message) => {
    getSubscribers(url).forEach((subscriber) => {
      if (subscriber.optionsRef.current.onMessage) {
        subscriber.optionsRef.current.onMessage(message);
      }
      if (typeof subscriber.optionsRef.current.filter === "function" && subscriber.optionsRef.current.filter(message) !== true) {
        return;
      }
      subscriber.setLastMessage(message);
    });
  };
};
var bindOpenHandler2 = (webSocketInstance, url) => {
  webSocketInstance.onopen = (event) => {
    getSubscribers(url).forEach((subscriber) => {
      subscriber.reconnectCount.current = 0;
      if (subscriber.optionsRef.current.onOpen) {
        subscriber.optionsRef.current.onOpen(event);
      }
      subscriber.setReadyState(1 /* OPEN */);
    });
  };
};
var bindCloseHandler2 = (webSocketInstance, url) => {
  if (webSocketInstance instanceof WebSocket) {
    webSocketInstance.onclose = (event) => {
      getSubscribers(url).forEach((subscriber) => {
        if (subscriber.optionsRef.current.onClose) {
          subscriber.optionsRef.current.onClose(event);
        }
        subscriber.setReadyState(3 /* CLOSED */);
      });
      delete sharedWebSockets[url];
      getSubscribers(url).forEach((subscriber) => {
        if (subscriber.optionsRef.current.shouldReconnect && subscriber.optionsRef.current.shouldReconnect(event)) {
          const reconnectAttempts = subscriber.optionsRef.current.reconnectAttempts ?? DEFAULT_RECONNECT_LIMIT;
          if (subscriber.reconnectCount.current < reconnectAttempts) {
            const nextReconnectInterval = typeof subscriber.optionsRef.current.reconnectInterval === "function" ? subscriber.optionsRef.current.reconnectInterval(subscriber.reconnectCount.current) : subscriber.optionsRef.current.reconnectInterval;
            setTimeout(() => {
              subscriber.reconnectCount.current++;
              subscriber.reconnect.current();
            }, nextReconnectInterval ?? DEFAULT_RECONNECT_INTERVAL_MS);
          } else {
            subscriber.optionsRef.current.onReconnectStop && subscriber.optionsRef.current.onReconnectStop(subscriber.optionsRef.current.reconnectAttempts);
            console.warn(`Max reconnect attempts of ${reconnectAttempts} exceeded`);
          }
        }
      });
    };
  }
};
var bindErrorHandler2 = (webSocketInstance, url) => {
  webSocketInstance.onerror = (error) => {
    getSubscribers(url).forEach((subscriber) => {
      if (subscriber.optionsRef.current.onError) {
        subscriber.optionsRef.current.onError(error);
      }
      if (isEventSourceSupported && webSocketInstance instanceof EventSource) {
        subscriber.optionsRef.current.onClose && subscriber.optionsRef.current.onClose({
          ...error,
          code: 1006,
          reason: `An error occurred with the EventSource: ${error}`,
          wasClean: false
        });
        subscriber.setReadyState(3 /* CLOSED */);
      }
    });
    if (isEventSourceSupported && webSocketInstance instanceof EventSource) {
      webSocketInstance.close();
    }
  };
};
var attachSharedListeners = (webSocketInstance, url, optionsRef, sendMessage) => {
  let interval2;
  if (optionsRef.current.fromSocketIO) {
    interval2 = setUpSocketIOPing(sendMessage);
  }
  bindMessageHandler2(webSocketInstance, url);
  bindCloseHandler2(webSocketInstance, url);
  bindOpenHandler2(webSocketInstance, url);
  bindErrorHandler2(webSocketInstance, url);
  return () => {
    if (interval2)
      clearInterval(interval2);
  };
};

// src/external/react-use-websocket/create-or-join.ts
var cleanSubscribers = (url, subscriber, optionsRef, setReadyState, clearSocketIoPingInterval) => {
  return () => {
    removeSubscriber(url, subscriber);
    if (!hasSubscribers(url)) {
      try {
        const socketLike = sharedWebSockets[url];
        if (socketLike instanceof WebSocket) {
          socketLike.onclose = (event) => {
            if (optionsRef.current.onClose) {
              optionsRef.current.onClose(event);
            }
            setReadyState(3 /* CLOSED */);
          };
        }
        socketLike.close();
      } catch (e) {
      }
      if (clearSocketIoPingInterval)
        clearSocketIoPingInterval();
      delete sharedWebSockets[url];
    }
  };
};
var createOrJoinSocket = (webSocketRef, url, setReadyState, optionsRef, setLastMessage, startRef, reconnectCount, sendMessage) => {
  if (!isEventSourceSupported && optionsRef.current.eventSourceOptions) {
    if (isReactNative) {
      throw new Error("EventSource is not supported in ReactNative");
    } else {
      throw new Error("EventSource is not supported");
    }
  }
  if (optionsRef.current.share) {
    let clearSocketIoPingInterval = null;
    if (sharedWebSockets[url] === void 0) {
      sharedWebSockets[url] = optionsRef.current.eventSourceOptions ? new EventSource(url, optionsRef.current.eventSourceOptions) : new WebSocket(url, optionsRef.current.protocols);
      webSocketRef.current = sharedWebSockets[url];
      setReadyState(0 /* CONNECTING */);
      clearSocketIoPingInterval = attachSharedListeners(
        sharedWebSockets[url],
        url,
        optionsRef,
        sendMessage
      );
    } else {
      webSocketRef.current = sharedWebSockets[url];
      setReadyState(sharedWebSockets[url].readyState);
    }
    const subscriber = {
      setLastMessage,
      setReadyState,
      optionsRef,
      reconnectCount,
      reconnect: startRef
    };
    addSubscriber(url, subscriber);
    return cleanSubscribers(
      url,
      subscriber,
      optionsRef,
      setReadyState,
      clearSocketIoPingInterval
    );
  } else {
    webSocketRef.current = optionsRef.current.eventSourceOptions ? new EventSource(url, optionsRef.current.eventSourceOptions) : new WebSocket(url, optionsRef.current.protocols);
    setReadyState(0 /* CONNECTING */);
    if (!webSocketRef.current) {
      throw new Error("WebSocket failed to be created");
    }
    return attachListeners(
      webSocketRef.current,
      {
        setLastMessage,
        setReadyState
      },
      optionsRef,
      startRef.current,
      reconnectCount,
      sendMessage
    );
  }
};

// src/external/react-use-websocket/get-url.ts
var getUrl = async (url, optionsRef) => {
  let convertedUrl;
  if (typeof url === "function") {
    convertedUrl = await url();
  } else {
    convertedUrl = url;
  }
  const parsedUrl = optionsRef.current.fromSocketIO ? parseSocketIOUrl(convertedUrl) : convertedUrl;
  const parsedWithQueryParams = optionsRef.current.queryParams ? appendQueryParams(
    parsedUrl,
    optionsRef.current.queryParams
  ) : parsedUrl;
  return parsedWithQueryParams;
};

// src/external/react-use-websocket/proxy.ts
var websocketWrapper = (webSocket, start2) => {
  return new Proxy(webSocket, {
    get: (obj, key) => {
      const val = obj[key];
      if (key === "reconnect")
        return start2;
      if (typeof val === "function") {
        console.error("Calling methods directly on the websocket is not supported at this moment. You must use the methods returned by useWebSocket.");
        return () => {
        };
      } else {
        return val;
      }
    },
    set: (obj, key, val) => {
      if (/^on/.test(key)) {
        console.warn("The websocket's event handlers should be defined through the options object passed into useWebSocket.");
        return false;
      } else {
        obj[key] = val;
        return true;
      }
    }
  });
};
var proxy_default = websocketWrapper;

// src/external/react-use-websocket/use-websocket.ts
var useWebSocket = (url, options = DEFAULT_OPTIONS, connect = true) => {
  const [lastMessage, setLastMessage] = (0, import_react10.useState)(null);
  const [readyState, setReadyState] = (0, import_react10.useState)({});
  const lastJsonMessage = (0, import_react10.useMemo)(() => {
    if (lastMessage) {
      try {
        return JSON.parse(lastMessage.data);
      } catch (e) {
        return UNPARSABLE_JSON_OBJECT;
      }
    }
    return null;
  }, [lastMessage]);
  const convertedUrl = (0, import_react10.useRef)(null);
  const webSocketRef = (0, import_react10.useRef)(null);
  const startRef = (0, import_react10.useRef)(() => void 0);
  const reconnectCount = (0, import_react10.useRef)(0);
  const messageQueue = (0, import_react10.useRef)([]);
  const webSocketProxy = (0, import_react10.useRef)(null);
  const optionsCache = (0, import_react10.useRef)(options);
  optionsCache.current = options;
  const readyStateFromUrl = convertedUrl.current && readyState[convertedUrl.current] !== void 0 ? readyState[convertedUrl.current] : url !== null && connect === true ? 0 /* CONNECTING */ : -1 /* UNINSTANTIATED */;
  const stringifiedQueryParams = options.queryParams ? JSON.stringify(options.queryParams) : null;
  const sendMessage = (0, import_react10.useCallback)((message, keep = true) => {
    if (isEventSourceSupported && webSocketRef.current instanceof EventSource) {
      console.warn("Unable to send a message from an eventSource");
      return;
    }
    if (webSocketRef.current?.readyState === 1 /* OPEN */) {
      assertIsWebSocket(webSocketRef.current, optionsCache.current.skipAssert);
      webSocketRef.current.send(message);
    } else if (keep) {
      messageQueue.current.push(message);
    }
  }, []);
  const sendJsonMessage = (0, import_react10.useCallback)(
    (message, keep = true) => {
      sendMessage(JSON.stringify(message), keep);
    },
    [sendMessage]
  );
  const getWebSocket = (0, import_react10.useCallback)(() => {
    if (optionsCache.current.share !== true || isEventSourceSupported && webSocketRef.current instanceof EventSource) {
      return webSocketRef.current;
    }
    if (webSocketProxy.current === null && webSocketRef.current) {
      assertIsWebSocket(webSocketRef.current, optionsCache.current.skipAssert);
      webSocketProxy.current = proxy_default(webSocketRef.current, startRef);
    }
    return webSocketProxy.current;
  }, []);
  (0, import_react10.useEffect)(() => {
    if (url !== null && connect === true) {
      let removeListeners;
      let expectClose = false;
      let createOrJoin = true;
      const start2 = async () => {
        convertedUrl.current = await getUrl(url, optionsCache);
        const protectedSetLastMessage = (message) => {
          if (!expectClose) {
            (0, import_react_dom.flushSync)(() => setLastMessage(message));
          }
        };
        const protectedSetReadyState = (state) => {
          if (!expectClose) {
            (0, import_react_dom.flushSync)(
              () => setReadyState((prev) => ({
                ...prev,
                ...convertedUrl.current && { [convertedUrl.current]: state }
              }))
            );
          }
        };
        if (createOrJoin) {
          removeListeners = createOrJoinSocket(
            webSocketRef,
            convertedUrl.current,
            protectedSetReadyState,
            optionsCache,
            protectedSetLastMessage,
            startRef,
            reconnectCount,
            sendMessage
          );
        }
      };
      startRef.current = () => {
        if (!expectClose) {
          if (webSocketProxy.current)
            webSocketProxy.current = null;
          removeListeners?.();
          start2();
        }
      };
      start2();
      return () => {
        expectClose = true;
        createOrJoin = false;
        if (webSocketProxy.current)
          webSocketProxy.current = null;
        removeListeners?.();
        setLastMessage(null);
      };
    } else if (url === null || connect === false) {
      reconnectCount.current = 0;
      setReadyState((prev) => ({
        ...prev,
        ...convertedUrl.current && { [convertedUrl.current]: 3 /* CLOSED */ }
      }));
    }
  }, [url, connect, stringifiedQueryParams, sendMessage]);
  (0, import_react10.useEffect)(() => {
    if (readyStateFromUrl === 1 /* OPEN */) {
      messageQueue.current.splice(0).forEach((message) => {
        sendMessage(message);
      });
    }
  }, [readyStateFromUrl]);
  return {
    sendMessage,
    sendJsonMessage,
    lastMessage,
    lastJsonMessage,
    readyState: readyStateFromUrl,
    getWebSocket
  };
};

// src/RemixDevTools/hooks/useRemixForgeSocket.ts
var import_react11 = require("react");
var RETRY_COUNT = 2;
var useRemixForgeSocket = (options) => {
  const { settings, setSettings } = useSettingsContext();
  const { terminals, toggleTerminalLock, setProcessId } = useTerminalContext();
  const { shouldConnectWithForge, port } = settings;
  const [retryCount, setRetryCount] = (0, import_react11.useState)(0);
  const opts = {
    ...options,
    share: true,
    shouldReconnect: () => true,
    reconnectAttempts: RETRY_COUNT,
    reconnectInterval: 0,
    onClose: (e) => {
      if (e.code === 1005) {
        setSettings({ shouldConnectWithForge: false });
        setRetryCount(0);
        terminals.forEach((terminal) => {
          toggleTerminalLock(terminal.id, false);
          setProcessId(terminal.id, void 0);
        });
        return;
      }
      if (retryCount < RETRY_COUNT) {
        return setRetryCount(retryCount + 1);
      }
      setSettings({ shouldConnectWithForge: false });
    }
  };
  const properties = useWebSocket(`ws://localhost:${port}`, opts, shouldConnectWithForge);
  const connectionStatus = {
    [0 /* CONNECTING */]: "Connecting",
    [1 /* OPEN */]: "Open",
    [2 /* CLOSING */]: "Closing",
    [3 /* CLOSED */]: "Closed",
    [-1 /* UNINSTANTIATED */]: "Uninstantiated"
  }[properties.readyState];
  const isConnected = properties.readyState === 1 /* OPEN */;
  const isConnecting = properties.readyState === 0 /* CONNECTING */;
  return { ...properties, connectionStatus, isConnected, isConnecting };
};

// src/RemixDevTools/hooks/useTabs.ts
var import_react47 = require("react");

// src/RemixDevTools/tabs/PageTab.tsx
var import_react29 = require("@remix-run/react");
var import_clsx8 = __toESM(require("clsx"), 1);
var import_react30 = require("react");

// src/dev-server/parser.ts
var parseCacheControlHeader = (headers) => {
  const cacheControl = headers.get("cache-control");
  if (!cacheControl)
    return {};
  const parts = cacheControl.split(",");
  const cacheControlObject = {};
  for (const part of parts) {
    const [key, value] = part.split("=");
    if (!key)
      continue;
    cacheControlObject[key.trim()] = value?.trim();
  }
  const returnValue = Object.entries(cacheControlObject).reduce((acc, [key, value]) => {
    const k = key.trim().split("-").map((k2, i) => i === 0 ? k2 : uppercaseFirstLetter(k2)).join("");
    if (!value) {
      return { ...acc, [k]: true };
    }
    return { ...acc, [k]: value };
  }, {});
  return returnValue;
};

// src/RemixDevTools/utils/routing.ts
function getRouteType(route) {
  if (route.id === "root") {
    return "ROOT";
  }
  if (route.index) {
    return "ROUTE";
  }
  if (!route.path) {
    return "LAYOUT";
  }
  const childIndexRoute = Object.values(window.__remixManifest.routes).find((r) => r.parentId === route.id && r.index);
  return childIndexRoute ? "LAYOUT" : "ROUTE";
}
function isLayoutRoute(route) {
  return getRouteType(route) === "LAYOUT";
}
function isLeafRoute(route) {
  return getRouteType(route) === "ROUTE";
}
var ROUTE_FILLS = {
  GREEN: "rdt-fill-green-500 rdt-text-white",
  BLUE: "rdt-fill-blue-500 rdt-text-white",
  PURPLE: "rdt-fill-purple-500 rdt-text-white"
};
function getRouteColor(route) {
  switch (getRouteType(route)) {
    case "ROOT":
      return ROUTE_FILLS["PURPLE"];
    case "LAYOUT":
      return ROUTE_FILLS["BLUE"];
    case "ROUTE":
      return ROUTE_FILLS["GREEN"];
  }
}
var constructRoutePath = (route, routeWildcards) => {
  const hasWildcard = route.url.includes(":");
  const wildcards = routeWildcards[route.id];
  const path2 = route.url.split("/").map((p) => {
    if (p.startsWith(":")) {
      return wildcards?.[p] ? wildcards?.[p] : p;
    }
    return p;
  }).join("/");
  const pathToOpen = document.location.origin + (path2 === "/" ? path2 : "/" + path2);
  return { pathToOpen, path: path2, hasWildcard };
};
var createExtendedRoutes = () => {
  return Object.values(window.__remixManifest.routes).map((route) => {
    return {
      ...route,
      url: convertRemixPathToUrl(window.__remixManifest.routes, route),
      errorBoundary: findParentErrorBoundary(window.__remixManifest.routes, route)
    };
  }).filter((route) => isLeafRoute(route));
};

// src/RemixDevTools/components/CacheInfo.tsx
var import_add = __toESM(require("date-fns/add/index.js"), 1);

// src/RemixDevTools/hooks/useCountdown.ts
var import_react12 = require("react");
var getTimeLeft = (countDown) => {
  const days = Math.floor(countDown / (1e3 * 60 * 60 * 24));
  const hours = Math.floor(countDown % (1e3 * 60 * 60 * 24) / (1e3 * 60 * 60));
  const minutes = Math.floor(countDown % (1e3 * 60 * 60) / (1e3 * 60));
  const seconds = Math.floor(countDown % (1e3 * 60) / 1e3);
  return { days, hours, minutes, seconds };
};
var useCountdown = (targetDate) => {
  const countDownDate = new Date(targetDate).getTime();
  const [countDown, setCountDown] = (0, import_react12.useState)(countDownDate - (/* @__PURE__ */ new Date()).getTime());
  (0, import_react12.useEffect)(() => {
    const timeLeft2 = getTimeLeft(countDown);
    if (timeLeft2.seconds <= 0) {
      return;
    }
    const interval2 = setInterval(() => {
      setCountDown(countDownDate - (/* @__PURE__ */ new Date()).getTime());
    }, 1e3);
    return () => clearInterval(interval2);
  }, [countDownDate]);
  const timeLeft = getTimeLeft(countDown);
  const stringRepresentation = `${timeLeft.days > 0 ? `${timeLeft.days}d ` : ""}${timeLeft.hours ? `${timeLeft.hours}h ` : ""}${timeLeft.minutes ? `${timeLeft.minutes}m ` : ""}${timeLeft.seconds ? `${timeLeft.seconds}s` : ""}`;
  return { ...timeLeft, stringRepresentation };
};

// src/RemixDevTools/components/CacheInfo.tsx
var import_formatDistance = __toESM(require("date-fns/formatDistance/index.js"), 1);

// src/RemixDevTools/components/Tag.tsx
var import_clsx3 = __toESM(require("clsx"), 1);
var import_jsx_runtime5 = require("react/jsx-runtime");
var TAG_COLORS = {
  GREEN: "rdt-border-green-500 rdt-border rdt-border-solid rdt-text-white",
  BLUE: "rdt-border-blue-500 rdt-border rdt-border-solid rdt-text-white",
  TEAL: "rdt-border-teal-400 rdt-border rdt-border-solid rdt-text-white",
  RED: "rdt-border-red-500 rdt-border rdt-border-solid rdt-text-white",
  PURPLE: "rdt-border-purple-500 rdt-border rdt-border-solid rdt-text-white"
};
var Tag = ({ color: color2, children: children2, className }) => {
  return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
    "span",
    {
      className: (0, import_clsx3.default)(
        "rdt-flex rdt-items-center rdt-rounded rdt-px-2.5 rdt-py-0.5 rdt-text-sm rdt-font-medium",
        className,
        TAG_COLORS[color2]
      ),
      children: children2
    }
  );
};

// src/RemixDevTools/components/CacheInfo.tsx
var import_jsx_runtime6 = require("react/jsx-runtime");
var CacheInfo = ({ cacheDate, cacheControl }) => {
  const { maxAge, sMaxage, private: isPrivate } = cacheControl;
  const age = !isPrivate && !maxAge ? sMaxage : maxAge;
  const targetDate = (0, import_add.default)(cacheDate, { seconds: age ? parseInt(age) : 0 });
  const { minutes, seconds, stringRepresentation } = useCountdown(targetDate);
  const distance = (0, import_formatDistance.default)(targetDate, cacheDate, { addSuffix: true });
  if (seconds <= 0) {
    return;
  }
  return /* @__PURE__ */ (0, import_jsx_runtime6.jsxs)(Tag, { color: minutes < 1 ? "RED" : "PURPLE", children: [
    "[",
    cacheControl.private ? "Private" : "Shared",
    "] Loader Cache expires ",
    distance,
    " (",
    stringRepresentation,
    ")"
  ] });
};

// src/RemixDevTools/components/VScodeButton.tsx
var import_clsx4 = __toESM(require("clsx"), 1);
var import_jsx_runtime7 = require("react/jsx-runtime");
var VsCodeButton = ({ onClick }) => {
  return /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)(
    "button",
    {
      onClick,
      className: (0, import_clsx4.default)(
        "rdt-flex rdt-cursor-pointer rdt-items-center rdt-gap-1 rdt-rounded rdt-border rdt-border-[#1F9CF0] rdt-px-2.5 rdt-py-0.5 rdt-text-sm rdt-font-medium rdt-text-[#1F9CF0]"
      ),
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("svg", { width: "16", height: "16", viewBox: "0 0 100 100", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: [
          /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("mask", { id: "mask0", maskUnits: "userSpaceOnUse", x: "0", y: "0", width: "100", height: "100", children: /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(
            "path",
            {
              fillRule: "evenodd",
              clipRule: "evenodd",
              d: "M70.9119 99.3171C72.4869 99.9307 74.2828 99.8914 75.8725 99.1264L96.4608 89.2197C98.6242 88.1787 100 85.9892 100 83.5872V16.4133C100 14.0113 98.6243 11.8218 96.4609 10.7808L75.8725 0.873756C73.7862 -0.130129 71.3446 0.11576 69.5135 1.44695C69.252 1.63711 69.0028 1.84943 68.769 2.08341L29.3551 38.0415L12.1872 25.0096C10.589 23.7965 8.35363 23.8959 6.86933 25.2461L1.36303 30.2549C-0.452552 31.9064 -0.454633 34.7627 1.35853 36.417L16.2471 50.0001L1.35853 63.5832C-0.454633 65.2374 -0.452552 68.0938 1.36303 69.7453L6.86933 74.7541C8.35363 76.1043 10.589 76.2037 12.1872 74.9905L29.3551 61.9587L68.769 97.9167C69.3925 98.5406 70.1246 99.0104 70.9119 99.3171ZM75.0152 27.2989L45.1091 50.0001L75.0152 72.7012V27.2989Z",
              fill: "white"
            }
          ) }),
          /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("g", { mask: "url(#mask0)", children: [
            /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(
              "path",
              {
                d: "M96.4614 10.7962L75.8569 0.875542C73.4719 -0.272773 70.6217 0.211611 68.75 2.08333L1.29858 63.5832C-0.515693 65.2373 -0.513607 68.0937 1.30308 69.7452L6.81272 74.754C8.29793 76.1042 10.5347 76.2036 12.1338 74.9905L93.3609 13.3699C96.086 11.3026 100 13.2462 100 16.6667V16.4275C100 14.0265 98.6246 11.8378 96.4614 10.7962Z",
                fill: "#0065A9"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("g", { filter: "url(#filter0_d)", children: /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(
              "path",
              {
                d: "M96.4614 89.2038L75.8569 99.1245C73.4719 100.273 70.6217 99.7884 68.75 97.9167L1.29858 36.4169C-0.515693 34.7627 -0.513607 31.9063 1.30308 30.2548L6.81272 25.246C8.29793 23.8958 10.5347 23.7964 12.1338 25.0095L93.3609 86.6301C96.086 88.6974 100 86.7538 100 83.3334V83.5726C100 85.9735 98.6246 88.1622 96.4614 89.2038Z",
                fill: "#007ACC"
              }
            ) }),
            /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("g", { filter: "url(#filter1_d)", children: /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(
              "path",
              {
                d: "M75.8578 99.1263C73.4721 100.274 70.6219 99.7885 68.75 97.9166C71.0564 100.223 75 98.5895 75 95.3278V4.67213C75 1.41039 71.0564 -0.223106 68.75 2.08329C70.6219 0.211402 73.4721 -0.273666 75.8578 0.873633L96.4587 10.7807C98.6234 11.8217 100 14.0112 100 16.4132V83.5871C100 85.9891 98.6234 88.1786 96.4586 89.2196L75.8578 99.1263Z",
                fill: "#1F9CF0"
              }
            ) }),
            /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("g", { style: { mixBlendMode: "overlay" }, opacity: "0.25", children: /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(
              "path",
              {
                fillRule: "evenodd",
                clipRule: "evenodd",
                d: "M70.8511 99.3171C72.4261 99.9306 74.2221 99.8913 75.8117 99.1264L96.4 89.2197C98.5634 88.1787 99.9392 85.9892 99.9392 83.5871V16.4133C99.9392 14.0112 98.5635 11.8217 96.4001 10.7807L75.8117 0.873695C73.7255 -0.13019 71.2838 0.115699 69.4527 1.44688C69.1912 1.63705 68.942 1.84937 68.7082 2.08335L29.2943 38.0414L12.1264 25.0096C10.5283 23.7964 8.29285 23.8959 6.80855 25.246L1.30225 30.2548C-0.513334 31.9064 -0.515415 34.7627 1.29775 36.4169L16.1863 50L1.29775 63.5832C-0.515415 65.2374 -0.513334 68.0937 1.30225 69.7452L6.80855 74.754C8.29285 76.1042 10.5283 76.2036 12.1264 74.9905L29.2943 61.9586L68.7082 97.9167C69.3317 98.5405 70.0638 99.0104 70.8511 99.3171ZM74.9544 27.2989L45.0483 50L74.9544 72.7012V27.2989Z",
                fill: "url(#paint0_linear)"
              }
            ) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("defs", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)(
              "filter",
              {
                id: "filter0_d",
                x: "-8.39411",
                y: "15.8291",
                width: "116.727",
                height: "92.2456",
                filterUnits: "userSpaceOnUse",
                colorInterpolationFilters: "sRGB",
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("feFlood", { floodOpacity: "0", result: "BackgroundImageFix" }),
                  /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("feColorMatrix", { in: "SourceAlpha", type: "matrix", values: "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" }),
                  /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("feOffset", {}),
                  /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("feGaussianBlur", { stdDeviation: "4.16667" }),
                  /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("feColorMatrix", { type: "matrix", values: "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.25 0" }),
                  /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("feBlend", { mode: "overlay", in2: "BackgroundImageFix", result: "effect1_dropShadow" }),
                  /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("feBlend", { mode: "normal", in: "SourceGraphic", in2: "effect1_dropShadow", result: "shape" })
                ]
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)(
              "filter",
              {
                id: "filter1_d",
                x: "60.4167",
                y: "-8.07558",
                width: "47.9167",
                height: "116.151",
                filterUnits: "userSpaceOnUse",
                colorInterpolationFilters: "sRGB",
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("feFlood", { floodOpacity: "0", result: "BackgroundImageFix" }),
                  /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("feColorMatrix", { in: "SourceAlpha", type: "matrix", values: "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" }),
                  /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("feOffset", {}),
                  /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("feGaussianBlur", { stdDeviation: "4.16667" }),
                  /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("feColorMatrix", { type: "matrix", values: "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.25 0" }),
                  /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("feBlend", { mode: "overlay", in2: "BackgroundImageFix", result: "effect1_dropShadow" }),
                  /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("feBlend", { mode: "normal", in: "SourceGraphic", in2: "effect1_dropShadow", result: "shape" })
                ]
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)(
              "linearGradient",
              {
                id: "paint0_linear",
                x1: "49.9392",
                y1: "0.257812",
                x2: "49.9392",
                y2: "99.7423",
                gradientUnits: "userSpaceOnUse",
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("stop", { stopColor: "white" }),
                  /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("stop", { offset: "1", stopColor: "white", stopOpacity: "0" })
                ]
              }
            )
          ] })
        ] }),
        " ",
        "Open"
      ]
    }
  );
};

// src/RemixDevTools/components/jsonRenderer.tsx
var import_react26 = require("react");

// src/external/react-json-view/index.tsx
var import_react25 = require("react");

// src/external/react-json-view/store.tsx
var import_react18 = require("react");

// src/external/react-json-view/store/ShowTools.tsx
var import_react13 = require("react");
var import_jsx_runtime8 = require("react/jsx-runtime");
var initialState2 = {};
var Context = (0, import_react13.createContext)(initialState2);
var reducer = (state, action) => ({
  ...state,
  ...action
});
var useShowToolsStore = () => {
  return (0, import_react13.useContext)(Context);
};
var DispatchShowTools = (0, import_react13.createContext)(() => {
});
DispatchShowTools.displayName = "JVR.DispatchShowTools";
function useShowTools() {
  return (0, import_react13.useReducer)(reducer, initialState2);
}
function useShowToolsDispatch() {
  return (0, import_react13.useContext)(DispatchShowTools);
}
var ShowTools = ({ initial, dispatch: dispatch2, children: children2 }) => {
  return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(Context.Provider, { value: initial, children: /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(DispatchShowTools.Provider, { value: dispatch2, children: children2 }) });
};
ShowTools.displayName = "JVR.ShowTools";

// src/external/react-json-view/store/Expands.tsx
var import_react14 = require("react");
var import_jsx_runtime9 = require("react/jsx-runtime");
var initialState3 = {};
var Context2 = (0, import_react14.createContext)(initialState3);
var reducer2 = (state, action) => ({
  ...state,
  ...action
});
var useExpandsStore = () => {
  return (0, import_react14.useContext)(Context2);
};
var DispatchExpands = (0, import_react14.createContext)(() => {
});
DispatchExpands.displayName = "JVR.DispatchExpands";
function useExpands() {
  return (0, import_react14.useReducer)(reducer2, initialState3);
}
function useExpandsDispatch() {
  return (0, import_react14.useContext)(DispatchExpands);
}
var Expands = ({ initial, dispatch: dispatch2, children: children2 }) => {
  return /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(Context2.Provider, { value: initial, children: /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(DispatchExpands.Provider, { value: dispatch2, children: children2 }) });
};
Expands.displayName = "JVR.Expands";

// src/external/react-json-view/store/Types.tsx
var import_react15 = require("react");
var import_jsx_runtime10 = require("react/jsx-runtime");
var initialState4 = {
  Str: {
    as: "span",
    "data-type": "string",
    style: {
      color: "var(--w-rjv-type-string-color, #cb4b16)"
    },
    className: "w-rjv-type",
    children: "string"
  },
  Url: {
    as: "a",
    style: {
      color: "var(--w-rjv-type-url-color, #0969da)"
    },
    "data-type": "url",
    className: "w-rjv-type",
    children: "url"
  },
  Undefined: {
    style: {
      color: "var(--w-rjv-type-undefined-color, #586e75)"
    },
    as: "span",
    "data-type": "undefined",
    className: "w-rjv-type",
    children: "undefined"
  },
  Null: {
    style: {
      color: "var(--w-rjv-type-null-color, #d33682)"
    },
    as: "span",
    "data-type": "null",
    className: "w-rjv-type",
    children: "null"
  },
  Map: {
    style: {
      color: "var(--w-rjv-type-map-color, #268bd2)"
    },
    as: "span",
    "data-type": "map",
    className: "w-rjv-type",
    children: "Map"
  },
  Nan: {
    style: {
      color: "var(--w-rjv-type-nan-color, #859900)"
    },
    as: "span",
    "data-type": "nan",
    className: "w-rjv-type",
    children: "NaN"
  },
  Bigint: {
    style: {
      color: "var(--w-rjv-type-bigint-color, #268bd2)"
    },
    as: "span",
    "data-type": "bigint",
    className: "w-rjv-type",
    children: "bigint"
  },
  Int: {
    style: {
      color: "var(--w-rjv-type-int-color, #268bd2)"
    },
    as: "span",
    "data-type": "int",
    className: "w-rjv-type",
    children: "int"
  },
  Set: {
    style: {
      color: "var(--w-rjv-type-set-color, #268bd2)"
    },
    as: "span",
    "data-type": "set",
    className: "w-rjv-type",
    children: "Set"
  },
  Float: {
    style: {
      color: "var(--w-rjv-type-float-color, #859900)"
    },
    as: "span",
    "data-type": "float",
    className: "w-rjv-type",
    children: "float"
  },
  True: {
    style: {
      color: "var(--w-rjv-type-boolean-color, #2aa198)"
    },
    as: "span",
    "data-type": "bool",
    className: "w-rjv-type",
    children: "bool"
  },
  False: {
    style: {
      color: "var(--w-rjv-type-boolean-color, #2aa198)"
    },
    as: "span",
    "data-type": "bool",
    className: "w-rjv-type",
    children: "bool"
  },
  Date: {
    style: {
      color: "var(--w-rjv-type-date-color, #268bd2)"
    },
    as: "span",
    "data-type": "date",
    className: "w-rjv-type",
    children: "date"
  }
};
var Context3 = (0, import_react15.createContext)(initialState4);
var reducer3 = (state, action) => ({
  ...state,
  ...action
});
var useTypesStore = () => {
  return (0, import_react15.useContext)(Context3);
};
var DispatchTypes = (0, import_react15.createContext)(() => {
});
DispatchTypes.displayName = "JVR.DispatchTypes";
function useTypes() {
  return (0, import_react15.useReducer)(reducer3, initialState4);
}
function useTypesDispatch() {
  return (0, import_react15.useContext)(DispatchTypes);
}
var Types = ({ initial, dispatch: dispatch2, children: children2 }) => {
  return /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(Context3.Provider, { value: initial, children: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(DispatchTypes.Provider, { value: dispatch2, children: children2 }) });
};
Types.displayName = "JVR.Types";

// src/external/react-json-view/store/Symbols.tsx
var import_react16 = require("react");

// src/external/react-json-view/arrow/TriangleArrow.tsx
var import_jsx_runtime11 = require("react/jsx-runtime");
function TriangleArrow(props) {
  const { style, ...reset } = props;
  const defaultStyle = {
    cursor: "pointer",
    height: "1em",
    width: "1em",
    userSelect: "none",
    display: "flex",
    ...style
  };
  return /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("svg", { viewBox: "0 0 24 24", fill: "var(--w-rjv-arrow-color, currentColor)", style: defaultStyle, ...reset, children: /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("path", { d: "M16.59 8.59 12 13.17 7.41 8.59 6 10l6 6 6-6z" }) });
}
TriangleArrow.displayName = "JVR.TriangleArrow";

// src/external/react-json-view/store/Symbols.tsx
var import_jsx_runtime12 = require("react/jsx-runtime");
var initialState5 = {
  Arrow: {
    as: "span",
    className: "w-rjv-arrow",
    style: {
      transform: "rotate(0deg)",
      transition: "all 0.3s"
    },
    children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(TriangleArrow, {})
  },
  Colon: {
    as: "span",
    style: {
      color: "var(--w-rjv-colon-color, var(--w-rjv-color))",
      marginLeft: 0,
      marginRight: 2
    },
    className: "w-rjv-colon",
    children: ":"
  },
  Quote: {
    as: "span",
    style: {
      color: "var(--w-rjv-quotes-color, #236a7c)"
    },
    className: "w-rjv-quotes",
    children: '"'
  },
  ValueQuote: {
    as: "span",
    style: {
      color: "var(--w-rjv-quotes-string-color, #cb4b16)"
    },
    className: "w-rjv-quotes",
    children: '"'
  },
  BracketsLeft: {
    as: "span",
    style: {
      color: "var(--w-rjv-brackets-color, #236a7c)"
    },
    className: "w-rjv-brackets-start",
    children: "["
  },
  BracketsRight: {
    as: "span",
    style: {
      color: "var(--w-rjv-brackets-color, #236a7c)"
    },
    className: "w-rjv-brackets-end",
    children: "]"
  },
  BraceLeft: {
    as: "span",
    style: {
      color: "var(--w-rjv-curlybraces-color, #236a7c)"
    },
    className: "w-rjv-curlybraces-start",
    children: "{"
  },
  BraceRight: {
    as: "span",
    style: {
      color: "var(--w-rjv-curlybraces-color, #236a7c)"
    },
    className: "w-rjv-curlybraces-end",
    children: "}"
  }
};
var Context4 = (0, import_react16.createContext)(initialState5);
var reducer4 = (state, action) => ({
  ...state,
  ...action
});
var useSymbolsStore = () => {
  return (0, import_react16.useContext)(Context4);
};
var DispatchSymbols = (0, import_react16.createContext)(() => {
});
DispatchSymbols.displayName = "JVR.DispatchSymbols";
function useSymbols() {
  return (0, import_react16.useReducer)(reducer4, initialState5);
}
function useSymbolsDispatch() {
  return (0, import_react16.useContext)(DispatchSymbols);
}
var Symbols = ({ initial, dispatch: dispatch2, children: children2 }) => {
  return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(Context4.Provider, { value: initial, children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(DispatchSymbols.Provider, { value: dispatch2, children: children2 }) });
};
Symbols.displayName = "JVR.Symbols";

// src/external/react-json-view/store/Section.tsx
var import_react17 = require("react");
var import_jsx_runtime13 = require("react/jsx-runtime");
var initialState6 = {
  Copied: {
    className: "w-rjv-copied",
    style: {
      height: "1em",
      width: "1em",
      cursor: "pointer",
      verticalAlign: "middle",
      marginLeft: 5
    }
  },
  CountInfo: {
    as: "span",
    className: "w-rjv-object-size",
    style: {
      color: "var(--w-rjv-info-color, #0000004d)",
      paddingLeft: 8,
      fontStyle: "italic"
    }
  },
  CountInfoExtra: {
    as: "span",
    className: "w-rjv-object-extra",
    style: {
      paddingLeft: 8
    }
  },
  Ellipsis: {
    as: "span",
    style: {
      cursor: "pointer",
      color: "var(--w-rjv-ellipsis-color, #cb4b16)",
      userSelect: "none"
    },
    className: "w-rjv-ellipsis",
    children: "..."
  },
  KeyName: {
    as: "span",
    className: "w-rjv-object-key"
  }
};
var Context5 = (0, import_react17.createContext)(initialState6);
var reducer5 = (state, action) => ({
  ...state,
  ...action
});
var useSectionStore = () => {
  return (0, import_react17.useContext)(Context5);
};
var DispatchSection = (0, import_react17.createContext)(() => {
});
DispatchSection.displayName = "JVR.DispatchSection";
function useSection() {
  return (0, import_react17.useReducer)(reducer5, initialState6);
}
function useSectionDispatch() {
  return (0, import_react17.useContext)(DispatchSection);
}
var Section = ({ initial, dispatch: dispatch2, children: children2 }) => {
  return /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(Context5.Provider, { value: initial, children: /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(DispatchSection.Provider, { value: dispatch2, children: children2 }) });
};
Section.displayName = "JVR.Section";

// src/external/react-json-view/store.tsx
var import_jsx_runtime14 = require("react/jsx-runtime");
var initialState7 = {
  objectSortKeys: false,
  indentWidth: 15
};
var Context6 = (0, import_react18.createContext)(initialState7);
Context6.displayName = "JVR.Context";
var DispatchContext = (0, import_react18.createContext)(() => {
});
DispatchContext.displayName = "JVR.DispatchContext";
function reducer6(state, action) {
  return {
    ...state,
    ...action
  };
}
var useStore = () => {
  return (0, import_react18.useContext)(Context6);
};
var Provider = ({
  children: children2,
  initialState: init2,
  initialTypes
}) => {
  const [state, dispatch2] = (0, import_react18.useReducer)(reducer6, Object.assign({}, initialState7, init2));
  const [showTools, showToolsDispatch] = useShowTools();
  const [expands, expandsDispatch] = useExpands();
  const [types, typesDispatch] = useTypes();
  const [symbols, symbolsDispatch] = useSymbols();
  const [section, sectionDispatch] = useSection();
  (0, import_react18.useEffect)(() => dispatch2({ ...init2 }), [init2]);
  return /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(Context6.Provider, { value: state, children: /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(DispatchContext.Provider, { value: dispatch2, children: /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(ShowTools, { initial: showTools, dispatch: showToolsDispatch, children: /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(Expands, { initial: expands, dispatch: expandsDispatch, children: /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(Types, { initial: { ...types, ...initialTypes }, dispatch: typesDispatch, children: /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(Symbols, { initial: symbols, dispatch: symbolsDispatch, children: /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(Section, { initial: section, dispatch: sectionDispatch, children: children2 }) }) }) }) }) }) });
};
Provider.displayName = "JVR.Provider";

// src/external/react-json-view/Container.tsx
var import_react24 = require("react");

// src/external/react-json-view/symbol/index.tsx
var import_jsx_runtime15 = require("react/jsx-runtime");
var Quote = (props) => {
  const { Quote: Comp = {} } = useSymbolsStore();
  const { isNumber, ...other } = props;
  if (isNumber)
    return null;
  const { as, render, ...reset } = Comp;
  const Elm = as || "span";
  const elmProps = { ...other, ...reset };
  const child = render && typeof render === "function" && render(elmProps);
  if (child)
    return child;
  return /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(Elm, { ...elmProps });
};
Quote.displayName = "JVR.Quote";
var ValueQuote = (props) => {
  const { ValueQuote: Comp = {} } = useSymbolsStore();
  const { ...other } = props;
  const { as, render, ...reset } = Comp;
  const Elm = as || "span";
  const elmProps = { ...other, ...reset };
  const child = render && typeof render === "function" && render(elmProps);
  if (child)
    return child;
  return /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(Elm, { ...elmProps });
};
ValueQuote.displayName = "JVR.ValueQuote";
var Colon = () => {
  const { Colon: Comp = {} } = useSymbolsStore();
  const { as, render, ...reset } = Comp;
  const Elm = as || "span";
  const child = render && typeof render === "function" && render(reset);
  if (child)
    return child;
  return /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(Elm, { ...reset });
};
Colon.displayName = "JVR.Colon";
var Arrow = (props) => {
  const { Arrow: Comp = {} } = useSymbolsStore();
  const expands = useExpandsStore();
  const { expandKey } = props;
  const isExpanded = !!expands[expandKey];
  const { as, style, render, ...reset } = Comp;
  const Elm = as || "span";
  const isRender = render && typeof render === "function";
  const child = isRender && render({ ...reset, "data-expanded": isExpanded, style: { ...style, ...props.style } });
  if (child)
    return child;
  return /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(Elm, { ...reset, style: { ...style, ...props.style } });
};
Arrow.displayName = "JVR.Arrow";
var BracketsOpen = ({ isBrackets }) => {
  const { BracketsLeft: BracketsLeft2 = {}, BraceLeft: BraceLeft2 = {} } = useSymbolsStore();
  if (isBrackets) {
    const { as, render: render2, ...reset } = BracketsLeft2;
    const BracketsLeftComp = as || "span";
    const child2 = render2 && typeof render2 === "function" && render2(reset);
    if (child2)
      return child2;
    return /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(BracketsLeftComp, { ...reset });
  }
  const { as: elm, render, ...props } = BraceLeft2;
  const BraceLeftComp = elm || "span";
  const child = render && typeof render === "function" && render(props);
  if (child)
    return child;
  return /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(BraceLeftComp, { ...props });
};
BracketsOpen.displayName = "JVR.BracketsOpen";
var BracketsClose = ({ isBrackets, isVisiable }) => {
  if (!isVisiable)
    return null;
  const { BracketsRight: BracketsRight2 = {}, BraceRight: BraceRight2 = {} } = useSymbolsStore();
  if (isBrackets) {
    const { as, render: render2, ...reset2 } = BracketsRight2;
    const BracketsRightComp = as || "span";
    const child2 = render2 && typeof render2 === "function" && render2(reset2);
    if (child2)
      return child2;
    return /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(BracketsRightComp, { ...reset2 });
  }
  const { as: elm, render, ...reset } = BraceRight2;
  const BraceRightComp = elm || "span";
  const child = render && typeof render === "function" && render(reset);
  if (child)
    return child;
  return /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(BraceRightComp, { ...reset });
};
BracketsClose.displayName = "JVR.BracketsClose";

// src/external/react-json-view/comps/NestedClose.tsx
var import_jsx_runtime16 = require("react/jsx-runtime");
var NestedClose = (props) => {
  const { value, expandKey, level } = props;
  const expands = useExpandsStore();
  const isArray = Array.isArray(value);
  const { collapsed } = useStore();
  const isMySet = value instanceof Set;
  const isExpanded = expands[expandKey] ?? (typeof collapsed === "boolean" ? collapsed : typeof collapsed === "number" ? level > collapsed : false);
  const len = Object.keys(value).length;
  if (isExpanded || len === 0) {
    return null;
  }
  const style = {
    paddingLeft: 4
  };
  return /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("div", { style, children: /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(BracketsClose, { isBrackets: isArray || isMySet, isVisiable: true }) });
};
NestedClose.displayName = "JVR.NestedClose";

// src/external/react-json-view/comps/KeyValues.tsx
var import_react23 = require("react");

// src/external/react-json-view/types/index.tsx
var import_react20 = require("react");

// src/external/react-json-view/comps/Copied.tsx
var import_react19 = require("react");
var import_jsx_runtime17 = require("react/jsx-runtime");
var Copied = (props) => {
  const { keyName, value, expandKey, ...other } = props;
  const { onCopied, enableClipboard } = useStore();
  const showTools = useShowToolsStore();
  const isShowTools = showTools[expandKey];
  const [copied, setCopied] = (0, import_react19.useState)(false);
  const { Copied: Comp = {} } = useSectionStore();
  if (enableClipboard === false || !isShowTools)
    return /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("div", { style: { display: "inline-block", height: "13px", width: "13px", marginLeft: "5px" }, children: "\xA0" });
  const click = (event) => {
    event.stopPropagation();
    let copyText = JSON.stringify(
      value,
      (key, value2) => {
        if (typeof value2 === "bigint") {
          return value2.toString();
        }
        return value2;
      },
      2
    );
    if (typeof value === "number" && value === Infinity)
      copyText = "Infinity";
    if (typeof value === "number" && isNaN(value))
      copyText = "NaN";
    if (typeof value === "bigint")
      copyText = value + "n";
    navigator.clipboard.writeText(copyText).then(() => {
      onCopied && onCopied(copyText, value);
      setCopied(true);
      const timer2 = setTimeout(() => {
        setCopied(false);
        clearTimeout(timer2);
      }, 3e3);
    }).catch((error) => {
    });
  };
  const svgProps = {
    fill: copied ? "var(--w-rjv-copied-success-color, #28a745)" : "var(--w-rjv-copied-color, currentColor)",
    onClick: click
  };
  const { as, render, ...reset } = Comp;
  const elmProps = { ...reset, ...other, ...svgProps };
  const isRender = render && typeof render === "function";
  const child = isRender && render({ ...elmProps, "data-copied": copied }, { value, keyName });
  if (child)
    return child;
  if (copied) {
    return /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("svg", { style: { display: "inline", height: "1em", width: "1em" }, viewBox: "0 0 32 36", ...elmProps, children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("path", { d: "M27.5,33 L2.5,33 L2.5,12.5 L27.5,12.5 L27.5,15.2249049 C29.1403264,13.8627542 29.9736597,13.1778155 30,13.1700887 C30,11.9705278 30,10.0804982 30,7.5 C30,6.1 28.9,5 27.5,5 L20,5 C20,2.2 17.8,0 15,0 C12.2,0 10,2.2 10,5 L2.5,5 C1.1,5 0,6.1 0,7.5 L0,33 C0,34.4 1.1,36 2.5,36 L27.5,36 C28.9,36 30,34.4 30,33 L30,26.1114493 L27.5,28.4926435 L27.5,33 Z M7.5,7.5 L10,7.5 C10,7.5 12.5,6.4 12.5,5 C12.5,3.6 13.6,2.5 15,2.5 C16.4,2.5 17.5,3.6 17.5,5 C17.5,6.4 18.8,7.5 20,7.5 L22.5,7.5 C22.5,7.5 25,8.6 25,10 L5,10 C5,8.5 6.1,7.5 7.5,7.5 Z M5,27.5 L10,27.5 L10,25 L5,25 L5,27.5 Z M28.5589286,16 L32,19.6 L21.0160714,30.5382252 L13.5303571,24.2571429 L17.1303571,20.6571429 L21.0160714,24.5428571 L28.5589286,16 Z M17.5,15 L5,15 L5,17.5 L17.5,17.5 L17.5,15 Z M10,20 L5,20 L5,22.5 L10,22.5 L10,20 Z" }) });
  }
  return /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("svg", { style: { display: "inline", height: "1em", width: "1em" }, viewBox: "0 0 32 36", ...elmProps, children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("path", { d: "M27.5,33 L2.5,33 L2.5,12.5 L27.5,12.5 L27.5,20 L30,20 L30,7.5 C30,6.1 28.9,5 27.5,5 L20,5 C20,2.2 17.8,0 15,0 C12.2,0 10,2.2 10,5 L2.5,5 C1.1,5 0,6.1 0,7.5 L0,33 C0,34.4 1.1,36 2.5,36 L27.5,36 C28.9,36 30,34.4 30,33 L30,29 L27.5,29 L27.5,33 Z M7.5,7.5 L10,7.5 C10,7.5 12.5,6.4 12.5,5 C12.5,3.6 13.6,2.5 15,2.5 C16.4,2.5 17.5,3.6 17.5,5 C17.5,6.4 18.8,7.5 20,7.5 L22.5,7.5 C22.5,7.5 25,8.6 25,10 L5,10 C5,8.5 6.1,7.5 7.5,7.5 Z M5,27.5 L10,27.5 L10,25 L5,25 L5,27.5 Z M22.5,21.5 L22.5,16.5 L12.5,24 L22.5,31.5 L22.5,26.5 L32,26.5 L32,21.5 L22.5,21.5 Z M17.5,15 L5,15 L5,17.5 L17.5,17.5 L17.5,15 Z M10,20 L5,20 L5,22.5 L10,22.5 L10,20 Z" }) });
};
Copied.displayName = "JVR.Copied";

// src/external/react-json-view/types/index.tsx
var import_jsx_runtime18 = require("react/jsx-runtime");
var SetComp = ({ value }) => {
  const { Set: Comp = {}, displayDataTypes } = useTypesStore();
  const isSet = value instanceof Set;
  if (!isSet || !displayDataTypes)
    return null;
  const { as, render, ...reset } = Comp;
  const isRender = render && typeof render === "function";
  const type = isRender && render(reset, { type: "type", value });
  if (type)
    return type;
  const Elm = as || "span";
  return /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Elm, { ...reset });
};
SetComp.displayName = "JVR.SetComp";
var MapComp = ({ value }) => {
  const { Map: Comp = {}, displayDataTypes } = useTypesStore();
  const isMap = value instanceof Map;
  if (!isMap || !displayDataTypes)
    return null;
  const { as, render, ...reset } = Comp;
  const isRender = render && typeof render === "function";
  const type = isRender && render(reset, { type: "type", value });
  if (type)
    return type;
  const Elm = as || "span";
  return /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Elm, { ...reset });
};
MapComp.displayName = "JVR.MapComp";
var defalutStyle = {
  opacity: 0.75,
  paddingRight: 4
};
var TypeString = ({ children: children2 = "", expandKey, keyName }) => {
  const { Str = {}, displayDataTypes } = useTypesStore();
  const { shortenTextAfterLength: length = 30 } = useStore();
  const { as, render, ...reset } = Str;
  const childrenStr = children2;
  const [shorten, setShorten] = (0, import_react20.useState)(length && childrenStr.length >= length);
  const Comp = as || "span";
  const style = {
    ...defalutStyle,
    ...Str.style || {}
  };
  if (length > 0) {
    reset.style = {
      ...reset.style,
      cursor: childrenStr.length <= length ? "initial" : "pointer"
    };
    if (childrenStr.length > length) {
      reset.onClick = () => {
        setShorten(!shorten);
      };
    }
  }
  const text = shorten ? `${childrenStr.slice(0, length)}...` : childrenStr;
  const isRender = render && typeof render === "function";
  const type = isRender && render({ ...reset, style }, { type: "type", value: children2 });
  const child = isRender && render({ ...reset, children: text, className: "w-rjv-value" }, { type: "value", value: children2 });
  return /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)(import_react20.Fragment, { children: [
    displayDataTypes && (type || /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Comp, { ...reset, style })),
    child || /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)(import_react20.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(ValueQuote, {}),
      /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Comp, { ...reset, className: "w-rjv-value", children: text }),
      /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(ValueQuote, {})
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Copied, { keyName, value: children2, expandKey })
  ] });
};
TypeString.displayName = "JVR.TypeString";
var TypeTrue = ({ children: children2, expandKey, keyName }) => {
  const { True: True2 = {}, displayDataTypes } = useTypesStore();
  const { as, render, ...reset } = True2;
  const Comp = as || "span";
  const style = {
    ...defalutStyle,
    ...True2.style || {}
  };
  const isRender = render && typeof render === "function";
  const type = isRender && render({ ...reset, style }, { type: "type", value: children2 });
  const child = isRender && render({ ...reset, children: children2, className: "w-rjv-value" }, { type: "value", value: children2 });
  return /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)(import_react20.Fragment, { children: [
    displayDataTypes && (type || /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Comp, { ...reset, style })),
    child || /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Comp, { ...reset, className: "w-rjv-value", children: children2?.toString() }),
    /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Copied, { keyName, value: children2, expandKey })
  ] });
};
TypeTrue.displayName = "JVR.TypeTrue";
var TypeFalse = ({ children: children2, expandKey, keyName }) => {
  const { False: False2 = {}, displayDataTypes } = useTypesStore();
  const { as, render, ...reset } = False2;
  const Comp = as || "span";
  const style = {
    ...defalutStyle,
    ...False2.style || {}
  };
  const isRender = render && typeof render === "function";
  const type = isRender && render({ ...reset, style }, { type: "type", value: children2 });
  const child = isRender && render({ ...reset, children: children2, className: "w-rjv-value" }, { type: "value", value: children2 });
  return /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)(import_react20.Fragment, { children: [
    displayDataTypes && (type || /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Comp, { ...reset, style })),
    child || /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Comp, { ...reset, className: "w-rjv-value", children: children2?.toString() }),
    /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Copied, { keyName, value: children2, expandKey })
  ] });
};
TypeFalse.displayName = "JVR.TypeFalse";
var TypeFloat = ({ children: children2, expandKey, keyName }) => {
  const { Float: Float2 = {}, displayDataTypes } = useTypesStore();
  const { as, render, ...reset } = Float2;
  const Comp = as || "span";
  const style = {
    ...defalutStyle,
    ...Float2.style || {}
  };
  const isRender = render && typeof render === "function";
  const type = isRender && render({ ...reset, style }, { type: "type", value: children2 });
  const child = isRender && render({ ...reset, children: children2, className: "w-rjv-value" }, { type: "value", value: children2 });
  return /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)(import_react20.Fragment, { children: [
    displayDataTypes && (type || /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Comp, { ...reset, style })),
    child || /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Comp, { ...reset, className: "w-rjv-value", children: children2?.toString() }),
    /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Copied, { keyName, value: children2, expandKey })
  ] });
};
TypeFloat.displayName = "JVR.TypeFloat";
var TypeInt = ({ children: children2, expandKey, keyName }) => {
  const { Int: Int2 = {}, displayDataTypes } = useTypesStore();
  const { as, render, ...reset } = Int2;
  const Comp = as || "span";
  const style = {
    ...defalutStyle,
    ...Int2.style || {}
  };
  const isRender = render && typeof render === "function";
  const type = isRender && render({ ...reset, style }, { type: "type", value: children2 });
  const child = isRender && render({ ...reset, children: children2, className: "w-rjv-value" }, { type: "value", value: children2 });
  return /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)(import_react20.Fragment, { children: [
    displayDataTypes && (type || /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Comp, { ...reset, style })),
    child || /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Comp, { ...reset, className: "w-rjv-value", children: children2?.toString() }),
    /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Copied, { keyName, value: children2, expandKey })
  ] });
};
TypeInt.displayName = "JVR.TypeInt";
var TypeBigint = ({
  children: children2,
  expandKey,
  keyName
}) => {
  const { Bigint: CompBigint = {}, displayDataTypes } = useTypesStore();
  const { as, render, ...reset } = CompBigint;
  const Comp = as || "span";
  const style = {
    ...defalutStyle,
    ...CompBigint.style || {}
  };
  const isRender = render && typeof render === "function";
  const type = isRender && render({ ...reset, style }, { type: "type", value: children2 });
  const child = isRender && render({ ...reset, children: children2, className: "w-rjv-value" }, { type: "value", value: children2 });
  return /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)(import_react20.Fragment, { children: [
    displayDataTypes && (type || /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Comp, { ...reset, style })),
    child || /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Comp, { ...reset, className: "w-rjv-value", children: children2?.toString() + "n" }),
    /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Copied, { keyName, value: children2, expandKey })
  ] });
};
TypeBigint.displayName = "JVR.TypeFloat";
var TypeUrl = ({ children: children2, expandKey, keyName }) => {
  const { Url: Url2 = {}, displayDataTypes } = useTypesStore();
  const { as, render, ...reset } = Url2;
  const Comp = as || "span";
  const style = {
    ...defalutStyle,
    ...Url2.style
  };
  const isRender = render && typeof render === "function";
  const type = isRender && render({ ...reset, style }, { type: "type", value: children2 });
  const child = isRender && render({ ...reset, children: children2?.href, className: "w-rjv-value" }, { type: "value", value: children2 });
  return /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)(import_react20.Fragment, { children: [
    displayDataTypes && (type || /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Comp, { ...reset, style })),
    child || /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("a", { href: children2?.href, target: "_blank", ...reset, className: "w-rjv-value", children: [
      /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(ValueQuote, {}),
      children2?.href,
      /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(ValueQuote, {})
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Copied, { keyName, value: children2, expandKey })
  ] });
};
TypeUrl.displayName = "JVR.TypeUrl";
var TypeDate = ({ children: children2, expandKey, keyName }) => {
  const { Date: CompData = {}, displayDataTypes } = useTypesStore();
  const { as, render, ...reset } = CompData;
  const Comp = as || "span";
  const style = {
    ...defalutStyle,
    ...CompData.style || {}
  };
  const isRender = render && typeof render === "function";
  const type = isRender && render({ ...reset, style }, { type: "type", value: children2 });
  const childStr = children2?.toString();
  const child = isRender && render({ ...reset, children: childStr, className: "w-rjv-value" }, { type: "value", value: children2 });
  return /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)(import_react20.Fragment, { children: [
    displayDataTypes && (type || /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Comp, { ...reset, style })),
    child || /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Comp, { ...reset, className: "w-rjv-value", children: childStr }),
    /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Copied, { keyName, value: children2, expandKey })
  ] });
};
TypeDate.displayName = "JVR.TypeDate";
var TypeUndefined = ({ children: children2, expandKey, keyName }) => {
  const { Undefined: Undefined2 = {}, displayDataTypes } = useTypesStore();
  const { as, render, ...reset } = Undefined2;
  const Comp = as || "span";
  const style = {
    ...defalutStyle,
    ...Undefined2.style || {}
  };
  const isRender = render && typeof render === "function";
  const type = isRender && render({ ...reset, style }, { type: "type", value: children2 });
  const child = isRender && render({ ...reset, children: children2, className: "w-rjv-value" }, { type: "value", value: children2 });
  return /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)(import_react20.Fragment, { children: [
    displayDataTypes && (type || /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Comp, { ...reset, style })),
    child,
    /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Copied, { keyName, value: children2, expandKey })
  ] });
};
TypeUndefined.displayName = "JVR.TypeUndefined";
var TypeNull = ({ children: children2, expandKey, keyName }) => {
  const { Null: Null2 = {}, displayDataTypes } = useTypesStore();
  const { as, render, ...reset } = Null2;
  const Comp = as || "span";
  const style = {
    ...defalutStyle,
    ...Null2.style || {}
  };
  const isRender = render && typeof render === "function";
  const type = isRender && render({ ...reset, style }, { type: "type", value: children2 });
  const child = isRender && render({ ...reset, children: children2, className: "w-rjv-value" }, { type: "value", value: children2 });
  return /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)(import_react20.Fragment, { children: [
    displayDataTypes && (type || /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Comp, { ...reset, style })),
    child,
    /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Copied, { keyName, value: children2, expandKey })
  ] });
};
TypeNull.displayName = "JVR.TypeNull";
var TypeNan = ({ children: children2, expandKey, keyName }) => {
  const { Nan: Nan2 = {}, displayDataTypes } = useTypesStore();
  const { as, render, ...reset } = Nan2;
  const Comp = as || "span";
  const style = {
    ...defalutStyle,
    ...Nan2.style || {}
  };
  const isRender = render && typeof render === "function";
  const type = isRender && render({ ...reset, style }, { type: "type", value: children2 });
  const child = isRender && render({ ...reset, children: children2?.toString(), className: "w-rjv-value" }, { type: "value", value: children2 });
  return /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)(import_react20.Fragment, { children: [
    displayDataTypes && (type || /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Comp, { ...reset, style })),
    child,
    /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Copied, { keyName, value: children2, expandKey })
  ] });
};
TypeNan.displayName = "JVR.TypeNan";

// src/external/react-json-view/comps/Value.tsx
var import_jsx_runtime19 = require("react/jsx-runtime");
var isFloat = (n) => Number(n) === n && n % 1 !== 0 || isNaN(n);
var Value = (props) => {
  const { value, keyName, expandKey } = props;
  const reset = { keyName, expandKey };
  if (value instanceof URL) {
    return /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(TypeUrl, { ...reset, children: value });
  }
  if (typeof value === "string") {
    return /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(TypeString, { ...reset, children: value });
  }
  if (value === true) {
    return /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(TypeTrue, { ...reset, children: value });
  }
  if (value === false) {
    return /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(TypeFalse, { ...reset, children: value });
  }
  if (value === null) {
    return /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(TypeNull, { ...reset, children: value });
  }
  if (value === void 0) {
    return /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(TypeUndefined, { ...reset, children: value });
  }
  if (value instanceof Date) {
    return /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(TypeDate, { ...reset, children: value });
  }
  if (typeof value === "number" && isNaN(value)) {
    return /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(TypeNan, { ...reset, children: value });
  } else if (typeof value === "number" && isFloat(value)) {
    return /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(TypeFloat, { ...reset, children: value });
  } else if (typeof value === "bigint") {
    return /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(TypeBigint, { ...reset, children: value });
  } else if (typeof value === "number") {
    return /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(TypeInt, { ...reset, children: value });
  }
  return null;
};
Value.displayName = "JVR.Value";

// src/external/react-json-view/utils/useRender.tsx
var import_react21 = require("react");
function useSymbolsRender(currentProps, props, key) {
  const dispatch2 = useSymbolsDispatch();
  const cls = [currentProps.className, props.className].filter(Boolean).join(" ");
  const reset = {
    ...currentProps,
    ...props,
    className: cls,
    style: {
      ...currentProps.style,
      ...props.style
    },
    children: props.children || currentProps.children
  };
  (0, import_react21.useEffect)(() => dispatch2({ [key]: reset }), [props]);
}
function useTypesRender(currentProps, props, key) {
  const dispatch2 = useTypesDispatch();
  const cls = [currentProps.className, props.className].filter(Boolean).join(" ");
  const reset = {
    ...currentProps,
    ...props,
    className: cls,
    style: {
      ...currentProps.style,
      ...props.style
    },
    children: props.children || currentProps.children
  };
  (0, import_react21.useEffect)(() => dispatch2({ [key]: reset }), [props]);
}
function useSectionRender(currentProps, props, key) {
  const dispatch2 = useSectionDispatch();
  const cls = [currentProps.className, props.className].filter(Boolean).join(" ");
  const reset = {
    ...currentProps,
    ...props,
    className: cls,
    style: {
      ...currentProps.style,
      ...props.style
    },
    children: props.children || currentProps.children
  };
  (0, import_react21.useEffect)(() => dispatch2({ [key]: reset }), [props]);
}

// src/external/react-json-view/section/KeyName.tsx
var import_jsx_runtime20 = require("react/jsx-runtime");
var KeyName = (props) => {
  const { KeyName: Comp = {} } = useSectionStore();
  useSectionRender(Comp, props, "KeyName");
  return null;
};
KeyName.displayName = "JVR.KeyName";
var KeyNameComp = (props) => {
  const { children: children2, value, keyName } = props;
  const isNumber = typeof children2 === "number";
  const style = {
    color: isNumber ? "var(--w-rjv-key-number, #268bd2)" : "var(--w-rjv-key-string, #002b36)"
  };
  const { KeyName: Comp = {} } = useSectionStore();
  const { as, render, ...reset } = Comp;
  reset.style = { ...reset.style, ...style };
  const Elm = as || "span";
  const child = render && typeof render === "function" && render({ ...reset, children: children2 }, { value, keyName });
  if (child)
    return child;
  return /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(Elm, { ...reset, children: children2 });
};
KeyNameComp.displayName = "JVR.KeyNameComp";

// src/external/react-json-view/utils/useHighlight.tsx
var import_react22 = require("react");
function usePrevious(value) {
  const ref = (0, import_react22.useRef)();
  (0, import_react22.useEffect)(() => {
    ref.current = value;
  });
  return ref.current;
}
function useHighlight({ value, highlightUpdates, highlightContainer }) {
  const prevValue = usePrevious(value);
  const isHighlight = (0, import_react22.useMemo)(() => {
    if (!highlightUpdates || prevValue === void 0)
      return false;
    if (typeof value !== typeof prevValue) {
      return true;
    }
    if (typeof value === "number") {
      if (isNaN(value) && isNaN(prevValue))
        return false;
      return value !== prevValue;
    }
    if (Array.isArray(value) !== Array.isArray(prevValue)) {
      return true;
    }
    if (typeof value === "object" || typeof value === "function") {
      return false;
    }
    if (value !== prevValue) {
      return true;
    }
  }, [highlightUpdates, value]);
  (0, import_react22.useEffect)(() => {
    if (highlightContainer && highlightContainer.current && isHighlight && "animate" in highlightContainer.current) {
      highlightContainer.current.animate(
        [{ backgroundColor: "var(--w-rjv-update-color, #ebcb8b)" }, { backgroundColor: "" }],
        {
          duration: 1e3,
          easing: "ease-in"
        }
      );
    }
  }, [isHighlight, value, highlightContainer]);
}

// src/external/react-json-view/comps/KeyValues.tsx
var import_jsx_runtime21 = require("react/jsx-runtime");
var KeyValues = (props) => {
  const { value, expandKey = "", level } = props;
  const expands = useExpandsStore();
  const { objectSortKeys, indentWidth, collapsed } = useStore();
  const isMyArray = Array.isArray(value);
  const isExpanded = expands[expandKey] ?? (typeof collapsed === "boolean" ? collapsed : typeof collapsed === "number" ? level > collapsed : false);
  if (isExpanded) {
    return null;
  }
  let entries = isMyArray ? Object.entries(value).map((m) => [Number(m[0]), m[1]]) : Object.entries(value);
  if (objectSortKeys) {
    entries = objectSortKeys === true ? entries.sort(([a], [b]) => typeof a === "string" && typeof b === "string" ? a.localeCompare(b) : 0) : entries.sort(
      ([a, valA], [b, valB]) => typeof a === "string" && typeof b === "string" ? objectSortKeys(a, b, valA, valB) : 0
    );
  }
  const style = {
    borderLeft: "var(--w-rjv-border-left-width, 1px) var(--w-rjv-line-style, solid) var(--w-rjv-line-color, #ebebeb)",
    paddingLeft: indentWidth,
    marginLeft: 6
  };
  return /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("div", { className: "w-rjv-wrap", style, children: entries.map(([key, val], idx) => {
    return /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(KeyValuesItem, { parentValue: value, keyName: key, value: val, level }, idx);
  }) });
};
KeyValues.displayName = "JVR.KeyValues";
var KayName = (props) => {
  const { keyName, value } = props;
  const { highlightUpdates } = useStore();
  const isNumber = typeof keyName === "number";
  const highlightContainer = (0, import_react23.useRef)(null);
  useHighlight({ value, highlightUpdates, highlightContainer });
  return /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)(import_react23.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("span", { ref: highlightContainer, children: [
      /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(Quote, { isNumber, "data-placement": "left" }),
      /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(KeyNameComp, { keyName, value, children: keyName }),
      /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(Quote, { isNumber, "data-placement": "right" })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(Colon, {})
  ] });
};
KayName.displayName = "JVR.KayName";
var KeyValuesItem = (props) => {
  const { keyName, value, parentValue, level = 0 } = props;
  const dispatch2 = useShowToolsDispatch();
  const subkeyid = (0, import_react23.useId)();
  const isMyArray = Array.isArray(value);
  const isMySet = value instanceof Set;
  const isMyMap = value instanceof Map;
  const isDate = value instanceof Date;
  const isUrl = value instanceof URL;
  const isMyObject = value && typeof value === "object" && !isMyArray && !isMySet && !isMyMap && !isDate && !isUrl;
  const isNested = isMyObject || isMyArray || isMySet || isMyMap;
  if (isNested) {
    const myValue = isMySet ? Array.from(value) : isMyMap ? Object.fromEntries(value) : value;
    return /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(Container, { keyName, value: myValue, parentValue, initialValue: value, level: level + 1 });
  }
  const reset = {
    onMouseEnter: () => dispatch2({ [subkeyid]: true }),
    onMouseLeave: () => dispatch2({ [subkeyid]: false })
  };
  return /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("div", { className: "w-rjv-line", ...reset, children: [
    /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(KayName, { keyName, value }),
    /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(Value, { keyName, value, expandKey: subkeyid })
  ] });
};
KeyValuesItem.displayName = "JVR.KeyValuesItem";

// src/external/react-json-view/section/CountInfoExtra.tsx
var import_jsx_runtime22 = require("react/jsx-runtime");
var CountInfoExtra = (props) => {
  const { CountInfoExtra: Comp = {} } = useSectionStore();
  useSectionRender(Comp, props, "CountInfoExtra");
  return null;
};
CountInfoExtra.displayName = "JVR.CountInfoExtra";
var CountInfoExtraComps = (props) => {
  const { value = {}, keyName, ...other } = props;
  const { CountInfoExtra: Comp = {} } = useSectionStore();
  const { as, render, ...reset } = Comp;
  if (!render && !reset.children)
    return null;
  const Elm = as || "span";
  const isRender = render && typeof render === "function";
  const elmProps = { ...reset, ...other };
  const child = isRender && render(elmProps, { value, keyName });
  if (child)
    return child;
  return /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(Elm, { ...elmProps });
};
CountInfoExtraComps.displayName = "JVR.CountInfoExtraComps";

// src/external/react-json-view/section/CountInfo.tsx
var import_jsx_runtime23 = require("react/jsx-runtime");
var CountInfo = (props) => {
  const { CountInfo: Comp = {} } = useSectionStore();
  useSectionRender(Comp, props, "CountInfo");
  return null;
};
CountInfo.displayName = "JVR.CountInfo";
var CountInfoComp = (props) => {
  const { value = {}, keyName, ...other } = props;
  const { displayObjectSize } = useStore();
  const { CountInfo: Comp = {} } = useSectionStore();
  if (!displayObjectSize)
    return null;
  const { as, render, ...reset } = Comp;
  const Elm = as || "span";
  reset.style = { ...reset.style, ...props.style };
  const len = Object.keys(value).length;
  if (!reset.children) {
    reset.children = `${len} items`;
  }
  const elmProps = { ...reset, ...other };
  const isRender = render && typeof render === "function";
  const child = isRender && render({ ...elmProps, "data-length": len }, { value, keyName });
  if (child)
    return child;
  return /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(Elm, { ...elmProps });
};
CountInfoComp.displayName = "JVR.CountInfoComp";

// src/external/react-json-view/section/Ellipsis.tsx
var import_jsx_runtime24 = require("react/jsx-runtime");
var Ellipsis = (props) => {
  const { Ellipsis: Comp = {} } = useSectionStore();
  useSectionRender(Comp, props, "Ellipsis");
  return null;
};
Ellipsis.displayName = "JVR.Ellipsis";
var EllipsisComp = ({ isExpanded, value, keyName }) => {
  const { Ellipsis: Comp = {} } = useSectionStore();
  const { as, render, ...reset } = Comp;
  const Elm = as || "span";
  const child = render && typeof render === "function" && render({ ...reset, "data-expanded": isExpanded }, { value, keyName });
  if (child)
    return child;
  if (!isExpanded)
    return null;
  return /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(Elm, { ...reset });
};
EllipsisComp.displayName = "JVR.EllipsisComp";

// src/external/react-json-view/comps/NestedOpen.tsx
var import_jsx_runtime25 = require("react/jsx-runtime");
var NestedOpen = (props) => {
  const { keyName, expandKey, initialValue, value, level } = props;
  const expands = useExpandsStore();
  const dispatchExpands = useExpandsDispatch();
  const { onExpand, collapsed } = useStore();
  const isArray = Array.isArray(value);
  const isMySet = value instanceof Set;
  const isExpanded = expands[expandKey] ?? (typeof collapsed === "boolean" ? collapsed : typeof collapsed === "number" ? level > collapsed : false);
  const isObject = typeof value === "object";
  const click = () => {
    const opt = { expand: !isExpanded, value, keyid: expandKey, keyName };
    onExpand && onExpand(opt);
    dispatchExpands({ [expandKey]: opt.expand });
  };
  const style = { display: "inline-flex", alignItems: "center" };
  const arrowStyle = { transform: `rotate(${!isExpanded ? "0" : "-90"}deg)`, transition: "all 0.3s" };
  const len = Object.keys(value).length;
  const showArrow = len !== 0 && (isArray || isMySet || isObject);
  const reset = { style };
  if (showArrow) {
    reset.onClick = click;
  }
  return /* @__PURE__ */ (0, import_jsx_runtime25.jsxs)("span", { ...reset, children: [
    showArrow && /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(Arrow, { style: arrowStyle, expandKey }),
    (keyName || typeof keyName === "number") && /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(KayName, { keyName }),
    /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(SetComp, { value: initialValue }),
    /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(MapComp, { value: initialValue }),
    /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(BracketsOpen, { isBrackets: isArray || isMySet }),
    /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(EllipsisComp, { keyName, value, isExpanded }),
    /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(BracketsClose, { isVisiable: isExpanded || !showArrow, isBrackets: isArray || isMySet }),
    /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(CountInfoComp, { value, keyName }),
    /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(CountInfoExtraComps, { value, keyName }),
    /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(Copied, { keyName, value, expandKey })
  ] });
};
NestedOpen.displayName = "JVR.NestedOpen";

// src/external/react-json-view/Container.tsx
var import_jsx_runtime26 = require("react/jsx-runtime");
var Container = (0, import_react24.forwardRef)((props, ref) => {
  const { className = "", children: children2, parentValue, keyid, level = 1, value, initialValue, keyName, ...elmProps } = props;
  const dispatch2 = useShowToolsDispatch();
  const subkeyid = (0, import_react24.useId)();
  const defaultClassNames = [className, "w-rjv-inner"].filter(Boolean).join(" ");
  const reset = {
    onMouseEnter: () => dispatch2({ [subkeyid]: true }),
    onMouseLeave: () => dispatch2({ [subkeyid]: false })
  };
  return /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("div", { className: defaultClassNames, ref, ...elmProps, ...reset, children: [
    /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(NestedOpen, { expandKey: subkeyid, value, level, keyName, initialValue }),
    /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(KeyValues, { expandKey: subkeyid, value, level }),
    /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(NestedClose, { expandKey: subkeyid, value, level })
  ] });
});
Container.displayName = "JVR.Container";

// src/external/react-json-view/symbol/BraceLeft.tsx
var BraceLeft = (props) => {
  const { BraceLeft: Comp = {} } = useSymbolsStore();
  useSymbolsRender(Comp, props, "BraceLeft");
  return null;
};
BraceLeft.displayName = "JVR.BraceLeft";

// src/external/react-json-view/symbol/BraceRight.tsx
var BraceRight = (props) => {
  const { BraceRight: Comp = {} } = useSymbolsStore();
  useSymbolsRender(Comp, props, "BraceRight");
  return null;
};
BraceRight.displayName = "JVR.BraceRight";

// src/external/react-json-view/symbol/BracketsLeft.tsx
var BracketsLeft = (props) => {
  const { BracketsLeft: Comp = {} } = useSymbolsStore();
  useSymbolsRender(Comp, props, "BracketsLeft");
  return null;
};
BracketsLeft.displayName = "JVR.BracketsLeft";

// src/external/react-json-view/symbol/BracketsRight.tsx
var BracketsRight = (props) => {
  const { BracketsRight: Comp = {} } = useSymbolsStore();
  useSymbolsRender(Comp, props, "BracketsRight");
  return null;
};
BracketsRight.displayName = "JVR.BracketsRight";

// src/external/react-json-view/symbol/Arrow.tsx
var Arrow2 = (props) => {
  const { Arrow: Comp = {} } = useSymbolsStore();
  useSymbolsRender(Comp, props, "Arrow");
  return null;
};
Arrow2.displayName = "JVR.Arrow";

// src/external/react-json-view/symbol/Colon.tsx
var Colon2 = (props) => {
  const { Colon: Comp = {} } = useSymbolsStore();
  useSymbolsRender(Comp, props, "Colon");
  return null;
};
Colon2.displayName = "JVR.Colon";

// src/external/react-json-view/symbol/Quote.tsx
var Quote2 = (props) => {
  const { Quote: Comp = {} } = useSymbolsStore();
  useSymbolsRender(Comp, props, "Quote");
  return null;
};
Quote2.displayName = "JVR.Quote";

// src/external/react-json-view/symbol/ValueQuote.tsx
var ValueQuote2 = (props) => {
  const { ValueQuote: Comp = {} } = useSymbolsStore();
  useSymbolsRender(Comp, props, "ValueQuote");
  return null;
};
ValueQuote2.displayName = "JVR.ValueQuote";

// src/external/react-json-view/types/Bigint.tsx
var Bigint = (props) => {
  const { Bigint: Comp = {} } = useTypesStore();
  useTypesRender(Comp, props, "Bigint");
  return null;
};
Bigint.displayName = "JVR.Bigint";

// src/external/react-json-view/types/Date.tsx
var Date2 = (props) => {
  const { Date: Comp = {} } = useTypesStore();
  useTypesRender(Comp, props, "Date");
  return null;
};
Date2.displayName = "JVR.Date";

// src/external/react-json-view/types/False.tsx
var False = (props) => {
  const { False: Comp = {} } = useTypesStore();
  useTypesRender(Comp, props, "False");
  return null;
};
False.displayName = "JVR.False";

// src/external/react-json-view/types/Float.tsx
var Float = (props) => {
  const { Float: Comp = {} } = useTypesStore();
  useTypesRender(Comp, props, "Float");
  return null;
};
Float.displayName = "JVR.Float";

// src/external/react-json-view/types/Int.tsx
var Int = (props) => {
  const { Int: Comp = {} } = useTypesStore();
  useTypesRender(Comp, props, "Int");
  return null;
};
Int.displayName = "JVR.Int";

// src/external/react-json-view/types/Map.tsx
var Map2 = (props) => {
  const { Map: Comp = {} } = useTypesStore();
  useTypesRender(Comp, props, "Map");
  return null;
};
Map2.displayName = "JVR.Map";

// src/external/react-json-view/types/Nan.tsx
var Nan = (props) => {
  const { Nan: Comp = {} } = useTypesStore();
  useTypesRender(Comp, props, "Nan");
  return null;
};
Nan.displayName = "JVR.Nan";

// src/external/react-json-view/types/Null.tsx
var Null = (props) => {
  const { Null: Comp = {} } = useTypesStore();
  useTypesRender(Comp, props, "Null");
  return null;
};
Null.displayName = "JVR.Null";

// src/external/react-json-view/types/Set.tsx
var Set2 = (props) => {
  const { Set: Comp = {} } = useTypesStore();
  useTypesRender(Comp, props, "Set");
  return null;
};
Set2.displayName = "JVR.Set";

// src/external/react-json-view/types/String.tsx
var StringText = (props) => {
  const { Str: Comp = {} } = useTypesStore();
  useTypesRender(Comp, props, "Str");
  return null;
};
StringText.displayName = "JVR.StringText";

// src/external/react-json-view/types/True.tsx
var True = (props) => {
  const { True: Comp = {} } = useTypesStore();
  useTypesRender(Comp, props, "True");
  return null;
};
True.displayName = "JVR.True";

// src/external/react-json-view/types/Undefined.tsx
var Undefined = (props) => {
  const { Undefined: Comp = {} } = useTypesStore();
  useTypesRender(Comp, props, "Undefined");
  return null;
};
Undefined.displayName = "JVR.Undefined";

// src/external/react-json-view/types/Url.tsx
var Url = (props) => {
  const { Url: Comp = {} } = useTypesStore();
  useTypesRender(Comp, props, "Url");
  return null;
};
Url.displayName = "JVR.Url";

// src/external/react-json-view/section/Copied.tsx
var Copied2 = (props) => {
  const { Copied: Comp = {} } = useSectionStore();
  useSectionRender(Comp, props, "Copied");
  return null;
};
Copied2.displayName = "JVR.Copied";

// src/external/react-json-view/index.tsx
var import_jsx_runtime27 = require("react/jsx-runtime");
var JsonView = (0, import_react25.forwardRef)((props, ref) => {
  const {
    className = "",
    style,
    value,
    children: children2,
    collapsed,
    indentWidth = 15,
    displayObjectSize = true,
    shortenTextAfterLength = 20,
    highlightUpdates = true,
    enableClipboard = true,
    displayDataTypes = true,
    objectSortKeys = false,
    onExpand,
    ...elmProps
  } = props;
  const defaultStyle = {
    lineHeight: 1.4,
    fontFamily: "var(--w-rjv-font-family, Menlo, monospace)",
    color: "var(--w-rjv-color, #002b36)",
    backgroundColor: "var(--w-rjv-background-color, #00000000)",
    fontSize: 14,
    ...style
  };
  const cls = ["w-json-view-container", "w-rjv", className].filter(Boolean).join(" ");
  return /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)(
    Provider,
    {
      initialState: {
        value,
        objectSortKeys,
        indentWidth,
        displayObjectSize,
        collapsed,
        enableClipboard,
        shortenTextAfterLength,
        highlightUpdates,
        onExpand
      },
      initialTypes: { displayDataTypes },
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(Container, { value, ...elmProps, ref, className: cls, style: defaultStyle }),
        children2
      ]
    }
  );
});
JsonView.Bigint = Bigint;
JsonView.Date = Date2;
JsonView.False = False;
JsonView.Float = Float;
JsonView.Int = Int;
JsonView.Map = Map2;
JsonView.Nan = Nan;
JsonView.Null = Null;
JsonView.Set = Set2;
JsonView.String = StringText;
JsonView.True = True;
JsonView.Undefined = Undefined;
JsonView.Url = Url;
JsonView.ValueQuote = ValueQuote2;
JsonView.Arrow = Arrow2;
JsonView.Colon = Colon2;
JsonView.Quote = Quote2;
JsonView.Ellipsis = Ellipsis;
JsonView.BraceLeft = BraceLeft;
JsonView.BraceRight = BraceRight;
JsonView.BracketsLeft = BracketsLeft;
JsonView.BracketsRight = BracketsRight;
JsonView.Copied = Copied2;
JsonView.CountInfo = CountInfo;
JsonView.CountInfoExtra = CountInfoExtra;
JsonView.KeyName = KeyName;
JsonView.displayName = "JVR.JsonView";
var react_json_view_default = JsonView;

// src/external/react-json-view/theme/custom.tsx
var customTheme = {
  "--w-rjv-font-family": "monospace",
  "--w-rjv-color": "#E7E5E4",
  "--w-rjv-key-string": "#fff",
  "--w-rjv-background-color": "#2e3440",
  "--w-rjv-line-color": "#4c566a",
  "--w-rjv-arrow-color": "var(--w-rjv-color)",
  "--w-rjv-edit-color": "var(--w-rjv-color)",
  "--w-rjv-info-color": "#60A5FA",
  "--w-rjv-update-color": "#88c0cf75",
  "--w-rjv-copied-color": "#119cc0",
  "--w-rjv-copied-success-color": "#28a745",
  "--w-rjv-curlybraces-color": "#E7E5E4",
  "--w-rjv-colon-color": "#E7E5E4",
  "--w-rjv-brackets-color": "#E7E5E4",
  "--w-rjv-quotes-color": "var(--w-rjv-key-string)",
  "--w-rjv-quotes-string-color": "var(--w-rjv-type-string-color)",
  "--w-rjv-ellipsis-color": "var(--w-rjv-color)",
  "--w-rjv-type-string-color": "#28a745",
  "--w-rjv-type-int-color": "#60A5FA",
  "--w-rjv-type-float-color": "#60A5FA",
  "--w-rjv-type-bigint-color": "#60A5FA",
  "--w-rjv-type-boolean-color": "#F43F5E",
  "--w-rjv-type-date-color": "#41a2c2",
  "--w-rjv-type-url-color": "#5e81ac",
  "--w-rjv-type-null-color": "#22D3EE",
  "--w-rjv-type-nan-color": "#60A5FA",
  "--w-rjv-type-undefined-color": "#22D3EE"
};

// src/RemixDevTools/components/jsonRenderer.tsx
var import_jsx_runtime28 = require("react/jsx-runtime");
var isPromise = (value) => {
  return value && typeof value.then === "function";
};
var JsonRenderer = ({ data }) => {
  const { settings } = useSettingsContext();
  const originalData = (0, import_react26.useMemo)(
    () => typeof data === "string" ? data : Object.entries(data).map(([key, value]) => {
      if (isPromise(value)) {
        value.then((res) => {
          setJson((json2) => ({
            ...json2,
            [key]: res
          }));
        });
        return { [key]: "Loading deferred data..." };
      }
      return { [key]: value };
    }).reduce((acc, curr) => {
      return { ...acc, ...curr };
    }, {}),
    [data]
  );
  const [json, setJson] = (0, import_react26.useState)(originalData);
  (0, import_react26.useEffect)(() => {
    setJson(data);
  }, [data]);
  if (typeof json === "string") {
    return /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("div", { className: "rdt-max-w-xs rdt-text-green-600", children: json });
  }
  return /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(react_json_view_default, { highlightUpdates: true, style: customTheme, collapsed: settings.expansionLevel, value: json });
};

// src/RemixDevTools/components/InfoCard.tsx
var import_clsx5 = __toESM(require("clsx"), 1);
var import_jsx_runtime29 = require("react/jsx-runtime");
var import_meta = {};
var InfoCard = ({
  children: children2,
  title,
  onClear
}) => {
  return /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { className: "rdt-mb-4 rdt-h-min rdt-rounded-lg rdt-border-solid rdt-border-gray-500/40 rdt-text-base rdt-font-normal rdt-text-white rdt-transition-all", children: [
    /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)(
      "h6",
      {
        className: (0, import_clsx5.default)(
          "rdt-flex rdt-min-h-[30px] rdt-items-center rdt-text-left rdt-text-sm",
          onClear ? "rdt-flex rdt-items-center rdt-justify-between rdt-gap-3" : ""
        ),
        children: [
          title,
          onClear && typeof import_meta.hot === "undefined" && /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(
            "button",
            {
              onClick: onClear,
              className: "rdt-cursor-pointer rdt-rounded rdt-bg-red-500 rdt-px-2 rdt-py-1 rdt-text-sm rdt-font-semibold rdt-text-white",
              children: "Clear"
            }
          )
        ]
      }
    ),
    children2
  ] });
};

// src/RemixDevTools/hooks/useDevServerConnection.ts
var import_react27 = require("@remix-run/react");
var import_react28 = require("react");

// src/dev-server/singleton.ts
var global = {};
function singleton(name, value) {
  const yolo = global;
  yolo.__singletons ??= {};
  yolo.__singletons[name] ??= value();
  return yolo.__singletons[name];
}

// src/dev-server/event-queue.ts
singleton("rdtEventQueue", () => []);
var isRdtEvent = (obj) => {
  return typeof obj === "object" && obj !== null && "type" in obj && "data" in obj;
};
var isRdtEventArray = (obj) => {
  return isRdtEvent(obj) && obj.type === "events" && Array.isArray(obj.data);
};

// src/RemixDevTools/hooks/useDevServerConnection.ts
var import_meta2 = {};
var updateRouteInfo = (server, routes, event, includeServerInfo = true) => {
  const { data, type } = event;
  const { id: id2, ...rest } = data;
  const existingRouteInfo = !includeServerInfo ? routes?.[id2] : routes[id2] ?? server?.routes?.[id2];
  let newRouteData = [...existingRouteInfo?.[type === "loader" ? "loaders" : "actions"] || [], rest];
  newRouteData = cutArrayToLastN(newRouteData, 20);
  const { min, max, total } = newRouteData.reduce(
    (acc, dataPiece) => {
      return {
        min: Math.min(acc.min, dataPiece.executionTime),
        max: Math.max(acc.max, dataPiece.executionTime),
        total: acc.total + dataPiece.executionTime
      };
    },
    { min: 1e5, max: 0, total: 0 }
  );
  const loaderTriggerCount = existingRouteInfo?.loaderTriggerCount || 0;
  const actionTriggerCount = existingRouteInfo?.actionTriggerCount || 0;
  routes[id2] = {
    ...existingRouteInfo,
    lowestExecutionTime: min,
    highestExecutionTime: max,
    averageExecutionTime: Number(Number(total / newRouteData.length).toFixed(2)),
    loaderTriggerCount: type === "loader" ? loaderTriggerCount + 1 : loaderTriggerCount,
    loaders: type === "loader" ? newRouteData : existingRouteInfo?.loaders ?? [],
    actions: type === "action" ? newRouteData : existingRouteInfo?.actions ?? [],
    lastLoader: type === "loader" ? rest : existingRouteInfo?.lastLoader ?? {},
    lastAction: type === "action" ? rest : existingRouteInfo?.lastAction ?? {},
    actionTriggerCount: type === "action" ? actionTriggerCount + 1 : actionTriggerCount
  };
};
var useDevServerConnection = () => {
  const navigation = (0, import_react27.useNavigation)();
  const { settings } = useSettingsContext();
  const { server, setServerInfo } = useServerInfo();
  const { detachedWindowOwner, isDetached } = useDetachedWindowControls();
  const shouldConnect = isDetached ? detachedWindowOwner && settings.withServerDevTools : settings.withServerDevTools;
  const methods = useWebSocket(
    `ws://localhost:${settings.wsPort}`,
    {
      onMessage: (e) => {
        if (navigation.state !== "idle")
          return;
        const data = tryParseJson(e.data.toString());
        if (isRdtEventArray(data)) {
          const events = data.data;
          const routes = {};
          for (const event of events) {
            updateRouteInfo(server, routes, event);
            setServerInfo({ routes });
          }
        }
      }
    },
    shouldConnect && typeof import_meta2.hot === "undefined"
  );
  (0, import_react28.useEffect)(() => {
    if (typeof import_meta2.hot === "undefined")
      return;
    if (navigation.state !== "idle")
      return;
    methods.sendMessage(JSON.stringify({ type: "pull_and_clear", data: {} }));
    import_meta2.hot.send("all-route-info");
  }, [navigation.state]);
  (0, import_react28.useEffect)(() => {
    const cb2 = (data) => {
      const events = JSON.parse(data).data;
      const routes = {};
      Object.values(events).forEach((routeInfo) => {
        const { loader, action } = routeInfo;
        const events2 = [
          loader.map((e) => ({ type: "loader", data: e })),
          action.map((e) => ({ type: "action", data: e }))
        ].flat();
        for (const event of events2) {
          updateRouteInfo(server, routes, event, false);
        }
      });
      setServerInfo({ routes });
    };
    if (typeof import_meta2.hot !== "undefined") {
      import_meta2.hot.on("all-route-info", cb2);
    }
    return () => {
      if (typeof import_meta2.hot !== "undefined") {
        import_meta2.hot.dispose(cb2);
      }
    };
  }, [server, setServerInfo]);
  const connectionStatus = {
    [0 /* CONNECTING */]: "Connecting",
    [1 /* OPEN */]: "Open",
    [2 /* CLOSING */]: "Closing",
    [3 /* CLOSED */]: "Closed",
    [-1 /* UNINSTANTIATED */]: "Uninstantiated"
  }[methods.readyState];
  const isConnected = methods.readyState === 1 /* OPEN */ || typeof import_meta2.hot !== "undefined";
  const isConnecting = methods.readyState === 0 /* CONNECTING */;
  return {
    ...methods,
    sendJsonMessage: import_meta2.hot ? (data) => import_meta2.hot?.send("custom", data) : methods.sendJsonMessage,
    connectionStatus: import_meta2.hot ? "Open" : connectionStatus,
    isConnected,
    isConnecting
  };
};

// src/RemixDevTools/components/util.ts
var import_clsx6 = require("clsx");
var import_tailwind_merge = require("tailwind-merge");
function cn(...inputs) {
  return (0, import_tailwind_merge.twMerge)((0, import_clsx6.clsx)(inputs));
}

// src/RemixDevTools/components/icon/Icon.tsx
var import_jsx_runtime30 = require("react/jsx-runtime");
var IconSize = /* @__PURE__ */ ((IconSize2) => {
  IconSize2["xs"] = "12";
  IconSize2["sm"] = "16";
  IconSize2["md"] = "20";
  IconSize2["lg"] = "32";
  IconSize2["xl"] = "40";
  IconSize2["2xl"] = "80";
  IconSize2["jumbo"] = "160";
  return IconSize2;
})(IconSize || {});
var emptyFill = [];
var strokeIcon = [];
var Icon = ({ name, testId, className, size = "sm", ...props }) => {
  const iconSize = IconSize[size];
  const isEmptyFill = emptyFill.includes(name);
  const isStrokeIcon = strokeIcon.includes(name);
  const iconClasses = cn("inline-block flex-shrink-0", className, isEmptyFill && "fill-transparent");
  return /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)(
    "svg",
    {
      className: iconClasses,
      fill: isEmptyFill ? "none" : "currentColor",
      stroke: isStrokeIcon ? "currentColor" : "none",
      width: iconSize,
      height: iconSize,
      "data-testid": testId,
      "data-name": name,
      ...props,
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("defs", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)(
            "symbol",
            {
              id: "Layout",
              viewBox: "0 0 24 24",
              fill: "none",
              stroke: "currentColor",
              strokeWidth: "2",
              strokeLinecap: "round",
              strokeLinejoin: "round",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", ry: "2" }),
                /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("line", { x1: "3", x2: "21", y1: "9", y2: "9" }),
                /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("line", { x1: "9", x2: "9", y1: "21", y2: "9" })
              ]
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)(
            "symbol",
            {
              id: "Root",
              viewBox: "0 0 24 24",
              fill: "none",
              stroke: "currentColor",
              strokeWidth: "2",
              strokeLinecap: "round",
              strokeLinejoin: "round",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("rect", { x: "16", y: "16", width: "6", height: "6", rx: "1" }),
                /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("rect", { x: "2", y: "16", width: "6", height: "6", rx: "1" }),
                /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("rect", { x: "9", y: "2", width: "6", height: "6", rx: "1" }),
                /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("path", { d: "M5 16v-3a1 1 0 0 1 1-1h12a1 1 0 0 1 1 1v3" }),
                /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("path", { d: "M12 12V8" })
              ]
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)(
            "symbol",
            {
              id: "X",
              viewBox: "0 0 24 24",
              fill: "none",
              stroke: "currentColor",
              strokeWidth: "2",
              strokeLinecap: "round",
              strokeLinejoin: "round",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("path", { d: "M18 6 6 18" }),
                /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("path", { d: "m6 6 12 12" })
              ]
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)(
            "symbol",
            {
              id: "Terminal",
              viewBox: "0 0 24 24",
              fill: "none",
              stroke: "currentColor",
              strokeWidth: "2",
              strokeLinecap: "round",
              strokeLinejoin: "round",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("polyline", { points: "4 17 10 11 4 5" }),
                /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("line", { x1: "12", x2: "20", y1: "19", y2: "19" })
              ]
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)(
            "symbol",
            {
              id: "Settings",
              viewBox: "0 0 24 24",
              fill: "none",
              stroke: "currentColor",
              strokeWidth: "2",
              strokeLinecap: "round",
              strokeLinejoin: "round",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("path", { d: "M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z" }),
                /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("circle", { cx: "12", cy: "12", r: "3" })
              ]
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)(
            "symbol",
            {
              id: "Send",
              viewBox: "0 0 24 24",
              fill: "none",
              stroke: "currentColor",
              strokeWidth: "2",
              strokeLinecap: "round",
              strokeLinejoin: "round",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("path", { d: "m22 2-7 20-4-9-9-4Z" }),
                /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("path", { d: "M22 2 11 13" })
              ]
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)(
            "symbol",
            {
              id: "Radio",
              viewBox: "0 0 24 24",
              fill: "none",
              stroke: "currentColor",
              strokeWidth: "2",
              strokeLinecap: "round",
              strokeLinejoin: "round",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("path", { d: "M4.9 19.1C1 15.2 1 8.8 4.9 4.9" }),
                /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("path", { d: "M7.8 16.2c-2.3-2.3-2.3-6.1 0-8.5" }),
                /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("circle", { cx: "12", cy: "12", r: "2" }),
                /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("path", { d: "M16.2 7.8c2.3 2.3 2.3 6.1 0 8.5" }),
                /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("path", { d: "M19.1 4.9C23 8.8 23 15.1 19.1 19" })
              ]
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)(
            "symbol",
            {
              id: "Network",
              viewBox: "0 0 24 24",
              fill: "none",
              stroke: "currentColor",
              strokeWidth: "2",
              strokeLinecap: "round",
              strokeLinejoin: "round",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("rect", { x: "16", y: "16", width: "6", height: "6", rx: "1" }),
                /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("rect", { x: "2", y: "16", width: "6", height: "6", rx: "1" }),
                /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("rect", { x: "9", y: "2", width: "6", height: "6", rx: "1" }),
                /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("path", { d: "M5 16v-3a1 1 0 0 1 1-1h12a1 1 0 0 1 1 1v3" }),
                /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("path", { d: "M12 12V8" })
              ]
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)(
            "symbol",
            {
              id: "List",
              viewBox: "0 0 24 24",
              fill: "none",
              stroke: "currentColor",
              strokeWidth: "2",
              strokeLinecap: "round",
              strokeLinejoin: "round",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("line", { x1: "8", x2: "21", y1: "6", y2: "6" }),
                /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("line", { x1: "8", x2: "21", y1: "12", y2: "12" }),
                /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("line", { x1: "8", x2: "21", y1: "18", y2: "18" }),
                /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("line", { x1: "3", x2: "3.01", y1: "6", y2: "6" }),
                /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("line", { x1: "3", x2: "3.01", y1: "12", y2: "12" }),
                /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("line", { x1: "3", x2: "3.01", y1: "18", y2: "18" })
              ]
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)(
            "symbol",
            {
              id: "Layers",
              viewBox: "0 0 24 24",
              fill: "none",
              stroke: "currentColor",
              strokeWidth: "2",
              strokeLinecap: "round",
              strokeLinejoin: "round",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("path", { d: "m12.83 2.18a2 2 0 0 0-1.66 0L2.6 6.08a1 1 0 0 0 0 1.83l8.58 3.91a2 2 0 0 0 1.66 0l8.58-3.9a1 1 0 0 0 0-1.83Z" }),
                /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("path", { d: "m22 17.65-9.17 4.16a2 2 0 0 1-1.66 0L2 17.65" }),
                /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("path", { d: "m22 12.65-9.17 4.16a2 2 0 0 1-1.66 0L2 12.65" })
              ]
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)(
            "symbol",
            {
              id: "GitMerge",
              viewBox: "0 0 24 24",
              fill: "none",
              stroke: "currentColor",
              strokeWidth: "2",
              strokeLinecap: "round",
              strokeLinejoin: "round",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("circle", { cx: "18", cy: "18", r: "3" }),
                /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("circle", { cx: "6", cy: "6", r: "3" }),
                /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("path", { d: "M6 21V9a9 9 0 0 0 9 9" })
              ]
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)(
            "symbol",
            {
              id: "CornerDownRight",
              viewBox: "0 0 24 24",
              fill: "none",
              stroke: "currentColor",
              strokeWidth: "2",
              strokeLinecap: "round",
              strokeLinejoin: "round",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("polyline", { points: "15 10 20 15 15 20" }),
                /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("path", { d: "M4 4v7a4 4 0 0 0 4 4h12" })
              ]
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)(
            "symbol",
            {
              id: "CopySlash",
              viewBox: "0 0 24 24",
              fill: "none",
              stroke: "currentColor",
              strokeWidth: "2",
              strokeLinecap: "round",
              strokeLinejoin: "round",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("line", { x1: "12", x2: "18", y1: "18", y2: "12" }),
                /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("rect", { width: "14", height: "14", x: "8", y: "8", rx: "2", ry: "2" }),
                /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("path", { d: "M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2" })
              ]
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)(
            "symbol",
            {
              id: "Columns",
              viewBox: "0 0 24 24",
              fill: "none",
              stroke: "currentColor",
              strokeWidth: "2",
              strokeLinecap: "round",
              strokeLinejoin: "round",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", ry: "2" }),
                /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("line", { x1: "12", x2: "12", y1: "3", y2: "21" })
              ]
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(
            "symbol",
            {
              id: "ChevronDown",
              viewBox: "0 0 24 24",
              fill: "none",
              stroke: "currentColor",
              strokeWidth: "2",
              strokeLinecap: "round",
              strokeLinejoin: "round",
              children: /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("path", { d: "m6 9 6 6 6-6" })
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(
            "symbol",
            {
              id: "Check",
              viewBox: "0 0 24 24",
              fill: "none",
              stroke: "currentColor",
              strokeWidth: "2",
              strokeLinecap: "round",
              strokeLinejoin: "round",
              children: /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("polyline", { points: "20 6 9 17 4 12" })
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(
            "symbol",
            {
              id: "Activity",
              viewBox: "0 0 24 24",
              fill: "none",
              stroke: "currentColor",
              strokeWidth: "2",
              strokeLinecap: "round",
              strokeLinejoin: "round",
              children: /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("path", { d: "M22 12h-4l-3 9L9 3l-3 9H2" })
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)(
            "symbol",
            {
              id: "Shield",
              viewBox: "0 0 24 24",
              fill: "none",
              stroke: "currentColor",
              strokeWidth: "2",
              strokeLinecap: "round",
              strokeLinejoin: "round",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("path", { d: "M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10" }),
                /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("path", { d: "m14.5 9-5 5" }),
                /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("path", { d: "m9.5 9 5 5" })
              ]
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)(
            "symbol",
            {
              id: "Accessibility",
              viewBox: "0 0 24 24",
              fill: "none",
              stroke: "currentColor",
              strokeWidth: "2",
              strokeLinecap: "round",
              strokeLinejoin: "round",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("circle", { cx: "16", cy: "4", r: "1" }),
                /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("path", { d: "m18 19 1-7-6 1" }),
                /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("path", { d: "m5 8 3-3 5.5 3-2.36 3.5" }),
                /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("path", { d: "M4.24 14.5a5 5 0 0 0 6.88 6" }),
                /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("path", { d: "M13.76 17.5a5 5 0 0 0-6.88-6" })
              ]
            }
          )
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("use", { href: `#${name}` })
      ]
    }
  );
};

// src/RemixDevTools/components/RouteSegmentInfo.tsx
var import_clsx7 = __toESM(require("clsx"), 1);
var import_jsx_runtime31 = require("react/jsx-runtime");
var getLoaderData = (data) => {
  if (typeof data === "string") {
    try {
      const temp = JSON.parse(data);
      return JSON.stringify(temp, null, 2);
    } catch (e) {
      return data;
    }
  }
  return data;
};
var cleanupLoaderOrAction = (routeInfo) => {
  if (!Object.keys(routeInfo).length)
    return {};
  return {
    executionTime: `${routeInfo.executionTime}ms`,
    requestData: routeInfo.requestData,
    requestHeaders: routeInfo.requestHeaders,
    responseHeaders: routeInfo.responseHeaders,
    ...routeInfo.responseHeaders?.["cache-control"] && {
      cacheInfo: { ...parseCacheControlHeader(new Headers(routeInfo.responseHeaders)) }
    }
  };
};
var cleanServerInfo = (routeInfo) => {
  return {
    loaderTriggerCount: routeInfo.loaderTriggerCount,
    actionTriggerCount: routeInfo.actionTriggerCount,
    lowestExecutionTime: `${routeInfo.lowestExecutionTime}ms`,
    highestExecutionTime: `${routeInfo.highestExecutionTime}ms`,
    averageExecutionTime: `${routeInfo.averageExecutionTime}ms`,
    lastLoaderInfo: cleanupLoaderOrAction(routeInfo.lastLoader),
    ...routeInfo.lastAction && {
      lastActionInfo: cleanupLoaderOrAction(routeInfo.lastAction)
    },
    loaderCalls: routeInfo.loaders?.map((loader) => cleanupLoaderOrAction(loader)).reverse(),
    actionCalls: routeInfo.actions?.map((action) => cleanupLoaderOrAction(action)).reverse()
  };
};
var ROUTE_COLORS = {
  GREEN: "rdt-bg-green-500 rdt-ring-green-500 rdt-text-white",
  BLUE: "rdt-bg-blue-500 rdt-ring-blue-500 rdt-text-white",
  TEAL: "rdt-bg-teal-400 rdt-ring-teal-400 rdt-text-white",
  RED: "rdt-bg-red-500 rdt-ring-red-500 rdt-text-white",
  PURPLE: "rdt-bg-purple-500 rdt-ring-purple-500 rdt-text-white"
};
var RouteSegmentInfo = ({ route, i }) => {
  const { server, setServerInfo } = useServerInfo();
  const { isConnected, sendJsonMessage } = useDevServerConnection();
  const loaderData = getLoaderData(route.data);
  const serverInfo = server?.routes?.[route.id];
  const isRoot = route.id === "root";
  const { setSettings } = useSettingsContext();
  const cacheControl = serverInfo?.lastLoader.responseHeaders ? parseCacheControlHeader(new Headers(serverInfo?.lastLoader.responseHeaders)) : void 0;
  const onHover = (path2, type) => {
    setSettings({
      hoveredRoute: path2,
      isHoveringRoute: type === "enter"
    });
  };
  const entryRoute = __remixManifest.routes[route.id];
  const isLayout = isLayoutRoute(entryRoute);
  const clearServerInfoForRoute = () => {
    const newServerInfo = { ...server?.routes };
    newServerInfo[route.id] = defaultServerRouteState;
    setServerInfo({ routes: newServerInfo });
  };
  return /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)(
    "li",
    {
      onMouseEnter: () => onHover(route.id === "root" ? "root" : i.toString(), "enter"),
      onMouseLeave: () => onHover(route.id === "root" ? "root" : i.toString(), "leave"),
      className: "rdt-mb-8 rdt-ml-8",
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(
          "div",
          {
            className: (0, import_clsx7.default)(
              "rdt-absolute -rdt-left-4 rdt-flex rdt-h-8 rdt-w-8 rdt-items-center rdt-justify-center rdt-rounded-full",
              ROUTE_COLORS[isRoot ? "PURPLE" : isLayout ? "BLUE" : "GREEN"]
            ),
            children: /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(Icon, { name: isRoot ? "Root" : isLayout ? "Layout" : "CornerDownRight", size: "sm" })
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)("h3", { className: "rdt-text-md -rdt-mt-3 rdt-mb-1 rdt-flex rdt-items-center rdt-justify-between rdt-gap-2 rdt-font-semibold rdt-text-white", children: [
          route.pathname,
          /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)("div", { className: "rdt-flex rdt-gap-2", children: [
            cacheControl && serverInfo?.lastLoader.timestamp && /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(
              CacheInfo,
              {
                cacheControl,
                cacheDate: new Date(serverInfo?.lastLoader.timestamp ?? "")
              },
              JSON.stringify(serverInfo?.lastLoader ?? "")
            ),
            isConnected && /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(
              VsCodeButton,
              {
                onClick: () => sendJsonMessage({
                  type: "open-source",
                  data: { source: `app/${route.id}` }
                })
              }
            )
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)("div", { className: "rdt-mb-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)("p", { className: "rdt-mb-2 rdt-block rdt-text-sm rdt-font-normal rdt-leading-none rdt-text-gray-500  ", children: [
            "Route segment file: ",
            route.id
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)("div", { className: "rdt-flex rdt-flex-wrap rdt-gap-6", children: [
            loaderData && /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(InfoCard, { title: "Loader data", children: /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(JsonRenderer, { data: loaderData }) }),
            serverInfo && /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(InfoCard, { onClear: clearServerInfoForRoute, title: "Server Info", children: /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(JsonRenderer, { data: cleanServerInfo(serverInfo) }) }),
            route.params && Object.keys(route.params).length > 0 && /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(InfoCard, { title: "Route params", children: /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(JsonRenderer, { data: route.params }) }),
            Boolean(route.handle && Object.keys(route.handle).length > 0) && /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(InfoCard, { title: "Route handle", children: /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(JsonRenderer, { data: route.handle }) })
          ] })
        ] })
      ]
    }
  );
};

// src/RemixDevTools/tabs/PageTab.tsx
var import_jsx_runtime32 = require("react/jsx-runtime");
var PageTab = () => {
  const routes = (0, import_react29.useMatches)();
  const reversed = (0, import_react30.useMemo)(() => routes.reverse(), [routes]);
  const { revalidate, state } = (0, import_react29.useRevalidator)();
  return /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)(import_jsx_runtime32.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("div", { className: "rdt-sticky rdt-top-0 rdt-z-30 rdt-mb-2 rdt-bg-[#212121] rdt-pt-2", children: [
      /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("div", { className: "rdt-mb-1 rdt-flex rdt-justify-between ", children: [
        /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("h1", { className: "rdt-text-lg", children: "Active Route Segments" }),
        /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(
          "button",
          {
            onClick: () => revalidate(),
            className: (0, import_clsx8.default)(
              "  rdt-z-20 rdt-cursor-pointer rdt-rounded-lg rdt-border rdt-border-green-500 rdt-px-3 rdt-py-1 rdt-text-sm rdt-font-semibold rdt-text-white",
              state !== "idle" && "rdt-pointer-events-none rdt-opacity-50"
            ),
            children: state !== "idle" ? "Revalidating..." : "Revalidate"
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("hr", { className: "rdt-border-gray-700" })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("div", { className: "rdt-relative rdt-flex rdt-h-full rdt-flex-col rdt-p-6 rdt-px-6", children: /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(
      "ol",
      {
        className: (0, import_clsx8.default)(
          "rdt-relative rdt-border-l rdt-border-gray-700",
          state === "loading" && "rdt-pointer-events-none rdt-opacity-50"
        ),
        children: reversed.map((route, i) => /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(RouteSegmentInfo, { route, i }, route.id))
      }
    ) })
  ] });
};

// src/RemixDevTools/tabs/RoutesTab.tsx
var import_react41 = require("react");

// src/RemixDevTools/components/Accordion.tsx
var React6 = __toESM(require("react"), 1);
var AccordionPrimitive = __toESM(require("@radix-ui/react-accordion"), 1);
var import_jsx_runtime33 = require("react/jsx-runtime");
var Accordion = AccordionPrimitive.Root;
var AccordionItem = React6.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(AccordionPrimitive.Item, { ref, className: cn("rdt-border-b rdt-border-b-gray-500", className), ...props }));
AccordionItem.displayName = "AccordionItem";
var AccordionTrigger = React6.forwardRef(({ className, children: children2, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(AccordionPrimitive.Header, { className: "rdt-flex", children: /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)(
  AccordionPrimitive.Trigger,
  {
    ref,
    className: cn(
      "rdt-flex rdt-flex-1 rdt-items-center rdt-justify-between rdt-py-2 rdt-text-sm rdt-font-medium rdt-transition-all [&[data-state=open]>svg]:rdt-rotate-180",
      className
    ),
    ...props,
    children: [
      children2,
      /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
        Icon,
        {
          className: "rdt-text-muted-foreground rdt-h-4 rdt-w-4 rdt-shrink-0 rdt-transition-transform rdt-duration-200",
          name: "ChevronDown"
        }
      )
    ]
  }
) }));
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName;
var AccordionContent = React6.forwardRef(({ className, children: children2, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
  AccordionPrimitive.Content,
  {
    ref,
    className: cn(
      "rdt-data-[state=closed]:animate-accordion-up rdt-data-[state=open]:animate-accordion-down rdt-overflow-hidden rdt-text-sm",
      className
    ),
    ...props,
    children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("div", { className: "rdt-pt-0", children: children2 })
  }
));
AccordionContent.displayName = AccordionPrimitive.Content.displayName;

// src/RemixDevTools/tabs/RoutesTab.tsx
var import_react42 = require("@remix-run/react");

// src/RemixDevTools/components/NewRouteForm.tsx
var import_clsx10 = __toESM(require("clsx"), 1);
var import_react31 = require("react");

// src/RemixDevTools/components/Checkbox.tsx
var import_jsx_runtime34 = require("react/jsx-runtime");
var Checkbox = ({
  onChange,
  id: id2,
  children: children2,
  value,
  hint,
  ...props
}) => {
  return /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)("div", { children: [
    /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)("div", { className: "rdt-flex rdt-items-center rdt-gap-2 rdt-py-1", children: [
      /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(
        "input",
        {
          value: value ? "checked" : void 0,
          checked: value,
          onChange,
          id: id2,
          type: "checkbox",
          ...props
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("label", { className: "rdt-text-md rdt-cursor-pointer", htmlFor: id2, children: children2 })
    ] }),
    hint && /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("p", { className: "rdt-text-sm rdt-text-gray-500", children: hint })
  ] });
};

// src/RemixDevTools/components/Input.tsx
var import_clsx9 = __toESM(require("clsx"), 1);
var import_jsx_runtime35 = require("react/jsx-runtime");
var Label = ({
  className,
  children: children2,
  ...props
}) => {
  return /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("label", { className: (0, import_clsx9.default)("rdt-block rdt-text-sm", className), ...props, children: children2 });
};
var Hint = ({ children: children2 }) => {
  return /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("p", { className: "rdt-text-sm rdt-text-gray-500", children: children2 });
};
var Input = ({ className, name, label, hint, ...props }) => {
  return /* @__PURE__ */ (0, import_jsx_runtime35.jsxs)("div", { className: "rdt-flex rdt-w-full rdt-flex-col rdt-gap-1", children: [
    label && /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(Label, { htmlFor: name, children: label }),
    /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(
      "input",
      {
        name,
        id: name,
        className: (0, import_clsx9.default)(
          "rdt-w-full rdt-rounded rdt-border rdt-border-gray-400 rdt-bg-[#121212] rdt-px-2 rdt-py-1 rdt-text-sm",
          className
        ),
        ...props
      }
    ),
    hint && /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(Hint, { children: hint })
  ] });
};

// src/RemixDevTools/components/NewRouteForm.tsx
var import_jsx_runtime36 = require("react/jsx-runtime");
var DEFAULT_VALUES = {
  path: "",
  loader: false,
  action: false,
  headers: false,
  errorBoundary: false,
  revalidate: false,
  handler: false,
  meta: false,
  links: false
};
var NewRouteForm = () => {
  const { sendJsonMessage } = useRemixForgeSocket({
    onMessage: (e) => {
      const messageData = e.data;
      if (messageData.type === "route_added") {
        setNewRouteInfo(DEFAULT_VALUES);
      }
    }
  });
  const [newRouteInfo, setNewRouteInfo] = (0, import_react31.useState)(DEFAULT_VALUES);
  const handleSubmit = () => {
    const { path: path2, ...options } = newRouteInfo;
    sendJsonMessage({
      type: "add_route",
      path: path2,
      options
    });
  };
  const setNewInfo = (info) => {
    setNewRouteInfo({ ...newRouteInfo, ...info });
  };
  return /* @__PURE__ */ (0, import_jsx_runtime36.jsxs)("div", { className: "rdt-mb-2 rdt-rounded-lg rdt-border rdt-border-gray-500/20 rdt-p-2", children: [
    /* @__PURE__ */ (0, import_jsx_runtime36.jsx)("label", { className: "rdt-mb-2 rdt-block ", children: "Route path:" }),
    /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(
      Input,
      {
        onBlur: () => setNewInfo({
          path: newRouteInfo.path.trim()
        }),
        onChange: (e) => setNewInfo({ path: e.target.value }),
        className: "rdt-mb-1"
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime36.jsx)("span", { className: "rdt-mb-4 rdt-block rdt-text-gray-500", children: "This will be added to your routes folder under your entered name, exclude the extension" }),
    /* @__PURE__ */ (0, import_jsx_runtime36.jsx)("label", { className: "rdt-mb-2 rdt-block", children: "Additional options:" }),
    /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(
      Checkbox,
      {
        value: newRouteInfo.loader,
        onChange: () => setNewInfo({
          loader: !newRouteInfo.loader
        }),
        id: "loader",
        children: "Add a loader"
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(
      Checkbox,
      {
        value: newRouteInfo.action,
        onChange: () => setNewInfo({
          action: !newRouteInfo.action
        }),
        id: "action",
        children: "Add an action"
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(
      Checkbox,
      {
        value: newRouteInfo.errorBoundary,
        onChange: () => setNewInfo({
          errorBoundary: !newRouteInfo.errorBoundary
        }),
        id: "error-boundary",
        children: "Add an error boundary"
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(
      Checkbox,
      {
        value: newRouteInfo.handler,
        onChange: () => setNewInfo({
          handler: !newRouteInfo.handler
        }),
        id: "handle",
        children: "Add a handle"
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(
      Checkbox,
      {
        value: newRouteInfo.meta,
        onChange: () => setNewInfo({ meta: !newRouteInfo.meta }),
        id: "meta",
        children: "Add a meta export"
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(
      Checkbox,
      {
        value: newRouteInfo.links,
        onChange: () => setNewInfo({ links: !newRouteInfo.links }),
        id: "links",
        children: "Add a links export"
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(
      Checkbox,
      {
        value: newRouteInfo.headers,
        onChange: () => setNewInfo({
          headers: !newRouteInfo.headers
        }),
        id: "headers",
        children: "Add a headers export"
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(
      Checkbox,
      {
        value: newRouteInfo.revalidate,
        onChange: () => setNewInfo({
          revalidate: !newRouteInfo.revalidate
        }),
        id: "shouldRevalidate",
        children: "Add a shouldRevalidate export"
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(
      "button",
      {
        onClick: handleSubmit,
        disabled: !newRouteInfo.path,
        className: (0, import_clsx10.default)(
          "rdt-mr-2 rdt-mt-2 rdt-self-end rdt-rounded rdt-border rdt-border-gray-400 rdt-px-2 rdt-py-1 rdt-text-sm",
          !newRouteInfo.path && "rdt-opacity-50"
        ),
        children: "Add route"
      }
    )
  ] });
};

// src/RemixDevTools/hooks/detached/useListenToRouteChange.ts
var import_react32 = require("@remix-run/react");
var import_react33 = require("react");
var LOCAL_STORAGE_ROUTE_KEY = "rdt_route";
var setRouteInLocalStorage = (route) => setStorageItem(LOCAL_STORAGE_ROUTE_KEY, route);
var getRouteFromLocalStorage = () => getStorageItem(LOCAL_STORAGE_ROUTE_KEY);
var useListenToRouteChange = () => {
  const { detachedWindowOwner } = useDetachedWindowControls();
  const location = (0, import_react32.useLocation)();
  const navigate = (0, import_react32.useNavigate)();
  const navigation = (0, import_react32.useNavigation)();
  const locationRoute = location.pathname + location.search;
  const navigationRoute = (navigation.location?.pathname ?? "") + (navigation.location?.search ?? "");
  const ref = (0, import_react33.useRef)(locationRoute);
  const route = getRouteFromLocalStorage();
  (0, import_react33.useEffect)(() => {
    const { detachedWindowOwner: detachedWindowOwner2 } = detachedModeSetup();
    if (!detachedWindowOwner2) {
      return;
    }
    if (route !== locationRoute) {
      setRouteInLocalStorage(locationRoute);
    }
  }, [locationRoute, detachedWindowOwner, route]);
  useAttachListener("storage", "window", (e) => {
    if (e.key !== LOCAL_STORAGE_ROUTE_KEY) {
      return;
    }
    const route2 = getRouteFromLocalStorage();
    if (route2 && route2 !== ref.current && route2 !== navigationRoute && navigation.state === "idle") {
      ref.current = route2;
      navigate(route2);
    }
  });
};

// src/RemixDevTools/tabs/RoutesTab.tsx
var import_clsx14 = __toESM(require("clsx"), 1);

// src/RemixDevTools/components/RouteInfo.tsx
var import_clsx11 = __toESM(require("clsx"), 1);
var import_react34 = require("@remix-run/react");
var import_jsx_runtime37 = require("react/jsx-runtime");
var RouteInfo = ({ route, className, openNewRoute, onClose }) => {
  const { settings, setSettings } = useSettingsContext();
  const { routeWildcards, routeViewMode } = settings;
  const { hasWildcard, path: path2, pathToOpen } = constructRoutePath(route, routeWildcards);
  const isTreeView = routeViewMode === "tree";
  const hasParentErrorBoundary = route.errorBoundary.errorBoundaryId && route.errorBoundary.errorBoundaryId !== route.id;
  const hasErrorBoundary = route.errorBoundary.hasErrorBoundary;
  return /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)("div", { className: (0, import_clsx11.default)(className, "rdt-relative"), children: [
    isTreeView && /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)(import_jsx_runtime37.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(
        Icon,
        {
          onClick: onClose,
          className: "rdt-absolute rdt-right-2 rdt-top-2 rdt-cursor-pointer rdt-text-red-600",
          name: "X"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("h1", { className: "rdt-text-xl rdt-font-semibold", children: route.url }),
      /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("hr", { className: "rdt-mb-4 rdt-mt-1" }),
      /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)("h3", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("span", { className: "rdt-text-gray-500", children: "Path:" }),
        " ",
        path2
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)("h3", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("span", { className: "rdt-text-gray-500", children: "Url:" }),
        " ",
        pathToOpen
      ] })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)("div", { className: "rdt-flex rdt-gap-2", children: [
      /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("span", { className: "rdt-whitespace-nowrap rdt-text-gray-500", children: "Route file:" }),
      route.id
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)("div", { className: "rdt-mb-4 rdt-mt-4 rdt-flex rdt-flex-col rdt-gap-2", children: [
      /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("span", { className: "rdt-text-gray-500", children: "Components contained in the route:" }),
      /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)("div", { className: "rdt-flex rdt-gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(Tag, { className: "rdt-h-max", color: route.hasLoader ? "GREEN" : "RED", children: "Loader" }),
        /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(Tag, { className: "rdt-h-max", color: route.hasAction ? "GREEN" : "RED", children: "Action" }),
        /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(
          Tag,
          {
            className: (0, import_clsx11.default)(hasErrorBoundary && "rdt-rounded-br-none rdt-rounded-tr-none"),
            color: hasErrorBoundary ? "GREEN" : "RED",
            children: "ErrorBoundary"
          }
        )
      ] }),
      hasErrorBoundary ? /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("div", { className: "rdt-mr-2", children: hasParentErrorBoundary ? `Covered by parent ErrorBoundary located in: ${route.errorBoundary.errorBoundaryId}` : "" }) : null
    ] }),
    hasWildcard && /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)(import_jsx_runtime37.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("p", { className: "rdt-mb-2 rdt-text-gray-500", children: "Wildcard parameters:" }),
      /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(
        "div",
        {
          className: (0, import_clsx11.default)("rdt-mb-4 rdt-grid rdt-w-full rdt-grid-cols-2 rdt-gap-2", isTreeView && "rdt-grid-cols-1"),
          children: route.url.split("/").filter((p) => p.startsWith(":")).map((param) => /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)("div", { className: "rdt-flex rdt-w-full rdt-gap-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(Tag, { color: "BLUE", children: param }, param),
            /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(
              Input,
              {
                value: routeWildcards[route.id]?.[param] || "",
                onChange: (e) => setSettings({
                  routeWildcards: {
                    ...routeWildcards,
                    [route.id]: {
                      ...routeWildcards[route.id],
                      [param]: e.target.value
                    }
                  }
                }),
                placeholder: param
              }
            )
          ] }, param))
        }
      )
    ] }),
    isTreeView && /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(
      "button",
      {
        className: "rdt-mr-2 rdt-whitespace-nowrap rdt-rounded rdt-border rdt-border-gray-400 rdt-px-2 rdt-py-1 rdt-text-sm",
        onClick: openNewRoute(path2),
        children: /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(import_react34.Link, { to: path2, children: "Open in browser" })
      }
    )
  ] });
};

// src/RemixDevTools/components/RouteNode.tsx
var import_clsx12 = __toESM(require("clsx"), 1);
var import_jsx_runtime38 = require("react/jsx-runtime");
var RouteNode = ({
  nodeDatum,
  hierarchyPointNode,
  toggleNode,
  setActiveRoute,
  activeRoutes
}) => {
  const parent = hierarchyPointNode.parent?.data;
  const parentName = parent && parent?.name !== "/" ? parent.name : "";
  const name = nodeDatum.name.replace(parentName, "") ?? "/";
  const route = { ...nodeDatum, ...nodeDatum.attributes };
  return /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("g", { className: "rdt-flex", children: [
    /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(
      "circle",
      {
        x: 20,
        onClick: toggleNode,
        className: (0, import_clsx12.default)(
          getRouteColor(route),
          "rdt-stroke-white",
          nodeDatum.__rd3t.collapsed && nodeDatum.children?.length && "rdt-fill-gray-800"
        ),
        r: 12
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("g", { children: /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("foreignObject", { y: -15, x: 17, width: 110, height: 140, children: /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(
      "p",
      {
        onClick: () => setActiveRoute(route),
        style: { width: 100, fontSize: 14 },
        className: (0, import_clsx12.default)(
          "rdt-w-full rdt-break-all rdt-fill-white rdt-stroke-transparent",
          activeRoutes.includes(route.id) && "rdt-text-yellow-500"
        ),
        children: nodeDatum.attributes?.id === "root" ? "Root" : name ? name : "Index"
      }
    ) }) })
  ] });
};

// src/RemixDevTools/components/RouteToggle.tsx
var import_clsx13 = __toESM(require("clsx"), 1);
var import_jsx_runtime39 = require("react/jsx-runtime");
var RouteToggle = () => {
  const { settings, setSettings } = useSettingsContext();
  const { routeViewMode } = settings;
  return /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)("div", { className: "rdt-absolute rdt-left-0 rdt-top-0 rdt-flex rdt-items-center rdt-gap-2 rdt-rounded-lg rdt-border rdt-border-white rdt-px-3 rdt-py-1", children: [
    /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(
      Icon,
      {
        className: (0, import_clsx13.default)("rdt-h-5 rdt-w-5 hover:rdt-cursor-pointer", routeViewMode === "tree" && "rdt-text-yellow-500"),
        onClick: () => setSettings({ routeViewMode: "tree" }),
        name: "Network"
      }
    ),
    "/",
    /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(
      Icon,
      {
        name: "List",
        className: (0, import_clsx13.default)("rdt-h-5 rdt-w-5 hover:rdt-cursor-pointer", routeViewMode === "list" && "rdt-text-yellow-500"),
        onClick: () => setSettings({ routeViewMode: "list" })
      }
    )
  ] });
};

// src/external/react-d3-tree/Tree/index.tsx
var import_react40 = __toESM(require("react"), 1);

// node_modules/d3-hierarchy/src/hierarchy/count.js
function count(node) {
  var sum = 0, children2 = node.children, i = children2 && children2.length;
  if (!i)
    sum = 1;
  else
    while (--i >= 0)
      sum += children2[i].value;
  node.value = sum;
}
function count_default() {
  return this.eachAfter(count);
}

// node_modules/d3-hierarchy/src/hierarchy/each.js
function each_default(callback, that) {
  let index = -1;
  for (const node of this) {
    callback.call(that, node, ++index, this);
  }
  return this;
}

// node_modules/d3-hierarchy/src/hierarchy/eachBefore.js
function eachBefore_default(callback, that) {
  var node = this, nodes = [node], children2, i, index = -1;
  while (node = nodes.pop()) {
    callback.call(that, node, ++index, this);
    if (children2 = node.children) {
      for (i = children2.length - 1; i >= 0; --i) {
        nodes.push(children2[i]);
      }
    }
  }
  return this;
}

// node_modules/d3-hierarchy/src/hierarchy/eachAfter.js
function eachAfter_default(callback, that) {
  var node = this, nodes = [node], next = [], children2, i, n, index = -1;
  while (node = nodes.pop()) {
    next.push(node);
    if (children2 = node.children) {
      for (i = 0, n = children2.length; i < n; ++i) {
        nodes.push(children2[i]);
      }
    }
  }
  while (node = next.pop()) {
    callback.call(that, node, ++index, this);
  }
  return this;
}

// node_modules/d3-hierarchy/src/hierarchy/find.js
function find_default(callback, that) {
  let index = -1;
  for (const node of this) {
    if (callback.call(that, node, ++index, this)) {
      return node;
    }
  }
}

// node_modules/d3-hierarchy/src/hierarchy/sum.js
function sum_default(value) {
  return this.eachAfter(function(node) {
    var sum = +value(node.data) || 0, children2 = node.children, i = children2 && children2.length;
    while (--i >= 0)
      sum += children2[i].value;
    node.value = sum;
  });
}

// node_modules/d3-hierarchy/src/hierarchy/sort.js
function sort_default(compare) {
  return this.eachBefore(function(node) {
    if (node.children) {
      node.children.sort(compare);
    }
  });
}

// node_modules/d3-hierarchy/src/hierarchy/path.js
function path_default(end) {
  var start2 = this, ancestor = leastCommonAncestor(start2, end), nodes = [start2];
  while (start2 !== ancestor) {
    start2 = start2.parent;
    nodes.push(start2);
  }
  var k = nodes.length;
  while (end !== ancestor) {
    nodes.splice(k, 0, end);
    end = end.parent;
  }
  return nodes;
}
function leastCommonAncestor(a, b) {
  if (a === b)
    return a;
  var aNodes = a.ancestors(), bNodes = b.ancestors(), c = null;
  a = aNodes.pop();
  b = bNodes.pop();
  while (a === b) {
    c = a;
    a = aNodes.pop();
    b = bNodes.pop();
  }
  return c;
}

// node_modules/d3-hierarchy/src/hierarchy/ancestors.js
function ancestors_default() {
  var node = this, nodes = [node];
  while (node = node.parent) {
    nodes.push(node);
  }
  return nodes;
}

// node_modules/d3-hierarchy/src/hierarchy/descendants.js
function descendants_default() {
  return Array.from(this);
}

// node_modules/d3-hierarchy/src/hierarchy/leaves.js
function leaves_default() {
  var leaves = [];
  this.eachBefore(function(node) {
    if (!node.children) {
      leaves.push(node);
    }
  });
  return leaves;
}

// node_modules/d3-hierarchy/src/hierarchy/links.js
function links_default() {
  var root2 = this, links = [];
  root2.each(function(node) {
    if (node !== root2) {
      links.push({ source: node.parent, target: node });
    }
  });
  return links;
}

// node_modules/d3-hierarchy/src/hierarchy/iterator.js
function* iterator_default() {
  var node = this, current, next = [node], children2, i, n;
  do {
    current = next.reverse(), next = [];
    while (node = current.pop()) {
      yield node;
      if (children2 = node.children) {
        for (i = 0, n = children2.length; i < n; ++i) {
          next.push(children2[i]);
        }
      }
    }
  } while (next.length);
}

// node_modules/d3-hierarchy/src/hierarchy/index.js
function hierarchy(data, children2) {
  if (data instanceof Map) {
    data = [void 0, data];
    if (children2 === void 0)
      children2 = mapChildren;
  } else if (children2 === void 0) {
    children2 = objectChildren;
  }
  var root2 = new Node(data), node, nodes = [root2], child, childs, i, n;
  while (node = nodes.pop()) {
    if ((childs = children2(node.data)) && (n = (childs = Array.from(childs)).length)) {
      node.children = childs;
      for (i = n - 1; i >= 0; --i) {
        nodes.push(child = childs[i] = new Node(childs[i]));
        child.parent = node;
        child.depth = node.depth + 1;
      }
    }
  }
  return root2.eachBefore(computeHeight);
}
function node_copy() {
  return hierarchy(this).eachBefore(copyData);
}
function objectChildren(d) {
  return d.children;
}
function mapChildren(d) {
  return Array.isArray(d) ? d[1] : null;
}
function copyData(node) {
  if (node.data.value !== void 0)
    node.value = node.data.value;
  node.data = node.data.data;
}
function computeHeight(node) {
  var height = 0;
  do
    node.height = height;
  while ((node = node.parent) && node.height < ++height);
}
function Node(data) {
  this.data = data;
  this.depth = this.height = 0;
  this.parent = null;
}
Node.prototype = hierarchy.prototype = {
  constructor: Node,
  count: count_default,
  each: each_default,
  eachAfter: eachAfter_default,
  eachBefore: eachBefore_default,
  find: find_default,
  sum: sum_default,
  sort: sort_default,
  path: path_default,
  ancestors: ancestors_default,
  descendants: descendants_default,
  leaves: leaves_default,
  links: links_default,
  copy: node_copy,
  [Symbol.iterator]: iterator_default
};

// node_modules/d3-hierarchy/src/tree.js
function defaultSeparation(a, b) {
  return a.parent === b.parent ? 1 : 2;
}
function nextLeft(v) {
  var children2 = v.children;
  return children2 ? children2[0] : v.t;
}
function nextRight(v) {
  var children2 = v.children;
  return children2 ? children2[children2.length - 1] : v.t;
}
function moveSubtree(wm, wp, shift) {
  var change = shift / (wp.i - wm.i);
  wp.c -= change;
  wp.s += shift;
  wm.c += change;
  wp.z += shift;
  wp.m += shift;
}
function executeShifts(v) {
  var shift = 0, change = 0, children2 = v.children, i = children2.length, w;
  while (--i >= 0) {
    w = children2[i];
    w.z += shift;
    w.m += shift;
    shift += w.s + (change += w.c);
  }
}
function nextAncestor(vim, v, ancestor) {
  return vim.a.parent === v.parent ? vim.a : ancestor;
}
function TreeNode(node, i) {
  this._ = node;
  this.parent = null;
  this.children = null;
  this.A = null;
  this.a = this;
  this.z = 0;
  this.m = 0;
  this.c = 0;
  this.s = 0;
  this.t = null;
  this.i = i;
}
TreeNode.prototype = Object.create(Node.prototype);
function treeRoot(root2) {
  var tree = new TreeNode(root2, 0), node, nodes = [tree], child, children2, i, n;
  while (node = nodes.pop()) {
    if (children2 = node._.children) {
      node.children = new Array(n = children2.length);
      for (i = n - 1; i >= 0; --i) {
        nodes.push(child = node.children[i] = new TreeNode(children2[i], i));
        child.parent = node;
      }
    }
  }
  (tree.parent = new TreeNode(null, 0)).children = [tree];
  return tree;
}
function tree_default() {
  var separation = defaultSeparation, dx = 1, dy = 1, nodeSize = null;
  function tree(root2) {
    var t = treeRoot(root2);
    t.eachAfter(firstWalk), t.parent.m = -t.z;
    t.eachBefore(secondWalk);
    if (nodeSize)
      root2.eachBefore(sizeNode);
    else {
      var left = root2, right = root2, bottom = root2;
      root2.eachBefore(function(node) {
        if (node.x < left.x)
          left = node;
        if (node.x > right.x)
          right = node;
        if (node.depth > bottom.depth)
          bottom = node;
      });
      var s = left === right ? 1 : separation(left, right) / 2, tx = s - left.x, kx = dx / (right.x + s + tx), ky = dy / (bottom.depth || 1);
      root2.eachBefore(function(node) {
        node.x = (node.x + tx) * kx;
        node.y = node.depth * ky;
      });
    }
    return root2;
  }
  function firstWalk(v) {
    var children2 = v.children, siblings = v.parent.children, w = v.i ? siblings[v.i - 1] : null;
    if (children2) {
      executeShifts(v);
      var midpoint = (children2[0].z + children2[children2.length - 1].z) / 2;
      if (w) {
        v.z = w.z + separation(v._, w._);
        v.m = v.z - midpoint;
      } else {
        v.z = midpoint;
      }
    } else if (w) {
      v.z = w.z + separation(v._, w._);
    }
    v.parent.A = apportion(v, w, v.parent.A || siblings[0]);
  }
  function secondWalk(v) {
    v._.x = v.z + v.parent.m;
    v.m += v.parent.m;
  }
  function apportion(v, w, ancestor) {
    if (w) {
      var vip = v, vop = v, vim = w, vom = vip.parent.children[0], sip = vip.m, sop = vop.m, sim = vim.m, som = vom.m, shift;
      while (vim = nextRight(vim), vip = nextLeft(vip), vim && vip) {
        vom = nextLeft(vom);
        vop = nextRight(vop);
        vop.a = v;
        shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);
        if (shift > 0) {
          moveSubtree(nextAncestor(vim, v, ancestor), v, shift);
          sip += shift;
          sop += shift;
        }
        sim += vim.m;
        sip += vip.m;
        som += vom.m;
        sop += vop.m;
      }
      if (vim && !nextRight(vop)) {
        vop.t = vim;
        vop.m += sim - sop;
      }
      if (vip && !nextLeft(vom)) {
        vom.t = vip;
        vom.m += sip - som;
        ancestor = v;
      }
    }
    return ancestor;
  }
  function sizeNode(node) {
    node.x *= dx;
    node.y = node.depth * dy;
  }
  tree.separation = function(x2) {
    return arguments.length ? (separation = x2, tree) : separation;
  };
  tree.size = function(x2) {
    return arguments.length ? (nodeSize = false, dx = +x2[0], dy = +x2[1], tree) : nodeSize ? null : [dx, dy];
  };
  tree.nodeSize = function(x2) {
    return arguments.length ? (nodeSize = true, dx = +x2[0], dy = +x2[1], tree) : nodeSize ? [dx, dy] : null;
  };
  return tree;
}

// node_modules/d3-selection/src/namespaces.js
var xhtml = "http://www.w3.org/1999/xhtml";
var namespaces_default = {
  svg: "http://www.w3.org/2000/svg",
  xhtml,
  xlink: "http://www.w3.org/1999/xlink",
  xml: "http://www.w3.org/XML/1998/namespace",
  xmlns: "http://www.w3.org/2000/xmlns/"
};

// node_modules/d3-selection/src/namespace.js
function namespace_default(name) {
  var prefix = name += "", i = prefix.indexOf(":");
  if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns")
    name = name.slice(i + 1);
  return namespaces_default.hasOwnProperty(prefix) ? { space: namespaces_default[prefix], local: name } : name;
}

// node_modules/d3-selection/src/creator.js
function creatorInherit(name) {
  return function() {
    var document2 = this.ownerDocument, uri = this.namespaceURI;
    return uri === xhtml && document2.documentElement.namespaceURI === xhtml ? document2.createElement(name) : document2.createElementNS(uri, name);
  };
}
function creatorFixed(fullname) {
  return function() {
    return this.ownerDocument.createElementNS(fullname.space, fullname.local);
  };
}
function creator_default(name) {
  var fullname = namespace_default(name);
  return (fullname.local ? creatorFixed : creatorInherit)(fullname);
}

// node_modules/d3-selection/src/selector.js
function none() {
}
function selector_default(selector) {
  return selector == null ? none : function() {
    return this.querySelector(selector);
  };
}

// node_modules/d3-selection/src/selection/select.js
function select_default(select) {
  if (typeof select !== "function")
    select = selector_default(select);
  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
        if ("__data__" in node)
          subnode.__data__ = node.__data__;
        subgroup[i] = subnode;
      }
    }
  }
  return new Selection(subgroups, this._parents);
}

// node_modules/d3-selection/src/array.js
function array(x2) {
  return x2 == null ? [] : Array.isArray(x2) ? x2 : Array.from(x2);
}

// node_modules/d3-selection/src/selectorAll.js
function empty() {
  return [];
}
function selectorAll_default(selector) {
  return selector == null ? empty : function() {
    return this.querySelectorAll(selector);
  };
}

// node_modules/d3-selection/src/selection/selectAll.js
function arrayAll(select) {
  return function() {
    return array(select.apply(this, arguments));
  };
}
function selectAll_default(select) {
  if (typeof select === "function")
    select = arrayAll(select);
  else
    select = selectorAll_default(select);
  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        subgroups.push(select.call(node, node.__data__, i, group));
        parents.push(node);
      }
    }
  }
  return new Selection(subgroups, parents);
}

// node_modules/d3-selection/src/matcher.js
function matcher_default(selector) {
  return function() {
    return this.matches(selector);
  };
}
function childMatcher(selector) {
  return function(node) {
    return node.matches(selector);
  };
}

// node_modules/d3-selection/src/selection/selectChild.js
var find = Array.prototype.find;
function childFind(match) {
  return function() {
    return find.call(this.children, match);
  };
}
function childFirst() {
  return this.firstElementChild;
}
function selectChild_default(match) {
  return this.select(match == null ? childFirst : childFind(typeof match === "function" ? match : childMatcher(match)));
}

// node_modules/d3-selection/src/selection/selectChildren.js
var filter = Array.prototype.filter;
function children() {
  return Array.from(this.children);
}
function childrenFilter(match) {
  return function() {
    return filter.call(this.children, match);
  };
}
function selectChildren_default(match) {
  return this.selectAll(match == null ? children : childrenFilter(typeof match === "function" ? match : childMatcher(match)));
}

// node_modules/d3-selection/src/selection/filter.js
function filter_default(match) {
  if (typeof match !== "function")
    match = matcher_default(match);
  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
        subgroup.push(node);
      }
    }
  }
  return new Selection(subgroups, this._parents);
}

// node_modules/d3-selection/src/selection/sparse.js
function sparse_default(update) {
  return new Array(update.length);
}

// node_modules/d3-selection/src/selection/enter.js
function enter_default() {
  return new Selection(this._enter || this._groups.map(sparse_default), this._parents);
}
function EnterNode(parent, datum2) {
  this.ownerDocument = parent.ownerDocument;
  this.namespaceURI = parent.namespaceURI;
  this._next = null;
  this._parent = parent;
  this.__data__ = datum2;
}
EnterNode.prototype = {
  constructor: EnterNode,
  appendChild: function(child) {
    return this._parent.insertBefore(child, this._next);
  },
  insertBefore: function(child, next) {
    return this._parent.insertBefore(child, next);
  },
  querySelector: function(selector) {
    return this._parent.querySelector(selector);
  },
  querySelectorAll: function(selector) {
    return this._parent.querySelectorAll(selector);
  }
};

// node_modules/d3-selection/src/constant.js
function constant_default(x2) {
  return function() {
    return x2;
  };
}

// node_modules/d3-selection/src/selection/data.js
function bindIndex(parent, group, enter, update, exit, data) {
  var i = 0, node, groupLength = group.length, dataLength = data.length;
  for (; i < dataLength; ++i) {
    if (node = group[i]) {
      node.__data__ = data[i];
      update[i] = node;
    } else {
      enter[i] = new EnterNode(parent, data[i]);
    }
  }
  for (; i < groupLength; ++i) {
    if (node = group[i]) {
      exit[i] = node;
    }
  }
}
function bindKey(parent, group, enter, update, exit, data, key) {
  var i, node, nodeByKeyValue = /* @__PURE__ */ new Map(), groupLength = group.length, dataLength = data.length, keyValues = new Array(groupLength), keyValue;
  for (i = 0; i < groupLength; ++i) {
    if (node = group[i]) {
      keyValues[i] = keyValue = key.call(node, node.__data__, i, group) + "";
      if (nodeByKeyValue.has(keyValue)) {
        exit[i] = node;
      } else {
        nodeByKeyValue.set(keyValue, node);
      }
    }
  }
  for (i = 0; i < dataLength; ++i) {
    keyValue = key.call(parent, data[i], i, data) + "";
    if (node = nodeByKeyValue.get(keyValue)) {
      update[i] = node;
      node.__data__ = data[i];
      nodeByKeyValue.delete(keyValue);
    } else {
      enter[i] = new EnterNode(parent, data[i]);
    }
  }
  for (i = 0; i < groupLength; ++i) {
    if ((node = group[i]) && nodeByKeyValue.get(keyValues[i]) === node) {
      exit[i] = node;
    }
  }
}
function datum(node) {
  return node.__data__;
}
function data_default(value, key) {
  if (!arguments.length)
    return Array.from(this, datum);
  var bind = key ? bindKey : bindIndex, parents = this._parents, groups = this._groups;
  if (typeof value !== "function")
    value = constant_default(value);
  for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {
    var parent = parents[j], group = groups[j], groupLength = group.length, data = arraylike(value.call(parent, parent && parent.__data__, j, parents)), dataLength = data.length, enterGroup = enter[j] = new Array(dataLength), updateGroup = update[j] = new Array(dataLength), exitGroup = exit[j] = new Array(groupLength);
    bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);
    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
      if (previous = enterGroup[i0]) {
        if (i0 >= i1)
          i1 = i0 + 1;
        while (!(next = updateGroup[i1]) && ++i1 < dataLength)
          ;
        previous._next = next || null;
      }
    }
  }
  update = new Selection(update, parents);
  update._enter = enter;
  update._exit = exit;
  return update;
}
function arraylike(data) {
  return typeof data === "object" && "length" in data ? data : Array.from(data);
}

// node_modules/d3-selection/src/selection/exit.js
function exit_default() {
  return new Selection(this._exit || this._groups.map(sparse_default), this._parents);
}

// node_modules/d3-selection/src/selection/join.js
function join_default(onenter, onupdate, onexit) {
  var enter = this.enter(), update = this, exit = this.exit();
  if (typeof onenter === "function") {
    enter = onenter(enter);
    if (enter)
      enter = enter.selection();
  } else {
    enter = enter.append(onenter + "");
  }
  if (onupdate != null) {
    update = onupdate(update);
    if (update)
      update = update.selection();
  }
  if (onexit == null)
    exit.remove();
  else
    onexit(exit);
  return enter && update ? enter.merge(update).order() : update;
}

// node_modules/d3-selection/src/selection/merge.js
function merge_default(context) {
  var selection2 = context.selection ? context.selection() : context;
  for (var groups0 = this._groups, groups1 = selection2._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group0[i] || group1[i]) {
        merge[i] = node;
      }
    }
  }
  for (; j < m0; ++j) {
    merges[j] = groups0[j];
  }
  return new Selection(merges, this._parents);
}

// node_modules/d3-selection/src/selection/order.js
function order_default() {
  for (var groups = this._groups, j = -1, m = groups.length; ++j < m; ) {
    for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0; ) {
      if (node = group[i]) {
        if (next && node.compareDocumentPosition(next) ^ 4)
          next.parentNode.insertBefore(node, next);
        next = node;
      }
    }
  }
  return this;
}

// node_modules/d3-selection/src/selection/sort.js
function sort_default2(compare) {
  if (!compare)
    compare = ascending;
  function compareNode(a, b) {
    return a && b ? compare(a.__data__, b.__data__) : !a - !b;
  }
  for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        sortgroup[i] = node;
      }
    }
    sortgroup.sort(compareNode);
  }
  return new Selection(sortgroups, this._parents).order();
}
function ascending(a, b) {
  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}

// node_modules/d3-selection/src/selection/call.js
function call_default() {
  var callback = arguments[0];
  arguments[0] = this;
  callback.apply(null, arguments);
  return this;
}

// node_modules/d3-selection/src/selection/nodes.js
function nodes_default() {
  return Array.from(this);
}

// node_modules/d3-selection/src/selection/node.js
function node_default() {
  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {
      var node = group[i];
      if (node)
        return node;
    }
  }
  return null;
}

// node_modules/d3-selection/src/selection/size.js
function size_default() {
  let size = 0;
  for (const node of this)
    ++size;
  return size;
}

// node_modules/d3-selection/src/selection/empty.js
function empty_default() {
  return !this.node();
}

// node_modules/d3-selection/src/selection/each.js
function each_default2(callback) {
  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
      if (node = group[i])
        callback.call(node, node.__data__, i, group);
    }
  }
  return this;
}

// node_modules/d3-selection/src/selection/attr.js
function attrRemove(name) {
  return function() {
    this.removeAttribute(name);
  };
}
function attrRemoveNS(fullname) {
  return function() {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}
function attrConstant(name, value) {
  return function() {
    this.setAttribute(name, value);
  };
}
function attrConstantNS(fullname, value) {
  return function() {
    this.setAttributeNS(fullname.space, fullname.local, value);
  };
}
function attrFunction(name, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null)
      this.removeAttribute(name);
    else
      this.setAttribute(name, v);
  };
}
function attrFunctionNS(fullname, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null)
      this.removeAttributeNS(fullname.space, fullname.local);
    else
      this.setAttributeNS(fullname.space, fullname.local, v);
  };
}
function attr_default(name, value) {
  var fullname = namespace_default(name);
  if (arguments.length < 2) {
    var node = this.node();
    return fullname.local ? node.getAttributeNS(fullname.space, fullname.local) : node.getAttribute(fullname);
  }
  return this.each((value == null ? fullname.local ? attrRemoveNS : attrRemove : typeof value === "function" ? fullname.local ? attrFunctionNS : attrFunction : fullname.local ? attrConstantNS : attrConstant)(fullname, value));
}

// node_modules/d3-selection/src/window.js
function window_default(node) {
  return node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView;
}

// node_modules/d3-selection/src/selection/style.js
function styleRemove(name) {
  return function() {
    this.style.removeProperty(name);
  };
}
function styleConstant(name, value, priority) {
  return function() {
    this.style.setProperty(name, value, priority);
  };
}
function styleFunction(name, value, priority) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null)
      this.style.removeProperty(name);
    else
      this.style.setProperty(name, v, priority);
  };
}
function style_default(name, value, priority) {
  return arguments.length > 1 ? this.each((value == null ? styleRemove : typeof value === "function" ? styleFunction : styleConstant)(name, value, priority == null ? "" : priority)) : styleValue(this.node(), name);
}
function styleValue(node, name) {
  return node.style.getPropertyValue(name) || window_default(node).getComputedStyle(node, null).getPropertyValue(name);
}

// node_modules/d3-selection/src/selection/property.js
function propertyRemove(name) {
  return function() {
    delete this[name];
  };
}
function propertyConstant(name, value) {
  return function() {
    this[name] = value;
  };
}
function propertyFunction(name, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null)
      delete this[name];
    else
      this[name] = v;
  };
}
function property_default(name, value) {
  return arguments.length > 1 ? this.each((value == null ? propertyRemove : typeof value === "function" ? propertyFunction : propertyConstant)(name, value)) : this.node()[name];
}

// node_modules/d3-selection/src/selection/classed.js
function classArray(string) {
  return string.trim().split(/^|\s+/);
}
function classList(node) {
  return node.classList || new ClassList(node);
}
function ClassList(node) {
  this._node = node;
  this._names = classArray(node.getAttribute("class") || "");
}
ClassList.prototype = {
  add: function(name) {
    var i = this._names.indexOf(name);
    if (i < 0) {
      this._names.push(name);
      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  remove: function(name) {
    var i = this._names.indexOf(name);
    if (i >= 0) {
      this._names.splice(i, 1);
      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  contains: function(name) {
    return this._names.indexOf(name) >= 0;
  }
};
function classedAdd(node, names) {
  var list = classList(node), i = -1, n = names.length;
  while (++i < n)
    list.add(names[i]);
}
function classedRemove(node, names) {
  var list = classList(node), i = -1, n = names.length;
  while (++i < n)
    list.remove(names[i]);
}
function classedTrue(names) {
  return function() {
    classedAdd(this, names);
  };
}
function classedFalse(names) {
  return function() {
    classedRemove(this, names);
  };
}
function classedFunction(names, value) {
  return function() {
    (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
  };
}
function classed_default(name, value) {
  var names = classArray(name + "");
  if (arguments.length < 2) {
    var list = classList(this.node()), i = -1, n = names.length;
    while (++i < n)
      if (!list.contains(names[i]))
        return false;
    return true;
  }
  return this.each((typeof value === "function" ? classedFunction : value ? classedTrue : classedFalse)(names, value));
}

// node_modules/d3-selection/src/selection/text.js
function textRemove() {
  this.textContent = "";
}
function textConstant(value) {
  return function() {
    this.textContent = value;
  };
}
function textFunction(value) {
  return function() {
    var v = value.apply(this, arguments);
    this.textContent = v == null ? "" : v;
  };
}
function text_default(value) {
  return arguments.length ? this.each(value == null ? textRemove : (typeof value === "function" ? textFunction : textConstant)(value)) : this.node().textContent;
}

// node_modules/d3-selection/src/selection/html.js
function htmlRemove() {
  this.innerHTML = "";
}
function htmlConstant(value) {
  return function() {
    this.innerHTML = value;
  };
}
function htmlFunction(value) {
  return function() {
    var v = value.apply(this, arguments);
    this.innerHTML = v == null ? "" : v;
  };
}
function html_default(value) {
  return arguments.length ? this.each(value == null ? htmlRemove : (typeof value === "function" ? htmlFunction : htmlConstant)(value)) : this.node().innerHTML;
}

// node_modules/d3-selection/src/selection/raise.js
function raise() {
  if (this.nextSibling)
    this.parentNode.appendChild(this);
}
function raise_default() {
  return this.each(raise);
}

// node_modules/d3-selection/src/selection/lower.js
function lower() {
  if (this.previousSibling)
    this.parentNode.insertBefore(this, this.parentNode.firstChild);
}
function lower_default() {
  return this.each(lower);
}

// node_modules/d3-selection/src/selection/append.js
function append_default(name) {
  var create2 = typeof name === "function" ? name : creator_default(name);
  return this.select(function() {
    return this.appendChild(create2.apply(this, arguments));
  });
}

// node_modules/d3-selection/src/selection/insert.js
function constantNull() {
  return null;
}
function insert_default(name, before) {
  var create2 = typeof name === "function" ? name : creator_default(name), select = before == null ? constantNull : typeof before === "function" ? before : selector_default(before);
  return this.select(function() {
    return this.insertBefore(create2.apply(this, arguments), select.apply(this, arguments) || null);
  });
}

// node_modules/d3-selection/src/selection/remove.js
function remove() {
  var parent = this.parentNode;
  if (parent)
    parent.removeChild(this);
}
function remove_default() {
  return this.each(remove);
}

// node_modules/d3-selection/src/selection/clone.js
function selection_cloneShallow() {
  var clone2 = this.cloneNode(false), parent = this.parentNode;
  return parent ? parent.insertBefore(clone2, this.nextSibling) : clone2;
}
function selection_cloneDeep() {
  var clone2 = this.cloneNode(true), parent = this.parentNode;
  return parent ? parent.insertBefore(clone2, this.nextSibling) : clone2;
}
function clone_default(deep) {
  return this.select(deep ? selection_cloneDeep : selection_cloneShallow);
}

// node_modules/d3-selection/src/selection/datum.js
function datum_default(value) {
  return arguments.length ? this.property("__data__", value) : this.node().__data__;
}

// node_modules/d3-selection/src/selection/on.js
function contextListener(listener) {
  return function(event) {
    listener.call(this, event, this.__data__);
  };
}
function parseTypenames(typenames) {
  return typenames.trim().split(/^|\s+/).map(function(t) {
    var name = "", i = t.indexOf(".");
    if (i >= 0)
      name = t.slice(i + 1), t = t.slice(0, i);
    return { type: t, name };
  });
}
function onRemove(typename) {
  return function() {
    var on = this.__on;
    if (!on)
      return;
    for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {
      if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {
        this.removeEventListener(o.type, o.listener, o.options);
      } else {
        on[++i] = o;
      }
    }
    if (++i)
      on.length = i;
    else
      delete this.__on;
  };
}
function onAdd(typename, value, options) {
  return function() {
    var on = this.__on, o, listener = contextListener(value);
    if (on)
      for (var j = 0, m = on.length; j < m; ++j) {
        if ((o = on[j]).type === typename.type && o.name === typename.name) {
          this.removeEventListener(o.type, o.listener, o.options);
          this.addEventListener(o.type, o.listener = listener, o.options = options);
          o.value = value;
          return;
        }
      }
    this.addEventListener(typename.type, listener, options);
    o = { type: typename.type, name: typename.name, value, listener, options };
    if (!on)
      this.__on = [o];
    else
      on.push(o);
  };
}
function on_default(typename, value, options) {
  var typenames = parseTypenames(typename + ""), i, n = typenames.length, t;
  if (arguments.length < 2) {
    var on = this.node().__on;
    if (on)
      for (var j = 0, m = on.length, o; j < m; ++j) {
        for (i = 0, o = on[j]; i < n; ++i) {
          if ((t = typenames[i]).type === o.type && t.name === o.name) {
            return o.value;
          }
        }
      }
    return;
  }
  on = value ? onAdd : onRemove;
  for (i = 0; i < n; ++i)
    this.each(on(typenames[i], value, options));
  return this;
}

// node_modules/d3-selection/src/selection/dispatch.js
function dispatchEvent(node, type, params) {
  var window2 = window_default(node), event = window2.CustomEvent;
  if (typeof event === "function") {
    event = new event(type, params);
  } else {
    event = window2.document.createEvent("Event");
    if (params)
      event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;
    else
      event.initEvent(type, false, false);
  }
  node.dispatchEvent(event);
}
function dispatchConstant(type, params) {
  return function() {
    return dispatchEvent(this, type, params);
  };
}
function dispatchFunction(type, params) {
  return function() {
    return dispatchEvent(this, type, params.apply(this, arguments));
  };
}
function dispatch_default(type, params) {
  return this.each((typeof params === "function" ? dispatchFunction : dispatchConstant)(type, params));
}

// node_modules/d3-selection/src/selection/iterator.js
function* iterator_default2() {
  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
      if (node = group[i])
        yield node;
    }
  }
}

// node_modules/d3-selection/src/selection/index.js
var root = [null];
function Selection(groups, parents) {
  this._groups = groups;
  this._parents = parents;
}
function selection() {
  return new Selection([[document.documentElement]], root);
}
function selection_selection() {
  return this;
}
Selection.prototype = selection.prototype = {
  constructor: Selection,
  select: select_default,
  selectAll: selectAll_default,
  selectChild: selectChild_default,
  selectChildren: selectChildren_default,
  filter: filter_default,
  data: data_default,
  enter: enter_default,
  exit: exit_default,
  join: join_default,
  merge: merge_default,
  selection: selection_selection,
  order: order_default,
  sort: sort_default2,
  call: call_default,
  nodes: nodes_default,
  node: node_default,
  size: size_default,
  empty: empty_default,
  each: each_default2,
  attr: attr_default,
  style: style_default,
  property: property_default,
  classed: classed_default,
  text: text_default,
  html: html_default,
  raise: raise_default,
  lower: lower_default,
  append: append_default,
  insert: insert_default,
  remove: remove_default,
  clone: clone_default,
  datum: datum_default,
  on: on_default,
  dispatch: dispatch_default,
  [Symbol.iterator]: iterator_default2
};
var selection_default = selection;

// node_modules/d3-selection/src/select.js
function select_default2(selector) {
  return typeof selector === "string" ? new Selection([[document.querySelector(selector)]], [document.documentElement]) : new Selection([[selector]], root);
}

// node_modules/d3-selection/src/sourceEvent.js
function sourceEvent_default(event) {
  let sourceEvent;
  while (sourceEvent = event.sourceEvent)
    event = sourceEvent;
  return event;
}

// node_modules/d3-selection/src/pointer.js
function pointer_default(event, node) {
  event = sourceEvent_default(event);
  if (node === void 0)
    node = event.currentTarget;
  if (node) {
    var svg = node.ownerSVGElement || node;
    if (svg.createSVGPoint) {
      var point = svg.createSVGPoint();
      point.x = event.clientX, point.y = event.clientY;
      point = point.matrixTransform(node.getScreenCTM().inverse());
      return [point.x, point.y];
    }
    if (node.getBoundingClientRect) {
      var rect = node.getBoundingClientRect();
      return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];
    }
  }
  return [event.pageX, event.pageY];
}

// node_modules/d3-dispatch/src/dispatch.js
var noop = { value: () => {
} };
function dispatch() {
  for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {
    if (!(t = arguments[i] + "") || t in _ || /[\s.]/.test(t))
      throw new Error("illegal type: " + t);
    _[t] = [];
  }
  return new Dispatch(_);
}
function Dispatch(_) {
  this._ = _;
}
function parseTypenames2(typenames, types) {
  return typenames.trim().split(/^|\s+/).map(function(t) {
    var name = "", i = t.indexOf(".");
    if (i >= 0)
      name = t.slice(i + 1), t = t.slice(0, i);
    if (t && !types.hasOwnProperty(t))
      throw new Error("unknown type: " + t);
    return { type: t, name };
  });
}
Dispatch.prototype = dispatch.prototype = {
  constructor: Dispatch,
  on: function(typename, callback) {
    var _ = this._, T = parseTypenames2(typename + "", _), t, i = -1, n = T.length;
    if (arguments.length < 2) {
      while (++i < n)
        if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name)))
          return t;
      return;
    }
    if (callback != null && typeof callback !== "function")
      throw new Error("invalid callback: " + callback);
    while (++i < n) {
      if (t = (typename = T[i]).type)
        _[t] = set(_[t], typename.name, callback);
      else if (callback == null)
        for (t in _)
          _[t] = set(_[t], typename.name, null);
    }
    return this;
  },
  copy: function() {
    var copy = {}, _ = this._;
    for (var t in _)
      copy[t] = _[t].slice();
    return new Dispatch(copy);
  },
  call: function(type, that) {
    if ((n = arguments.length - 2) > 0)
      for (var args = new Array(n), i = 0, n, t; i < n; ++i)
        args[i] = arguments[i + 2];
    if (!this._.hasOwnProperty(type))
      throw new Error("unknown type: " + type);
    for (t = this._[type], i = 0, n = t.length; i < n; ++i)
      t[i].value.apply(that, args);
  },
  apply: function(type, that, args) {
    if (!this._.hasOwnProperty(type))
      throw new Error("unknown type: " + type);
    for (var t = this._[type], i = 0, n = t.length; i < n; ++i)
      t[i].value.apply(that, args);
  }
};
function get(type, name) {
  for (var i = 0, n = type.length, c; i < n; ++i) {
    if ((c = type[i]).name === name) {
      return c.value;
    }
  }
}
function set(type, name, callback) {
  for (var i = 0, n = type.length; i < n; ++i) {
    if (type[i].name === name) {
      type[i] = noop, type = type.slice(0, i).concat(type.slice(i + 1));
      break;
    }
  }
  if (callback != null)
    type.push({ name, value: callback });
  return type;
}
var dispatch_default2 = dispatch;

// node_modules/d3-drag/src/noevent.js
var nonpassivecapture = { capture: true, passive: false };
function noevent_default(event) {
  event.preventDefault();
  event.stopImmediatePropagation();
}

// node_modules/d3-drag/src/nodrag.js
function nodrag_default(view) {
  var root2 = view.document.documentElement, selection2 = select_default2(view).on("dragstart.drag", noevent_default, nonpassivecapture);
  if ("onselectstart" in root2) {
    selection2.on("selectstart.drag", noevent_default, nonpassivecapture);
  } else {
    root2.__noselect = root2.style.MozUserSelect;
    root2.style.MozUserSelect = "none";
  }
}
function yesdrag(view, noclick) {
  var root2 = view.document.documentElement, selection2 = select_default2(view).on("dragstart.drag", null);
  if (noclick) {
    selection2.on("click.drag", noevent_default, nonpassivecapture);
    setTimeout(function() {
      selection2.on("click.drag", null);
    }, 0);
  }
  if ("onselectstart" in root2) {
    selection2.on("selectstart.drag", null);
  } else {
    root2.style.MozUserSelect = root2.__noselect;
    delete root2.__noselect;
  }
}

// node_modules/d3-color/src/define.js
function define_default(constructor, factory, prototype) {
  constructor.prototype = factory.prototype = prototype;
  prototype.constructor = constructor;
}
function extend(parent, definition) {
  var prototype = Object.create(parent.prototype);
  for (var key in definition)
    prototype[key] = definition[key];
  return prototype;
}

// node_modules/d3-color/src/color.js
function Color() {
}
var darker = 0.7;
var brighter = 1 / darker;
var reI = "\\s*([+-]?\\d+)\\s*";
var reN = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*";
var reP = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*";
var reHex = /^#([0-9a-f]{3,8})$/;
var reRgbInteger = new RegExp(`^rgb\\(${reI},${reI},${reI}\\)$`);
var reRgbPercent = new RegExp(`^rgb\\(${reP},${reP},${reP}\\)$`);
var reRgbaInteger = new RegExp(`^rgba\\(${reI},${reI},${reI},${reN}\\)$`);
var reRgbaPercent = new RegExp(`^rgba\\(${reP},${reP},${reP},${reN}\\)$`);
var reHslPercent = new RegExp(`^hsl\\(${reN},${reP},${reP}\\)$`);
var reHslaPercent = new RegExp(`^hsla\\(${reN},${reP},${reP},${reN}\\)$`);
var named = {
  aliceblue: 15792383,
  antiquewhite: 16444375,
  aqua: 65535,
  aquamarine: 8388564,
  azure: 15794175,
  beige: 16119260,
  bisque: 16770244,
  black: 0,
  blanchedalmond: 16772045,
  blue: 255,
  blueviolet: 9055202,
  brown: 10824234,
  burlywood: 14596231,
  cadetblue: 6266528,
  chartreuse: 8388352,
  chocolate: 13789470,
  coral: 16744272,
  cornflowerblue: 6591981,
  cornsilk: 16775388,
  crimson: 14423100,
  cyan: 65535,
  darkblue: 139,
  darkcyan: 35723,
  darkgoldenrod: 12092939,
  darkgray: 11119017,
  darkgreen: 25600,
  darkgrey: 11119017,
  darkkhaki: 12433259,
  darkmagenta: 9109643,
  darkolivegreen: 5597999,
  darkorange: 16747520,
  darkorchid: 10040012,
  darkred: 9109504,
  darksalmon: 15308410,
  darkseagreen: 9419919,
  darkslateblue: 4734347,
  darkslategray: 3100495,
  darkslategrey: 3100495,
  darkturquoise: 52945,
  darkviolet: 9699539,
  deeppink: 16716947,
  deepskyblue: 49151,
  dimgray: 6908265,
  dimgrey: 6908265,
  dodgerblue: 2003199,
  firebrick: 11674146,
  floralwhite: 16775920,
  forestgreen: 2263842,
  fuchsia: 16711935,
  gainsboro: 14474460,
  ghostwhite: 16316671,
  gold: 16766720,
  goldenrod: 14329120,
  gray: 8421504,
  green: 32768,
  greenyellow: 11403055,
  grey: 8421504,
  honeydew: 15794160,
  hotpink: 16738740,
  indianred: 13458524,
  indigo: 4915330,
  ivory: 16777200,
  khaki: 15787660,
  lavender: 15132410,
  lavenderblush: 16773365,
  lawngreen: 8190976,
  lemonchiffon: 16775885,
  lightblue: 11393254,
  lightcoral: 15761536,
  lightcyan: 14745599,
  lightgoldenrodyellow: 16448210,
  lightgray: 13882323,
  lightgreen: 9498256,
  lightgrey: 13882323,
  lightpink: 16758465,
  lightsalmon: 16752762,
  lightseagreen: 2142890,
  lightskyblue: 8900346,
  lightslategray: 7833753,
  lightslategrey: 7833753,
  lightsteelblue: 11584734,
  lightyellow: 16777184,
  lime: 65280,
  limegreen: 3329330,
  linen: 16445670,
  magenta: 16711935,
  maroon: 8388608,
  mediumaquamarine: 6737322,
  mediumblue: 205,
  mediumorchid: 12211667,
  mediumpurple: 9662683,
  mediumseagreen: 3978097,
  mediumslateblue: 8087790,
  mediumspringgreen: 64154,
  mediumturquoise: 4772300,
  mediumvioletred: 13047173,
  midnightblue: 1644912,
  mintcream: 16121850,
  mistyrose: 16770273,
  moccasin: 16770229,
  navajowhite: 16768685,
  navy: 128,
  oldlace: 16643558,
  olive: 8421376,
  olivedrab: 7048739,
  orange: 16753920,
  orangered: 16729344,
  orchid: 14315734,
  palegoldenrod: 15657130,
  palegreen: 10025880,
  paleturquoise: 11529966,
  palevioletred: 14381203,
  papayawhip: 16773077,
  peachpuff: 16767673,
  peru: 13468991,
  pink: 16761035,
  plum: 14524637,
  powderblue: 11591910,
  purple: 8388736,
  rebeccapurple: 6697881,
  red: 16711680,
  rosybrown: 12357519,
  royalblue: 4286945,
  saddlebrown: 9127187,
  salmon: 16416882,
  sandybrown: 16032864,
  seagreen: 3050327,
  seashell: 16774638,
  sienna: 10506797,
  silver: 12632256,
  skyblue: 8900331,
  slateblue: 6970061,
  slategray: 7372944,
  slategrey: 7372944,
  snow: 16775930,
  springgreen: 65407,
  steelblue: 4620980,
  tan: 13808780,
  teal: 32896,
  thistle: 14204888,
  tomato: 16737095,
  turquoise: 4251856,
  violet: 15631086,
  wheat: 16113331,
  white: 16777215,
  whitesmoke: 16119285,
  yellow: 16776960,
  yellowgreen: 10145074
};
define_default(Color, color, {
  copy(channels) {
    return Object.assign(new this.constructor(), this, channels);
  },
  displayable() {
    return this.rgb().displayable();
  },
  hex: color_formatHex,
  // Deprecated! Use color.formatHex.
  formatHex: color_formatHex,
  formatHex8: color_formatHex8,
  formatHsl: color_formatHsl,
  formatRgb: color_formatRgb,
  toString: color_formatRgb
});
function color_formatHex() {
  return this.rgb().formatHex();
}
function color_formatHex8() {
  return this.rgb().formatHex8();
}
function color_formatHsl() {
  return hslConvert(this).formatHsl();
}
function color_formatRgb() {
  return this.rgb().formatRgb();
}
function color(format) {
  var m, l;
  format = (format + "").trim().toLowerCase();
  return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) : l === 3 ? new Rgb(m >> 8 & 15 | m >> 4 & 240, m >> 4 & 15 | m & 240, (m & 15) << 4 | m & 15, 1) : l === 8 ? rgba(m >> 24 & 255, m >> 16 & 255, m >> 8 & 255, (m & 255) / 255) : l === 4 ? rgba(m >> 12 & 15 | m >> 8 & 240, m >> 8 & 15 | m >> 4 & 240, m >> 4 & 15 | m & 240, ((m & 15) << 4 | m & 15) / 255) : null) : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) : named.hasOwnProperty(format) ? rgbn(named[format]) : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
}
function rgbn(n) {
  return new Rgb(n >> 16 & 255, n >> 8 & 255, n & 255, 1);
}
function rgba(r, g, b, a) {
  if (a <= 0)
    r = g = b = NaN;
  return new Rgb(r, g, b, a);
}
function rgbConvert(o) {
  if (!(o instanceof Color))
    o = color(o);
  if (!o)
    return new Rgb();
  o = o.rgb();
  return new Rgb(o.r, o.g, o.b, o.opacity);
}
function rgb(r, g, b, opacity) {
  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
}
function Rgb(r, g, b, opacity) {
  this.r = +r;
  this.g = +g;
  this.b = +b;
  this.opacity = +opacity;
}
define_default(Rgb, rgb, extend(Color, {
  brighter(k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  darker(k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  rgb() {
    return this;
  },
  clamp() {
    return new Rgb(clampi(this.r), clampi(this.g), clampi(this.b), clampa(this.opacity));
  },
  displayable() {
    return -0.5 <= this.r && this.r < 255.5 && (-0.5 <= this.g && this.g < 255.5) && (-0.5 <= this.b && this.b < 255.5) && (0 <= this.opacity && this.opacity <= 1);
  },
  hex: rgb_formatHex,
  // Deprecated! Use color.formatHex.
  formatHex: rgb_formatHex,
  formatHex8: rgb_formatHex8,
  formatRgb: rgb_formatRgb,
  toString: rgb_formatRgb
}));
function rgb_formatHex() {
  return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}`;
}
function rgb_formatHex8() {
  return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}${hex((isNaN(this.opacity) ? 1 : this.opacity) * 255)}`;
}
function rgb_formatRgb() {
  const a = clampa(this.opacity);
  return `${a === 1 ? "rgb(" : "rgba("}${clampi(this.r)}, ${clampi(this.g)}, ${clampi(this.b)}${a === 1 ? ")" : `, ${a})`}`;
}
function clampa(opacity) {
  return isNaN(opacity) ? 1 : Math.max(0, Math.min(1, opacity));
}
function clampi(value) {
  return Math.max(0, Math.min(255, Math.round(value) || 0));
}
function hex(value) {
  value = clampi(value);
  return (value < 16 ? "0" : "") + value.toString(16);
}
function hsla(h, s, l, a) {
  if (a <= 0)
    h = s = l = NaN;
  else if (l <= 0 || l >= 1)
    h = s = NaN;
  else if (s <= 0)
    h = NaN;
  return new Hsl(h, s, l, a);
}
function hslConvert(o) {
  if (o instanceof Hsl)
    return new Hsl(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Color))
    o = color(o);
  if (!o)
    return new Hsl();
  if (o instanceof Hsl)
    return o;
  o = o.rgb();
  var r = o.r / 255, g = o.g / 255, b = o.b / 255, min = Math.min(r, g, b), max = Math.max(r, g, b), h = NaN, s = max - min, l = (max + min) / 2;
  if (s) {
    if (r === max)
      h = (g - b) / s + (g < b) * 6;
    else if (g === max)
      h = (b - r) / s + 2;
    else
      h = (r - g) / s + 4;
    s /= l < 0.5 ? max + min : 2 - max - min;
    h *= 60;
  } else {
    s = l > 0 && l < 1 ? 0 : h;
  }
  return new Hsl(h, s, l, o.opacity);
}
function hsl(h, s, l, opacity) {
  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
}
function Hsl(h, s, l, opacity) {
  this.h = +h;
  this.s = +s;
  this.l = +l;
  this.opacity = +opacity;
}
define_default(Hsl, hsl, extend(Color, {
  brighter(k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  darker(k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  rgb() {
    var h = this.h % 360 + (this.h < 0) * 360, s = isNaN(h) || isNaN(this.s) ? 0 : this.s, l = this.l, m2 = l + (l < 0.5 ? l : 1 - l) * s, m1 = 2 * l - m2;
    return new Rgb(
      hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),
      hsl2rgb(h, m1, m2),
      hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),
      this.opacity
    );
  },
  clamp() {
    return new Hsl(clamph(this.h), clampt(this.s), clampt(this.l), clampa(this.opacity));
  },
  displayable() {
    return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && (0 <= this.l && this.l <= 1) && (0 <= this.opacity && this.opacity <= 1);
  },
  formatHsl() {
    const a = clampa(this.opacity);
    return `${a === 1 ? "hsl(" : "hsla("}${clamph(this.h)}, ${clampt(this.s) * 100}%, ${clampt(this.l) * 100}%${a === 1 ? ")" : `, ${a})`}`;
  }
}));
function clamph(value) {
  value = (value || 0) % 360;
  return value < 0 ? value + 360 : value;
}
function clampt(value) {
  return Math.max(0, Math.min(1, value || 0));
}
function hsl2rgb(h, m1, m2) {
  return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255;
}

// node_modules/d3-interpolate/src/basis.js
function basis(t1, v0, v1, v2, v3) {
  var t2 = t1 * t1, t3 = t2 * t1;
  return ((1 - 3 * t1 + 3 * t2 - t3) * v0 + (4 - 6 * t2 + 3 * t3) * v1 + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2 + t3 * v3) / 6;
}
function basis_default(values2) {
  var n = values2.length - 1;
  return function(t) {
    var i = t <= 0 ? t = 0 : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n), v1 = values2[i], v2 = values2[i + 1], v0 = i > 0 ? values2[i - 1] : 2 * v1 - v2, v3 = i < n - 1 ? values2[i + 2] : 2 * v2 - v1;
    return basis((t - i / n) * n, v0, v1, v2, v3);
  };
}

// node_modules/d3-interpolate/src/basisClosed.js
function basisClosed_default(values2) {
  var n = values2.length;
  return function(t) {
    var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n), v0 = values2[(i + n - 1) % n], v1 = values2[i % n], v2 = values2[(i + 1) % n], v3 = values2[(i + 2) % n];
    return basis((t - i / n) * n, v0, v1, v2, v3);
  };
}

// node_modules/d3-interpolate/src/constant.js
var constant_default2 = (x2) => () => x2;

// node_modules/d3-interpolate/src/color.js
function linear(a, d) {
  return function(t) {
    return a + t * d;
  };
}
function exponential(a, b, y2) {
  return a = Math.pow(a, y2), b = Math.pow(b, y2) - a, y2 = 1 / y2, function(t) {
    return Math.pow(a + t * b, y2);
  };
}
function gamma(y2) {
  return (y2 = +y2) === 1 ? nogamma : function(a, b) {
    return b - a ? exponential(a, b, y2) : constant_default2(isNaN(a) ? b : a);
  };
}
function nogamma(a, b) {
  var d = b - a;
  return d ? linear(a, d) : constant_default2(isNaN(a) ? b : a);
}

// node_modules/d3-interpolate/src/rgb.js
var rgb_default = function rgbGamma(y2) {
  var color2 = gamma(y2);
  function rgb2(start2, end) {
    var r = color2((start2 = rgb(start2)).r, (end = rgb(end)).r), g = color2(start2.g, end.g), b = color2(start2.b, end.b), opacity = nogamma(start2.opacity, end.opacity);
    return function(t) {
      start2.r = r(t);
      start2.g = g(t);
      start2.b = b(t);
      start2.opacity = opacity(t);
      return start2 + "";
    };
  }
  rgb2.gamma = rgbGamma;
  return rgb2;
}(1);
function rgbSpline(spline) {
  return function(colors) {
    var n = colors.length, r = new Array(n), g = new Array(n), b = new Array(n), i, color2;
    for (i = 0; i < n; ++i) {
      color2 = rgb(colors[i]);
      r[i] = color2.r || 0;
      g[i] = color2.g || 0;
      b[i] = color2.b || 0;
    }
    r = spline(r);
    g = spline(g);
    b = spline(b);
    color2.opacity = 1;
    return function(t) {
      color2.r = r(t);
      color2.g = g(t);
      color2.b = b(t);
      return color2 + "";
    };
  };
}
var rgbBasis = rgbSpline(basis_default);
var rgbBasisClosed = rgbSpline(basisClosed_default);

// node_modules/d3-interpolate/src/number.js
function number_default(a, b) {
  return a = +a, b = +b, function(t) {
    return a * (1 - t) + b * t;
  };
}

// node_modules/d3-interpolate/src/string.js
var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;
var reB = new RegExp(reA.source, "g");
function zero(b) {
  return function() {
    return b;
  };
}
function one(b) {
  return function(t) {
    return b(t) + "";
  };
}
function string_default(a, b) {
  var bi = reA.lastIndex = reB.lastIndex = 0, am, bm, bs, i = -1, s = [], q = [];
  a = a + "", b = b + "";
  while ((am = reA.exec(a)) && (bm = reB.exec(b))) {
    if ((bs = bm.index) > bi) {
      bs = b.slice(bi, bs);
      if (s[i])
        s[i] += bs;
      else
        s[++i] = bs;
    }
    if ((am = am[0]) === (bm = bm[0])) {
      if (s[i])
        s[i] += bm;
      else
        s[++i] = bm;
    } else {
      s[++i] = null;
      q.push({ i, x: number_default(am, bm) });
    }
    bi = reB.lastIndex;
  }
  if (bi < b.length) {
    bs = b.slice(bi);
    if (s[i])
      s[i] += bs;
    else
      s[++i] = bs;
  }
  return s.length < 2 ? q[0] ? one(q[0].x) : zero(b) : (b = q.length, function(t) {
    for (var i2 = 0, o; i2 < b; ++i2)
      s[(o = q[i2]).i] = o.x(t);
    return s.join("");
  });
}

// node_modules/d3-interpolate/src/transform/decompose.js
var degrees = 180 / Math.PI;
var identity = {
  translateX: 0,
  translateY: 0,
  rotate: 0,
  skewX: 0,
  scaleX: 1,
  scaleY: 1
};
function decompose_default(a, b, c, d, e, f) {
  var scaleX, scaleY, skewX;
  if (scaleX = Math.sqrt(a * a + b * b))
    a /= scaleX, b /= scaleX;
  if (skewX = a * c + b * d)
    c -= a * skewX, d -= b * skewX;
  if (scaleY = Math.sqrt(c * c + d * d))
    c /= scaleY, d /= scaleY, skewX /= scaleY;
  if (a * d < b * c)
    a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;
  return {
    translateX: e,
    translateY: f,
    rotate: Math.atan2(b, a) * degrees,
    skewX: Math.atan(skewX) * degrees,
    scaleX,
    scaleY
  };
}

// node_modules/d3-interpolate/src/transform/parse.js
var svgNode;
function parseCss(value) {
  const m = new (typeof DOMMatrix === "function" ? DOMMatrix : WebKitCSSMatrix)(value + "");
  return m.isIdentity ? identity : decompose_default(m.a, m.b, m.c, m.d, m.e, m.f);
}
function parseSvg(value) {
  if (value == null)
    return identity;
  if (!svgNode)
    svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
  svgNode.setAttribute("transform", value);
  if (!(value = svgNode.transform.baseVal.consolidate()))
    return identity;
  value = value.matrix;
  return decompose_default(value.a, value.b, value.c, value.d, value.e, value.f);
}

// node_modules/d3-interpolate/src/transform/index.js
function interpolateTransform(parse, pxComma, pxParen, degParen) {
  function pop(s) {
    return s.length ? s.pop() + " " : "";
  }
  function translate(xa, ya, xb, yb, s, q) {
    if (xa !== xb || ya !== yb) {
      var i = s.push("translate(", null, pxComma, null, pxParen);
      q.push({ i: i - 4, x: number_default(xa, xb) }, { i: i - 2, x: number_default(ya, yb) });
    } else if (xb || yb) {
      s.push("translate(" + xb + pxComma + yb + pxParen);
    }
  }
  function rotate(a, b, s, q) {
    if (a !== b) {
      if (a - b > 180)
        b += 360;
      else if (b - a > 180)
        a += 360;
      q.push({ i: s.push(pop(s) + "rotate(", null, degParen) - 2, x: number_default(a, b) });
    } else if (b) {
      s.push(pop(s) + "rotate(" + b + degParen);
    }
  }
  function skewX(a, b, s, q) {
    if (a !== b) {
      q.push({ i: s.push(pop(s) + "skewX(", null, degParen) - 2, x: number_default(a, b) });
    } else if (b) {
      s.push(pop(s) + "skewX(" + b + degParen);
    }
  }
  function scale(xa, ya, xb, yb, s, q) {
    if (xa !== xb || ya !== yb) {
      var i = s.push(pop(s) + "scale(", null, ",", null, ")");
      q.push({ i: i - 4, x: number_default(xa, xb) }, { i: i - 2, x: number_default(ya, yb) });
    } else if (xb !== 1 || yb !== 1) {
      s.push(pop(s) + "scale(" + xb + "," + yb + ")");
    }
  }
  return function(a, b) {
    var s = [], q = [];
    a = parse(a), b = parse(b);
    translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
    rotate(a.rotate, b.rotate, s, q);
    skewX(a.skewX, b.skewX, s, q);
    scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
    a = b = null;
    return function(t) {
      var i = -1, n = q.length, o;
      while (++i < n)
        s[(o = q[i]).i] = o.x(t);
      return s.join("");
    };
  };
}
var interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
var interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");

// node_modules/d3-interpolate/src/zoom.js
var epsilon2 = 1e-12;
function cosh(x2) {
  return ((x2 = Math.exp(x2)) + 1 / x2) / 2;
}
function sinh(x2) {
  return ((x2 = Math.exp(x2)) - 1 / x2) / 2;
}
function tanh(x2) {
  return ((x2 = Math.exp(2 * x2)) - 1) / (x2 + 1);
}
var zoom_default = function zoomRho(rho, rho2, rho4) {
  function zoom(p0, p1) {
    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, i, S;
    if (d2 < epsilon2) {
      S = Math.log(w1 / w0) / rho;
      i = function(t) {
        return [
          ux0 + t * dx,
          uy0 + t * dy,
          w0 * Math.exp(rho * t * S)
        ];
      };
    } else {
      var d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1), b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
      S = (r1 - r0) / rho;
      i = function(t) {
        var s = t * S, coshr0 = cosh(r0), u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));
        return [
          ux0 + u * dx,
          uy0 + u * dy,
          w0 * coshr0 / cosh(rho * s + r0)
        ];
      };
    }
    i.duration = S * 1e3 * rho / Math.SQRT2;
    return i;
  }
  zoom.rho = function(_) {
    var _1 = Math.max(1e-3, +_), _2 = _1 * _1, _4 = _2 * _2;
    return zoomRho(_1, _2, _4);
  };
  return zoom;
}(Math.SQRT2, 2, 4);

// node_modules/d3-timer/src/timer.js
var frame = 0;
var timeout = 0;
var interval = 0;
var pokeDelay = 1e3;
var taskHead;
var taskTail;
var clockLast = 0;
var clockNow = 0;
var clockSkew = 0;
var clock = typeof performance === "object" && performance.now ? performance : Date;
var setFrame = typeof window === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f) {
  setTimeout(f, 17);
};
function now() {
  return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
}
function clearNow() {
  clockNow = 0;
}
function Timer() {
  this._call = this._time = this._next = null;
}
Timer.prototype = timer.prototype = {
  constructor: Timer,
  restart: function(callback, delay, time) {
    if (typeof callback !== "function")
      throw new TypeError("callback is not a function");
    time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);
    if (!this._next && taskTail !== this) {
      if (taskTail)
        taskTail._next = this;
      else
        taskHead = this;
      taskTail = this;
    }
    this._call = callback;
    this._time = time;
    sleep();
  },
  stop: function() {
    if (this._call) {
      this._call = null;
      this._time = Infinity;
      sleep();
    }
  }
};
function timer(callback, delay, time) {
  var t = new Timer();
  t.restart(callback, delay, time);
  return t;
}
function timerFlush() {
  now();
  ++frame;
  var t = taskHead, e;
  while (t) {
    if ((e = clockNow - t._time) >= 0)
      t._call.call(void 0, e);
    t = t._next;
  }
  --frame;
}
function wake() {
  clockNow = (clockLast = clock.now()) + clockSkew;
  frame = timeout = 0;
  try {
    timerFlush();
  } finally {
    frame = 0;
    nap();
    clockNow = 0;
  }
}
function poke() {
  var now2 = clock.now(), delay = now2 - clockLast;
  if (delay > pokeDelay)
    clockSkew -= delay, clockLast = now2;
}
function nap() {
  var t0, t1 = taskHead, t2, time = Infinity;
  while (t1) {
    if (t1._call) {
      if (time > t1._time)
        time = t1._time;
      t0 = t1, t1 = t1._next;
    } else {
      t2 = t1._next, t1._next = null;
      t1 = t0 ? t0._next = t2 : taskHead = t2;
    }
  }
  taskTail = t0;
  sleep(time);
}
function sleep(time) {
  if (frame)
    return;
  if (timeout)
    timeout = clearTimeout(timeout);
  var delay = time - clockNow;
  if (delay > 24) {
    if (time < Infinity)
      timeout = setTimeout(wake, time - clock.now() - clockSkew);
    if (interval)
      interval = clearInterval(interval);
  } else {
    if (!interval)
      clockLast = clock.now(), interval = setInterval(poke, pokeDelay);
    frame = 1, setFrame(wake);
  }
}

// node_modules/d3-timer/src/timeout.js
function timeout_default(callback, delay, time) {
  var t = new Timer();
  delay = delay == null ? 0 : +delay;
  t.restart((elapsed) => {
    t.stop();
    callback(elapsed + delay);
  }, delay, time);
  return t;
}

// node_modules/d3-transition/src/transition/schedule.js
var emptyOn = dispatch_default2("start", "end", "cancel", "interrupt");
var emptyTween = [];
var CREATED = 0;
var SCHEDULED = 1;
var STARTING = 2;
var STARTED = 3;
var RUNNING = 4;
var ENDING = 5;
var ENDED = 6;
function schedule_default(node, name, id2, index, group, timing) {
  var schedules = node.__transition;
  if (!schedules)
    node.__transition = {};
  else if (id2 in schedules)
    return;
  create(node, id2, {
    name,
    index,
    // For context during callback.
    group,
    // For context during callback.
    on: emptyOn,
    tween: emptyTween,
    time: timing.time,
    delay: timing.delay,
    duration: timing.duration,
    ease: timing.ease,
    timer: null,
    state: CREATED
  });
}
function init(node, id2) {
  var schedule = get2(node, id2);
  if (schedule.state > CREATED)
    throw new Error("too late; already scheduled");
  return schedule;
}
function set2(node, id2) {
  var schedule = get2(node, id2);
  if (schedule.state > STARTED)
    throw new Error("too late; already running");
  return schedule;
}
function get2(node, id2) {
  var schedule = node.__transition;
  if (!schedule || !(schedule = schedule[id2]))
    throw new Error("transition not found");
  return schedule;
}
function create(node, id2, self) {
  var schedules = node.__transition, tween;
  schedules[id2] = self;
  self.timer = timer(schedule, 0, self.time);
  function schedule(elapsed) {
    self.state = SCHEDULED;
    self.timer.restart(start2, self.delay, self.time);
    if (self.delay <= elapsed)
      start2(elapsed - self.delay);
  }
  function start2(elapsed) {
    var i, j, n, o;
    if (self.state !== SCHEDULED)
      return stop();
    for (i in schedules) {
      o = schedules[i];
      if (o.name !== self.name)
        continue;
      if (o.state === STARTED)
        return timeout_default(start2);
      if (o.state === RUNNING) {
        o.state = ENDED;
        o.timer.stop();
        o.on.call("interrupt", node, node.__data__, o.index, o.group);
        delete schedules[i];
      } else if (+i < id2) {
        o.state = ENDED;
        o.timer.stop();
        o.on.call("cancel", node, node.__data__, o.index, o.group);
        delete schedules[i];
      }
    }
    timeout_default(function() {
      if (self.state === STARTED) {
        self.state = RUNNING;
        self.timer.restart(tick, self.delay, self.time);
        tick(elapsed);
      }
    });
    self.state = STARTING;
    self.on.call("start", node, node.__data__, self.index, self.group);
    if (self.state !== STARTING)
      return;
    self.state = STARTED;
    tween = new Array(n = self.tween.length);
    for (i = 0, j = -1; i < n; ++i) {
      if (o = self.tween[i].value.call(node, node.__data__, self.index, self.group)) {
        tween[++j] = o;
      }
    }
    tween.length = j + 1;
  }
  function tick(elapsed) {
    var t = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.timer.restart(stop), self.state = ENDING, 1), i = -1, n = tween.length;
    while (++i < n) {
      tween[i].call(node, t);
    }
    if (self.state === ENDING) {
      self.on.call("end", node, node.__data__, self.index, self.group);
      stop();
    }
  }
  function stop() {
    self.state = ENDED;
    self.timer.stop();
    delete schedules[id2];
    for (var i in schedules)
      return;
    delete node.__transition;
  }
}

// node_modules/d3-transition/src/interrupt.js
function interrupt_default(node, name) {
  var schedules = node.__transition, schedule, active, empty2 = true, i;
  if (!schedules)
    return;
  name = name == null ? null : name + "";
  for (i in schedules) {
    if ((schedule = schedules[i]).name !== name) {
      empty2 = false;
      continue;
    }
    active = schedule.state > STARTING && schedule.state < ENDING;
    schedule.state = ENDED;
    schedule.timer.stop();
    schedule.on.call(active ? "interrupt" : "cancel", node, node.__data__, schedule.index, schedule.group);
    delete schedules[i];
  }
  if (empty2)
    delete node.__transition;
}

// node_modules/d3-transition/src/selection/interrupt.js
function interrupt_default2(name) {
  return this.each(function() {
    interrupt_default(this, name);
  });
}

// node_modules/d3-transition/src/transition/tween.js
function tweenRemove(id2, name) {
  var tween0, tween1;
  return function() {
    var schedule = set2(this, id2), tween = schedule.tween;
    if (tween !== tween0) {
      tween1 = tween0 = tween;
      for (var i = 0, n = tween1.length; i < n; ++i) {
        if (tween1[i].name === name) {
          tween1 = tween1.slice();
          tween1.splice(i, 1);
          break;
        }
      }
    }
    schedule.tween = tween1;
  };
}
function tweenFunction(id2, name, value) {
  var tween0, tween1;
  if (typeof value !== "function")
    throw new Error();
  return function() {
    var schedule = set2(this, id2), tween = schedule.tween;
    if (tween !== tween0) {
      tween1 = (tween0 = tween).slice();
      for (var t = { name, value }, i = 0, n = tween1.length; i < n; ++i) {
        if (tween1[i].name === name) {
          tween1[i] = t;
          break;
        }
      }
      if (i === n)
        tween1.push(t);
    }
    schedule.tween = tween1;
  };
}
function tween_default(name, value) {
  var id2 = this._id;
  name += "";
  if (arguments.length < 2) {
    var tween = get2(this.node(), id2).tween;
    for (var i = 0, n = tween.length, t; i < n; ++i) {
      if ((t = tween[i]).name === name) {
        return t.value;
      }
    }
    return null;
  }
  return this.each((value == null ? tweenRemove : tweenFunction)(id2, name, value));
}
function tweenValue(transition2, name, value) {
  var id2 = transition2._id;
  transition2.each(function() {
    var schedule = set2(this, id2);
    (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);
  });
  return function(node) {
    return get2(node, id2).value[name];
  };
}

// node_modules/d3-transition/src/transition/interpolate.js
function interpolate_default(a, b) {
  var c;
  return (typeof b === "number" ? number_default : b instanceof color ? rgb_default : (c = color(b)) ? (b = c, rgb_default) : string_default)(a, b);
}

// node_modules/d3-transition/src/transition/attr.js
function attrRemove2(name) {
  return function() {
    this.removeAttribute(name);
  };
}
function attrRemoveNS2(fullname) {
  return function() {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}
function attrConstant2(name, interpolate, value1) {
  var string00, string1 = value1 + "", interpolate0;
  return function() {
    var string0 = this.getAttribute(name);
    return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
  };
}
function attrConstantNS2(fullname, interpolate, value1) {
  var string00, string1 = value1 + "", interpolate0;
  return function() {
    var string0 = this.getAttributeNS(fullname.space, fullname.local);
    return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
  };
}
function attrFunction2(name, interpolate, value) {
  var string00, string10, interpolate0;
  return function() {
    var string0, value1 = value(this), string1;
    if (value1 == null)
      return void this.removeAttribute(name);
    string0 = this.getAttribute(name);
    string1 = value1 + "";
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
  };
}
function attrFunctionNS2(fullname, interpolate, value) {
  var string00, string10, interpolate0;
  return function() {
    var string0, value1 = value(this), string1;
    if (value1 == null)
      return void this.removeAttributeNS(fullname.space, fullname.local);
    string0 = this.getAttributeNS(fullname.space, fullname.local);
    string1 = value1 + "";
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
  };
}
function attr_default2(name, value) {
  var fullname = namespace_default(name), i = fullname === "transform" ? interpolateTransformSvg : interpolate_default;
  return this.attrTween(name, typeof value === "function" ? (fullname.local ? attrFunctionNS2 : attrFunction2)(fullname, i, tweenValue(this, "attr." + name, value)) : value == null ? (fullname.local ? attrRemoveNS2 : attrRemove2)(fullname) : (fullname.local ? attrConstantNS2 : attrConstant2)(fullname, i, value));
}

// node_modules/d3-transition/src/transition/attrTween.js
function attrInterpolate(name, i) {
  return function(t) {
    this.setAttribute(name, i.call(this, t));
  };
}
function attrInterpolateNS(fullname, i) {
  return function(t) {
    this.setAttributeNS(fullname.space, fullname.local, i.call(this, t));
  };
}
function attrTweenNS(fullname, value) {
  var t0, i0;
  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0)
      t0 = (i0 = i) && attrInterpolateNS(fullname, i);
    return t0;
  }
  tween._value = value;
  return tween;
}
function attrTween(name, value) {
  var t0, i0;
  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0)
      t0 = (i0 = i) && attrInterpolate(name, i);
    return t0;
  }
  tween._value = value;
  return tween;
}
function attrTween_default(name, value) {
  var key = "attr." + name;
  if (arguments.length < 2)
    return (key = this.tween(key)) && key._value;
  if (value == null)
    return this.tween(key, null);
  if (typeof value !== "function")
    throw new Error();
  var fullname = namespace_default(name);
  return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));
}

// node_modules/d3-transition/src/transition/delay.js
function delayFunction(id2, value) {
  return function() {
    init(this, id2).delay = +value.apply(this, arguments);
  };
}
function delayConstant(id2, value) {
  return value = +value, function() {
    init(this, id2).delay = value;
  };
}
function delay_default(value) {
  var id2 = this._id;
  return arguments.length ? this.each((typeof value === "function" ? delayFunction : delayConstant)(id2, value)) : get2(this.node(), id2).delay;
}

// node_modules/d3-transition/src/transition/duration.js
function durationFunction(id2, value) {
  return function() {
    set2(this, id2).duration = +value.apply(this, arguments);
  };
}
function durationConstant(id2, value) {
  return value = +value, function() {
    set2(this, id2).duration = value;
  };
}
function duration_default(value) {
  var id2 = this._id;
  return arguments.length ? this.each((typeof value === "function" ? durationFunction : durationConstant)(id2, value)) : get2(this.node(), id2).duration;
}

// node_modules/d3-transition/src/transition/ease.js
function easeConstant(id2, value) {
  if (typeof value !== "function")
    throw new Error();
  return function() {
    set2(this, id2).ease = value;
  };
}
function ease_default(value) {
  var id2 = this._id;
  return arguments.length ? this.each(easeConstant(id2, value)) : get2(this.node(), id2).ease;
}

// node_modules/d3-transition/src/transition/easeVarying.js
function easeVarying(id2, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (typeof v !== "function")
      throw new Error();
    set2(this, id2).ease = v;
  };
}
function easeVarying_default(value) {
  if (typeof value !== "function")
    throw new Error();
  return this.each(easeVarying(this._id, value));
}

// node_modules/d3-transition/src/transition/filter.js
function filter_default2(match) {
  if (typeof match !== "function")
    match = matcher_default(match);
  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
        subgroup.push(node);
      }
    }
  }
  return new Transition(subgroups, this._parents, this._name, this._id);
}

// node_modules/d3-transition/src/transition/merge.js
function merge_default2(transition2) {
  if (transition2._id !== this._id)
    throw new Error();
  for (var groups0 = this._groups, groups1 = transition2._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group0[i] || group1[i]) {
        merge[i] = node;
      }
    }
  }
  for (; j < m0; ++j) {
    merges[j] = groups0[j];
  }
  return new Transition(merges, this._parents, this._name, this._id);
}

// node_modules/d3-transition/src/transition/on.js
function start(name) {
  return (name + "").trim().split(/^|\s+/).every(function(t) {
    var i = t.indexOf(".");
    if (i >= 0)
      t = t.slice(0, i);
    return !t || t === "start";
  });
}
function onFunction(id2, name, listener) {
  var on0, on1, sit = start(name) ? init : set2;
  return function() {
    var schedule = sit(this, id2), on = schedule.on;
    if (on !== on0)
      (on1 = (on0 = on).copy()).on(name, listener);
    schedule.on = on1;
  };
}
function on_default2(name, listener) {
  var id2 = this._id;
  return arguments.length < 2 ? get2(this.node(), id2).on.on(name) : this.each(onFunction(id2, name, listener));
}

// node_modules/d3-transition/src/transition/remove.js
function removeFunction(id2) {
  return function() {
    var parent = this.parentNode;
    for (var i in this.__transition)
      if (+i !== id2)
        return;
    if (parent)
      parent.removeChild(this);
  };
}
function remove_default2() {
  return this.on("end.remove", removeFunction(this._id));
}

// node_modules/d3-transition/src/transition/select.js
function select_default3(select) {
  var name = this._name, id2 = this._id;
  if (typeof select !== "function")
    select = selector_default(select);
  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
        if ("__data__" in node)
          subnode.__data__ = node.__data__;
        subgroup[i] = subnode;
        schedule_default(subgroup[i], name, id2, i, subgroup, get2(node, id2));
      }
    }
  }
  return new Transition(subgroups, this._parents, name, id2);
}

// node_modules/d3-transition/src/transition/selectAll.js
function selectAll_default2(select) {
  var name = this._name, id2 = this._id;
  if (typeof select !== "function")
    select = selectorAll_default(select);
  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        for (var children2 = select.call(node, node.__data__, i, group), child, inherit2 = get2(node, id2), k = 0, l = children2.length; k < l; ++k) {
          if (child = children2[k]) {
            schedule_default(child, name, id2, k, children2, inherit2);
          }
        }
        subgroups.push(children2);
        parents.push(node);
      }
    }
  }
  return new Transition(subgroups, parents, name, id2);
}

// node_modules/d3-transition/src/transition/selection.js
var Selection2 = selection_default.prototype.constructor;
function selection_default2() {
  return new Selection2(this._groups, this._parents);
}

// node_modules/d3-transition/src/transition/style.js
function styleNull(name, interpolate) {
  var string00, string10, interpolate0;
  return function() {
    var string0 = styleValue(this, name), string1 = (this.style.removeProperty(name), styleValue(this, name));
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : interpolate0 = interpolate(string00 = string0, string10 = string1);
  };
}
function styleRemove2(name) {
  return function() {
    this.style.removeProperty(name);
  };
}
function styleConstant2(name, interpolate, value1) {
  var string00, string1 = value1 + "", interpolate0;
  return function() {
    var string0 = styleValue(this, name);
    return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
  };
}
function styleFunction2(name, interpolate, value) {
  var string00, string10, interpolate0;
  return function() {
    var string0 = styleValue(this, name), value1 = value(this), string1 = value1 + "";
    if (value1 == null)
      string1 = value1 = (this.style.removeProperty(name), styleValue(this, name));
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
  };
}
function styleMaybeRemove(id2, name) {
  var on0, on1, listener0, key = "style." + name, event = "end." + key, remove2;
  return function() {
    var schedule = set2(this, id2), on = schedule.on, listener = schedule.value[key] == null ? remove2 || (remove2 = styleRemove2(name)) : void 0;
    if (on !== on0 || listener0 !== listener)
      (on1 = (on0 = on).copy()).on(event, listener0 = listener);
    schedule.on = on1;
  };
}
function style_default2(name, value, priority) {
  var i = (name += "") === "transform" ? interpolateTransformCss : interpolate_default;
  return value == null ? this.styleTween(name, styleNull(name, i)).on("end.style." + name, styleRemove2(name)) : typeof value === "function" ? this.styleTween(name, styleFunction2(name, i, tweenValue(this, "style." + name, value))).each(styleMaybeRemove(this._id, name)) : this.styleTween(name, styleConstant2(name, i, value), priority).on("end.style." + name, null);
}

// node_modules/d3-transition/src/transition/styleTween.js
function styleInterpolate(name, i, priority) {
  return function(t) {
    this.style.setProperty(name, i.call(this, t), priority);
  };
}
function styleTween(name, value, priority) {
  var t, i0;
  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0)
      t = (i0 = i) && styleInterpolate(name, i, priority);
    return t;
  }
  tween._value = value;
  return tween;
}
function styleTween_default(name, value, priority) {
  var key = "style." + (name += "");
  if (arguments.length < 2)
    return (key = this.tween(key)) && key._value;
  if (value == null)
    return this.tween(key, null);
  if (typeof value !== "function")
    throw new Error();
  return this.tween(key, styleTween(name, value, priority == null ? "" : priority));
}

// node_modules/d3-transition/src/transition/text.js
function textConstant2(value) {
  return function() {
    this.textContent = value;
  };
}
function textFunction2(value) {
  return function() {
    var value1 = value(this);
    this.textContent = value1 == null ? "" : value1;
  };
}
function text_default2(value) {
  return this.tween("text", typeof value === "function" ? textFunction2(tweenValue(this, "text", value)) : textConstant2(value == null ? "" : value + ""));
}

// node_modules/d3-transition/src/transition/textTween.js
function textInterpolate(i) {
  return function(t) {
    this.textContent = i.call(this, t);
  };
}
function textTween(value) {
  var t0, i0;
  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0)
      t0 = (i0 = i) && textInterpolate(i);
    return t0;
  }
  tween._value = value;
  return tween;
}
function textTween_default(value) {
  var key = "text";
  if (arguments.length < 1)
    return (key = this.tween(key)) && key._value;
  if (value == null)
    return this.tween(key, null);
  if (typeof value !== "function")
    throw new Error();
  return this.tween(key, textTween(value));
}

// node_modules/d3-transition/src/transition/transition.js
function transition_default() {
  var name = this._name, id0 = this._id, id1 = newId();
  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        var inherit2 = get2(node, id0);
        schedule_default(node, name, id1, i, group, {
          time: inherit2.time + inherit2.delay + inherit2.duration,
          delay: 0,
          duration: inherit2.duration,
          ease: inherit2.ease
        });
      }
    }
  }
  return new Transition(groups, this._parents, name, id1);
}

// node_modules/d3-transition/src/transition/end.js
function end_default() {
  var on0, on1, that = this, id2 = that._id, size = that.size();
  return new Promise(function(resolve, reject) {
    var cancel = { value: reject }, end = { value: function() {
      if (--size === 0)
        resolve();
    } };
    that.each(function() {
      var schedule = set2(this, id2), on = schedule.on;
      if (on !== on0) {
        on1 = (on0 = on).copy();
        on1._.cancel.push(cancel);
        on1._.interrupt.push(cancel);
        on1._.end.push(end);
      }
      schedule.on = on1;
    });
    if (size === 0)
      resolve();
  });
}

// node_modules/d3-transition/src/transition/index.js
var id = 0;
function Transition(groups, parents, name, id2) {
  this._groups = groups;
  this._parents = parents;
  this._name = name;
  this._id = id2;
}
function transition(name) {
  return selection_default().transition(name);
}
function newId() {
  return ++id;
}
var selection_prototype = selection_default.prototype;
Transition.prototype = transition.prototype = {
  constructor: Transition,
  select: select_default3,
  selectAll: selectAll_default2,
  selectChild: selection_prototype.selectChild,
  selectChildren: selection_prototype.selectChildren,
  filter: filter_default2,
  merge: merge_default2,
  selection: selection_default2,
  transition: transition_default,
  call: selection_prototype.call,
  nodes: selection_prototype.nodes,
  node: selection_prototype.node,
  size: selection_prototype.size,
  empty: selection_prototype.empty,
  each: selection_prototype.each,
  on: on_default2,
  attr: attr_default2,
  attrTween: attrTween_default,
  style: style_default2,
  styleTween: styleTween_default,
  text: text_default2,
  textTween: textTween_default,
  remove: remove_default2,
  tween: tween_default,
  delay: delay_default,
  duration: duration_default,
  ease: ease_default,
  easeVarying: easeVarying_default,
  end: end_default,
  [Symbol.iterator]: selection_prototype[Symbol.iterator]
};

// node_modules/d3-ease/src/cubic.js
function cubicInOut(t) {
  return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;
}

// node_modules/d3-transition/src/selection/transition.js
var defaultTiming = {
  time: null,
  // Set on use.
  delay: 0,
  duration: 250,
  ease: cubicInOut
};
function inherit(node, id2) {
  var timing;
  while (!(timing = node.__transition) || !(timing = timing[id2])) {
    if (!(node = node.parentNode)) {
      throw new Error(`transition ${id2} not found`);
    }
  }
  return timing;
}
function transition_default2(name) {
  var id2, timing;
  if (name instanceof Transition) {
    id2 = name._id, name = name._name;
  } else {
    id2 = newId(), (timing = defaultTiming).time = now(), name = name == null ? null : name + "";
  }
  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        schedule_default(node, name, id2, i, group, timing || inherit(node, id2));
      }
    }
  }
  return new Transition(groups, this._parents, name, id2);
}

// node_modules/d3-transition/src/selection/index.js
selection_default.prototype.interrupt = interrupt_default2;
selection_default.prototype.transition = transition_default2;

// node_modules/d3-zoom/src/constant.js
var constant_default3 = (x2) => () => x2;

// node_modules/d3-zoom/src/event.js
function ZoomEvent(type, {
  sourceEvent,
  target,
  transform: transform2,
  dispatch: dispatch2
}) {
  Object.defineProperties(this, {
    type: { value: type, enumerable: true, configurable: true },
    sourceEvent: { value: sourceEvent, enumerable: true, configurable: true },
    target: { value: target, enumerable: true, configurable: true },
    transform: { value: transform2, enumerable: true, configurable: true },
    _: { value: dispatch2 }
  });
}

// node_modules/d3-zoom/src/transform.js
function Transform(k, x2, y2) {
  this.k = k;
  this.x = x2;
  this.y = y2;
}
Transform.prototype = {
  constructor: Transform,
  scale: function(k) {
    return k === 1 ? this : new Transform(this.k * k, this.x, this.y);
  },
  translate: function(x2, y2) {
    return x2 === 0 & y2 === 0 ? this : new Transform(this.k, this.x + this.k * x2, this.y + this.k * y2);
  },
  apply: function(point) {
    return [point[0] * this.k + this.x, point[1] * this.k + this.y];
  },
  applyX: function(x2) {
    return x2 * this.k + this.x;
  },
  applyY: function(y2) {
    return y2 * this.k + this.y;
  },
  invert: function(location) {
    return [(location[0] - this.x) / this.k, (location[1] - this.y) / this.k];
  },
  invertX: function(x2) {
    return (x2 - this.x) / this.k;
  },
  invertY: function(y2) {
    return (y2 - this.y) / this.k;
  },
  rescaleX: function(x2) {
    return x2.copy().domain(x2.range().map(this.invertX, this).map(x2.invert, x2));
  },
  rescaleY: function(y2) {
    return y2.copy().domain(y2.range().map(this.invertY, this).map(y2.invert, y2));
  },
  toString: function() {
    return "translate(" + this.x + "," + this.y + ") scale(" + this.k + ")";
  }
};
var identity2 = new Transform(1, 0, 0);
transform.prototype = Transform.prototype;
function transform(node) {
  while (!node.__zoom)
    if (!(node = node.parentNode))
      return identity2;
  return node.__zoom;
}

// node_modules/d3-zoom/src/noevent.js
function nopropagation(event) {
  event.stopImmediatePropagation();
}
function noevent_default2(event) {
  event.preventDefault();
  event.stopImmediatePropagation();
}

// node_modules/d3-zoom/src/zoom.js
function defaultFilter(event) {
  return (!event.ctrlKey || event.type === "wheel") && !event.button;
}
function defaultExtent() {
  var e = this;
  if (e instanceof SVGElement) {
    e = e.ownerSVGElement || e;
    if (e.hasAttribute("viewBox")) {
      e = e.viewBox.baseVal;
      return [[e.x, e.y], [e.x + e.width, e.y + e.height]];
    }
    return [[0, 0], [e.width.baseVal.value, e.height.baseVal.value]];
  }
  return [[0, 0], [e.clientWidth, e.clientHeight]];
}
function defaultTransform() {
  return this.__zoom || identity2;
}
function defaultWheelDelta(event) {
  return -event.deltaY * (event.deltaMode === 1 ? 0.05 : event.deltaMode ? 1 : 2e-3) * (event.ctrlKey ? 10 : 1);
}
function defaultTouchable() {
  return navigator.maxTouchPoints || "ontouchstart" in this;
}
function defaultConstrain(transform2, extent, translateExtent) {
  var dx0 = transform2.invertX(extent[0][0]) - translateExtent[0][0], dx1 = transform2.invertX(extent[1][0]) - translateExtent[1][0], dy0 = transform2.invertY(extent[0][1]) - translateExtent[0][1], dy1 = transform2.invertY(extent[1][1]) - translateExtent[1][1];
  return transform2.translate(
    dx1 > dx0 ? (dx0 + dx1) / 2 : Math.min(0, dx0) || Math.max(0, dx1),
    dy1 > dy0 ? (dy0 + dy1) / 2 : Math.min(0, dy0) || Math.max(0, dy1)
  );
}
function zoom_default2() {
  var filter2 = defaultFilter, extent = defaultExtent, constrain = defaultConstrain, wheelDelta = defaultWheelDelta, touchable = defaultTouchable, scaleExtent = [0, Infinity], translateExtent = [[-Infinity, -Infinity], [Infinity, Infinity]], duration = 250, interpolate = zoom_default, listeners = dispatch_default2("start", "zoom", "end"), touchstarting, touchfirst, touchending, touchDelay = 500, wheelDelay = 150, clickDistance2 = 0, tapDistance = 10;
  function zoom(selection2) {
    selection2.property("__zoom", defaultTransform).on("wheel.zoom", wheeled, { passive: false }).on("mousedown.zoom", mousedowned).on("dblclick.zoom", dblclicked).filter(touchable).on("touchstart.zoom", touchstarted).on("touchmove.zoom", touchmoved).on("touchend.zoom touchcancel.zoom", touchended).style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
  }
  zoom.transform = function(collection, transform2, point, event) {
    var selection2 = collection.selection ? collection.selection() : collection;
    selection2.property("__zoom", defaultTransform);
    if (collection !== selection2) {
      schedule(collection, transform2, point, event);
    } else {
      selection2.interrupt().each(function() {
        gesture(this, arguments).event(event).start().zoom(null, typeof transform2 === "function" ? transform2.apply(this, arguments) : transform2).end();
      });
    }
  };
  zoom.scaleBy = function(selection2, k, p, event) {
    zoom.scaleTo(selection2, function() {
      var k0 = this.__zoom.k, k1 = typeof k === "function" ? k.apply(this, arguments) : k;
      return k0 * k1;
    }, p, event);
  };
  zoom.scaleTo = function(selection2, k, p, event) {
    zoom.transform(selection2, function() {
      var e = extent.apply(this, arguments), t0 = this.__zoom, p0 = p == null ? centroid(e) : typeof p === "function" ? p.apply(this, arguments) : p, p1 = t0.invert(p0), k1 = typeof k === "function" ? k.apply(this, arguments) : k;
      return constrain(translate(scale(t0, k1), p0, p1), e, translateExtent);
    }, p, event);
  };
  zoom.translateBy = function(selection2, x2, y2, event) {
    zoom.transform(selection2, function() {
      return constrain(this.__zoom.translate(
        typeof x2 === "function" ? x2.apply(this, arguments) : x2,
        typeof y2 === "function" ? y2.apply(this, arguments) : y2
      ), extent.apply(this, arguments), translateExtent);
    }, null, event);
  };
  zoom.translateTo = function(selection2, x2, y2, p, event) {
    zoom.transform(selection2, function() {
      var e = extent.apply(this, arguments), t = this.__zoom, p0 = p == null ? centroid(e) : typeof p === "function" ? p.apply(this, arguments) : p;
      return constrain(identity2.translate(p0[0], p0[1]).scale(t.k).translate(
        typeof x2 === "function" ? -x2.apply(this, arguments) : -x2,
        typeof y2 === "function" ? -y2.apply(this, arguments) : -y2
      ), e, translateExtent);
    }, p, event);
  };
  function scale(transform2, k) {
    k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], k));
    return k === transform2.k ? transform2 : new Transform(k, transform2.x, transform2.y);
  }
  function translate(transform2, p0, p1) {
    var x2 = p0[0] - p1[0] * transform2.k, y2 = p0[1] - p1[1] * transform2.k;
    return x2 === transform2.x && y2 === transform2.y ? transform2 : new Transform(transform2.k, x2, y2);
  }
  function centroid(extent2) {
    return [(+extent2[0][0] + +extent2[1][0]) / 2, (+extent2[0][1] + +extent2[1][1]) / 2];
  }
  function schedule(transition2, transform2, point, event) {
    transition2.on("start.zoom", function() {
      gesture(this, arguments).event(event).start();
    }).on("interrupt.zoom end.zoom", function() {
      gesture(this, arguments).event(event).end();
    }).tween("zoom", function() {
      var that = this, args = arguments, g = gesture(that, args).event(event), e = extent.apply(that, args), p = point == null ? centroid(e) : typeof point === "function" ? point.apply(that, args) : point, w = Math.max(e[1][0] - e[0][0], e[1][1] - e[0][1]), a = that.__zoom, b = typeof transform2 === "function" ? transform2.apply(that, args) : transform2, i = interpolate(a.invert(p).concat(w / a.k), b.invert(p).concat(w / b.k));
      return function(t) {
        if (t === 1)
          t = b;
        else {
          var l = i(t), k = w / l[2];
          t = new Transform(k, p[0] - l[0] * k, p[1] - l[1] * k);
        }
        g.zoom(null, t);
      };
    });
  }
  function gesture(that, args, clean) {
    return !clean && that.__zooming || new Gesture(that, args);
  }
  function Gesture(that, args) {
    this.that = that;
    this.args = args;
    this.active = 0;
    this.sourceEvent = null;
    this.extent = extent.apply(that, args);
    this.taps = 0;
  }
  Gesture.prototype = {
    event: function(event) {
      if (event)
        this.sourceEvent = event;
      return this;
    },
    start: function() {
      if (++this.active === 1) {
        this.that.__zooming = this;
        this.emit("start");
      }
      return this;
    },
    zoom: function(key, transform2) {
      if (this.mouse && key !== "mouse")
        this.mouse[1] = transform2.invert(this.mouse[0]);
      if (this.touch0 && key !== "touch")
        this.touch0[1] = transform2.invert(this.touch0[0]);
      if (this.touch1 && key !== "touch")
        this.touch1[1] = transform2.invert(this.touch1[0]);
      this.that.__zoom = transform2;
      this.emit("zoom");
      return this;
    },
    end: function() {
      if (--this.active === 0) {
        delete this.that.__zooming;
        this.emit("end");
      }
      return this;
    },
    emit: function(type) {
      var d = select_default2(this.that).datum();
      listeners.call(
        type,
        this.that,
        new ZoomEvent(type, {
          sourceEvent: this.sourceEvent,
          target: zoom,
          type,
          transform: this.that.__zoom,
          dispatch: listeners
        }),
        d
      );
    }
  };
  function wheeled(event, ...args) {
    if (!filter2.apply(this, arguments))
      return;
    var g = gesture(this, args).event(event), t = this.__zoom, k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], t.k * Math.pow(2, wheelDelta.apply(this, arguments)))), p = pointer_default(event);
    if (g.wheel) {
      if (g.mouse[0][0] !== p[0] || g.mouse[0][1] !== p[1]) {
        g.mouse[1] = t.invert(g.mouse[0] = p);
      }
      clearTimeout(g.wheel);
    } else if (t.k === k)
      return;
    else {
      g.mouse = [p, t.invert(p)];
      interrupt_default(this);
      g.start();
    }
    noevent_default2(event);
    g.wheel = setTimeout(wheelidled, wheelDelay);
    g.zoom("mouse", constrain(translate(scale(t, k), g.mouse[0], g.mouse[1]), g.extent, translateExtent));
    function wheelidled() {
      g.wheel = null;
      g.end();
    }
  }
  function mousedowned(event, ...args) {
    if (touchending || !filter2.apply(this, arguments))
      return;
    var currentTarget = event.currentTarget, g = gesture(this, args, true).event(event), v = select_default2(event.view).on("mousemove.zoom", mousemoved, true).on("mouseup.zoom", mouseupped, true), p = pointer_default(event, currentTarget), x0 = event.clientX, y0 = event.clientY;
    nodrag_default(event.view);
    nopropagation(event);
    g.mouse = [p, this.__zoom.invert(p)];
    interrupt_default(this);
    g.start();
    function mousemoved(event2) {
      noevent_default2(event2);
      if (!g.moved) {
        var dx = event2.clientX - x0, dy = event2.clientY - y0;
        g.moved = dx * dx + dy * dy > clickDistance2;
      }
      g.event(event2).zoom("mouse", constrain(translate(g.that.__zoom, g.mouse[0] = pointer_default(event2, currentTarget), g.mouse[1]), g.extent, translateExtent));
    }
    function mouseupped(event2) {
      v.on("mousemove.zoom mouseup.zoom", null);
      yesdrag(event2.view, g.moved);
      noevent_default2(event2);
      g.event(event2).end();
    }
  }
  function dblclicked(event, ...args) {
    if (!filter2.apply(this, arguments))
      return;
    var t0 = this.__zoom, p0 = pointer_default(event.changedTouches ? event.changedTouches[0] : event, this), p1 = t0.invert(p0), k1 = t0.k * (event.shiftKey ? 0.5 : 2), t1 = constrain(translate(scale(t0, k1), p0, p1), extent.apply(this, args), translateExtent);
    noevent_default2(event);
    if (duration > 0)
      select_default2(this).transition().duration(duration).call(schedule, t1, p0, event);
    else
      select_default2(this).call(zoom.transform, t1, p0, event);
  }
  function touchstarted(event, ...args) {
    if (!filter2.apply(this, arguments))
      return;
    var touches = event.touches, n = touches.length, g = gesture(this, args, event.changedTouches.length === n).event(event), started, i, t, p;
    nopropagation(event);
    for (i = 0; i < n; ++i) {
      t = touches[i], p = pointer_default(t, this);
      p = [p, this.__zoom.invert(p), t.identifier];
      if (!g.touch0)
        g.touch0 = p, started = true, g.taps = 1 + !!touchstarting;
      else if (!g.touch1 && g.touch0[2] !== p[2])
        g.touch1 = p, g.taps = 0;
    }
    if (touchstarting)
      touchstarting = clearTimeout(touchstarting);
    if (started) {
      if (g.taps < 2)
        touchfirst = p[0], touchstarting = setTimeout(function() {
          touchstarting = null;
        }, touchDelay);
      interrupt_default(this);
      g.start();
    }
  }
  function touchmoved(event, ...args) {
    if (!this.__zooming)
      return;
    var g = gesture(this, args).event(event), touches = event.changedTouches, n = touches.length, i, t, p, l;
    noevent_default2(event);
    for (i = 0; i < n; ++i) {
      t = touches[i], p = pointer_default(t, this);
      if (g.touch0 && g.touch0[2] === t.identifier)
        g.touch0[0] = p;
      else if (g.touch1 && g.touch1[2] === t.identifier)
        g.touch1[0] = p;
    }
    t = g.that.__zoom;
    if (g.touch1) {
      var p0 = g.touch0[0], l0 = g.touch0[1], p1 = g.touch1[0], l1 = g.touch1[1], dp = (dp = p1[0] - p0[0]) * dp + (dp = p1[1] - p0[1]) * dp, dl = (dl = l1[0] - l0[0]) * dl + (dl = l1[1] - l0[1]) * dl;
      t = scale(t, Math.sqrt(dp / dl));
      p = [(p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2];
      l = [(l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2];
    } else if (g.touch0)
      p = g.touch0[0], l = g.touch0[1];
    else
      return;
    g.zoom("touch", constrain(translate(t, p, l), g.extent, translateExtent));
  }
  function touchended(event, ...args) {
    if (!this.__zooming)
      return;
    var g = gesture(this, args).event(event), touches = event.changedTouches, n = touches.length, i, t;
    nopropagation(event);
    if (touchending)
      clearTimeout(touchending);
    touchending = setTimeout(function() {
      touchending = null;
    }, touchDelay);
    for (i = 0; i < n; ++i) {
      t = touches[i];
      if (g.touch0 && g.touch0[2] === t.identifier)
        delete g.touch0;
      else if (g.touch1 && g.touch1[2] === t.identifier)
        delete g.touch1;
    }
    if (g.touch1 && !g.touch0)
      g.touch0 = g.touch1, delete g.touch1;
    if (g.touch0)
      g.touch0[1] = this.__zoom.invert(g.touch0[0]);
    else {
      g.end();
      if (g.taps === 2) {
        t = pointer_default(t, this);
        if (Math.hypot(touchfirst[0] - t[0], touchfirst[1] - t[1]) < tapDistance) {
          var p = select_default2(this).on("dblclick.zoom");
          if (p)
            p.apply(this, arguments);
        }
      }
    }
  }
  zoom.wheelDelta = function(_) {
    return arguments.length ? (wheelDelta = typeof _ === "function" ? _ : constant_default3(+_), zoom) : wheelDelta;
  };
  zoom.filter = function(_) {
    return arguments.length ? (filter2 = typeof _ === "function" ? _ : constant_default3(!!_), zoom) : filter2;
  };
  zoom.touchable = function(_) {
    return arguments.length ? (touchable = typeof _ === "function" ? _ : constant_default3(!!_), zoom) : touchable;
  };
  zoom.extent = function(_) {
    return arguments.length ? (extent = typeof _ === "function" ? _ : constant_default3([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), zoom) : extent;
  };
  zoom.scaleExtent = function(_) {
    return arguments.length ? (scaleExtent[0] = +_[0], scaleExtent[1] = +_[1], zoom) : [scaleExtent[0], scaleExtent[1]];
  };
  zoom.translateExtent = function(_) {
    return arguments.length ? (translateExtent[0][0] = +_[0][0], translateExtent[1][0] = +_[1][0], translateExtent[0][1] = +_[0][1], translateExtent[1][1] = +_[1][1], zoom) : [[translateExtent[0][0], translateExtent[0][1]], [translateExtent[1][0], translateExtent[1][1]]];
  };
  zoom.constrain = function(_) {
    return arguments.length ? (constrain = _, zoom) : constrain;
  };
  zoom.duration = function(_) {
    return arguments.length ? (duration = +_, zoom) : duration;
  };
  zoom.interpolate = function(_) {
    return arguments.length ? (interpolate = _, zoom) : interpolate;
  };
  zoom.on = function() {
    var value = listeners.on.apply(listeners, arguments);
    return value === listeners ? zoom : value;
  };
  zoom.clickDistance = function(_) {
    return arguments.length ? (clickDistance2 = (_ = +_) * _, zoom) : Math.sqrt(clickDistance2);
  };
  zoom.tapDistance = function(_) {
    return arguments.length ? (tapDistance = +_, zoom) : tapDistance;
  };
  return zoom;
}

// node_modules/dequal/lite/index.mjs
var has = Object.prototype.hasOwnProperty;
function dequal(foo, bar) {
  var ctor, len;
  if (foo === bar)
    return true;
  if (foo && bar && (ctor = foo.constructor) === bar.constructor) {
    if (ctor === Date)
      return foo.getTime() === bar.getTime();
    if (ctor === RegExp)
      return foo.toString() === bar.toString();
    if (ctor === Array) {
      if ((len = foo.length) === bar.length) {
        while (len-- && dequal(foo[len], bar[len]))
          ;
      }
      return len === -1;
    }
    if (!ctor || typeof foo === "object") {
      len = 0;
      for (ctor in foo) {
        if (has.call(foo, ctor) && ++len && !has.call(bar, ctor))
          return false;
        if (!(ctor in bar) || !dequal(foo[ctor], bar[ctor]))
          return false;
      }
      return Object.keys(bar).length === len;
    }
  }
  return foo !== foo && bar !== bar;
}

// src/external/react-d3-tree/Tree/index.tsx
var import_clone2 = __toESM(require("clone"), 1);
var import_uuid = require("uuid");

// src/external/react-d3-tree/Tree/TransitionGroupWrapper.tsx
var import_react37 = __toESM(require("react"), 1);

// src/external/react-d3-tree/Tree/TransitionGroupContext.ts
var import_react35 = __toESM(require("react"), 1);
var TransitionGroupContext_default = import_react35.default.createContext(null);

// src/external/react-d3-tree/Tree/utils/ChildMapping.ts
var import_react36 = require("react");
function getChildMapping(children2, mapFn) {
  let mapper = (child) => mapFn && (0, import_react36.isValidElement)(child) ? mapFn(child) : child;
  let result = /* @__PURE__ */ Object.create(null);
  if (children2)
    import_react36.Children.map(children2, (c) => c).forEach((child) => {
      result[child.key] = mapper(child);
    });
  return result;
}
function mergeChildMappings(prev, next) {
  prev = prev || {};
  next = next || {};
  function getValueForKey(key) {
    return key in next ? next[key] : prev[key];
  }
  let nextKeysPending = /* @__PURE__ */ Object.create(null);
  let pendingKeys = [];
  for (let prevKey in prev) {
    if (prevKey in next) {
      if (pendingKeys.length) {
        nextKeysPending[prevKey] = pendingKeys;
        pendingKeys = [];
      }
    } else {
      pendingKeys.push(prevKey);
    }
  }
  let i;
  let childMapping = {};
  for (let nextKey in next) {
    if (nextKeysPending[nextKey]) {
      for (i = 0; i < nextKeysPending[nextKey].length; i++) {
        let pendingNextKey = nextKeysPending[nextKey][i];
        childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
      }
    }
    childMapping[nextKey] = getValueForKey(nextKey);
  }
  for (i = 0; i < pendingKeys.length; i++) {
    childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
  }
  return childMapping;
}
function getProp(child, prop, props) {
  return props[prop] != null ? props[prop] : child.props[prop];
}
function getInitialChildMapping(props, onExited) {
  return getChildMapping(props.children, (child) => {
    return (0, import_react36.cloneElement)(child, {
      onExited: onExited.bind(null, child),
      in: true,
      appear: getProp(child, "appear", props),
      enter: getProp(child, "enter", props),
      exit: getProp(child, "exit", props)
    });
  });
}
function getNextChildMapping(nextProps, prevChildMapping, onExited) {
  let nextChildMapping = getChildMapping(nextProps.children);
  let children2 = mergeChildMappings(prevChildMapping, nextChildMapping);
  Object.keys(children2).forEach((key) => {
    let child = children2[key];
    if (!(0, import_react36.isValidElement)(child))
      return;
    const hasPrev = key in prevChildMapping;
    const hasNext = key in nextChildMapping;
    const prevChild = prevChildMapping[key];
    const isLeaving = (0, import_react36.isValidElement)(prevChild) && !prevChild.props.in;
    if (hasNext && (!hasPrev || isLeaving)) {
      children2[key] = (0, import_react36.cloneElement)(child, {
        onExited: onExited.bind(null, child),
        in: true,
        exit: getProp(child, "exit", nextProps),
        enter: getProp(child, "enter", nextProps)
      });
    } else if (!hasNext && hasPrev && !isLeaving) {
      children2[key] = (0, import_react36.cloneElement)(child, { in: false });
    } else if (hasNext && hasPrev && (0, import_react36.isValidElement)(prevChild)) {
      children2[key] = (0, import_react36.cloneElement)(child, {
        onExited: onExited.bind(null, child),
        in: prevChild.props.in,
        exit: getProp(child, "exit", nextProps),
        enter: getProp(child, "enter", nextProps)
      });
    }
  });
  return children2;
}

// src/external/react-d3-tree/Tree/TransitionGroupWrapper.tsx
var import_jsx_runtime40 = require("react/jsx-runtime");
var values = Object.values || ((obj) => Object.keys(obj).map((k) => obj[k]));
var TransitionGroup = class extends import_react37.default.Component {
  constructor(props, context) {
    super(props, context);
    const handleExited = this.handleExited.bind(this);
    this.state = {
      contextValue: { isMounting: true },
      handleExited,
      firstRender: true
    };
  }
  componentDidMount() {
    this.mounted = true;
    this.setState({
      contextValue: { isMounting: false }
    });
  }
  componentWillUnmount() {
    this.mounted = false;
  }
  static getDerivedStateFromProps(nextProps, { children: prevChildMapping, handleExited, firstRender }) {
    return {
      children: firstRender ? getInitialChildMapping(nextProps, handleExited) : getNextChildMapping(nextProps, prevChildMapping, handleExited),
      firstRender: false
    };
  }
  // node is `undefined` when user provided `nodeRef` prop
  handleExited(child, node) {
    let currentChildMapping = getChildMapping(this.props.children);
    if (child.key in currentChildMapping)
      return;
    if (child.props.onExited) {
      child.props.onExited(node);
    }
    if (this.mounted) {
      this.setState((state) => {
        let children2 = { ...state.children };
        delete children2[child.key];
        return { children: children2 };
      });
    }
  }
  render() {
    const { component: Component, childFactory, ...props } = this.props;
    const { contextValue } = this.state;
    const children2 = values(this.state.children).map(childFactory);
    delete props.appear;
    delete props.enter;
    delete props.exit;
    if (Component === null) {
      return /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(TransitionGroupContext_default.Provider, { value: contextValue, children: children2 });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(TransitionGroupContext_default.Provider, { value: contextValue, children: /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(Component, { ...props, children: children2 }) });
  }
};
var TransitionGroupWrapper = (props) => props.enableLegacyTransitions ? /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(TransitionGroup, { component: props.component, className: props.className, transform: props.transform, children: props.children }) : /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("g", { className: props.className, transform: props.transform, children: props.children });
var TransitionGroupWrapper_default = TransitionGroupWrapper;

// src/external/react-d3-tree/Node/index.tsx
var import_react38 = __toESM(require("react"), 1);

// src/external/react-d3-tree/Node/DefaultNodeElement.tsx
var import_jsx_runtime41 = require("react/jsx-runtime");
var DEFAULT_NODE_CIRCLE_RADIUS = 15;
var textLayout = {
  title: {
    textAnchor: "start",
    x: 40
  },
  attribute: {
    x: 40,
    dy: "1.2em"
  }
};
var DefaultNodeElement = ({
  nodeDatum,
  toggleNode,
  onNodeClick,
  onNodeMouseOver,
  onNodeMouseOut
}) => /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)(import_jsx_runtime41.Fragment, { children: [
  /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(
    "circle",
    {
      r: DEFAULT_NODE_CIRCLE_RADIUS,
      onClick: (evt) => {
        toggleNode();
        onNodeClick(evt);
      },
      onMouseOver: onNodeMouseOver,
      onMouseOut: onNodeMouseOut
    }
  ),
  /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("g", { className: "rd3t-label", children: [
    /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("text", { className: "rd3t-label__title", ...textLayout.title, children: nodeDatum.name }),
    /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("text", { className: "rd3t-label__attributes", children: nodeDatum.attributes && Object.entries(nodeDatum.attributes).map(([labelKey, labelValue], i) => /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("tspan", { ...textLayout.attribute, children: [
      labelKey,
      ": ",
      typeof labelValue === "boolean" ? labelValue.toString() : labelValue
    ] }, `${labelKey}-${i}`)) })
  ] })
] });
var DefaultNodeElement_default = DefaultNodeElement;

// src/external/react-d3-tree/Node/index.tsx
var import_jsx_runtime42 = require("react/jsx-runtime");
var Node2 = class extends import_react38.default.Component {
  nodeRef = null;
  state = {
    transform: this.setTransform(this.props.position, this.props.parent, this.props.orientation, true),
    initialStyle: {
      opacity: 0
    },
    wasClicked: false
  };
  componentDidMount() {
    this.commitTransform();
  }
  componentDidUpdate() {
    if (this.state.wasClicked) {
      this.props.centerNode(this.props.hierarchyPointNode);
      this.setState({ wasClicked: false });
    }
    this.commitTransform();
  }
  shouldComponentUpdate(nextProps, nextState) {
    return this.shouldNodeTransform(this.props, nextProps, this.state, nextState);
  }
  shouldNodeTransform = (ownProps, nextProps, ownState, nextState) => nextProps.subscriptions !== ownProps.subscriptions || nextProps.position.x !== ownProps.position.x || nextProps.position.y !== ownProps.position.y || nextProps.orientation !== ownProps.orientation || nextState.wasClicked !== ownState.wasClicked;
  setTransform(position, parent, orientation, shouldTranslateToOrigin = false) {
    if (shouldTranslateToOrigin) {
      const hasParent = parent !== null && parent !== void 0;
      const originX = hasParent ? parent.x : 0;
      const originY = hasParent ? parent.y : 0;
      return orientation === "horizontal" ? `translate(${originY},${originX})` : `translate(${originX},${originY})`;
    }
    return orientation === "horizontal" ? `translate(${position.y},${position.x})` : `translate(${position.x},${position.y})`;
  }
  applyTransform(transform2, transitionDuration, opacity = 1, done = () => {
  }) {
    if (this.props.enableLegacyTransitions) {
      select_default2(this.nodeRef).transition().duration(transitionDuration).attr("transform", transform2).style("opacity", opacity).on("end", done);
    } else {
      select_default2(this.nodeRef).attr("transform", transform2).style("opacity", opacity);
      done();
    }
  }
  commitTransform() {
    const { orientation, transitionDuration, position, parent } = this.props;
    const transform2 = this.setTransform(position, parent, orientation);
    this.applyTransform(transform2, transitionDuration);
  }
  // TODO: needs tests
  renderNodeElement = () => {
    const { data, hierarchyPointNode, renderCustomNodeElement } = this.props;
    const renderNode = typeof renderCustomNodeElement === "function" ? renderCustomNodeElement : DefaultNodeElement_default;
    const nodeProps = {
      hierarchyPointNode,
      nodeDatum: data,
      toggleNode: this.handleNodeToggle,
      onNodeClick: this.handleOnClick,
      onNodeMouseOver: this.handleOnMouseOver,
      onNodeMouseOut: this.handleOnMouseOut,
      addChildren: this.handleAddChildren
    };
    return renderNode(nodeProps);
  };
  handleNodeToggle = () => {
    this.setState({ wasClicked: true });
    this.props.onNodeToggle(this.props.data.__rd3t.id);
  };
  handleOnClick = (evt) => {
    this.setState({ wasClicked: true });
    this.props.onNodeClick(this.props.hierarchyPointNode, evt);
  };
  handleOnMouseOver = (evt) => {
    this.props.onNodeMouseOver(this.props.hierarchyPointNode, evt);
  };
  handleOnMouseOut = (evt) => {
    this.props.onNodeMouseOut(this.props.hierarchyPointNode, evt);
  };
  handleAddChildren = (childrenData) => {
    this.props.handleAddChildrenToNode(this.props.data.__rd3t.id, childrenData);
  };
  componentWillLeave(done) {
    const { orientation, transitionDuration, position, parent } = this.props;
    const transform2 = this.setTransform(position, parent, orientation, true);
    this.applyTransform(transform2, transitionDuration, 0, done);
  }
  render() {
    const { data, nodeClassName } = this.props;
    return /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(
      "g",
      {
        id: data.__rd3t.id,
        ref: (n) => {
          this.nodeRef = n;
        },
        style: this.state.initialStyle,
        className: [data.children && data.children.length > 0 ? "rd3t-node" : "rd3t-leaf-node", nodeClassName].join(" ").trim(),
        transform: this.state.transform,
        children: this.renderNodeElement()
      }
    );
  }
};

// src/external/react-d3-tree/Link/index.tsx
var import_react39 = __toESM(require("react"), 1);

// node_modules/d3-shape/src/constant.js
function constant_default4(x2) {
  return function constant() {
    return x2;
  };
}

// node_modules/d3-path/src/path.js
var pi = Math.PI;
var tau = 2 * pi;
var epsilon = 1e-6;
var tauEpsilon = tau - epsilon;
function append(strings) {
  this._ += strings[0];
  for (let i = 1, n = strings.length; i < n; ++i) {
    this._ += arguments[i] + strings[i];
  }
}
function appendRound(digits) {
  let d = Math.floor(digits);
  if (!(d >= 0))
    throw new Error(`invalid digits: ${digits}`);
  if (d > 15)
    return append;
  const k = 10 ** d;
  return function(strings) {
    this._ += strings[0];
    for (let i = 1, n = strings.length; i < n; ++i) {
      this._ += Math.round(arguments[i] * k) / k + strings[i];
    }
  };
}
var Path = class {
  constructor(digits) {
    this._x0 = this._y0 = // start of current subpath
    this._x1 = this._y1 = null;
    this._ = "";
    this._append = digits == null ? append : appendRound(digits);
  }
  moveTo(x2, y2) {
    this._append`M${this._x0 = this._x1 = +x2},${this._y0 = this._y1 = +y2}`;
  }
  closePath() {
    if (this._x1 !== null) {
      this._x1 = this._x0, this._y1 = this._y0;
      this._append`Z`;
    }
  }
  lineTo(x2, y2) {
    this._append`L${this._x1 = +x2},${this._y1 = +y2}`;
  }
  quadraticCurveTo(x1, y1, x2, y2) {
    this._append`Q${+x1},${+y1},${this._x1 = +x2},${this._y1 = +y2}`;
  }
  bezierCurveTo(x1, y1, x2, y2, x3, y3) {
    this._append`C${+x1},${+y1},${+x2},${+y2},${this._x1 = +x3},${this._y1 = +y3}`;
  }
  arcTo(x1, y1, x2, y2, r) {
    x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;
    if (r < 0)
      throw new Error(`negative radius: ${r}`);
    let x0 = this._x1, y0 = this._y1, x21 = x2 - x1, y21 = y2 - y1, x01 = x0 - x1, y01 = y0 - y1, l01_2 = x01 * x01 + y01 * y01;
    if (this._x1 === null) {
      this._append`M${this._x1 = x1},${this._y1 = y1}`;
    } else if (!(l01_2 > epsilon))
      ;
    else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {
      this._append`L${this._x1 = x1},${this._y1 = y1}`;
    } else {
      let x20 = x2 - x0, y20 = y2 - y0, l21_2 = x21 * x21 + y21 * y21, l20_2 = x20 * x20 + y20 * y20, l21 = Math.sqrt(l21_2), l01 = Math.sqrt(l01_2), l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2), t01 = l / l01, t21 = l / l21;
      if (Math.abs(t01 - 1) > epsilon) {
        this._append`L${x1 + t01 * x01},${y1 + t01 * y01}`;
      }
      this._append`A${r},${r},0,0,${+(y01 * x20 > x01 * y20)},${this._x1 = x1 + t21 * x21},${this._y1 = y1 + t21 * y21}`;
    }
  }
  arc(x2, y2, r, a0, a1, ccw) {
    x2 = +x2, y2 = +y2, r = +r, ccw = !!ccw;
    if (r < 0)
      throw new Error(`negative radius: ${r}`);
    let dx = r * Math.cos(a0), dy = r * Math.sin(a0), x0 = x2 + dx, y0 = y2 + dy, cw = 1 ^ ccw, da = ccw ? a0 - a1 : a1 - a0;
    if (this._x1 === null) {
      this._append`M${x0},${y0}`;
    } else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {
      this._append`L${x0},${y0}`;
    }
    if (!r)
      return;
    if (da < 0)
      da = da % tau + tau;
    if (da > tauEpsilon) {
      this._append`A${r},${r},0,1,${cw},${x2 - dx},${y2 - dy}A${r},${r},0,1,${cw},${this._x1 = x0},${this._y1 = y0}`;
    } else if (da > epsilon) {
      this._append`A${r},${r},0,${+(da >= pi)},${cw},${this._x1 = x2 + r * Math.cos(a1)},${this._y1 = y2 + r * Math.sin(a1)}`;
    }
  }
  rect(x2, y2, w, h) {
    this._append`M${this._x0 = this._x1 = +x2},${this._y0 = this._y1 = +y2}h${w = +w}v${+h}h${-w}Z`;
  }
  toString() {
    return this._;
  }
};
function path() {
  return new Path();
}
path.prototype = Path.prototype;

// node_modules/d3-shape/src/path.js
function withPath(shape) {
  let digits = 3;
  shape.digits = function(_) {
    if (!arguments.length)
      return digits;
    if (_ == null) {
      digits = null;
    } else {
      const d = Math.floor(_);
      if (!(d >= 0))
        throw new RangeError(`invalid digits: ${_}`);
      digits = d;
    }
    return shape;
  };
  return () => new Path(digits);
}

// node_modules/d3-shape/src/array.js
var slice = Array.prototype.slice;

// node_modules/d3-shape/src/point.js
function x(p) {
  return p[0];
}
function y(p) {
  return p[1];
}

// node_modules/d3-shape/src/curve/bump.js
var Bump = class {
  constructor(context, x2) {
    this._context = context;
    this._x = x2;
  }
  areaStart() {
    this._line = 0;
  }
  areaEnd() {
    this._line = NaN;
  }
  lineStart() {
    this._point = 0;
  }
  lineEnd() {
    if (this._line || this._line !== 0 && this._point === 1)
      this._context.closePath();
    this._line = 1 - this._line;
  }
  point(x2, y2) {
    x2 = +x2, y2 = +y2;
    switch (this._point) {
      case 0: {
        this._point = 1;
        if (this._line)
          this._context.lineTo(x2, y2);
        else
          this._context.moveTo(x2, y2);
        break;
      }
      case 1:
        this._point = 2;
      default: {
        if (this._x)
          this._context.bezierCurveTo(this._x0 = (this._x0 + x2) / 2, this._y0, this._x0, y2, x2, y2);
        else
          this._context.bezierCurveTo(this._x0, this._y0 = (this._y0 + y2) / 2, x2, this._y0, x2, y2);
        break;
      }
    }
    this._x0 = x2, this._y0 = y2;
  }
};
function bumpX(context) {
  return new Bump(context, true);
}
function bumpY(context) {
  return new Bump(context, false);
}

// node_modules/d3-shape/src/link.js
function linkSource(d) {
  return d.source;
}
function linkTarget(d) {
  return d.target;
}
function link(curve) {
  let source = linkSource, target = linkTarget, x2 = x, y2 = y, context = null, output = null, path2 = withPath(link2);
  function link2() {
    let buffer;
    const argv = slice.call(arguments);
    const s = source.apply(this, argv);
    const t = target.apply(this, argv);
    if (context == null)
      output = curve(buffer = path2());
    output.lineStart();
    argv[0] = s, output.point(+x2.apply(this, argv), +y2.apply(this, argv));
    argv[0] = t, output.point(+x2.apply(this, argv), +y2.apply(this, argv));
    output.lineEnd();
    if (buffer)
      return output = null, buffer + "" || null;
  }
  link2.source = function(_) {
    return arguments.length ? (source = _, link2) : source;
  };
  link2.target = function(_) {
    return arguments.length ? (target = _, link2) : target;
  };
  link2.x = function(_) {
    return arguments.length ? (x2 = typeof _ === "function" ? _ : constant_default4(+_), link2) : x2;
  };
  link2.y = function(_) {
    return arguments.length ? (y2 = typeof _ === "function" ? _ : constant_default4(+_), link2) : y2;
  };
  link2.context = function(_) {
    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), link2) : context;
  };
  return link2;
}
function linkHorizontal() {
  return link(bumpX);
}
function linkVertical() {
  return link(bumpY);
}

// src/external/react-d3-tree/Link/index.tsx
var import_jsx_runtime43 = require("react/jsx-runtime");
var Link2 = class extends import_react39.default.PureComponent {
  linkRef = null;
  state = {
    initialStyle: {
      opacity: 0
    }
  };
  componentDidMount() {
    this.applyOpacity(1, this.props.transitionDuration);
  }
  componentWillLeave(done) {
    this.applyOpacity(0, this.props.transitionDuration, done);
  }
  applyOpacity(opacity, transitionDuration, done = () => {
  }) {
    if (this.props.enableLegacyTransitions) {
      select_default2(this.linkRef).transition().duration(transitionDuration).style("opacity", opacity).on("end", done);
    } else {
      select_default2(this.linkRef).style("opacity", opacity);
      done();
    }
  }
  drawStepPath(linkData, orientation) {
    const { source, target } = linkData;
    const deltaY = target.y - source.y;
    return orientation === "horizontal" ? `M${source.y},${source.x} H${source.y + deltaY / 2} V${target.x} H${target.y}` : `M${source.x},${source.y} V${source.y + deltaY / 2} H${target.x} V${target.y}`;
  }
  drawDiagonalPath(linkData, orientation) {
    const { source, target } = linkData;
    return orientation === "horizontal" ? linkHorizontal()({
      source: [source.y, source.x],
      target: [target.y, target.x]
    }) : linkVertical()({
      source: [source.x, source.y],
      target: [target.x, target.y]
    });
  }
  drawStraightPath(linkData, orientation) {
    const { source, target } = linkData;
    return orientation === "horizontal" ? `M${source.y},${source.x}L${target.y},${target.x}` : `M${source.x},${source.y}L${target.x},${target.y}`;
  }
  drawElbowPath(linkData, orientation) {
    return orientation === "horizontal" ? `M${linkData.source.y},${linkData.source.x}V${linkData.target.x}H${linkData.target.y}` : `M${linkData.source.x},${linkData.source.y}V${linkData.target.y}H${linkData.target.x}`;
  }
  drawPath() {
    const { linkData, orientation, pathFunc } = this.props;
    if (typeof pathFunc === "function") {
      return pathFunc(linkData, orientation);
    }
    if (pathFunc === "elbow") {
      return this.drawElbowPath(linkData, orientation);
    }
    if (pathFunc === "straight") {
      return this.drawStraightPath(linkData, orientation);
    }
    if (pathFunc === "step") {
      return this.drawStepPath(linkData, orientation);
    }
    return this.drawDiagonalPath(linkData, orientation);
  }
  getClassNames() {
    const { linkData, orientation, pathClassFunc } = this.props;
    const classNames = ["rd3t-link"];
    if (typeof pathClassFunc === "function") {
      classNames.push(pathClassFunc(linkData, orientation));
    }
    return classNames.join(" ").trim();
  }
  handleOnClick = (evt) => {
    this.props.onClick(this.props.linkData.source, this.props.linkData.target, evt);
  };
  handleOnMouseOver = (evt) => {
    this.props.onMouseOver(this.props.linkData.source, this.props.linkData.target, evt);
  };
  handleOnMouseOut = (evt) => {
    this.props.onMouseOut(this.props.linkData.source, this.props.linkData.target, evt);
  };
  render() {
    const { linkData } = this.props;
    return /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(
      "path",
      {
        ref: (l) => {
          this.linkRef = l;
        },
        style: { ...this.state.initialStyle },
        className: this.getClassNames(),
        d: this.drawPath(),
        onClick: this.handleOnClick,
        onMouseOver: this.handleOnMouseOver,
        onMouseOut: this.handleOnMouseOut,
        "data-source-id": linkData.source.id,
        "data-target-id": linkData.target.id
      }
    );
  }
};

// src/external/react-d3-tree/globalCss.ts
var globalCss_default = `
/* Tree */
.rd3t-tree-container {
  width: 100%;
  height: 100%;
}

.rd3t-grabbable {
  cursor: move; /* fallback if grab cursor is unsupported */
  cursor: grab;
  cursor: -moz-grab;
  cursor: -webkit-grab;
}
.rd3t-grabbable:active {
    cursor: grabbing;
    cursor: -moz-grabbing;
    cursor: -webkit-grabbing;
}

/* Node */
.rd3t-node {
  cursor: pointer;
  fill: #777;
  stroke: #000;
  stroke-width: 2;
}

.rd3t-leaf-node {
  cursor: pointer;
  fill: transparent;
  stroke: #000;
  stroke-width: 1;
}

.rd3t-label__title {
  fill: #000;
  stroke: none;
  font-weight: bolder;
}

.rd3t-label__attributes {
  fill: #777;
  stroke: none;
  font-weight: bolder;
  font-size: smaller;
}

/* Link */
.rd3t-link {
  fill: none;
  stroke: #000;
}
`;

// src/external/react-d3-tree/Tree/index.tsx
var import_jsx_runtime44 = require("react/jsx-runtime");
var Tree = class _Tree extends import_react40.default.Component {
  static defaultProps = {
    onNodeClick: void 0,
    onNodeMouseOver: void 0,
    onNodeMouseOut: void 0,
    onLinkClick: void 0,
    onLinkMouseOver: void 0,
    onLinkMouseOut: void 0,
    onUpdate: void 0,
    orientation: "horizontal",
    translate: { x: 0, y: 0 },
    pathFunc: "diagonal",
    pathClassFunc: void 0,
    transitionDuration: 500,
    depthFactor: void 0,
    collapsible: true,
    initialDepth: void 0,
    zoomable: true,
    draggable: true,
    zoom: 1,
    scaleExtent: { min: 0.1, max: 1 },
    nodeSize: { x: 140, y: 140 },
    separation: { siblings: 1, nonSiblings: 2 },
    shouldCollapseNeighborNodes: false,
    svgClassName: "",
    rootNodeClassName: "",
    branchNodeClassName: "",
    leafNodeClassName: "",
    renderCustomNodeElement: void 0,
    enableLegacyTransitions: false,
    hasInteractiveNodes: false,
    dimensions: void 0,
    centeringTransitionDuration: 800,
    dataKey: void 0
  };
  state = {
    dataRef: this.props.data,
    data: _Tree.assignInternalProperties((0, import_clone2.default)(this.props.data)),
    d3: _Tree.calculateD3Geometry(this.props),
    isTransitioning: false,
    isInitialRenderForDataset: true,
    dataKey: this.props.dataKey
  };
  internalState = {
    targetNode: null,
    isTransitioning: false
  };
  svgInstanceRef = `rd3t-svg-${(0, import_uuid.v4)()}`;
  gInstanceRef = `rd3t-g-${(0, import_uuid.v4)()}`;
  static getDerivedStateFromProps(nextProps, prevState) {
    let derivedState = null;
    const dataKeyChanged = !nextProps.dataKey || prevState.dataKey !== nextProps.dataKey;
    if (nextProps.data !== prevState.dataRef && dataKeyChanged) {
      derivedState = {
        dataRef: nextProps.data,
        data: _Tree.assignInternalProperties((0, import_clone2.default)(nextProps.data)),
        isInitialRenderForDataset: true,
        dataKey: nextProps.dataKey
      };
    }
    const d3 = _Tree.calculateD3Geometry(nextProps);
    if (!dequal(d3, prevState.d3)) {
      derivedState = derivedState || {};
      derivedState.d3 = d3;
    }
    return derivedState;
  }
  componentDidMount() {
    this.bindZoomListener(this.props);
    this.setState({ isInitialRenderForDataset: false });
  }
  componentDidUpdate(prevProps) {
    if (this.props.data !== prevProps.data) {
      this.setState({ isInitialRenderForDataset: false });
    }
    if (!dequal(this.props.translate, prevProps.translate) || !dequal(this.props.scaleExtent, prevProps.scaleExtent) || this.props.zoomable !== prevProps.zoomable || this.props.draggable !== prevProps.draggable || this.props.zoom !== prevProps.zoom || this.props.enableLegacyTransitions !== prevProps.enableLegacyTransitions) {
      this.bindZoomListener(this.props);
    }
    if (typeof this.props.onUpdate === "function") {
      this.props.onUpdate({
        node: this.internalState.targetNode ? (0, import_clone2.default)(this.internalState.targetNode) : null,
        zoom: this.state.d3.scale,
        translate: this.state.d3.translate
      });
    }
    this.internalState.targetNode = null;
  }
  /**
   * Collapses all tree nodes with a `depth` larger than `initialDepth`.
   *
   * @param {array} nodeSet Array of nodes generated by `generateTree`
   * @param {number} initialDepth Maximum initial depth the tree should render
   */
  setInitialTreeDepth(nodeSet, initialDepth) {
    nodeSet.forEach((n) => {
      n.data.__rd3t.collapsed = n.depth >= initialDepth;
    });
  }
  /**
   * bindZoomListener - If `props.zoomable`, binds a listener for
   * "zoom" events to the SVG and sets scaleExtent to min/max
   * specified in `props.scaleExtent`.
   */
  bindZoomListener(props) {
    const { zoomable, scaleExtent, translate, zoom, onUpdate, hasInteractiveNodes } = props;
    const svg = select_default2(`.${this.svgInstanceRef}`);
    const g = select_default2(`.${this.gInstanceRef}`);
    svg.call(zoom_default2().transform, identity2.translate(translate.x, translate.y).scale(zoom));
    svg.call(
      zoom_default2().scaleExtent(zoomable ? [scaleExtent.min, scaleExtent.max] : [zoom, zoom]).filter((event) => {
        if (hasInteractiveNodes) {
          return event.target.classList.contains(this.svgInstanceRef) || event.target.classList.contains(this.gInstanceRef) || event.shiftKey;
        }
        return true;
      }).on("zoom", (event) => {
        if (!this.props.draggable && ["mousemove", "touchmove", "dblclick"].includes(event.sourceEvent.type)) {
          return;
        }
        g.attr("transform", event.transform);
        if (typeof onUpdate === "function") {
          onUpdate({
            node: null,
            zoom: event.transform.k,
            translate: { x: event.transform.x, y: event.transform.y }
          });
          this.state.d3.scale = event.transform.k;
          this.state.d3.translate = {
            x: event.transform.x,
            y: event.transform.y
          };
        }
      })
    );
  }
  /**
   * Assigns internal properties that are required for tree
   * manipulation to each node in the `data` set and returns a new `data` array.
   *
   * @static
   */
  static assignInternalProperties(data, currentDepth = 0) {
    const d = Array.isArray(data) ? data : [data];
    return d.map((n) => {
      const nodeDatum = n;
      nodeDatum.__rd3t = { id: null, depth: null, collapsed: false };
      nodeDatum.__rd3t.id = (0, import_uuid.v4)();
      nodeDatum.__rd3t.depth = currentDepth;
      if (nodeDatum.children && nodeDatum.children.length > 0) {
        nodeDatum.children = _Tree.assignInternalProperties(nodeDatum.children, currentDepth + 1);
      }
      return nodeDatum;
    });
  }
  /**
   * Recursively walks the nested `nodeSet` until a node matching `nodeId` is found.
   */
  findNodesById(nodeId, nodeSet, hits) {
    if (hits.length > 0) {
      return hits;
    }
    hits = hits.concat(nodeSet.filter((node) => node.__rd3t.id === nodeId));
    nodeSet.forEach((node) => {
      if (node.children && node.children.length > 0) {
        hits = this.findNodesById(nodeId, node.children, hits);
      }
    });
    return hits;
  }
  /**
   * Recursively walks the nested `nodeSet` until all nodes at `depth` have been found.
   *
   * @param {number} depth Target depth for which nodes should be returned
   * @param {array} nodeSet Array of nested `node` objects
   * @param {array} accumulator Accumulator for matches, passed between recursive calls
   */
  findNodesAtDepth(depth, nodeSet, accumulator) {
    accumulator = accumulator.concat(nodeSet.filter((node) => node.__rd3t.depth === depth));
    nodeSet.forEach((node) => {
      if (node.children && node.children.length > 0) {
        accumulator = this.findNodesAtDepth(depth, node.children, accumulator);
      }
    });
    return accumulator;
  }
  /**
   * Recursively sets the internal `collapsed` property of
   * the passed `TreeNodeDatum` and its children to `true`.
   *
   * @static
   */
  static collapseNode(nodeDatum) {
    nodeDatum.__rd3t.collapsed = true;
    if (nodeDatum.children && nodeDatum.children.length > 0) {
      nodeDatum.children.forEach((child) => {
        _Tree.collapseNode(child);
      });
    }
  }
  /**
   * Sets the internal `collapsed` property of
   * the passed `TreeNodeDatum` object to `false`.
   *
   * @static
   */
  static expandNode(nodeDatum) {
    nodeDatum.__rd3t.collapsed = false;
  }
  /**
   * Collapses all nodes in `nodeSet` that are neighbors (same depth) of `targetNode`.
   */
  collapseNeighborNodes(targetNode, nodeSet) {
    const neighbors = this.findNodesAtDepth(targetNode.__rd3t.depth, nodeSet, []).filter(
      (node) => node.__rd3t.id !== targetNode.__rd3t.id
    );
    neighbors.forEach((neighbor) => _Tree.collapseNode(neighbor));
  }
  /**
   * Finds the node matching `nodeId` and
   * expands/collapses it, depending on the current state of
   * its internal `collapsed` property.
   * `setState` callback receives targetNode and handles
   * `props.onClick` if defined.
   */
  handleNodeToggle = (nodeId) => {
    const data = (0, import_clone2.default)(this.state.data);
    const matches = this.findNodesById(nodeId, data, []);
    const targetNodeDatum = matches[0];
    if (this.props.collapsible && !this.state.isTransitioning) {
      if (targetNodeDatum.__rd3t.collapsed) {
        _Tree.expandNode(targetNodeDatum);
        this.props.shouldCollapseNeighborNodes && this.collapseNeighborNodes(targetNodeDatum, data);
      } else {
        _Tree.collapseNode(targetNodeDatum);
      }
      if (this.props.enableLegacyTransitions) {
        this.setState({ data, isTransitioning: true });
        setTimeout(() => this.setState({ isTransitioning: false }), this.props.transitionDuration + 10);
      } else {
        this.setState({ data });
      }
      this.internalState.targetNode = targetNodeDatum;
    }
  };
  handleAddChildrenToNode = (nodeId, childrenData) => {
    const data = (0, import_clone2.default)(this.state.data);
    const matches = this.findNodesById(nodeId, data, []);
    if (matches.length > 0) {
      const targetNodeDatum = matches[0];
      const depth = targetNodeDatum.__rd3t.depth;
      const formattedChildren = (0, import_clone2.default)(childrenData).map(
        (node) => _Tree.assignInternalProperties([node], depth + 1)
      );
      targetNodeDatum.children.push(...formattedChildren.flat());
      this.setState({ data });
    }
  };
  /**
   * Handles the user-defined `onNodeClick` function.
   */
  handleOnNodeClickCb = (hierarchyPointNode, evt) => {
    const { onNodeClick } = this.props;
    if (onNodeClick && typeof onNodeClick === "function") {
      evt.persist();
      onNodeClick((0, import_clone2.default)(hierarchyPointNode), evt);
    }
  };
  /**
   * Handles the user-defined `onLinkClick` function.
   */
  handleOnLinkClickCb = (linkSource2, linkTarget2, evt) => {
    const { onLinkClick } = this.props;
    if (onLinkClick && typeof onLinkClick === "function") {
      evt.persist();
      onLinkClick((0, import_clone2.default)(linkSource2), (0, import_clone2.default)(linkTarget2), evt);
    }
  };
  /**
   * Handles the user-defined `onNodeMouseOver` function.
   */
  handleOnNodeMouseOverCb = (hierarchyPointNode, evt) => {
    const { onNodeMouseOver } = this.props;
    if (onNodeMouseOver && typeof onNodeMouseOver === "function") {
      evt.persist();
      onNodeMouseOver((0, import_clone2.default)(hierarchyPointNode), evt);
    }
  };
  /**
   * Handles the user-defined `onLinkMouseOver` function.
   */
  handleOnLinkMouseOverCb = (linkSource2, linkTarget2, evt) => {
    const { onLinkMouseOver } = this.props;
    if (onLinkMouseOver && typeof onLinkMouseOver === "function") {
      evt.persist();
      onLinkMouseOver((0, import_clone2.default)(linkSource2), (0, import_clone2.default)(linkTarget2), evt);
    }
  };
  /**
   * Handles the user-defined `onNodeMouseOut` function.
   */
  handleOnNodeMouseOutCb = (hierarchyPointNode, evt) => {
    const { onNodeMouseOut } = this.props;
    if (onNodeMouseOut && typeof onNodeMouseOut === "function") {
      evt.persist();
      onNodeMouseOut((0, import_clone2.default)(hierarchyPointNode), evt);
    }
  };
  /**
   * Handles the user-defined `onLinkMouseOut` function.
   */
  handleOnLinkMouseOutCb = (linkSource2, linkTarget2, evt) => {
    const { onLinkMouseOut } = this.props;
    if (onLinkMouseOut && typeof onLinkMouseOut === "function") {
      evt.persist();
      onLinkMouseOut((0, import_clone2.default)(linkSource2), (0, import_clone2.default)(linkTarget2), evt);
    }
  };
  /**
   * Takes a hierarchy point node and centers the node on the screen
   * if the dimensions parameter is passed to `Tree`.
   *
   * This code is adapted from Rob Schmuecker's centerNode method.
   * Link: http://bl.ocks.org/robschmuecker/7880033
   */
  centerNode = (hierarchyPointNode) => {
    const { dimensions, orientation, zoom, centeringTransitionDuration } = this.props;
    if (dimensions) {
      const g = select_default2(`.${this.gInstanceRef}`);
      const svg = select_default2(`.${this.svgInstanceRef}`);
      const scale = this.state.d3.scale;
      let x2;
      let y2;
      if (orientation === "horizontal") {
        y2 = -hierarchyPointNode.x * scale + dimensions.height / 2;
        x2 = -hierarchyPointNode.y * scale + dimensions.width / 2;
      } else {
        x2 = -hierarchyPointNode.x * scale + dimensions.width / 2;
        y2 = -hierarchyPointNode.y * scale + dimensions.height / 2;
      }
      g.transition().duration(centeringTransitionDuration).attr("transform", "translate(" + x2 + "," + y2 + ")scale(" + scale + ")");
      svg.call(zoom_default2().transform, identity2.translate(x2, y2).scale(zoom));
    }
  };
  /**
   * Generates tree elements (`nodes` and `links`) by
   * grabbing the rootNode from `this.state.data[0]`.
   * Restricts tree depth to `props.initialDepth` if defined and if this is
   * the initial render of the tree.
   */
  generateTree() {
    const { initialDepth, depthFactor, separation, nodeSize, orientation } = this.props;
    const { isInitialRenderForDataset } = this.state;
    const tree = tree_default().nodeSize(orientation === "horizontal" ? [nodeSize.y, nodeSize.x] : [nodeSize.x, nodeSize.y]).separation(
      (a, b) => a.parent.data.__rd3t.id === b.parent.data.__rd3t.id ? separation.siblings : separation.nonSiblings
    );
    const rootNode = tree(hierarchy(this.state.data[0], (d) => d.__rd3t.collapsed ? null : d.children));
    let nodes = rootNode.descendants();
    const links = rootNode.links();
    if (initialDepth !== void 0 && isInitialRenderForDataset) {
      this.setInitialTreeDepth(nodes, initialDepth);
    }
    if (depthFactor) {
      nodes.forEach((node) => {
        node.y = node.depth * depthFactor;
      });
    }
    return { nodes, links };
  }
  /**
   * Set initial zoom and position.
   * Also limit zoom level according to `scaleExtent` on initial display. This is necessary,
   * because the first time we are setting it as an SVG property, instead of going
   * through D3's scaling mechanism, which would have picked up both properties.
   *
   * @static
   */
  static calculateD3Geometry(nextProps) {
    let scale;
    if (nextProps.zoom > nextProps.scaleExtent.max) {
      scale = nextProps.scaleExtent.max;
    } else if (nextProps.zoom < nextProps.scaleExtent.min) {
      scale = nextProps.scaleExtent.min;
    } else {
      scale = nextProps.zoom;
    }
    return {
      translate: nextProps.translate,
      scale
    };
  }
  /**
   * Determines which additional `className` prop should be passed to the node & returns it.
   */
  getNodeClassName = (parent, nodeDatum) => {
    const { rootNodeClassName, branchNodeClassName, leafNodeClassName } = this.props;
    const hasParent = parent !== null && parent !== void 0;
    if (hasParent) {
      return nodeDatum.children ? branchNodeClassName : leafNodeClassName;
    } else {
      return rootNodeClassName;
    }
  };
  render() {
    const { nodes, links } = this.generateTree();
    const {
      renderCustomNodeElement,
      orientation,
      pathFunc,
      transitionDuration,
      nodeSize,
      depthFactor,
      initialDepth,
      separation,
      enableLegacyTransitions,
      svgClassName,
      pathClassFunc
    } = this.props;
    const { translate, scale } = this.state.d3;
    const subscriptions = {
      ...nodeSize,
      ...separation,
      depthFactor,
      initialDepth
    };
    return /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)("div", { className: "rd3t-tree-container rd3t-grabbable", children: [
      /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("style", { children: globalCss_default }),
      /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("svg", { className: `rd3t-svg ${this.svgInstanceRef} ${svgClassName}`, width: "100%", height: "100%", children: /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)(
        TransitionGroupWrapper_default,
        {
          enableLegacyTransitions,
          component: "g",
          className: `rd3t-g ${this.gInstanceRef}`,
          transform: `translate(${translate.x},${translate.y}) scale(${scale})`,
          children: [
            links.map((linkData, i) => {
              return /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(
                Link2,
                {
                  orientation,
                  pathFunc,
                  pathClassFunc,
                  linkData,
                  onClick: this.handleOnLinkClickCb,
                  onMouseOver: this.handleOnLinkMouseOverCb,
                  onMouseOut: this.handleOnLinkMouseOutCb,
                  enableLegacyTransitions,
                  transitionDuration
                },
                "link-" + i
              );
            }),
            nodes.map((hierarchyPointNode, i) => {
              const { data, x: x2, y: y2, parent } = hierarchyPointNode;
              return /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(
                Node2,
                {
                  data,
                  position: { x: x2, y: y2 },
                  hierarchyPointNode,
                  parent,
                  nodeClassName: this.getNodeClassName(parent, data),
                  renderCustomNodeElement,
                  nodeSize,
                  orientation,
                  enableLegacyTransitions,
                  transitionDuration,
                  onNodeToggle: this.handleNodeToggle,
                  onNodeClick: this.handleOnNodeClickCb,
                  onNodeMouseOver: this.handleOnNodeMouseOverCb,
                  onNodeMouseOut: this.handleOnNodeMouseOutCb,
                  handleAddChildrenToNode: this.handleAddChildrenToNode,
                  subscriptions,
                  centerNode: this.centerNode
                },
                "node-" + i
              );
            })
          ]
        }
      ) })
    ] });
  }
};
var Tree_default = Tree;

// src/external/react-d3-tree/index.ts
var react_d3_tree_default = Tree_default;

// src/RemixDevTools/tabs/RoutesTab.tsx
var import_jsx_runtime45 = require("react/jsx-runtime");
var RoutesTab = () => {
  const matches = (0, import_react42.useMatches)();
  const navigate = (0, import_react42.useNavigate)();
  const activeRoutes = matches.map((match) => match.id);
  const { settings } = useSettingsContext();
  const { routeWildcards, routeViewMode } = settings;
  const { isConnected } = useRemixForgeSocket();
  const { detachedWindow } = useDetachedWindowControls();
  const [activeRoute, setActiveRoute] = (0, import_react41.useState)(null);
  const [routes] = (0, import_react41.useState)(createExtendedRoutes());
  const [treeRoutes] = (0, import_react41.useState)(createRouteTree(window.__remixManifest.routes));
  const isTreeView = routeViewMode === "tree";
  const openNewRoute = (path2) => (e) => {
    e?.preventDefault();
    navigate(path2);
    if (detachedWindow) {
      setRouteInLocalStorage(path2);
    }
  };
  return /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("div", { className: (0, import_clsx14.default)("rdt-relative rdt-h-full rdt-w-full ", !isTreeView && "rdt-pt-8"), children: [
    /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(RouteToggle, {}),
    isTreeView ? /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("div", { className: "rdt-flex rdt-h-full rdt-w-full", children: [
      /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(
        react_d3_tree_default,
        {
          translate: { x: window.innerWidth / 2 - (isTreeView && activeRoute ? 0 : 0), y: 30 },
          pathClassFunc: (link2) => activeRoutes.includes(link2.target.data.attributes.id) ? "rdt-stroke-yellow-500" : "rdt-stroke-gray-400",
          renderCustomNodeElement: (props) => RouteNode({
            ...props,
            routeWildcards,
            setActiveRoute,
            activeRoutes
          }),
          orientation: "vertical",
          data: treeRoutes
        }
      ),
      activeRoute && /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(
        RouteInfo,
        {
          openNewRoute,
          onClose: () => setActiveRoute(null),
          route: activeRoute,
          className: "rdt-w-[600px] rdt-border-l rdt-border-l-slate-800 rdt-p-2 rdt-px-4"
        }
      )
    ] }) : /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)(Accordion, { className: "rdt-h-full rdt-w-full rdt-overflow-y-auto rdt-pr-4", type: "single", collapsible: true, children: [
      isConnected && /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)(AccordionItem, { value: "add-new", children: [
        /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(AccordionTrigger, { children: "Add a new route to the project" }),
        /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(AccordionContent, { children: /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(NewRouteForm, {}) })
      ] }),
      routes?.map((route) => {
        const { path: path2, pathToOpen } = constructRoutePath(route, routeWildcards);
        return /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)(AccordionItem, { value: route.id, children: [
          /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(AccordionTrigger, { children: /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("div", { className: "justify-center rdt-flex rdt-w-full rdt-items-center rdt-gap-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("span", { className: "rdt-text-gray-500", children: "Route:" }),
            " ",
            route.url,
            " ",
            /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("span", { className: "rdt-ml-auto rdt-text-xs rdt-text-gray-500", children: [
              'Url: "',
              pathToOpen,
              '"'
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(
              "div",
              {
                title: pathToOpen,
                className: "rdt-mr-2 rdt-whitespace-nowrap rdt-rounded rdt-border rdt-border-gray-400 rdt-px-2 rdt-py-1 rdt-text-sm",
                onClick: openNewRoute(path2),
                children: "Open in browser"
              }
            )
          ] }) }),
          /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(AccordionContent, { children: /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(RouteInfo, { openNewRoute, route }) })
        ] }, route.id);
      })
    ] })
  ] });
};

// src/RemixDevTools/tabs/TerminalTab.tsx
var import_react44 = require("react");
var import_clsx15 = __toESM(require("clsx"), 1);

// src/RemixDevTools/hooks/useTerminalShortcuts.ts
var import_react43 = require("react");
var useTerminalShortcuts = ({
  onSubmit,
  setCommand,
  terminal,
  projectCommands,
  sendJsonMessage
}) => {
  const [historyIndex, setHistoryIndex] = (0, import_react43.useState)();
  const [projectCommandIndex, setProjectCommandIndex] = (0, import_react43.useState)();
  const availableCommands = Object.keys(projectCommands ?? {});
  const { addTerminalOutput, clearTerminalOutput } = useTerminalContext();
  const onKeyDown = (e) => {
    if (e.key === "Enter") {
      e.preventDefault();
      onSubmit();
    }
    if (e.key === "ArrowUp") {
      e.preventDefault();
      if (historyIndex === 0) {
        setHistoryIndex(0);
        return setCommand(terminal.history[0]);
      }
      const newIndex = historyIndex === void 0 ? terminal.history.length - 1 : historyIndex - 1;
      setHistoryIndex(newIndex);
      setCommand(terminal.history[newIndex]);
    }
    if (e.key === "ArrowDown") {
      e.preventDefault();
      if (historyIndex === terminal.history.length - 1) {
        setHistoryIndex(terminal.history.length - 1);
        return setCommand(terminal.history[history.length - 1] ?? "");
      }
      const newIndex = historyIndex === void 0 ? terminal.history.length - 1 : historyIndex + 1;
      setHistoryIndex(newIndex);
      setCommand(terminal.history[newIndex]);
    }
    if (e.key === "ArrowLeft" && projectCommands) {
      e.preventDefault();
      if (projectCommandIndex === 0) {
        setProjectCommandIndex(0);
        return setCommand("npm run " + availableCommands[0]);
      }
      const newIndex = projectCommandIndex === void 0 ? availableCommands.length - 1 : projectCommandIndex - 1;
      setProjectCommandIndex(newIndex);
      setCommand("npm run " + availableCommands[newIndex]);
    }
    if (e.key === "ArrowRight" && projectCommands) {
      e.preventDefault();
      if (projectCommandIndex === availableCommands.length - 1) {
        setProjectCommandIndex(availableCommands.length - 1);
        const toRun = availableCommands[history.length - 1];
        return setCommand(toRun ? "npm run " + toRun : "");
      }
      const newIndex = projectCommandIndex === void 0 ? availableCommands.length - 1 : projectCommandIndex + 1;
      setProjectCommandIndex(newIndex);
      setCommand("npm run " + availableCommands[newIndex]);
    }
    if (e.ctrlKey && e.key === "c") {
      e.preventDefault();
      sendJsonMessage({
        type: "kill",
        terminalId: terminal.id,
        processId: terminal.processId
      });
      addTerminalOutput(terminal.id, {
        type: "output",
        value: "^C \n"
      });
    }
    if (e.ctrlKey && e.key === "l") {
      e.preventDefault();
      clearTerminalOutput(terminal.id);
    }
  };
  return { onKeyDown };
};

// src/RemixDevTools/tabs/TerminalTab.tsx
var import_jsx_runtime46 = require("react/jsx-runtime");
var Terminal = ({ onClose, terminal, projectCommands }) => {
  const { addTerminalOutput, toggleTerminalLock, setProcessId, addTerminalHistory, terminals } = useTerminalContext();
  const [command, setCommand] = (0, import_react44.useState)("");
  const ref = (0, import_react44.useRef)(null);
  const onSubmit = () => {
    sendJsonMessage({
      type: "terminal_command",
      command,
      terminalId: terminal.id
    });
    addTerminalOutput(terminal.id, {
      type: "command",
      value: command + "\n"
    });
    addTerminalHistory(terminal.id, command);
    setCommand("");
    toggleTerminalLock(terminal.id);
  };
  (0, import_react44.useEffect)(() => {
    ref.current?.scrollTo({ top: ref.current.scrollHeight });
  }, [terminal.output]);
  const { sendJsonMessage } = useRemixForgeSocket({
    onMessage: (message) => {
      try {
        const data = JSON.parse(message.data);
        const isThisTerminalCommand = data.type === "terminal_command" && data.terminalId === terminal.id;
        if (isThisTerminalCommand) {
          const processDone = data.subtype === "ERROR" || data.subtype === "EXIT" || data.subtype === "CLOSE";
          const hasOutputData = data.subtype === "DATA" || data.subtype === "ERROR";
          if (data.processId) {
            setProcessId(terminal.id, data.processId);
          }
          if (processDone) {
            setProcessId(terminal.id, void 0);
            toggleTerminalLock(terminal.id, false);
          }
          if (hasOutputData) {
            addTerminalOutput(data.terminalId, {
              type: data.subtype === "ERROR" ? "error" : "output",
              value: data.data
            });
          }
        }
      } catch (e) {
      }
    }
  });
  const { onKeyDown } = useTerminalShortcuts({
    onSubmit,
    setCommand,
    terminal,
    projectCommands,
    sendJsonMessage
  });
  return /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)("div", { className: "rdt-relative rdt-flex rdt-h-full rdt-w-full rdt-flex-col rdt-justify-between rdt-rounded-lg rdt-border rdt-border-gray-100/10", children: [
    terminals.length > 1 && /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(
      "button",
      {
        onClick: () => {
          if (terminal.locked) {
            sendJsonMessage({
              type: "kill",
              terminalId: terminal.id,
              processId: terminal.processId
            });
          }
          onClose();
        },
        title: "Close terminal",
        className: "rdt-absolute rdt-right-2 rdt-top-2",
        children: /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(Icon, { name: "X", className: "rdt-h-6 rdt-w-6 rdt-stroke-red-500" })
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("div", { ref, className: "rdt-overflow-y-auto rdt-p-2", children: terminal.output?.map((output, i) => /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(
      "div",
      {
        className: (0, import_clsx15.default)(
          "rdt-px-2",
          output.type === "command" && "rdt-mb-1 rdt-mt-1 rdt-block rdt-rounded-lg rdt-bg-blue-950 rdt-px-2 rdt-py-1 rdt-font-bold",
          output.type === "error" && "rdt-text-red-500 "
        ),
        dangerouslySetInnerHTML: {
          __html: output.value.split("\n").join("<br />")
        }
      },
      output.value + i
    )) }),
    /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)("div", { className: "rdt-border-3 rdt-relative rdt-flex rdt-rounded-xl rdt-border-gray-100", children: [
      /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(
        "input",
        {
          readOnly: terminal.locked,
          onKeyDown,
          value: command,
          onChange: (e) => setCommand(e.target.value),
          onBlur: () => setCommand(command?.trim()),
          placeholder: terminal.locked ? "Command running" : "Enter command",
          className: (0, import_clsx15.default)(
            "rdt-z-10 rdt-h-8 rdt-w-full rdt-rounded-lg rdt-rounded-tl-none rdt-rounded-tr-none rdt-border-none rdt-px-6 rdt-py-0 rdt-text-lg rdt-font-medium rdt-text-gray-500",
            terminal.locked && "rdt-opacity-50"
          )
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(
        "button",
        {
          disabled: terminal.locked,
          onClick: onSubmit,
          className: (0, import_clsx15.default)(
            "rdt-absolute rdt-right-0 rdt-top-0 rdt-z-20 rdt-flex rdt-h-8 rdt-w-8 rdt-cursor-pointer rdt-items-center rdt-justify-center rdt-rounded-lg rdt-rounded-l-none rdt-rounded-tr-none rdt-border-none rdt-bg-green-500",
            terminal.locked && "rdt-opacity-50"
          ),
          children: /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(Icon, { name: "Send", className: "rdt-h-4 rdt-w-4 rdt-stroke-white" })
        }
      )
    ] })
  ] });
};
var TerminalTab = () => {
  const { terminals, addOrRemoveTerminal } = useTerminalContext();
  const [projectCommands, setProjectCommands] = (0, import_react44.useState)();
  const { sendJsonMessage } = useRemixForgeSocket({
    onMessage: (message) => {
      try {
        const data = JSON.parse(message.data);
        if (data.type === "commands") {
          setProjectCommands(data.data);
        }
      } catch (e) {
      }
    }
  });
  (0, import_react44.useEffect)(() => {
    sendJsonMessage({ type: "commands" });
  }, [sendJsonMessage]);
  return /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)("div", { className: "rdt-relative rdt-mr-8 rdt-flex rdt-h-full rdt-justify-between rdt-gap-4 rdt-rounded-lg", children: [
    terminals.length < 3 && /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("button", { className: "rdt-absolute -rdt-right-8", onClick: () => addOrRemoveTerminal(), children: /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(Icon, { name: "Columns" }) }),
    terminals.map((terminal) => /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(
      Terminal,
      {
        terminal,
        projectCommands,
        onClose: () => addOrRemoveTerminal(terminal.id)
      },
      terminal.id
    ))
  ] });
};

// src/RemixDevTools/tabs/SettingsTab.tsx
var import_react45 = require("react");

// src/RemixDevTools/components/Select.tsx
var React12 = __toESM(require("react"), 1);
var SelectPrimitive = __toESM(require("@radix-ui/react-select"), 1);

// src/RemixDevTools/components/Stack.tsx
var import_clsx16 = __toESM(require("clsx"), 1);
var import_jsx_runtime47 = require("react/jsx-runtime");
var GAPS = {
  sm: "rdt-gap-1",
  md: "rdt-gap-2",
  lg: "rdt-gap-4"
};
var Stack = ({ gap = "md", className, children: children2, ...props }) => {
  return /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(
    "div",
    {
      className: (0, import_clsx16.default)("rdt-flex rdt-flex-col", GAPS[gap], className),
      ...props,
      children: children2
    }
  );
};

// src/RemixDevTools/components/Select.tsx
var import_jsx_runtime48 = require("react/jsx-runtime");
var Select = SelectPrimitive.Root;
var SelectGroup = SelectPrimitive.Group;
var SelectValue = SelectPrimitive.Value;
var SelectTrigger = React12.forwardRef(({ className, children: children2, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)(
  SelectPrimitive.Trigger,
  {
    ref,
    className: cn(
      "rdt-border-input rdt-ring-offset-background placeholder:rdt-text-muted-foreground focus:rdt-ring-ring rdt-flex rdt-h-8 rdt-w-full rdt-items-center rdt-justify-between rdt-rounded-md rdt-border rdt-border-gray-400 rdt-bg-[#121212] rdt-px-3 rdt-py-2 rdt-text-sm focus:rdt-outline-none focus:rdt-ring-2 focus:rdt-ring-offset-2 disabled:rdt-cursor-not-allowed disabled:rdt-opacity-50",
      className
    ),
    ...props,
    children: [
      children2,
      /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(SelectPrimitive.Icon, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(Icon, { name: "ChevronDown", className: "rdt-h-4 rdt-w-4 rdt-opacity-50" }) })
    ]
  }
));
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName;
var SelectContent = React12.forwardRef(({ className, children: children2, position = "popper", ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(SelectPrimitive.Portal, { children: /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(
  SelectPrimitive.Content,
  {
    ref,
    className: cn(
      "rdt-relative rdt-z-[9999] rdt-min-w-[8rem] rdt-overflow-hidden rdt-rounded-md rdt-border rdt-border-solid rdt-border-[#121212] rdt-bg-popover rdt-text-popover-foreground rdt-shadow-md data-[state=open]:rdt-animate-in data-[state=closed]:rdt-animate-out data-[state=closed]:rdt-fade-out-0 data-[state=open]:rdt-fade-in-0 data-[state=closed]:rdt-zoom-out-95 data-[state=open]:rdt-zoom-in-95 data-[side=bottom]:rdt-slide-in-from-top-2 data-[side=left]:rdt-slide-in-from-right-2 data-[side=right]:rdt-slide-in-from-left-2 data-[side=top]:rdt-slide-in-from-bottom-2",
      position === "popper" && "data-[side=bottom]:rdt-translate-y-1 data-[side=left]:-rdt-translate-x-1 data-[side=right]:rdt-translate-x-1 data-[side=top]:-rdt-translate-y-1",
      className
    ),
    position,
    ...props,
    children: /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(
      SelectPrimitive.Viewport,
      {
        className: cn(
          "rdt-border rdt-border-gray-500 rdt-p-1",
          position === "popper" && "rdt-h-[var(--radix-select-trigger-height)] rdt-w-full rdt-min-w-[var(--radix-select-trigger-width)]"
        ),
        children: children2
      }
    )
  }
) }));
SelectContent.displayName = SelectPrimitive.Content.displayName;
var SelectLabel = React12.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(
  SelectPrimitive.Label,
  {
    ref,
    className: cn("rdt-py-1.5 rdt-pl-8 rdt-pr-2 rdt-font-sans rdt-text-sm", className),
    ...props
  }
));
SelectLabel.displayName = SelectPrimitive.Label.displayName;
var SelectItem = React12.forwardRef(({ className, children: children2, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)(
  SelectPrimitive.Item,
  {
    ref,
    className: cn(
      "focus:rdt-text-accent-foreground rdt-relative rdt-flex rdt-w-full rdt-cursor-default rdt-select-none rdt-items-center rdt-rounded-sm rdt-py-1.5 rdt-pl-8 rdt-pr-2 rdt-font-sans rdt-text-sm rdt-outline-none hover:rdt-cursor-pointer hover:rdt-bg-[#121212] focus:rdt-bg-[#121212] data-[disabled]:rdt-pointer-events-none data-[disabled]:rdt-opacity-50",
      className
    ),
    ...props,
    children: [
      /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("span", { className: "rdt-absolute rdt-left-2 rdt-flex rdt-h-3.5 rdt-w-3.5 rdt-items-center rdt-justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(SelectPrimitive.ItemIndicator, { children: /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(Icon, { name: "Check", className: "rdt-h-4 rdt-w-4" }) }) }),
      /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(SelectPrimitive.ItemText, { children: children2 })
    ]
  }
));
SelectItem.displayName = SelectPrimitive.Item.displayName;
var SelectSeparator = React12.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(
  SelectPrimitive.Separator,
  {
    ref,
    className: cn("rdt-bg-grey-600 -rdt-mx-1 rdt-my-1 rdt-h-px", className),
    ...props
  }
));
SelectSeparator.displayName = SelectPrimitive.Separator.displayName;
var SelectWithOptions = ({
  placeholder,
  label,
  options,
  onSelect,
  hint,
  value,
  className
}) => {
  return /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)(Stack, { className, gap: "sm", children: [
    label && /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(Label, { children: label }),
    /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)(Select, { value, onValueChange: onSelect, children: [
      /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(SelectTrigger, { className: "rdt-w-full", children: /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(SelectValue, { placeholder }) }),
      /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(SelectContent, { children: /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)(SelectGroup, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(SelectLabel, { children: label }),
        options.map((option) => /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(SelectItem, { value: option.value, children: option.label }, option.value))
      ] }) })
    ] }),
    hint && /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(Hint, { children: hint })
  ] });
};

// src/RemixDevTools/utils/string.ts
var uppercaseFirstLetter2 = (value) => value.charAt(0).toUpperCase() + value.slice(1);

// src/RemixDevTools/tabs/SettingsTab.tsx
var import_jsx_runtime49 = require("react/jsx-runtime");
var import_meta3 = {};
var SettingsTab = () => {
  const { settings, setSettings } = useSettingsContext();
  const [minHeight, setMinHeight] = (0, import_react45.useState)(settings.minHeight.toString());
  const [maxHeight, setMaxHeight] = (0, import_react45.useState)(settings.maxHeight.toString());
  const [expansionLevel, setExpansionLevel] = (0, import_react45.useState)(settings.expansionLevel.toString());
  const [wsPort, setWsPort] = (0, import_react45.useState)(settings.wsPort.toString());
  return /* @__PURE__ */ (0, import_jsx_runtime49.jsxs)(Stack, { className: "rdt-mb-4", children: [
    /* @__PURE__ */ (0, import_jsx_runtime49.jsxs)("h1", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("span", { className: "rdt-text-2xl rdt-font-semibold", children: "Settings" }),
      /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("hr", { className: "rdt-mt-2 rdt-border-gray-400" })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(
      Checkbox,
      {
        id: "defaultOpen",
        hint: "The dev tools will be open by default when you run the application and when you refresh the browser.",
        onChange: () => setSettings({ defaultOpen: !settings.defaultOpen }),
        value: settings.defaultOpen,
        children: "Open dev tools by default"
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(
      Checkbox,
      {
        id: "requireUrlFlag",
        hint: "Allows you to only show rdt when there is a flag in the URL search params set.",
        onChange: () => setSettings({ requireUrlFlag: !settings.requireUrlFlag }),
        value: settings.requireUrlFlag,
        children: "Show dev tools only when URL flag is set"
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(
      Checkbox,
      {
        id: "hideUntilHover",
        hint: "The dev tools trigger will be hidden on the page until you hover over it.",
        onChange: () => setSettings({ hideUntilHover: !settings.hideUntilHover }),
        value: settings.hideUntilHover,
        children: "Hide the trigger until hovered"
      }
    ),
    typeof import_meta3.hot === "undefined" && /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(
      Checkbox,
      {
        id: "withServerDevTools",
        hint: "Tell the dev tools if they should try to connect to their server counterpart, if you don't have that set up you can just disable this.",
        onChange: () => setSettings({ withServerDevTools: !settings.withServerDevTools }),
        value: settings.withServerDevTools,
        children: "Connect to server dev tools"
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("hr", { className: "rdt-mt-2 rdt-border-gray-700" }),
    /* @__PURE__ */ (0, import_jsx_runtime49.jsxs)(Stack, { gap: "lg", children: [
      settings.requireUrlFlag && /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(
        Input,
        {
          name: "urlFlag",
          id: "urlFlag",
          label: "URL flag to use",
          hint: `This allows you to change the URL search param flag that will be used to show the dev tools when "Show dev tools only when URL flag is set" is set to true`,
          value: settings.urlFlag,
          onChange: (e) => setSettings({ urlFlag: e.target.value ?? "" }),
          onBlur: (e) => {
            setSettings({ urlFlag: e.target.value.trim() });
          }
        }
      ),
      settings.withServerDevTools && typeof import_meta3.hot === "undefined" && /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(
        Input,
        {
          name: "wsPort",
          id: "wsPort",
          label: "Server dev tools WS port (default: 8080)",
          hint: "This allows you to change the port the client dev tools will try to connect to.",
          value: wsPort,
          onChange: (e) => setWsPort(e.target.value ?? ""),
          onBlur: (e) => {
            const value = parseInt(e.target.value);
            if (value && !isNaN(value) && value >= 0) {
              setSettings({ wsPort: value });
            }
          }
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(
        Input,
        {
          name: "expansionLevel",
          id: "expansionLevel",
          label: "Depth of expansion for JSON objects",
          hint: "This allows you to change the depth of expanded properties of json objects.",
          value: expansionLevel,
          onChange: (e) => setExpansionLevel(e.target.value ?? ""),
          onBlur: (e) => {
            const value = parseInt(e.target.value);
            if (value && !isNaN(value) && value >= 0) {
              setSettings({ expansionLevel: value });
            }
          }
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime49.jsxs)("div", { className: "rdt-flex rdt-flex-col rdt-gap-2 lg:rdt-flex-row", children: [
        /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(
          Input,
          {
            name: "minHeight",
            label: "Min height of the dev tools (px)",
            hint: "The dev tools will not shrink below this height when being dragged.",
            id: "minHeight",
            value: minHeight,
            onChange: (e) => setMinHeight(e.target.value ?? ""),
            onBlur: (e) => {
              const value = parseInt(e.target.value);
              if (value && !isNaN(value) && value < settings.maxHeight && value > 100) {
                setSettings({ minHeight: value });
              }
            }
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(
          Input,
          {
            name: "maxHeight",
            id: "maxHeight",
            label: "Max height of the dev tools (px)",
            hint: "The dev tools will not expand beyond this height when being dragged.",
            value: maxHeight,
            onChange: (e) => setMaxHeight(e.target.value ?? ""),
            onBlur: (e) => {
              const value = parseInt(e.target.value);
              if (value && !isNaN(value) && value > settings.minHeight) {
                setSettings({ maxHeight: value });
              }
            }
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime49.jsxs)("div", { className: "rdt-flex rdt-flex-col rdt-gap-2 lg:rdt-flex-row", children: [
        /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(
          SelectWithOptions,
          {
            label: "Trigger position",
            onSelect: (value) => setSettings({ position: value }),
            value: settings.position,
            className: "rdt-w-full",
            options: [
              { label: "Bottom Right", value: "bottom-right" },
              { label: "Bottom Left", value: "bottom-left" },
              { label: "Top Right", value: "top-right" },
              { label: "Top Left", value: "top-left" },
              { label: "Middle Right", value: "middle-right" },
              { label: "Middle Left", value: "middle-left" }
            ],
            hint: "This will determine where your trigger position on the screen is when the tools are collapsed."
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(
          SelectWithOptions,
          {
            label: "Panel position",
            onSelect: (value) => setSettings({ panelLocation: value }),
            value: settings.panelLocation,
            className: "rdt-w-full",
            options: [
              { label: "Top", value: "top" },
              { label: "Bottom", value: "bottom" }
            ],
            hint: "This will determine where your panel shows up once opened"
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(
        Input,
        {
          name: "port",
          id: "port",
          label: "Remix Forge port (default: 3003)",
          hint: "The port on which Remix Forge is running. If you change this field make sure you change the port in the Remix Forge config as well.",
          value: settings.port,
          onChange: (e) => {
            const value = e.target.value;
            if (value && !isNaN(parseInt(value))) {
              setSettings({ port: parseInt(value) });
            }
          }
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(
        SelectWithOptions,
        {
          label: "Route boundary gradient",
          onSelect: (value) => setSettings({ routeBoundaryGradient: value }),
          value: settings.routeBoundaryGradient,
          options: RouteBoundaryOptions.map((option) => ({
            label: uppercaseFirstLetter2(option),
            value: option
          })),
          hint: "This will determine the look of the gradient shown for route boundaries."
        }
      )
    ] })
  ] });
};

// src/RemixDevTools/tabs/ErrorsTab.tsx
var import_react46 = require("react");
var import_react_diff_viewer_continued = __toESM(require("react-diff-viewer-continued"), 1);
var import_beautify = __toESM(require("beautify"), 1);
var import_jsx_runtime50 = require("react/jsx-runtime");
var DiffViewer = import_react_diff_viewer_continued.default.default ? import_react_diff_viewer_continued.default.default : import_react_diff_viewer_continued.default;
var ErrorsTab = () => {
  const { htmlErrors } = useHtmlErrors();
  const { sendJsonMessage } = useDevServerConnection();
  const [SSRHtml, setSSRHtml] = (0, import_react46.useState)("");
  const [CSRHtml, setCSRHtml] = (0, import_react46.useState)("");
  const [hasHydrationMismatch, setHasHydrationMismatch] = (0, import_react46.useState)(false);
  (0, import_react46.useEffect)(() => {
    if (typeof window === "undefined")
      return;
    if (!window.HYDRATION_OVERLAY) {
      return;
    }
    const ssrHtml = window.HYDRATION_OVERLAY?.SSR_HTML;
    const newCSRHtml = window.HYDRATION_OVERLAY?.CSR_HTML;
    if (!ssrHtml || !newCSRHtml)
      return;
    const newSSR = (0, import_beautify.default)(ssrHtml, { format: "html" });
    const newCSR = (0, import_beautify.default)(newCSRHtml, { format: "html" });
    setSSRHtml(newSSR);
    setCSRHtml(newCSR);
    setHasHydrationMismatch(window.HYDRATION_OVERLAY?.ERROR ?? false);
  }, []);
  return /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)("div", { className: "rdt-flex rdt-flex-col rdt-gap-1", children: [
    htmlErrors.length > 0 ? /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)(import_jsx_runtime50.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("h1", { className: "rdt-text-xl", children: "HTML Nesting Errors" }),
      /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("hr", { className: "rdt-mb-1 rdt-border-gray-600/30" })
    ] }) : /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("h1", { className: "rdt-text-xl", children: "No errors detected!" }),
    htmlErrors.map((error) => {
      return /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)(
        "div",
        {
          className: "rdt-flex rdt-justify-start rdt-gap-2 rdt-rounded-lg rdt-border rdt-border-solid rdt-border-red-600/20 rdt-p-2",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(Icon, { size: "md", className: "rdt-text-red-600", name: "Shield" }),
            /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)("div", { className: "rdt-flex rdt-flex-col", children: [
              /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)("div", { children: [
                /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("span", { className: "rdt-font-bold rdt-text-red-600", children: error.child.tag }),
                " element can't be nested inside of ",
                /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("span", { className: "rdt-font-bold rdt-text-red-600", children: error.parent.tag }),
                " element"
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)("div", { className: "rdt-flex rdt-items-center rdt-gap-1 rdt-text-sm rdt-text-gray-500", children: [
                "The parent element is located inside of the",
                /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(
                  "div",
                  {
                    onClick: () => sendJsonMessage({
                      type: "open-source",
                      data: { source: error.parent.file.replace(".tsx", "") }
                    }),
                    className: "rdt-cursor-pointer rdt-text-white",
                    children: error.parent.file
                  }
                ),
                "file"
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)("div", { className: "rdt-flex rdt-items-center rdt-gap-1 rdt-text-sm rdt-text-gray-500", children: [
                "The child element is located inside of the",
                /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(
                  "div",
                  {
                    onClick: () => sendJsonMessage({
                      type: "open-source",
                      data: { source: error.child.file.replace(".tsx", "") }
                    }),
                    className: "rdt-cursor-pointer rdt-text-white",
                    children: error.child.file
                  }
                ),
                "file"
              ] })
            ] })
          ]
        },
        JSON.stringify(error)
      );
    }),
    hasHydrationMismatch && /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)("div", { className: "rdt-relative rdt-mt-4 rdt-w-full rdt-border-2 rdt-rounded rdt-border-gray-800", children: [
      /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("h1", { className: "rdt-text-xl rdt-p-2 rdt-text-center", children: "Hydration mismatch comparison" }),
      /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("hr", { className: "rdt-mb-1 rdt-border-gray-600/30" }),
      /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(
        DiffViewer,
        {
          oldValue: SSRHtml,
          newValue: CSRHtml,
          leftTitle: "Server-Side Render",
          rightTitle: "Client-Side Render",
          compareMethod: import_react_diff_viewer_continued.DiffMethod.WORDS,
          styles: {
            titleBlock: {
              textAlign: "center"
            },
            variables: {
              dark: {
                diffViewerBackground: "#212121",
                diffViewerColor: "#FFF",
                addedBackground: "#044B53",
                addedColor: "white",
                removedBackground: "#632F34",
                removedColor: "white",
                wordAddedBackground: "#055d67",
                wordRemovedBackground: "#7d383f",
                addedGutterBackground: "#034148",
                removedGutterBackground: "#632b30",
                gutterBackground: "#1F2937",
                highlightBackground: "#212121",
                highlightGutterBackground: "#212121",
                codeFoldGutterBackground: "#1F2937",
                codeFoldBackground: "#1F2937",
                emptyLineBackground: "#363946",
                gutterColor: "#white",
                addedGutterColor: "#8c8c8c",
                removedGutterColor: "#8c8c8c",
                codeFoldContentColor: "white",
                diffViewerTitleBackground: "#212121",
                diffViewerTitleColor: "white",
                diffViewerTitleBorderColor: "#353846"
              }
            }
          },
          extraLinesSurroundingDiff: 2,
          useDarkTheme: true
        }
      )
    ] })
  ] });
};

// src/RemixDevTools/tabs/index.tsx
var import_jsx_runtime51 = require("react/jsx-runtime");
var tabs = [
  {
    name: "Active page",
    icon: /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(Icon, { size: "md", name: "Layers" }),
    id: "page",
    component: /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(PageTab, {}),
    requiresForge: false,
    hideTimeline: false
  },
  {
    name: "Routes",
    icon: /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(Icon, { size: "md", name: "GitMerge" }),
    id: "routes",
    component: /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(RoutesTab, {}),
    requiresForge: false,
    hideTimeline: false
  },
  {
    name: "Terminal",
    icon: /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(Icon, { size: "md", name: "Terminal" }),
    id: "terminal",
    component: /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(TerminalTab, {}),
    requiresForge: true,
    hideTimeline: false
  },
  {
    name: "Errors",
    icon: /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(Icon, { size: "md", name: "Shield" }),
    id: "errors",
    component: /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(ErrorsTab, {}),
    requiresForge: false,
    hideTimeline: false
  },
  {
    name: "Settings",
    icon: /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(Icon, { size: "md", name: "Settings" }),
    id: "settings",
    component: /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(SettingsTab, {}),
    requiresForge: false,
    hideTimeline: false
  }
];

// src/RemixDevTools/hooks/useTabs.ts
var shouldHideTimeline = (activeTab, tab, settings) => {
  if (activeTab === "routes" && settings.routeViewMode === "tree")
    return true;
  return tab?.hideTimeline;
};
var useTabs = (isConnected, isConnecting, pluginsArray) => {
  const { settings, setSettings } = useSettingsContext();
  const { activeTab } = settings;
  const plugins = pluginsArray?.map((plugin) => typeof plugin === "function" ? plugin() : plugin);
  const allTabs = (0, import_react47.useMemo)(() => [...tabs, ...plugins ? plugins : []], [plugins]);
  const { Component, hideTimeline } = (0, import_react47.useMemo)(() => {
    const tab = allTabs.find((tab2) => tab2.id === activeTab);
    return { Component: tab?.component, hideTimeline: shouldHideTimeline(activeTab, tab, settings) };
  }, [activeTab, allTabs, settings]);
  const visibleTabs = (0, import_react47.useMemo)(
    () => allTabs.filter((tab) => !(!isConnected && tab.requiresForge)),
    [isConnected, allTabs]
  );
  (0, import_react47.useEffect)(() => {
    const shouldCheck = !isConnected && !isConnecting;
    if (!shouldCheck)
      return;
    const isOnForgeTab = tabs.some((tab) => tab.requiresForge && tab.id === activeTab);
    const isOnAdditionalForgeTab = Boolean(plugins?.some((tab) => tab.requiresForge && tab.id === activeTab));
    if (isOnForgeTab || isOnAdditionalForgeTab) {
      setSettings({
        activeTab: "page"
      });
    }
  }, [isConnected, isConnecting, activeTab, setSettings, plugins]);
  return {
    visibleTabs,
    Component,
    allTabs,
    hideTimeline,
    activeTab,
    isPluginTab: !tabs.find((tab) => activeTab === tab.id)
  };
};

// src/RemixDevTools/hooks/useHorizontalScroll.ts
var import_react48 = require("react");
var useHorizontalScroll = () => {
  const ref = (0, import_react48.useRef)(null);
  (0, import_react48.useEffect)(() => {
    const elem = ref.current;
    const onWheel = (ev) => {
      if (!elem || ev.deltaY === 0)
        return;
      elem.scrollTo({
        left: elem.scrollLeft + ev.deltaY,
        behavior: "smooth"
      });
    };
    elem && elem.addEventListener("wheel", onWheel, { passive: true });
    return () => {
      elem && elem.removeEventListener("wheel", onWheel);
    };
  }, []);
  return ref;
};

// src/RemixDevTools/layout/Tabs.tsx
var import_tailwind_merge2 = require("tailwind-merge");
var import_jsx_runtime52 = require("react/jsx-runtime");
var Tab2 = ({
  tab,
  activeTab,
  className,
  onClick
}) => {
  const { setSettings } = useSettingsContext();
  return /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)(
    "div",
    {
      onClick: () => onClick ? onClick() : setSettings({ activeTab: tab.id }),
      className: (0, import_clsx17.default)(
        "rdt-group rdt-relative rdt-flex rdt-shrink-0 rdt-cursor-pointer rdt-items-center rdt-justify-center rdt-border-0 rdt-border-b rdt-border-solid rdt-border-b-[#212121] rdt-border-r-[#212121] rdt-p-2 rdt-font-sans rdt-transition-all",
        activeTab !== tab.id && "rdt-hover:opacity-50",
        activeTab === tab.id && "rdt-bg-[#212121]",
        "hover:rdt-bg-[#212121]/50"
      ),
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("div", { className, children: tab.icon }),
        /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(
          "div",
          {
            className: (0, import_clsx17.default)(
              "rdt-duration-400 rdt-invisible rdt-text-white rdt-opacity-0 rdt-transition after:rdt-absolute after:-rdt-left-2 after:rdt-top-1/2 after:rdt-h-0 after:rdt-w-0 after:-rdt-translate-y-1/2 after:-rdt-rotate-90 after:rdt-border-x-4 after:rdt-border-b-[6px] after:rdt-border-x-transparent after:rdt-border-b-gray-700 group-hover:rdt-visible",
              "rdt-absolute rdt-left-full rdt-z-50 rdt-ml-2 rdt-whitespace-nowrap rdt-rounded rdt-border rdt-border-gray-700 rdt-bg-gray-800 rdt-px-2 group-hover:rdt-opacity-100"
            ),
            children: tab.name
          }
        )
      ]
    }
  );
};
var Tabs = ({ plugins, setIsOpen }) => {
  const { settings, setSettings } = useSettingsContext();
  const { htmlErrors } = useHtmlErrors();
  const { setPersistOpen } = usePersistOpen();
  const { activeTab } = settings;
  const { isConnected, isConnecting } = useRemixForgeSocket();
  const { visibleTabs } = useTabs(isConnected, isConnecting, plugins);
  const shouldShowConnectToForge = !isConnected || isConnecting;
  const scrollRef = useHorizontalScroll();
  const { setDetachedWindowOwner, detachedWindowOwner, detachedWindow } = useDetachedWindowControls();
  const handleDetachment = () => {
    const rdtWindow = window.open(
      window.location.href,
      "",
      `popup,width=${window.innerWidth},height=${settings.height},top=${window.screen.height},left=${window.screenLeft}}`
    );
    if (rdtWindow) {
      setDetachedWindowOwner(true);
      setStorageItem(REMIX_DEV_TOOLS_IS_DETACHED, "true");
      setSessionItem(REMIX_DEV_TOOLS_DETACHED_OWNER, "true");
      rdtWindow.RDT_MOUNTED = true;
    }
  };
  const getErrorCount = () => {
    return htmlErrors.length + (window.HYDRATION_OVERLAY.ERROR ? 1 : 0);
  };
  const hasErrors = getErrorCount() > 0;
  return /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("div", { className: "rdt-relative rdt-flex rdt-h-full rdt-bg-gray-800", children: /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)("div", { ref: scrollRef, className: "remix-dev-tools-tab rdt-flex rdt-h-full rdt-w-full rdt-flex-col", children: [
    visibleTabs.map((tab) => /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(
      Tab2,
      {
        tab: {
          ...tab,
          name: tab.id === "errors" && hasErrors ? `Errors (${getErrorCount()})` : tab.name
        },
        activeTab,
        className: (0, import_clsx17.default)(
          "rdt-cursor-pointer",
          tab.id === "errors" && activeTab !== "errors" && hasErrors && "rdt-animate-pulse rdt-font-bold rdt-text-red-600 rdt-duration-1000"
        )
      },
      tab.id
    )),
    /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)("div", { className: (0, import_clsx17.default)("rdt-mt-auto rdt-flex rdt-w-full rdt-flex-col rdt-items-center"), children: [
      shouldShowConnectToForge && /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(
        Tab2,
        {
          tab: {
            id: "connect",
            name: isConnecting ? "Connecting to Forge..." : "Connect to Remix Forge",
            requiresForge: false,
            hideTimeline: false,
            component: /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(import_jsx_runtime52.Fragment, {}),
            icon: /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(Icon, { name: "Radio", size: "md" })
          },
          className: (0, import_tailwind_merge2.twMerge)(
            (0, import_clsx17.default)(
              isConnecting && "rdt-pointer-events-none rdt-animate-pulse rdt-cursor-default",
              "rdt-mt-auto rdt-w-full ",
              detachedWindow ? "rdt-mr-0" : ""
            )
          ),
          onClick: () => setSettings({ shouldConnectWithForge: true })
        }
      ),
      !detachedWindow && setIsOpen && /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)(import_jsx_runtime52.Fragment, { children: [
        !detachedWindowOwner && /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(
          Tab2,
          {
            className: "rdt-transition-all hover:rdt-text-green-600",
            tab: {
              icon: /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(Icon, { name: "CopySlash", size: "md", onClick: handleDetachment }),
              id: "detach",
              name: "Detach",
              requiresForge: false,
              hideTimeline: false,
              component: /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(import_jsx_runtime52.Fragment, {})
            }
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(
          Tab2,
          {
            className: "hover:rdt-text-red-600",
            tab: {
              icon: /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(Icon, { name: "X", size: "md" }),
              id: "close",
              name: "Close",
              requiresForge: false,
              hideTimeline: false,
              component: /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(import_jsx_runtime52.Fragment, {})
            },
            onClick: () => {
              setPersistOpen(false);
              setIsOpen(false);
            }
          }
        )
      ] })
    ] })
  ] }) });
};

// src/RemixDevTools/layout/ContentPanel.tsx
var import_clsx18 = __toESM(require("clsx"), 1);

// src/RemixDevTools/tabs/TimelineTab.tsx
var import_jsx_runtime53 = require("react/jsx-runtime");
var Translations = {
  REDIRECT: "Normal Page navigation",
  FETCHER_REDIRECT: "Page navigation due to fetcher",
  ACTION_REDIRECT: "Page navigation due to action",
  FORM_SUBMISSION: "Form submission",
  FETCHER_SUBMIT: "Form submission from a fetcher",
  ACTION_RESPONSE: "Action response",
  FETCHER_RESPONSE: "Fetcher action response"
};
var RedirectEventComponent = (event) => {
  return /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("div", { className: "rdt-mb-4", children: [
    /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("time", { className: "rdt-mb-2 rdt-block rdt-text-sm rdt-font-normal rdt-leading-none rdt-text-gray-500", children: [
      'Navigated to url: "',
      event.to + event.search,
      '"'
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("p", { className: "rdt-mb-4 rdt-text-base rdt-font-normal rdt-text-gray-400", children: event.hash }),
    event.responseData && /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("p", { className: "rdt-mb-4 rdt-text-base rdt-font-normal rdt-text-gray-400", children: [
      "Data received:",
      /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(JsonRenderer, { data: event.responseData })
    ] })
  ] });
};
var FormEventComponent = (event) => {
  const firstPart = event.type === "ACTION_REDIRECT" ? `Redirect from "${event.to}" to "${event.from}"` : `Submission to url: "${event.to}"`;
  const responseData = event.responseData;
  delete responseData?.remixDevTools;
  return /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("div", { className: "rdt-mb-4", children: [
    /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("time", { className: "rdt-mb-2 rdt-block rdt-text-sm rdt-font-normal rdt-leading-none rdt-text-gray-500", children: [
      firstPart,
      " | encType: ",
      event.encType
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("div", { className: "rdt-flex rdt-gap-8", children: [
      event.data && event.type !== "ACTION_RESPONSE" && /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("div", { className: "rdt-mb-4 rdt-truncate rdt-text-base rdt-font-normal rdt-text-gray-400", children: [
        "Data sent:",
        /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(JsonRenderer, { data: event.data })
      ] }),
      responseData && /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("div", { className: "rdt-mb-4 rdt-truncate rdt-text-base rdt-font-normal rdt-text-gray-400", children: [
        "Server Response Data:",
        /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(JsonRenderer, { data: responseData })
      ] })
    ] })
  ] });
};
var METHOD_COLORS = {
  GET: "GREEN",
  POST: "BLUE",
  PUT: "TEAL",
  DELETE: "RED",
  PATCH: "PURPLE"
};
var TimelineTab = () => {
  const { timeline, clearTimeline } = useTimelineContext();
  return /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("div", { className: "rdt-relative rdt-flex rdt-h-full rdt-flex-col rdt-overflow-y-auto rdt-p-6 rdt-px-6", children: [
    timeline.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(
      "button",
      {
        onClick: () => clearTimeline(),
        className: "rdt-absolute rdt-right-3 rdt-top-0 rdt-z-20 rdt-cursor-pointer rdt-rounded-lg rdt-border rdt-border-red-500 rdt-px-3 rdt-py-1 rdt-text-sm rdt-font-semibold rdt-text-white",
        children: "Clear"
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("ol", { className: "rdt-relative", children: timeline.map((event) => {
      return /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("li", { className: "rdt-mb-2 rdt-ml-8 rdt-animate-fade-in-left", children: [
        /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("span", { className: "rdt-absolute -rdt-left-3 rdt-mt-2 rdt-flex rdt-h-6 rdt-w-6 rdt-animate-fade-in rdt-items-center rdt-justify-center rdt-rounded-full rdt-bg-blue-900 rdt-ring-4 rdt-ring-blue-900", children: /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Icon, { name: "Activity" }) }),
        /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("h3", { className: "-rdt-mt-3 rdt-mb-1 rdt-flex rdt-items-center rdt-gap-2 rdt-text-lg rdt-font-semibold rdt-text-white", children: [
          Translations[event.type],
          event?.method && /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Tag, { color: METHOD_COLORS[event.method], children: event.method })
        ] }),
        event.type === "REDIRECT" || event.type === "FETCHER_REDIRECT" ? /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(RedirectEventComponent, { ...event }) : /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(FormEventComponent, { ...event })
      ] }, event.id);
    }) })
  ] });
};

// src/RemixDevTools/layout/ContentPanel.tsx
var import_react49 = require("react");
var import_jsx_runtime54 = require("react/jsx-runtime");
var ContentPanel = ({ plugins }) => {
  const { isConnected, isConnecting } = useRemixForgeSocket();
  const { Component, hideTimeline, isPluginTab, activeTab } = useTabs(isConnected, isConnecting, plugins);
  return /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)("div", { className: "rdt-flex rdt-h-full rdt-w-full rdt-overflow-y-hidden", children: [
    /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(
      "div",
      {
        className: (0, import_clsx18.default)(
          "rdt-z-20 rdt-h-full rdt-w-full rdt-overflow-y-auto rdt-bg-main rdt-p-2",
          "rdt-pl-2",
          isPluginTab && "rdt-unset",
          activeTab === "page" && "rdt-pt-0"
        ),
        children: Component
      }
    ),
    !hideTimeline && /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)(import_react49.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("div", { className: "rdt-w-1 rdt-bg-gray-500/20" }),
      /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("div", { className: (0, import_clsx18.default)("rdt-z-10 rdt-h-full rdt-w-1/3 rdt-p-2"), children: /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(TimelineTab, {}) })
    ] })
  ] });
};

// src/RemixDevTools/hooks/useBorderedRoutes.ts
var import_react50 = require("react");
var import_react51 = require("@remix-run/react");
var import_meta4 = {};
var ROUTE_CLASS = "rdt-outlet-route";
var isSourceElement = (fiberNode) => {
  return fiberNode?.elementType && fiberNode?.stateNode && fiberNode?._debugSource && !fiberNode?.stateNode?.getAttribute?.("data-rdt-source");
};
var isJsxFile = (fiberNode) => fiberNode?._debugSource?.fileName?.includes("tsx") || fiberNode?._debugSource?.fileName?.includes("jsx");
function useBorderedRoutes() {
  const invalidHtmlCollection = (0, import_react50.useRef)([]);
  const { setHtmlErrors } = useHtmlErrors();
  const addToInvalidCollection = (entry) => {
    if (invalidHtmlCollection.current.find((item) => JSON.stringify(item) === JSON.stringify(entry)))
      return;
    invalidHtmlCollection.current.push(entry);
  };
  const navigation = (0, import_react51.useNavigation)();
  const traverseComponentTree = (0, import_react50.useCallback)((fiberNode, callback) => {
    callback(fiberNode);
    let child = fiberNode?.child;
    while (child) {
      traverseComponentTree(child, callback);
      child = child?.sibling;
    }
  }, []);
  const styleNearestElement = (0, import_react50.useCallback)((fiberNode) => {
    if (!fiberNode)
      return;
    if (fiberNode.stateNode) {
      return fiberNode.stateNode?.classList?.add(ROUTE_CLASS);
    }
    styleNearestElement(fiberNode?.child);
  }, []);
  const findIncorrectHtml = (0, import_react50.useCallback)((fiberNode, originalFiberNode, originalTag) => {
    if (!fiberNode)
      return;
    const tag = fiberNode.elementType;
    const addInvalid = () => {
      const parentSource = originalFiberNode?._debugOwner?._debugSource ?? originalFiberNode?._debugSource;
      const source = fiberNode?._debugOwner?._debugSource ?? fiberNode?._debugSource;
      addToInvalidCollection({
        child: {
          file: parentSource?.fileName,
          tag
        },
        parent: {
          file: source?.fileName,
          tag: originalTag
        }
      });
    };
    if (originalTag === "a") {
      const element = fiberNode.stateNode;
      switch (tag) {
        case "a":
        case "button":
        case "details":
        case "embed":
        case "iframe":
        case "label":
        case "select":
        case "textarea": {
          addInvalid();
          break;
        }
        case "audio": {
          if (element.getAttribute("controls") !== null) {
            addInvalid();
          }
          break;
        }
        case "img": {
          if (element.getAttribute("usemap") !== null) {
            addInvalid();
          }
          break;
        }
        case "input": {
          if (element.getAttribute("type") !== "hidden") {
            addInvalid();
          }
          break;
        }
        case "object": {
          if (element.getAttribute("usemap") !== null) {
            addInvalid();
          }
          break;
        }
        case "video": {
          if (element.getAttribute("controls") !== null) {
            addInvalid();
          }
          break;
        }
        default: {
          break;
        }
      }
    }
    if (originalTag === "p") {
      switch (tag) {
        case "div":
        case "h1":
        case "h2":
        case "h3":
        case "h4":
        case "h5":
        case "h6":
        case "main":
        case "pre":
        case "p":
        case "section":
        case "table":
        case "ul":
        case "ol":
        case "li": {
          addInvalid();
          break;
        }
        default: {
          break;
        }
      }
    }
    if (originalTag === "form") {
      if (tag === "form") {
        addInvalid();
      }
    }
    if (["h1", "h2", "h3", "h4", "h5", "h6"].includes(originalTag)) {
      if (tag === "h1" || tag === "h2" || tag === "h3" || tag === "h4" || tag === "h5" || tag === "h6") {
        addInvalid();
      }
    }
    findIncorrectHtml(fiberNode?.child, originalFiberNode, originalTag);
    if (fiberNode?.sibling) {
      findIncorrectHtml(fiberNode?.sibling, originalFiberNode, originalTag);
    }
  }, []);
  (0, import_react50.useEffect)(() => {
    if (navigation.state !== "idle")
      return;
    const devTools = window.__REACT_DEVTOOLS_GLOBAL_HOOK__;
    if (!devTools) {
      return;
    }
    for (const [rendererID] of devTools.renderers) {
      const fiberRoots = devTools.getFiberRoots(rendererID);
      for (const rootFiber of fiberRoots) {
        traverseComponentTree(rootFiber.current, (fiberNode) => {
          if (isSourceElement(fiberNode) && typeof import_meta4.hot !== "undefined") {
            const originalSource = fiberNode?._debugSource;
            const source = fiberNode?._debugOwner?._debugSource ?? fiberNode?._debugSource;
            const line = source?.fileName?.startsWith("/") ? originalSource?.lineNumber : source?.lineNumber;
            const fileName = source?.fileName?.startsWith("/") ? originalSource?.fileName : source?.fileName;
            fiberNode.stateNode?.setAttribute?.(
              "data-rdt-source",
              `${fileName}:::${line}`
              //
            );
          } else if (isSourceElement(fiberNode)) {
            const isJsx = isJsxFile(fiberNode);
            const originalSource = fiberNode?._debugSource;
            const source = fiberNode?._debugOwner?._debugSource ?? fiberNode?._debugSource;
            const line = source?.fileName?.startsWith("/") ? originalSource?.lineNumber : source?.lineNumber;
            const fileName = source?.fileName?.startsWith("/") ? originalSource?.fileName : source?.fileName;
            fiberNode.stateNode?.setAttribute?.(
              "data-rdt-source",
              `${fileName}:::${isJsx ? line - 20 : line}`
              //
            );
          }
          if (fiberNode?.stateNode && fiberNode?.elementType === "form") {
            findIncorrectHtml(fiberNode.child, fiberNode, "form");
          }
          if (fiberNode?.stateNode && fiberNode?.elementType === "a") {
            findIncorrectHtml(fiberNode.child, fiberNode, "a");
          }
          if (fiberNode?.stateNode && fiberNode?.elementType === "p") {
            findIncorrectHtml(fiberNode.child, fiberNode, "p");
          }
          if (fiberNode?.stateNode && ["h1", "h2", "h3", "h4", "h5", "h6"].includes(fiberNode?.elementType)) {
            findIncorrectHtml(fiberNode.child, fiberNode, fiberNode?.elementType);
          }
          if (fiberNode?.elementType?.name === "default" || fiberNode?.elementType?.name === "RenderedRoute") {
            styleNearestElement(fiberNode);
          }
        });
      }
    }
    setHtmlErrors(invalidHtmlCollection.current);
    invalidHtmlCollection.current = [];
  }, [navigation.state, styleNearestElement, traverseComponentTree, findIncorrectHtml, setHtmlErrors]);
}

// src/RemixDevTools/hooks/detached/useCheckIfStillDetached.ts
var import_react52 = require("react");
var useCheckIfStillDetached = () => {
  const { dispatch: dispatch2 } = (0, import_react52.useContext)(RDTContext);
  const [checking, setChecking] = (0, import_react52.useState)(false);
  const isDetached = getBooleanFromStorage(REMIX_DEV_TOOLS_IS_DETACHED);
  (0, import_react52.useEffect)(() => {
    if (!checking || !isDetached) {
      return;
    }
    const isNotDetachedAnymore = getBooleanFromStorage(REMIX_DEV_TOOLS_CHECK_DETACHED);
    if (isNotDetachedAnymore) {
      setStorageItem(REMIX_DEV_TOOLS_IS_DETACHED, "false");
      setStorageItem(REMIX_DEV_TOOLS_CHECK_DETACHED, "false");
      sessionStorage.removeItem(REMIX_DEV_TOOLS_DETACHED_OWNER);
      sessionStorage.removeItem(REMIX_DEV_TOOLS_DETACHED);
      const state = getExistingStateFromStorage();
      dispatch2({ type: "SET_WHOLE_STATE", payload: state });
      setChecking(false);
    }
  }, [checking, dispatch2, isDetached]);
  const checkDetachment = (0, import_react52.useCallback)(
    (e) => {
      if (e.key !== REMIX_DEV_TOOLS_CHECK_DETACHED) {
        return;
      }
      const shouldCheckDetached = getBooleanFromStorage(REMIX_DEV_TOOLS_CHECK_DETACHED);
      if (shouldCheckDetached && !checking) {
        setTimeout(() => setChecking(true), 200);
      }
    },
    [checking]
  );
  (0, import_react52.useEffect)(() => {
    if (checking || !isDetached) {
      return;
    }
    addEventListener("storage", checkDetachment);
    return () => removeEventListener("storage", checkDetachment);
  }, [checking, isDetached, checkDetachment]);
};

// src/RemixDevTools/hooks/detached/useResetDetachmentCheck.ts
var useResetDetachmentCheck = () => {
  const { isDetached } = useDetachedWindowControls();
  useCheckIfStillDetached();
  useAttachListener("unload", "window", () => setStorageItem(REMIX_DEV_TOOLS_CHECK_DETACHED, "true"), isDetached);
};

// src/RemixDevTools/hooks/useSetRouteBoundaries.ts
var import_react53 = require("react");
var import_react54 = require("@remix-run/react");
var useSetRouteBoundaries = () => {
  const matches = (0, import_react54.useMatches)();
  const { settings, setSettings } = useSettingsContext();
  const { detachedWindow } = useDetachedWindowControls();
  const applyOrRemoveClasses = (0, import_react53.useCallback)(
    (isHovering) => {
      const hovering = isHovering ?? settings.isHoveringRoute;
      const classes = [
        "rdt-transition-all rdt-duration-400 rdt-rounded rdt-apply-tw",
        ROUTE_BOUNDARY_GRADIENTS[settings.routeBoundaryGradient]
      ].join(" ");
      const isRoot = settings.hoveredRoute === "root";
      const elements = isRoot ? document.getElementsByTagName("body") : document.getElementsByClassName(ROUTE_CLASS);
      const element = isRoot ? elements.item(elements.length - 1) : elements.item(matches.length - 1 - parseInt(settings.hoveredRoute));
      if (element) {
        const outlet = element;
        for (const c of classes.split(" ")) {
          outlet.classList[hovering ? "add" : "remove"](c);
        }
      }
    },
    [settings.hoveredRoute, settings.isHoveringRoute, settings.routeBoundaryGradient, matches.length]
  );
  useAttachListener("mouseleave", "document", () => {
    applyOrRemoveClasses();
    if (!detachedWindow) {
      return;
    }
    setSettings({
      isHoveringRoute: false
    });
  });
  useAttachListener("wheel", "window", () => {
    applyOrRemoveClasses(false);
    if (!detachedWindow) {
      return;
    }
    setSettings({
      isHoveringRoute: false
    });
  });
  (0, import_react53.useEffect)(() => {
    if (!settings.isHoveringRoute && !settings.hoveredRoute)
      return;
    applyOrRemoveClasses();
    if (!settings.isHoveringRoute && !detachedWindow) {
      setSettings({
        hoveredRoute: "",
        isHoveringRoute: false
      });
    }
  }, [
    settings.hoveredRoute,
    settings.isHoveringRoute,
    settings.routeBoundaryGradient,
    applyOrRemoveClasses,
    detachedWindow,
    setSettings
  ]);
};

// src/RemixDevTools/hooks/detached/useSyncStateWhenDetached.ts
var refreshRequiredKeys = [REMIX_DEV_TOOLS_SETTINGS, REMIX_DEV_TOOLS_STATE];
var useSyncStateWhenDetached = () => {
  const { dispatch: dispatch2, state } = useRDTContext();
  useAttachListener("storage", "window", (e) => {
    if (!state.detachedWindow && !state.detachedWindowOwner) {
      return;
    }
    if (!refreshRequiredKeys.includes(e.key)) {
      return;
    }
    if (e.key === REMIX_DEV_TOOLS_SETTINGS) {
      const oldSettings = JSON.stringify(state.settings);
      if (oldSettings === e.newValue) {
        return;
      }
    }
    if (e.key === REMIX_DEV_TOOLS_STATE) {
      const { settings, ...rest } = state;
      const oldState = JSON.stringify(rest);
      if (oldState === e.newValue) {
        return;
      }
    }
    const newState = getExistingStateFromStorage();
    dispatch2({ type: "SET_WHOLE_STATE", payload: newState });
  });
};

// src/RemixDevTools/hooks/useOpenElementSource.ts
var import_react55 = require("react");
var useOpenElementSource = () => {
  const { sendJsonMessage } = useDevServerConnection();
  (0, import_react55.useEffect)(() => {
    const handleFocus = (e) => {
      e.stopPropagation();
      if (!e.altKey || !e.target?.getAttribute?.("data-rdt-source")) {
        return;
      }
      e.target?.classList?.add("rdt-cursor-pointer");
    };
    const handleBlur = (e) => e.target?.classList?.remove("rdt-cursor-pointer");
    document.addEventListener("mouseenter", handleFocus, true);
    document.addEventListener("mouseleave", handleBlur, true);
    return () => {
      document.removeEventListener("mouseenter", handleFocus, true);
      document.removeEventListener("mouseleave", handleBlur, true);
    };
  }, []);
  useAttachDocumentListener("contextmenu", (e) => {
    if (!e.altKey || !e) {
      return;
    }
    e.stopPropagation();
    e.preventDefault();
    const target = e.target;
    const rdtSource = target?.getAttribute("data-rdt-source");
    if (rdtSource) {
      const [source, line, column] = rdtSource.split(":::");
      sendJsonMessage({
        type: "open-source",
        data: { source, line, column }
      });
    }
    return;
  });
};

// src/RemixDevTools/RemixDevTools.tsx
var import_jsx_runtime55 = require("react/jsx-runtime");
var DevTools = ({ plugins: pluginArray }) => {
  useTimelineHandler();
  useResetDetachmentCheck();
  useBorderedRoutes();
  useSetRouteBoundaries();
  useSyncStateWhenDetached();
  useDevServerConnection();
  useOpenElementSource();
  useListenToRouteChange();
  const url = (0, import_react57.useLocation)().search;
  const { detachedWindowOwner, isDetached, setDetachedWindowOwner } = useDetachedWindowControls();
  const { settings } = useSettingsContext();
  const { persistOpen } = usePersistOpen();
  const { position } = settings;
  const [isOpen, setIsOpen] = (0, import_react56.useState)(isDetached || settings.defaultOpen || persistOpen);
  const leftSideOriented = position.includes("left");
  const plugins = pluginArray?.map((plugin) => typeof plugin === "function" ? plugin() : plugin);
  const debounceSetOpen = useDebounce(() => setIsOpen(!isOpen), 100);
  useAttachBodyListener("keydown", (e) => {
    if (e.altKey && e.key === "a") {
      debounceSetOpen();
    }
  });
  if (settings.requireUrlFlag && !url.includes(settings.urlFlag))
    return null;
  if (detachedWindowOwner) {
    return /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("div", { id: REMIX_DEV_TOOLS, className: "remix-dev-tools", children: /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(
      Trigger,
      {
        isOpen: false,
        setIsOpen: () => {
          setDetachedWindowOwner(false);
          setStorageItem(REMIX_DEV_TOOLS_IS_DETACHED, "false");
          setSessionItem(REMIX_DEV_TOOLS_DETACHED_OWNER, "false");
        }
      }
    ) });
  }
  return /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(import_jsx_runtime55.Fragment, { children: /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)("div", { id: REMIX_DEV_TOOLS, className: "remix-dev-tools", children: [
    /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(Trigger, { isOpen, setIsOpen }),
    /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(MainPanel, { isOpen, children: /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)("div", { className: "rdt-flex rdt-h-full", children: [
      /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(Tabs, { plugins, setIsOpen }),
      /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(ContentPanel, { leftSideOriented, plugins })
    ] }) })
  ] }) });
};
var RemixDevTools = ({ plugins }) => {
  return /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(RDTContextProvider, { children: /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(DevTools, { plugins }) });
};

// src/RemixDevTools/init/root.tsx
var import_react_dom2 = require("react-dom");
var import_react58 = require("react");

// src/RemixDevTools/init/hydration.ts
function removeStyleAndDataAttributes(inputString) {
  const styleTagRegex = /<style\b[^>]*>[\s\S]*?<\/style>/gi;
  const scriptTagRegex = /<script\b[^>]*>[\s\S]*?<\/script>/gi;
  const templateRegex = /<template\b[^>]*>[\s\S]*?<\/template>/gi;
  const styleRegex = /style="([^"]*)"/g;
  let resultString = inputString.replaceAll(styleTagRegex, "").replaceAll(scriptTagRegex, "").replaceAll(templateRegex, "").replaceAll("<!--$?-->", "").replaceAll("<!--/$-->", "");
  resultString = resultString.replaceAll(styleRegex, function(match, styleValue2) {
    const updatedStyle = styleValue2.trim().endsWith(";") ? styleValue2 : styleValue2 + ";";
    return 'style="' + updatedStyle.replaceAll(" ", "") + '"';
  });
  return resultString;
}
var hydrationDetector = (isVite) => {
  if (isVite) {
    if (typeof window !== "undefined") {
      if (!window.HYDRATION_OVERLAY) {
        window.HYDRATION_OVERLAY = {};
      }
      window.addEventListener("error", (event) => {
        const msg = event.message.toLowerCase();
        const isHydrationMsg = msg.includes("hydration") || msg.includes("hydrating");
        if (isHydrationMsg) {
          window.HYDRATION_OVERLAY.ERROR = true;
          const appRootEl = document.querySelector("html");
          if (appRootEl) {
            window.HYDRATION_OVERLAY.CSR_HTML = removeStyleAndDataAttributes(appRootEl.outerHTML);
          }
        }
      });
    }
    const HYDRATION_OVERLAY_ELEMENT = typeof document !== "undefined" && document.querySelector("html");
    if (HYDRATION_OVERLAY_ELEMENT) {
      window.HYDRATION_OVERLAY.SSR_HTML = removeStyleAndDataAttributes(
        HYDRATION_OVERLAY_ELEMENT.outerHTML
      );
    }
  } else {
    if (typeof window !== "undefined") {
      if (!window.HYDRATION_OVERLAY) {
        window.HYDRATION_OVERLAY = {};
      }
      window.addEventListener("error", (event) => {
        const msg = event.message.toLowerCase();
        const isHydrationMsg = msg.includes("hydration") || msg.includes("hydrating");
        if (isHydrationMsg) {
          window.HYDRATION_OVERLAY.ERROR = true;
          const appRootEl = document.querySelector("html");
          if (appRootEl && !window.HYDRATION_OVERLAY.CSR_HTML) {
            window.HYDRATION_OVERLAY.CSR_HTML = removeStyleAndDataAttributes(appRootEl.outerHTML);
          }
        }
      });
    }
    const HYDRATION_OVERLAY_ELEMENT = typeof document !== "undefined" && document.querySelector("html");
    if (HYDRATION_OVERLAY_ELEMENT) {
      window.HYDRATION_OVERLAY.SSR_HTML = removeStyleAndDataAttributes(
        HYDRATION_OVERLAY_ELEMENT.outerHTML
      );
    }
  }
};

// src/RemixDevTools/init/root.tsx
var import_jsx_runtime56 = require("react/jsx-runtime");
var hydrating = true;
function useHydrated() {
  const [hydrated, setHydrated] = (0, import_react58.useState)(() => !hydrating);
  (0, import_react58.useEffect)(function hydrate() {
    hydrating = false;
    setHydrated(true);
  }, []);
  return hydrated;
}
var defineClientConfig = (config) => config;
var withDevTools = (Component, config) => () => {
  hydrationDetector(false);
  const hydrated = useHydrated();
  if (!hydrated)
    return /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(Component, {});
  return /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)(import_jsx_runtime56.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(Component, {}),
    (0, import_react_dom2.createPortal)(/* @__PURE__ */ (0, import_jsx_runtime56.jsx)(RemixDevTools, { ...config }), document.body)
  ] });
};
var withViteDevTools = (Component, config) => () => {
  hydrationDetector(true);
  return function AppWithDevTools(props) {
    const hydrated = useHydrated();
    if (!hydrated)
      return /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(Component, {});
    return /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)(import_jsx_runtime56.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(Component, { ...props }),
      (0, import_react_dom2.createPortal)(/* @__PURE__ */ (0, import_jsx_runtime56.jsx)(RemixDevTools, { ...config }), document.body)
    ] });
  };
};

// src/RemixDevTools/EmbeddedDevTools.tsx
var import_clsx19 = __toESM(require("clsx"), 1);
var import_react59 = require("react");
var import_react60 = require("@remix-run/react");
var import_jsx_runtime57 = require("react/jsx-runtime");
var Embedded = ({ plugins: pluginArray, mainPanelClassName, className }) => {
  useTimelineHandler();
  useBorderedRoutes();
  useSetRouteBoundaries();
  const { settings } = useSettingsContext();
  const { position } = settings;
  const leftSideOriented = position.includes("left");
  const url = (0, import_react60.useLocation)().search;
  const plugins = pluginArray?.map((plugin) => typeof plugin === "function" ? plugin() : plugin);
  if (settings.requireUrlFlag && !url.includes(settings.urlFlag))
    return null;
  return /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("div", { id: REMIX_DEV_TOOLS, className: (0, import_clsx19.default)("remix-dev-tools", className), children: /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)(MainPanel, { className: mainPanelClassName, isEmbedded: true, isOpen: true, children: [
    /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(Tabs, { plugins }),
    /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(ContentPanel, { leftSideOriented, plugins })
  ] }) });
};
var hydrating2 = true;
function useHydrated2() {
  const [hydrated, setHydrated] = (0, import_react59.useState)(() => !hydrating2);
  (0, import_react59.useEffect)(function hydrate() {
    hydrating2 = false;
    setHydrated(true);
  }, []);
  return hydrated;
}
var EmbeddedDevTools = ({ plugins, mainPanelClassName, className }) => {
  const hydrated = useHydrated2();
  if (!hydrated)
    return null;
  return /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(RDTContextProvider, { children: /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(Embedded, { mainPanelClassName, className, plugins }) });
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  EmbeddedDevTools,
  defineClientConfig,
  useRemixForgeSocket,
  withDevTools,
  withViteDevTools
});
