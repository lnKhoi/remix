"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/vite.ts
var vite_exports = {};
__export(vite_exports, {
  remixDevTools: () => remixDevTools
});
module.exports = __toCommonJS(vite_exports);

// src/RemixDevTools/vite/plugin.tsx
var import_es_module_lexer = require("es-module-lexer");
var import_fs2 = __toESM(require("fs"), 1);
var import_path = require("path");

// src/RemixDevTools/utils/common.ts
var cutArrayToLastN = (arr, n) => {
  if (arr.length < n)
    return arr;
  return arr.slice(arr.length - n);
};

// src/dev-server/singleton.ts
var global = {};
function singleton(name, value) {
  const yolo = global;
  yolo.__singletons ??= {};
  yolo.__singletons[name] ??= value();
  return yolo.__singletons[name];
}

// src/dev-server/init.ts
var import_ws = require("ws");

// src/dev-server/event-queue.ts
singleton("rdtEventQueue", () => []);

// src/dev-server/utils.ts
var hasExtension = (path) => path.endsWith(".tsx") || path.endsWith(".jsx") || path.endsWith(".js") || path.endsWith(".ts");

// src/dev-server/init.ts
var import_child_process = require("child_process");
var import_fs = require("fs");
var isWsEventType = (obj) => {
  return typeof obj === "object" && obj !== null && "type" in obj && "data" in obj;
};
var handleGoToSource = (data) => {
  if (!isWsEventType(data))
    return;
  if (data.type !== "open-source")
    return;
  const source = data.data.source;
  const line = data.data.line;
  if (hasExtension(source))
    return (0, import_child_process.exec)(`code -g "${source}:${line}"`);
  try {
    (0, import_fs.readFileSync)(source + ".tsx");
    return (0, import_child_process.exec)(`code -g "${source}.tsx"`);
  } catch (e) {
  }
  try {
    (0, import_fs.readFileSync)(source + ".jsx");
    return (0, import_child_process.exec)(`code -g "${source}.jsx"`);
  } catch (e) {
    return;
  }
};

// src/RemixDevTools/vite/plugin.tsx
function processPlugins(pluginDirectoryPath) {
  const files = import_fs2.default.readdirSync(pluginDirectoryPath);
  const allExports = [];
  files.forEach((file) => {
    const filePath = (0, import_path.join)(pluginDirectoryPath, file);
    const fileCode = import_fs2.default.readFileSync(filePath, "utf8");
    const lines = fileCode.split("\n");
    lines.forEach((line) => {
      if (line.includes("export const")) {
        const [name] = line.split("export const ")[1].split(" =");
        allExports.push({ name, path: (0, import_path.join)("..", filePath).replaceAll("\\", "/") });
      }
    });
  });
  return allExports;
}
var handleDevToolsViteRequest = (req, res, next, cb) => {
  if (!req.url?.includes("remix-dev-tools")) {
    return next();
  }
  const chunks = [];
  req.on("data", (chunk) => {
    chunks.push(chunk);
  });
  req.on("end", () => {
    const dataToParse = Buffer.concat(chunks);
    const parsedData = JSON.parse(dataToParse.toString());
    cb(parsedData);
    res.write("OK");
  });
};
var routeInfo = /* @__PURE__ */ new Map();
var remixDevTools = (args) => {
  const pluginDir = args?.pluginDir || void 0;
  const plugins = pluginDir ? processPlugins(pluginDir) : [];
  const pluginNames = plugins.map((p) => p.name);
  return [
    {
      enforce: "post",
      name: "remix-development-tools-server",
      apply(config) {
        return config.mode === "development";
      },
      configureServer(server) {
        server.middlewares.use(
          (req, res, next) => handleDevToolsViteRequest(req, res, next, (parsedData) => {
            const { type, data } = parsedData;
            const id = data.id;
            const existingData = routeInfo.get(id);
            if (existingData) {
              if (type === "loader") {
                existingData.loader = cutArrayToLastN([...existingData.loader, data], 30);
              }
              if (type === "action") {
                existingData.action = cutArrayToLastN([...existingData.action, data], 30);
              }
            } else {
              if (type === "loader") {
                routeInfo.set(id, { loader: [data], action: [] });
              }
              if (type === "action") {
                routeInfo.set(id, { loader: [], action: [data] });
              }
            }
            server.ws.clients.forEach((client) => {
              client.send("route-info", JSON.stringify({ type, data }));
            });
          })
        );
        server.ws.on("connection", (socket) => {
          socket.on("message", (data) => {
            try {
              const json = JSON.parse(data.toString());
              if (json.type === "custom" && "data" in json) {
                if (json.data.type === "open-source") {
                  handleGoToSource(json.data);
                }
              }
            } catch (e) {
              console.log(e);
            }
          });
        });
      }
    },
    {
      name: "remix-development-tools",
      apply(config) {
        return config.mode === "development";
      },
      transform(code, id) {
        if (id.includes("virtual:server-entry")) {
          const updatedCode = [
            `import { augmentLoadersAndActions } from "remix-development-tools/server";`,
            code.replace("export const routes =", "const routeModules ="),
            `export const routes = augmentLoadersAndActions(routeModules);`
          ].join("\n");
          return updatedCode;
        }
        if (id.includes("root.tsx")) {
          const [, exports] = (0, import_es_module_lexer.parse)(code);
          const exportNames = exports.map((e) => e.n);
          const hasLinksExport = exportNames.includes("links");
          const lines = code.split("\n");
          const imports = [
            'import { withViteDevTools } from "remix-development-tools";',
            'import rdtStylesheet from "remix-development-tools/index.css?url";',
            plugins.map((plugin) => `import { ${plugin.name} } from "${plugin.path}";`).join("\n")
          ];
          const augmentedLinksExport = hasLinksExport ? `export const links = () => [...linksExport(), { rel: "stylesheet", href: rdtStylesheet }];` : `export const links = () => [{ rel: "stylesheet", href: rdtStylesheet }];`;
          const augmentedDefaultExport = `export default withViteDevTools(AppExport, { plugins: [${pluginNames.join(
            ","
          )}] })();`;
          const updatedCode = lines.map((line) => {
            if (line.includes("export default function")) {
              const exportName = line.split("export default function ")[1].split("(")[0].trim();
              const newLine = line.replace(`export default function ${exportName}`, `function AppExport`);
              return newLine;
            } else if (line.includes("export default")) {
              const newline = line.replace("export default", "const AppExport =");
              return newline;
            }
            if (line.includes("export const links")) {
              return line.replace("export const links", "const linksExport");
            }
            if (line.includes("export let links")) {
              return line.replace("export let links", "const linksExport");
            }
            if (line.includes("export function links")) {
              return line.replace("export function links", "const linksExport");
            }
            return line;
          });
          return [...imports, ...updatedCode, augmentedLinksExport, augmentedDefaultExport].join("\n");
        }
      }
    }
  ];
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  remixDevTools
});
