import type { Dispatch, ReactNode, SetStateAction } from 'react';
export declare enum Theme {
    DARK = "dark",
    LIGHT = "light"
}
export declare const themes: Array<Theme>;
export type ThemeMetadata = {
    definedBy: 'USER' | 'SYSTEM';
};
type ThemeContextType = [
    Theme | null,
    Dispatch<SetStateAction<Theme | null>>,
    ThemeMetadata
];
export declare const mediaQuery: MediaQueryList | null;
export type ThemeProviderProps = {
    children: ReactNode;
    specifiedTheme: Theme | null;
    themeAction: string;
    disableTransitionOnThemeChange?: boolean;
};
export declare function ThemeProvider({ children, specifiedTheme, themeAction, disableTransitionOnThemeChange, }: ThemeProviderProps): JSX.Element;
type PreventFlashOnWrongThemeProps = {
    ssrTheme: boolean;
    nonce?: string;
};
export declare function PreventFlashOnWrongTheme({ ssrTheme, nonce, }: PreventFlashOnWrongThemeProps): JSX.Element;
export declare function useTheme(): ThemeContextType;
export declare function isTheme(value: unknown): value is Theme;
export {};
