import {
  require_react_dom
} from "./chunk-LGJRRAOC.js";
import {
  require_react
} from "./chunk-BDUIIZXM.js";
import {
  __commonJS
} from "./chunk-VRMXEQCD.js";

// node_modules/react-dom/cjs/react-dom-server-legacy.browser.development.js
var require_react_dom_server_legacy_browser_development = __commonJS({
  "node_modules/react-dom/cjs/react-dom-server-legacy.browser.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var React = require_react();
        var ReactDOM = require_react_dom();
        var ReactVersion = "18.3.0-canary-2f8f77602-20240229";
        var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        function warn(format) {
          {
            {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
        }
        function error(format) {
          {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        var REACT_ELEMENT_TYPE = Symbol.for("react.element");
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        var REACT_CONSUMER_TYPE = Symbol.for("react.consumer");
        var REACT_CONTEXT_TYPE = Symbol.for("react.context");
        var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE = Symbol.for("react.memo");
        var REACT_LAZY_TYPE = Symbol.for("react.lazy");
        var REACT_SCOPE_TYPE = Symbol.for("react.scope");
        var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
        var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
        var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
        var REACT_CACHE_TYPE = Symbol.for("react.cache");
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var isArrayImpl = Array.isArray;
        function isArray(a) {
          return isArrayImpl(a);
        }
        var jsxPropsParents = /* @__PURE__ */ new WeakMap();
        var jsxChildrenParents = /* @__PURE__ */ new WeakMap();
        function objectName(object) {
          var name = Object.prototype.toString.call(object);
          return name.replace(/^\[object (.*)\]$/, function(m, p0) {
            return p0;
          });
        }
        function describeKeyForErrorMessage(key) {
          var encodedKey = JSON.stringify(key);
          return '"' + key + '"' === encodedKey ? key : encodedKey;
        }
        function describeValueForErrorMessage(value) {
          switch (typeof value) {
            case "string": {
              return JSON.stringify(value.length <= 10 ? value : value.slice(0, 10) + "...");
            }
            case "object": {
              if (isArray(value)) {
                return "[...]";
              }
              if (value !== null && value.$$typeof === CLIENT_REFERENCE_TAG) {
                return describeClientReference();
              }
              var name = objectName(value);
              if (name === "Object") {
                return "{...}";
              }
              return name;
            }
            case "function": {
              if (value.$$typeof === CLIENT_REFERENCE_TAG) {
                return describeClientReference();
              }
              var _name = value.displayName || value.name;
              return _name ? "function " + _name : "function";
            }
            default:
              return String(value);
          }
        }
        function describeElementType(type) {
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeElementType(type.render);
              case REACT_MEMO_TYPE:
                return describeElementType(type.type);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return describeElementType(init(payload));
                } catch (x) {
                }
              }
            }
          }
          return "";
        }
        var CLIENT_REFERENCE_TAG = Symbol.for("react.client.reference");
        function describeClientReference(ref) {
          return "client";
        }
        function describeObjectForErrorMessage(objectOrArray, expandedName) {
          var objKind = objectName(objectOrArray);
          if (objKind !== "Object" && objKind !== "Array") {
            return objKind;
          }
          var str = "";
          var start = -1;
          var length = 0;
          if (isArray(objectOrArray)) {
            if (jsxChildrenParents.has(objectOrArray)) {
              var type = jsxChildrenParents.get(objectOrArray);
              str = "<" + describeElementType(type) + ">";
              var array = objectOrArray;
              for (var i = 0; i < array.length; i++) {
                var value = array[i];
                var substr = void 0;
                if (typeof value === "string") {
                  substr = value;
                } else if (typeof value === "object" && value !== null) {
                  substr = "{" + describeObjectForErrorMessage(value) + "}";
                } else {
                  substr = "{" + describeValueForErrorMessage(value) + "}";
                }
                if ("" + i === expandedName) {
                  start = str.length;
                  length = substr.length;
                  str += substr;
                } else if (substr.length < 15 && str.length + substr.length < 40) {
                  str += substr;
                } else {
                  str += "{...}";
                }
              }
              str += "</" + describeElementType(type) + ">";
            } else {
              str = "[";
              var _array = objectOrArray;
              for (var _i = 0; _i < _array.length; _i++) {
                if (_i > 0) {
                  str += ", ";
                }
                var _value = _array[_i];
                var _substr = void 0;
                if (typeof _value === "object" && _value !== null) {
                  _substr = describeObjectForErrorMessage(_value);
                } else {
                  _substr = describeValueForErrorMessage(_value);
                }
                if ("" + _i === expandedName) {
                  start = str.length;
                  length = _substr.length;
                  str += _substr;
                } else if (_substr.length < 10 && str.length + _substr.length < 40) {
                  str += _substr;
                } else {
                  str += "...";
                }
              }
              str += "]";
            }
          } else {
            if (objectOrArray.$$typeof === REACT_ELEMENT_TYPE) {
              str = "<" + describeElementType(objectOrArray.type) + "/>";
            } else if (objectOrArray.$$typeof === CLIENT_REFERENCE_TAG) {
              return describeClientReference();
            } else if (jsxPropsParents.has(objectOrArray)) {
              var _type = jsxPropsParents.get(objectOrArray);
              str = "<" + (describeElementType(_type) || "...");
              var object = objectOrArray;
              var names = Object.keys(object);
              for (var _i2 = 0; _i2 < names.length; _i2++) {
                str += " ";
                var name = names[_i2];
                str += describeKeyForErrorMessage(name) + "=";
                var _value2 = object[name];
                var _substr2 = void 0;
                if (name === expandedName && typeof _value2 === "object" && _value2 !== null) {
                  _substr2 = describeObjectForErrorMessage(_value2);
                } else {
                  _substr2 = describeValueForErrorMessage(_value2);
                }
                if (typeof _value2 !== "string") {
                  _substr2 = "{" + _substr2 + "}";
                }
                if (name === expandedName) {
                  start = str.length;
                  length = _substr2.length;
                  str += _substr2;
                } else if (_substr2.length < 10 && str.length + _substr2.length < 40) {
                  str += _substr2;
                } else {
                  str += "...";
                }
              }
              str += ">";
            } else {
              str = "{";
              var _object = objectOrArray;
              var _names = Object.keys(_object);
              for (var _i3 = 0; _i3 < _names.length; _i3++) {
                if (_i3 > 0) {
                  str += ", ";
                }
                var _name2 = _names[_i3];
                str += describeKeyForErrorMessage(_name2) + ": ";
                var _value3 = _object[_name2];
                var _substr3 = void 0;
                if (typeof _value3 === "object" && _value3 !== null) {
                  _substr3 = describeObjectForErrorMessage(_value3);
                } else {
                  _substr3 = describeValueForErrorMessage(_value3);
                }
                if (_name2 === expandedName) {
                  start = str.length;
                  length = _substr3.length;
                  str += _substr3;
                } else if (_substr3.length < 10 && str.length + _substr3.length < 40) {
                  str += _substr3;
                } else {
                  str += "...";
                }
              }
              str += "}";
            }
          }
          if (expandedName === void 0) {
            return str;
          }
          if (start > -1 && length > 0) {
            var highlight = " ".repeat(start) + "^".repeat(length);
            return "\n  " + str + "\n  " + highlight;
          }
          return "\n  " + str;
        }
        function createFastHashJS(key) {
          return murmurhash3_32_gc(key, 0);
        }
        function murmurhash3_32_gc(key, seed) {
          var remainder, bytes, h1, h1b, c1, c2, k1, i;
          remainder = key.length & 3;
          bytes = key.length - remainder;
          h1 = seed;
          c1 = 3432918353;
          c2 = 461845907;
          i = 0;
          while (i < bytes) {
            k1 = key.charCodeAt(i) & 255 | (key.charCodeAt(++i) & 255) << 8 | (key.charCodeAt(++i) & 255) << 16 | (key.charCodeAt(++i) & 255) << 24;
            ++i;
            k1 = (k1 & 65535) * c1 + (((k1 >>> 16) * c1 & 65535) << 16) & 4294967295;
            k1 = k1 << 15 | k1 >>> 17;
            k1 = (k1 & 65535) * c2 + (((k1 >>> 16) * c2 & 65535) << 16) & 4294967295;
            h1 ^= k1;
            h1 = h1 << 13 | h1 >>> 19;
            h1b = (h1 & 65535) * 5 + (((h1 >>> 16) * 5 & 65535) << 16) & 4294967295;
            h1 = (h1b & 65535) + 27492 + (((h1b >>> 16) + 58964 & 65535) << 16);
          }
          k1 = 0;
          switch (remainder) {
            case 3:
              k1 ^= (key.charCodeAt(i + 2) & 255) << 16;
            case 2:
              k1 ^= (key.charCodeAt(i + 1) & 255) << 8;
            case 1:
              k1 ^= key.charCodeAt(i) & 255;
              k1 = (k1 & 65535) * c1 + (((k1 >>> 16) * c1 & 65535) << 16) & 4294967295;
              k1 = k1 << 15 | k1 >>> 17;
              k1 = (k1 & 65535) * c2 + (((k1 >>> 16) * c2 & 65535) << 16) & 4294967295;
              h1 ^= k1;
          }
          h1 ^= key.length;
          h1 ^= h1 >>> 16;
          h1 = (h1 & 65535) * 2246822507 + (((h1 >>> 16) * 2246822507 & 65535) << 16) & 4294967295;
          h1 ^= h1 >>> 13;
          h1 = (h1 & 65535) * 3266489909 + (((h1 >>> 16) * 3266489909 & 65535) << 16) & 4294967295;
          h1 ^= h1 >>> 16;
          return h1 >>> 0;
        }
        function scheduleWork(callback) {
          callback();
        }
        function beginWriting(destination) {
        }
        function writeChunk(destination, chunk) {
          writeChunkAndReturn(destination, chunk);
        }
        function writeChunkAndReturn(destination, chunk) {
          return destination.push(chunk);
        }
        function completeWriting(destination) {
        }
        function close(destination) {
          destination.push(null);
        }
        function stringToChunk(content) {
          return content;
        }
        function stringToPrecomputedChunk(content) {
          return content;
        }
        function clonePrecomputedChunk(chunk) {
          return chunk;
        }
        function closeWithError(destination, error2) {
          destination.destroy(error2);
        }
        var assign = Object.assign;
        function typeName(value) {
          {
            var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
            var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            return type;
          }
        }
        function willCoercionThrow(value) {
          {
            try {
              testStringCoercion(value);
              return false;
            } catch (e) {
              return true;
            }
          }
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function checkAttributeStringCoercion(value, attributeName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before using it here.", attributeName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkOptionStringCoercion(value, propName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` option is an unsupported type %s. This value must be coerced to a string before using it here.", propName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkCSSPropertyStringCoercion(value, propName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before using it here.", propName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkHtmlStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        var enableFloat = true;
        var __NEXT_MAJOR__ = false;
        var enableBigIntSupport = __NEXT_MAJOR__;
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
        var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
        var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
        var illegalAttributeNameCache = {};
        var validatedAttributeNameCache = {};
        function isAttributeNameSafe(attributeName) {
          if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
            return true;
          }
          if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
            return false;
          }
          if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
            validatedAttributeNameCache[attributeName] = true;
            return true;
          }
          illegalAttributeNameCache[attributeName] = true;
          {
            error("Invalid attribute name: `%s`", attributeName);
          }
          return false;
        }
        var unitlessNumbers = /* @__PURE__ */ new Set([
          "animationIterationCount",
          "aspectRatio",
          "borderImageOutset",
          "borderImageSlice",
          "borderImageWidth",
          "boxFlex",
          "boxFlexGroup",
          "boxOrdinalGroup",
          "columnCount",
          "columns",
          "flex",
          "flexGrow",
          "flexPositive",
          "flexShrink",
          "flexNegative",
          "flexOrder",
          "gridArea",
          "gridRow",
          "gridRowEnd",
          "gridRowSpan",
          "gridRowStart",
          "gridColumn",
          "gridColumnEnd",
          "gridColumnSpan",
          "gridColumnStart",
          "fontWeight",
          "lineClamp",
          "lineHeight",
          "opacity",
          "order",
          "orphans",
          "scale",
          "tabSize",
          "widows",
          "zIndex",
          "zoom",
          "fillOpacity",
          // SVG-related properties
          "floodOpacity",
          "stopOpacity",
          "strokeDasharray",
          "strokeDashoffset",
          "strokeMiterlimit",
          "strokeOpacity",
          "strokeWidth",
          "MozAnimationIterationCount",
          // Known Prefixed Properties
          "MozBoxFlex",
          // TODO: Remove these since they shouldn't be used in modern code
          "MozBoxFlexGroup",
          "MozLineClamp",
          "msAnimationIterationCount",
          "msFlex",
          "msZoom",
          "msFlexGrow",
          "msFlexNegative",
          "msFlexOrder",
          "msFlexPositive",
          "msFlexShrink",
          "msGridColumn",
          "msGridColumnSpan",
          "msGridRow",
          "msGridRowSpan",
          "WebkitAnimationIterationCount",
          "WebkitBoxFlex",
          "WebKitBoxFlexGroup",
          "WebkitBoxOrdinalGroup",
          "WebkitColumnCount",
          "WebkitColumns",
          "WebkitFlex",
          "WebkitFlexGrow",
          "WebkitFlexPositive",
          "WebkitFlexShrink",
          "WebkitLineClamp"
        ]);
        function isUnitlessNumber(name) {
          return unitlessNumbers.has(name);
        }
        var aliases = /* @__PURE__ */ new Map([
          ["acceptCharset", "accept-charset"],
          ["htmlFor", "for"],
          ["httpEquiv", "http-equiv"],
          // HTML and SVG attributes, but the SVG attribute is case sensitive.],
          ["crossOrigin", "crossorigin"],
          // This is a list of all SVG attributes that need special casing.
          // Regular attributes that just accept strings.],
          ["accentHeight", "accent-height"],
          ["alignmentBaseline", "alignment-baseline"],
          ["arabicForm", "arabic-form"],
          ["baselineShift", "baseline-shift"],
          ["capHeight", "cap-height"],
          ["clipPath", "clip-path"],
          ["clipRule", "clip-rule"],
          ["colorInterpolation", "color-interpolation"],
          ["colorInterpolationFilters", "color-interpolation-filters"],
          ["colorProfile", "color-profile"],
          ["colorRendering", "color-rendering"],
          ["dominantBaseline", "dominant-baseline"],
          ["enableBackground", "enable-background"],
          ["fillOpacity", "fill-opacity"],
          ["fillRule", "fill-rule"],
          ["floodColor", "flood-color"],
          ["floodOpacity", "flood-opacity"],
          ["fontFamily", "font-family"],
          ["fontSize", "font-size"],
          ["fontSizeAdjust", "font-size-adjust"],
          ["fontStretch", "font-stretch"],
          ["fontStyle", "font-style"],
          ["fontVariant", "font-variant"],
          ["fontWeight", "font-weight"],
          ["glyphName", "glyph-name"],
          ["glyphOrientationHorizontal", "glyph-orientation-horizontal"],
          ["glyphOrientationVertical", "glyph-orientation-vertical"],
          ["horizAdvX", "horiz-adv-x"],
          ["horizOriginX", "horiz-origin-x"],
          ["imageRendering", "image-rendering"],
          ["letterSpacing", "letter-spacing"],
          ["lightingColor", "lighting-color"],
          ["markerEnd", "marker-end"],
          ["markerMid", "marker-mid"],
          ["markerStart", "marker-start"],
          ["overlinePosition", "overline-position"],
          ["overlineThickness", "overline-thickness"],
          ["paintOrder", "paint-order"],
          ["panose-1", "panose-1"],
          ["pointerEvents", "pointer-events"],
          ["renderingIntent", "rendering-intent"],
          ["shapeRendering", "shape-rendering"],
          ["stopColor", "stop-color"],
          ["stopOpacity", "stop-opacity"],
          ["strikethroughPosition", "strikethrough-position"],
          ["strikethroughThickness", "strikethrough-thickness"],
          ["strokeDasharray", "stroke-dasharray"],
          ["strokeDashoffset", "stroke-dashoffset"],
          ["strokeLinecap", "stroke-linecap"],
          ["strokeLinejoin", "stroke-linejoin"],
          ["strokeMiterlimit", "stroke-miterlimit"],
          ["strokeOpacity", "stroke-opacity"],
          ["strokeWidth", "stroke-width"],
          ["textAnchor", "text-anchor"],
          ["textDecoration", "text-decoration"],
          ["textRendering", "text-rendering"],
          ["transformOrigin", "transform-origin"],
          ["underlinePosition", "underline-position"],
          ["underlineThickness", "underline-thickness"],
          ["unicodeBidi", "unicode-bidi"],
          ["unicodeRange", "unicode-range"],
          ["unitsPerEm", "units-per-em"],
          ["vAlphabetic", "v-alphabetic"],
          ["vHanging", "v-hanging"],
          ["vIdeographic", "v-ideographic"],
          ["vMathematical", "v-mathematical"],
          ["vectorEffect", "vector-effect"],
          ["vertAdvY", "vert-adv-y"],
          ["vertOriginX", "vert-origin-x"],
          ["vertOriginY", "vert-origin-y"],
          ["wordSpacing", "word-spacing"],
          ["writingMode", "writing-mode"],
          ["xmlnsXlink", "xmlns:xlink"],
          ["xHeight", "x-height"]
        ]);
        function getAttributeAlias(name) {
          return aliases.get(name) || name;
        }
        var hasReadOnlyValue = {
          button: true,
          checkbox: true,
          image: true,
          hidden: true,
          radio: true,
          reset: true,
          submit: true
        };
        function checkControlledValueProps(tagName, props) {
          {
            if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
              if (tagName === "select") {
                error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set `onChange`.");
              } else {
                error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
              }
            }
            if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
              error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
            }
          }
        }
        var ariaProperties = {
          "aria-current": 0,
          // state
          "aria-description": 0,
          "aria-details": 0,
          "aria-disabled": 0,
          // state
          "aria-hidden": 0,
          // state
          "aria-invalid": 0,
          // state
          "aria-keyshortcuts": 0,
          "aria-label": 0,
          "aria-roledescription": 0,
          // Widget Attributes
          "aria-autocomplete": 0,
          "aria-checked": 0,
          "aria-expanded": 0,
          "aria-haspopup": 0,
          "aria-level": 0,
          "aria-modal": 0,
          "aria-multiline": 0,
          "aria-multiselectable": 0,
          "aria-orientation": 0,
          "aria-placeholder": 0,
          "aria-pressed": 0,
          "aria-readonly": 0,
          "aria-required": 0,
          "aria-selected": 0,
          "aria-sort": 0,
          "aria-valuemax": 0,
          "aria-valuemin": 0,
          "aria-valuenow": 0,
          "aria-valuetext": 0,
          // Live Region Attributes
          "aria-atomic": 0,
          "aria-busy": 0,
          "aria-live": 0,
          "aria-relevant": 0,
          // Drag-and-Drop Attributes
          "aria-dropeffect": 0,
          "aria-grabbed": 0,
          // Relationship Attributes
          "aria-activedescendant": 0,
          "aria-colcount": 0,
          "aria-colindex": 0,
          "aria-colspan": 0,
          "aria-controls": 0,
          "aria-describedby": 0,
          "aria-errormessage": 0,
          "aria-flowto": 0,
          "aria-labelledby": 0,
          "aria-owns": 0,
          "aria-posinset": 0,
          "aria-rowcount": 0,
          "aria-rowindex": 0,
          "aria-rowspan": 0,
          "aria-setsize": 0
        };
        var warnedProperties$1 = {};
        var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
        var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
        function validateProperty$1(tagName, name) {
          {
            if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
              return true;
            }
            if (rARIACamel$1.test(name)) {
              var ariaName = "aria-" + name.slice(4).toLowerCase();
              var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
              if (correctName == null) {
                error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                warnedProperties$1[name] = true;
                return true;
              }
              if (name !== correctName) {
                error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                warnedProperties$1[name] = true;
                return true;
              }
            }
            if (rARIA$1.test(name)) {
              var lowerCasedName = name.toLowerCase();
              var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
              if (standardName == null) {
                warnedProperties$1[name] = true;
                return false;
              }
              if (name !== standardName) {
                error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties$1[name] = true;
                return true;
              }
            }
          }
          return true;
        }
        function validateProperties$2(type, props) {
          {
            var invalidProps = [];
            for (var key in props) {
              var isValid = validateProperty$1(type, key);
              if (!isValid) {
                invalidProps.push(key);
              }
            }
            var unknownPropString = invalidProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (invalidProps.length === 1) {
              error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
            } else if (invalidProps.length > 1) {
              error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
            }
          }
        }
        var didWarnValueNull = false;
        function validateProperties$1(type, props) {
          {
            if (type !== "input" && type !== "textarea" && type !== "select") {
              return;
            }
            if (props != null && props.value === null && !didWarnValueNull) {
              didWarnValueNull = true;
              if (type === "select" && props.multiple) {
                error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
              } else {
                error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
              }
            }
          }
        }
        function isCustomElement(tagName, props) {
          if (tagName.indexOf("-") === -1) {
            return false;
          }
          switch (tagName) {
            case "annotation-xml":
            case "color-profile":
            case "font-face":
            case "font-face-src":
            case "font-face-uri":
            case "font-face-format":
            case "font-face-name":
            case "missing-glyph":
              return false;
            default:
              return true;
          }
        }
        var possibleStandardNames = {
          // HTML
          accept: "accept",
          acceptcharset: "acceptCharset",
          "accept-charset": "acceptCharset",
          accesskey: "accessKey",
          action: "action",
          allowfullscreen: "allowFullScreen",
          alt: "alt",
          as: "as",
          async: "async",
          autocapitalize: "autoCapitalize",
          autocomplete: "autoComplete",
          autocorrect: "autoCorrect",
          autofocus: "autoFocus",
          autoplay: "autoPlay",
          autosave: "autoSave",
          capture: "capture",
          cellpadding: "cellPadding",
          cellspacing: "cellSpacing",
          challenge: "challenge",
          charset: "charSet",
          checked: "checked",
          children: "children",
          cite: "cite",
          class: "className",
          classid: "classID",
          classname: "className",
          cols: "cols",
          colspan: "colSpan",
          content: "content",
          contenteditable: "contentEditable",
          contextmenu: "contextMenu",
          controls: "controls",
          controlslist: "controlsList",
          coords: "coords",
          crossorigin: "crossOrigin",
          dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
          data: "data",
          datetime: "dateTime",
          default: "default",
          defaultchecked: "defaultChecked",
          defaultvalue: "defaultValue",
          defer: "defer",
          dir: "dir",
          disabled: "disabled",
          disablepictureinpicture: "disablePictureInPicture",
          disableremoteplayback: "disableRemotePlayback",
          download: "download",
          draggable: "draggable",
          enctype: "encType",
          enterkeyhint: "enterKeyHint",
          fetchpriority: "fetchPriority",
          for: "htmlFor",
          form: "form",
          formmethod: "formMethod",
          formaction: "formAction",
          formenctype: "formEncType",
          formnovalidate: "formNoValidate",
          formtarget: "formTarget",
          frameborder: "frameBorder",
          headers: "headers",
          height: "height",
          hidden: "hidden",
          high: "high",
          href: "href",
          hreflang: "hrefLang",
          htmlfor: "htmlFor",
          httpequiv: "httpEquiv",
          "http-equiv": "httpEquiv",
          icon: "icon",
          id: "id",
          imagesizes: "imageSizes",
          imagesrcset: "imageSrcSet",
          innerhtml: "innerHTML",
          inputmode: "inputMode",
          integrity: "integrity",
          is: "is",
          itemid: "itemID",
          itemprop: "itemProp",
          itemref: "itemRef",
          itemscope: "itemScope",
          itemtype: "itemType",
          keyparams: "keyParams",
          keytype: "keyType",
          kind: "kind",
          label: "label",
          lang: "lang",
          list: "list",
          loop: "loop",
          low: "low",
          manifest: "manifest",
          marginwidth: "marginWidth",
          marginheight: "marginHeight",
          max: "max",
          maxlength: "maxLength",
          media: "media",
          mediagroup: "mediaGroup",
          method: "method",
          min: "min",
          minlength: "minLength",
          multiple: "multiple",
          muted: "muted",
          name: "name",
          nomodule: "noModule",
          nonce: "nonce",
          novalidate: "noValidate",
          open: "open",
          optimum: "optimum",
          pattern: "pattern",
          placeholder: "placeholder",
          playsinline: "playsInline",
          poster: "poster",
          preload: "preload",
          profile: "profile",
          radiogroup: "radioGroup",
          readonly: "readOnly",
          referrerpolicy: "referrerPolicy",
          rel: "rel",
          required: "required",
          reversed: "reversed",
          role: "role",
          rows: "rows",
          rowspan: "rowSpan",
          sandbox: "sandbox",
          scope: "scope",
          scoped: "scoped",
          scrolling: "scrolling",
          seamless: "seamless",
          selected: "selected",
          shape: "shape",
          size: "size",
          sizes: "sizes",
          span: "span",
          spellcheck: "spellCheck",
          src: "src",
          srcdoc: "srcDoc",
          srclang: "srcLang",
          srcset: "srcSet",
          start: "start",
          step: "step",
          style: "style",
          summary: "summary",
          tabindex: "tabIndex",
          target: "target",
          title: "title",
          type: "type",
          usemap: "useMap",
          value: "value",
          width: "width",
          wmode: "wmode",
          wrap: "wrap",
          // SVG
          about: "about",
          accentheight: "accentHeight",
          "accent-height": "accentHeight",
          accumulate: "accumulate",
          additive: "additive",
          alignmentbaseline: "alignmentBaseline",
          "alignment-baseline": "alignmentBaseline",
          allowreorder: "allowReorder",
          alphabetic: "alphabetic",
          amplitude: "amplitude",
          arabicform: "arabicForm",
          "arabic-form": "arabicForm",
          ascent: "ascent",
          attributename: "attributeName",
          attributetype: "attributeType",
          autoreverse: "autoReverse",
          azimuth: "azimuth",
          basefrequency: "baseFrequency",
          baselineshift: "baselineShift",
          "baseline-shift": "baselineShift",
          baseprofile: "baseProfile",
          bbox: "bbox",
          begin: "begin",
          bias: "bias",
          by: "by",
          calcmode: "calcMode",
          capheight: "capHeight",
          "cap-height": "capHeight",
          clip: "clip",
          clippath: "clipPath",
          "clip-path": "clipPath",
          clippathunits: "clipPathUnits",
          cliprule: "clipRule",
          "clip-rule": "clipRule",
          color: "color",
          colorinterpolation: "colorInterpolation",
          "color-interpolation": "colorInterpolation",
          colorinterpolationfilters: "colorInterpolationFilters",
          "color-interpolation-filters": "colorInterpolationFilters",
          colorprofile: "colorProfile",
          "color-profile": "colorProfile",
          colorrendering: "colorRendering",
          "color-rendering": "colorRendering",
          contentscripttype: "contentScriptType",
          contentstyletype: "contentStyleType",
          cursor: "cursor",
          cx: "cx",
          cy: "cy",
          d: "d",
          datatype: "datatype",
          decelerate: "decelerate",
          descent: "descent",
          diffuseconstant: "diffuseConstant",
          direction: "direction",
          display: "display",
          divisor: "divisor",
          dominantbaseline: "dominantBaseline",
          "dominant-baseline": "dominantBaseline",
          dur: "dur",
          dx: "dx",
          dy: "dy",
          edgemode: "edgeMode",
          elevation: "elevation",
          enablebackground: "enableBackground",
          "enable-background": "enableBackground",
          end: "end",
          exponent: "exponent",
          externalresourcesrequired: "externalResourcesRequired",
          fill: "fill",
          fillopacity: "fillOpacity",
          "fill-opacity": "fillOpacity",
          fillrule: "fillRule",
          "fill-rule": "fillRule",
          filter: "filter",
          filterres: "filterRes",
          filterunits: "filterUnits",
          floodopacity: "floodOpacity",
          "flood-opacity": "floodOpacity",
          floodcolor: "floodColor",
          "flood-color": "floodColor",
          focusable: "focusable",
          fontfamily: "fontFamily",
          "font-family": "fontFamily",
          fontsize: "fontSize",
          "font-size": "fontSize",
          fontsizeadjust: "fontSizeAdjust",
          "font-size-adjust": "fontSizeAdjust",
          fontstretch: "fontStretch",
          "font-stretch": "fontStretch",
          fontstyle: "fontStyle",
          "font-style": "fontStyle",
          fontvariant: "fontVariant",
          "font-variant": "fontVariant",
          fontweight: "fontWeight",
          "font-weight": "fontWeight",
          format: "format",
          from: "from",
          fx: "fx",
          fy: "fy",
          g1: "g1",
          g2: "g2",
          glyphname: "glyphName",
          "glyph-name": "glyphName",
          glyphorientationhorizontal: "glyphOrientationHorizontal",
          "glyph-orientation-horizontal": "glyphOrientationHorizontal",
          glyphorientationvertical: "glyphOrientationVertical",
          "glyph-orientation-vertical": "glyphOrientationVertical",
          glyphref: "glyphRef",
          gradienttransform: "gradientTransform",
          gradientunits: "gradientUnits",
          hanging: "hanging",
          horizadvx: "horizAdvX",
          "horiz-adv-x": "horizAdvX",
          horizoriginx: "horizOriginX",
          "horiz-origin-x": "horizOriginX",
          ideographic: "ideographic",
          imagerendering: "imageRendering",
          "image-rendering": "imageRendering",
          in2: "in2",
          in: "in",
          inlist: "inlist",
          intercept: "intercept",
          k1: "k1",
          k2: "k2",
          k3: "k3",
          k4: "k4",
          k: "k",
          kernelmatrix: "kernelMatrix",
          kernelunitlength: "kernelUnitLength",
          kerning: "kerning",
          keypoints: "keyPoints",
          keysplines: "keySplines",
          keytimes: "keyTimes",
          lengthadjust: "lengthAdjust",
          letterspacing: "letterSpacing",
          "letter-spacing": "letterSpacing",
          lightingcolor: "lightingColor",
          "lighting-color": "lightingColor",
          limitingconeangle: "limitingConeAngle",
          local: "local",
          markerend: "markerEnd",
          "marker-end": "markerEnd",
          markerheight: "markerHeight",
          markermid: "markerMid",
          "marker-mid": "markerMid",
          markerstart: "markerStart",
          "marker-start": "markerStart",
          markerunits: "markerUnits",
          markerwidth: "markerWidth",
          mask: "mask",
          maskcontentunits: "maskContentUnits",
          maskunits: "maskUnits",
          mathematical: "mathematical",
          mode: "mode",
          numoctaves: "numOctaves",
          offset: "offset",
          opacity: "opacity",
          operator: "operator",
          order: "order",
          orient: "orient",
          orientation: "orientation",
          origin: "origin",
          overflow: "overflow",
          overlineposition: "overlinePosition",
          "overline-position": "overlinePosition",
          overlinethickness: "overlineThickness",
          "overline-thickness": "overlineThickness",
          paintorder: "paintOrder",
          "paint-order": "paintOrder",
          panose1: "panose1",
          "panose-1": "panose1",
          pathlength: "pathLength",
          patterncontentunits: "patternContentUnits",
          patterntransform: "patternTransform",
          patternunits: "patternUnits",
          pointerevents: "pointerEvents",
          "pointer-events": "pointerEvents",
          points: "points",
          pointsatx: "pointsAtX",
          pointsaty: "pointsAtY",
          pointsatz: "pointsAtZ",
          prefix: "prefix",
          preservealpha: "preserveAlpha",
          preserveaspectratio: "preserveAspectRatio",
          primitiveunits: "primitiveUnits",
          property: "property",
          r: "r",
          radius: "radius",
          refx: "refX",
          refy: "refY",
          renderingintent: "renderingIntent",
          "rendering-intent": "renderingIntent",
          repeatcount: "repeatCount",
          repeatdur: "repeatDur",
          requiredextensions: "requiredExtensions",
          requiredfeatures: "requiredFeatures",
          resource: "resource",
          restart: "restart",
          result: "result",
          results: "results",
          rotate: "rotate",
          rx: "rx",
          ry: "ry",
          scale: "scale",
          security: "security",
          seed: "seed",
          shaperendering: "shapeRendering",
          "shape-rendering": "shapeRendering",
          slope: "slope",
          spacing: "spacing",
          specularconstant: "specularConstant",
          specularexponent: "specularExponent",
          speed: "speed",
          spreadmethod: "spreadMethod",
          startoffset: "startOffset",
          stddeviation: "stdDeviation",
          stemh: "stemh",
          stemv: "stemv",
          stitchtiles: "stitchTiles",
          stopcolor: "stopColor",
          "stop-color": "stopColor",
          stopopacity: "stopOpacity",
          "stop-opacity": "stopOpacity",
          strikethroughposition: "strikethroughPosition",
          "strikethrough-position": "strikethroughPosition",
          strikethroughthickness: "strikethroughThickness",
          "strikethrough-thickness": "strikethroughThickness",
          string: "string",
          stroke: "stroke",
          strokedasharray: "strokeDasharray",
          "stroke-dasharray": "strokeDasharray",
          strokedashoffset: "strokeDashoffset",
          "stroke-dashoffset": "strokeDashoffset",
          strokelinecap: "strokeLinecap",
          "stroke-linecap": "strokeLinecap",
          strokelinejoin: "strokeLinejoin",
          "stroke-linejoin": "strokeLinejoin",
          strokemiterlimit: "strokeMiterlimit",
          "stroke-miterlimit": "strokeMiterlimit",
          strokewidth: "strokeWidth",
          "stroke-width": "strokeWidth",
          strokeopacity: "strokeOpacity",
          "stroke-opacity": "strokeOpacity",
          suppresscontenteditablewarning: "suppressContentEditableWarning",
          suppresshydrationwarning: "suppressHydrationWarning",
          surfacescale: "surfaceScale",
          systemlanguage: "systemLanguage",
          tablevalues: "tableValues",
          targetx: "targetX",
          targety: "targetY",
          textanchor: "textAnchor",
          "text-anchor": "textAnchor",
          textdecoration: "textDecoration",
          "text-decoration": "textDecoration",
          textlength: "textLength",
          textrendering: "textRendering",
          "text-rendering": "textRendering",
          to: "to",
          transform: "transform",
          transformorigin: "transformOrigin",
          "transform-origin": "transformOrigin",
          typeof: "typeof",
          u1: "u1",
          u2: "u2",
          underlineposition: "underlinePosition",
          "underline-position": "underlinePosition",
          underlinethickness: "underlineThickness",
          "underline-thickness": "underlineThickness",
          unicode: "unicode",
          unicodebidi: "unicodeBidi",
          "unicode-bidi": "unicodeBidi",
          unicoderange: "unicodeRange",
          "unicode-range": "unicodeRange",
          unitsperem: "unitsPerEm",
          "units-per-em": "unitsPerEm",
          unselectable: "unselectable",
          valphabetic: "vAlphabetic",
          "v-alphabetic": "vAlphabetic",
          values: "values",
          vectoreffect: "vectorEffect",
          "vector-effect": "vectorEffect",
          version: "version",
          vertadvy: "vertAdvY",
          "vert-adv-y": "vertAdvY",
          vertoriginx: "vertOriginX",
          "vert-origin-x": "vertOriginX",
          vertoriginy: "vertOriginY",
          "vert-origin-y": "vertOriginY",
          vhanging: "vHanging",
          "v-hanging": "vHanging",
          videographic: "vIdeographic",
          "v-ideographic": "vIdeographic",
          viewbox: "viewBox",
          viewtarget: "viewTarget",
          visibility: "visibility",
          vmathematical: "vMathematical",
          "v-mathematical": "vMathematical",
          vocab: "vocab",
          widths: "widths",
          wordspacing: "wordSpacing",
          "word-spacing": "wordSpacing",
          writingmode: "writingMode",
          "writing-mode": "writingMode",
          x1: "x1",
          x2: "x2",
          x: "x",
          xchannelselector: "xChannelSelector",
          xheight: "xHeight",
          "x-height": "xHeight",
          xlinkactuate: "xlinkActuate",
          "xlink:actuate": "xlinkActuate",
          xlinkarcrole: "xlinkArcrole",
          "xlink:arcrole": "xlinkArcrole",
          xlinkhref: "xlinkHref",
          "xlink:href": "xlinkHref",
          xlinkrole: "xlinkRole",
          "xlink:role": "xlinkRole",
          xlinkshow: "xlinkShow",
          "xlink:show": "xlinkShow",
          xlinktitle: "xlinkTitle",
          "xlink:title": "xlinkTitle",
          xlinktype: "xlinkType",
          "xlink:type": "xlinkType",
          xmlbase: "xmlBase",
          "xml:base": "xmlBase",
          xmllang: "xmlLang",
          "xml:lang": "xmlLang",
          xmlns: "xmlns",
          "xml:space": "xmlSpace",
          xmlnsxlink: "xmlnsXlink",
          "xmlns:xlink": "xmlnsXlink",
          xmlspace: "xmlSpace",
          y1: "y1",
          y2: "y2",
          y: "y",
          ychannelselector: "yChannelSelector",
          z: "z",
          zoomandpan: "zoomAndPan"
        };
        var warnedProperties = {};
        var EVENT_NAME_REGEX = /^on./;
        var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
        var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
        var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
        function validateProperty(tagName, name, value, eventRegistry) {
          {
            if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {
              return true;
            }
            var lowerCasedName = name.toLowerCase();
            if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
              error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
              warnedProperties[name] = true;
              return true;
            }
            {
              if (typeof value === "function") {
                if (tagName === "form" && name === "action") {
                  return true;
                }
                if (tagName === "input" && name === "formAction") {
                  return true;
                }
                if (tagName === "button" && name === "formAction") {
                  return true;
                }
              }
            }
            if (eventRegistry != null) {
              var registrationNameDependencies = eventRegistry.registrationNameDependencies, possibleRegistrationNames = eventRegistry.possibleRegistrationNames;
              if (registrationNameDependencies.hasOwnProperty(name)) {
                return true;
              }
              var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;
              if (registrationName != null) {
                error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                warnedProperties[name] = true;
                return true;
              }
              if (EVENT_NAME_REGEX.test(name)) {
                error("Unknown event handler property `%s`. It will be ignored.", name);
                warnedProperties[name] = true;
                return true;
              }
            } else if (EVENT_NAME_REGEX.test(name)) {
              if (INVALID_EVENT_NAME_REGEX.test(name)) {
                error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
              }
              warnedProperties[name] = true;
              return true;
            }
            if (rARIA.test(name) || rARIACamel.test(name)) {
              return true;
            }
            if (lowerCasedName === "innerhtml") {
              error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
              warnedProperties[name] = true;
              return true;
            }
            if (lowerCasedName === "aria") {
              error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
              warnedProperties[name] = true;
              return true;
            }
            if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
              error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
              warnedProperties[name] = true;
              return true;
            }
            if (typeof value === "number" && isNaN(value)) {
              error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
              warnedProperties[name] = true;
              return true;
            }
            if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              var standardName = possibleStandardNames[lowerCasedName];
              if (standardName !== name) {
                error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties[name] = true;
                return true;
              }
            } else if (name !== lowerCasedName) {
              error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
              warnedProperties[name] = true;
              return true;
            }
            switch (name) {
              case "dangerouslySetInnerHTML":
              case "children":
              case "style":
              case "suppressContentEditableWarning":
              case "suppressHydrationWarning":
              case "defaultValue":
              case "defaultChecked":
              case "innerHTML":
              case "ref": {
                return true;
              }
            }
            switch (typeof value) {
              case "boolean": {
                switch (name) {
                  case "autoFocus":
                  case "checked":
                  case "multiple":
                  case "muted":
                  case "selected":
                  case "contentEditable":
                  case "spellCheck":
                  case "draggable":
                  case "value":
                  case "autoReverse":
                  case "externalResourcesRequired":
                  case "focusable":
                  case "preserveAlpha":
                  case "allowFullScreen":
                  case "async":
                  case "autoPlay":
                  case "controls":
                  case "default":
                  case "defer":
                  case "disabled":
                  case "disablePictureInPicture":
                  case "disableRemotePlayback":
                  case "formNoValidate":
                  case "hidden":
                  case "loop":
                  case "noModule":
                  case "noValidate":
                  case "open":
                  case "playsInline":
                  case "readOnly":
                  case "required":
                  case "reversed":
                  case "scoped":
                  case "seamless":
                  case "itemScope":
                  case "capture":
                  case "download": {
                    return true;
                  }
                  default: {
                    var prefix2 = name.toLowerCase().slice(0, 5);
                    if (prefix2 === "data-" || prefix2 === "aria-") {
                      return true;
                    }
                    if (value) {
                      error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
                    } else {
                      error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
                    }
                    warnedProperties[name] = true;
                    return true;
                  }
                }
              }
              case "function":
              case "symbol":
                warnedProperties[name] = true;
                return false;
              case "string": {
                if (value === "false" || value === "true") {
                  switch (name) {
                    case "checked":
                    case "selected":
                    case "multiple":
                    case "muted":
                    case "allowFullScreen":
                    case "async":
                    case "autoPlay":
                    case "controls":
                    case "default":
                    case "defer":
                    case "disabled":
                    case "disablePictureInPicture":
                    case "disableRemotePlayback":
                    case "formNoValidate":
                    case "hidden":
                    case "loop":
                    case "noModule":
                    case "noValidate":
                    case "open":
                    case "playsInline":
                    case "readOnly":
                    case "required":
                    case "reversed":
                    case "scoped":
                    case "seamless":
                    case "itemScope": {
                      break;
                    }
                    default: {
                      return true;
                    }
                  }
                  error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
                  warnedProperties[name] = true;
                  return true;
                }
              }
            }
            return true;
          }
        }
        function warnUnknownProperties(type, props, eventRegistry) {
          {
            var unknownProps = [];
            for (var key in props) {
              var isValid = validateProperty(type, key, props[key], eventRegistry);
              if (!isValid) {
                unknownProps.push(key);
              }
            }
            var unknownPropString = unknownProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (unknownProps.length === 1) {
              error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
            } else if (unknownProps.length > 1) {
              error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
            }
          }
        }
        function validateProperties(type, props, eventRegistry) {
          if (isCustomElement(type) || typeof props.is === "string") {
            return;
          }
          warnUnknownProperties(type, props, eventRegistry);
        }
        var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
        var msPattern$1 = /^-ms-/;
        var hyphenPattern = /-(.)/g;
        var badStyleValueWithSemicolonPattern = /;\s*$/;
        var warnedStyleNames = {};
        var warnedStyleValues = {};
        var warnedForNaNValue = false;
        var warnedForInfinityValue = false;
        function camelize(string) {
          return string.replace(hyphenPattern, function(_, character) {
            return character.toUpperCase();
          });
        }
        function warnHyphenatedStyleName(name) {
          {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
              return;
            }
            warnedStyleNames[name] = true;
            error(
              "Unsupported style property %s. Did you mean %s?",
              name,
              // As Andi Smith suggests
              // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
              // is converted to lowercase `ms`.
              camelize(name.replace(msPattern$1, "ms-"))
            );
          }
        }
        function warnBadVendoredStyleName(name) {
          {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
              return;
            }
            warnedStyleNames[name] = true;
            error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
          }
        }
        function warnStyleValueWithSemicolon(name, value) {
          {
            if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
              return;
            }
            warnedStyleValues[value] = true;
            error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
          }
        }
        function warnStyleValueIsNaN(name, value) {
          {
            if (warnedForNaNValue) {
              return;
            }
            warnedForNaNValue = true;
            error("`NaN` is an invalid value for the `%s` css style property.", name);
          }
        }
        function warnStyleValueIsInfinity(name, value) {
          {
            if (warnedForInfinityValue) {
              return;
            }
            warnedForInfinityValue = true;
            error("`Infinity` is an invalid value for the `%s` css style property.", name);
          }
        }
        function warnValidStyle(name, value) {
          {
            if (name.indexOf("-") > -1) {
              warnHyphenatedStyleName(name);
            } else if (badVendoredStyleNamePattern.test(name)) {
              warnBadVendoredStyleName(name);
            } else if (badStyleValueWithSemicolonPattern.test(value)) {
              warnStyleValueWithSemicolon(name, value);
            }
            if (typeof value === "number") {
              if (isNaN(value)) {
                warnStyleValueIsNaN(name);
              } else if (!isFinite(value)) {
                warnStyleValueIsInfinity(name);
              }
            }
          }
        }
        function getCrossOriginString(input) {
          if (typeof input === "string") {
            return input === "use-credentials" ? input : "";
          }
          return void 0;
        }
        var matchHtmlRegExp = /["'&<>]/;
        function escapeHtml(string) {
          {
            checkHtmlStringCoercion(string);
          }
          var str = "" + string;
          var match = matchHtmlRegExp.exec(str);
          if (!match) {
            return str;
          }
          var escape;
          var html = "";
          var index;
          var lastIndex = 0;
          for (index = match.index; index < str.length; index++) {
            switch (str.charCodeAt(index)) {
              case 34:
                escape = "&quot;";
                break;
              case 38:
                escape = "&amp;";
                break;
              case 39:
                escape = "&#x27;";
                break;
              case 60:
                escape = "&lt;";
                break;
              case 62:
                escape = "&gt;";
                break;
              default:
                continue;
            }
            if (lastIndex !== index) {
              html += str.slice(lastIndex, index);
            }
            lastIndex = index + 1;
            html += escape;
          }
          return lastIndex !== index ? html + str.slice(lastIndex, index) : html;
        }
        function escapeTextForBrowser(text) {
          if (typeof text === "boolean" || typeof text === "number" || enableBigIntSupport) {
            return "" + text;
          }
          return escapeHtml(text);
        }
        var uppercasePattern = /([A-Z])/g;
        var msPattern = /^ms-/;
        function hyphenateStyleName(name) {
          return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
        }
        var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
        var didWarn = false;
        function sanitizeURL(url) {
          var stringifiedURL = "" + url;
          {
            if (!didWarn && isJavaScriptProtocol.test(stringifiedURL)) {
              didWarn = true;
              error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(stringifiedURL));
            }
          }
          return url;
        }
        var clientRenderBoundary = '$RX=function(b,c,d,e){var a=document.getElementById(b);a&&(b=a.previousSibling,b.data="$!",a=a.dataset,c&&(a.dgst=c),d&&(a.msg=d),e&&(a.stck=e),b._reactRetry&&b._reactRetry())};';
        var completeBoundary = '$RC=function(b,c,e){c=document.getElementById(c);c.parentNode.removeChild(c);var a=document.getElementById(b);if(a){b=a.previousSibling;if(e)b.data="$!",a.setAttribute("data-dgst",e);else{e=b.parentNode;a=b.nextSibling;var f=0;do{if(a&&8===a.nodeType){var d=a.data;if("/$"===d)if(0===f)break;else f--;else"$"!==d&&"$?"!==d&&"$!"!==d||f++}d=a.nextSibling;e.removeChild(a);a=d}while(a);for(;c.firstChild;)e.insertBefore(c.firstChild,a);b.data="$"}b._reactRetry&&b._reactRetry()}};';
        var completeBoundaryWithStyles = '$RM=new Map;\n$RR=function(r,t,w){for(var u=$RC,n=$RM,p=new Map,q=document,g,b,h=q.querySelectorAll("link[data-precedence],style[data-precedence]"),v=[],k=0;b=h[k++];)"not all"===b.getAttribute("media")?v.push(b):("LINK"===b.tagName&&n.set(b.getAttribute("href"),b),p.set(b.dataset.precedence,g=b));b=0;h=[];var l,a;for(k=!0;;){if(k){var f=w[b++];if(!f){k=!1;b=0;continue}var c=!1,m=0;var d=f[m++];if(a=n.get(d)){var e=a._p;c=!0}else{a=q.createElement("link");a.href=d;a.rel="stylesheet";for(a.dataset.precedence=\nl=f[m++];e=f[m++];)a.setAttribute(e,f[m++]);e=a._p=new Promise(function(x,y){a.onload=x;a.onerror=y});n.set(d,a)}d=a.getAttribute("media");!e||"l"===e.s||d&&!matchMedia(d).matches||h.push(e);if(c)continue}else{a=v[b++];if(!a)break;l=a.getAttribute("data-precedence");a.removeAttribute("media")}c=p.get(l)||g;c===g&&(g=a);p.set(l,a);c?c.parentNode.insertBefore(a,c.nextSibling):(c=q.head,c.insertBefore(a,c.firstChild))}Promise.all(h).then(u.bind(null,r,t,""),u.bind(null,r,t,"Resource failed to load"))};';
        var completeSegment = "$RS=function(a,b){a=document.getElementById(a);b=document.getElementById(b);for(a.parentNode.removeChild(a);a.firstChild;)b.parentNode.insertBefore(a.firstChild,b);b.parentNode.removeChild(b)};";
        var formReplaying = `addEventListener("submit",function(a){if(!a.defaultPrevented){var c=a.target,d=a.submitter,e=c.action,b=d;if(d){var f=d.getAttribute("formAction");null!=f&&(e=f,b=null)}"javascript:throw new Error('React form unexpectedly submitted.')"===e&&(a.preventDefault(),b?(a=document.createElement("input"),a.name=b.name,a.value=b.value,b.parentNode.insertBefore(a,b),b=new FormData(c),a.parentNode.removeChild(a)):b=new FormData(c),a=c.ownerDocument||c,(a.$$reactFormReplay=a.$$reactFormReplay||[]).push(c,d,b))}});`;
        function getValueDescriptorExpectingObjectForWarning(thing) {
          return thing === null ? "`null`" : thing === void 0 ? "`undefined`" : thing === "" ? "an empty string" : 'something with type "' + typeof thing + '"';
        }
        var sharedNotPendingObject = {
          pending: false,
          data: null,
          method: null,
          action: null
        };
        var NotPending = Object.freeze(sharedNotPendingObject);
        var ReactDOMSharedInternals = ReactDOM.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        var ReactDOMCurrentDispatcher = ReactDOMSharedInternals.Dispatcher;
        var ReactDOMServerDispatcher = {
          prefetchDNS,
          preconnect,
          preload,
          preloadModule,
          preinitStyle,
          preinitScript,
          preinitModuleScript
        };
        function prepareHostDispatcher() {
          ReactDOMCurrentDispatcher.current = ReactDOMServerDispatcher;
        }
        var ScriptStreamingFormat = 0;
        var DataStreamingFormat = 1;
        var NothingSent = 0;
        var SentCompleteSegmentFunction = 1;
        var SentCompleteBoundaryFunction = 2;
        var SentClientRenderFunction = 4;
        var SentStyleInsertionFunction = 8;
        var SentFormReplayingRuntime = 16;
        var EXISTS = null;
        var PRELOAD_NO_CREDS = [];
        {
          Object.freeze(PRELOAD_NO_CREDS);
        }
        var dataElementQuotedEnd = stringToPrecomputedChunk('"></template>');
        var startInlineScript = stringToPrecomputedChunk("<script>");
        var endInlineScript = stringToPrecomputedChunk("<\/script>");
        var startScriptSrc = stringToPrecomputedChunk('<script src="');
        var startModuleSrc = stringToPrecomputedChunk('<script type="module" src="');
        var scriptNonce = stringToPrecomputedChunk('" nonce="');
        var scriptIntegirty = stringToPrecomputedChunk('" integrity="');
        var scriptCrossOrigin = stringToPrecomputedChunk('" crossorigin="');
        var endAsyncScript = stringToPrecomputedChunk('" async=""><\/script>');
        function escapeBootstrapAndImportMapScriptContent(scriptText) {
          {
            checkHtmlStringCoercion(scriptText);
          }
          return ("" + scriptText).replace(scriptRegex, scriptReplacer);
        }
        var scriptRegex = /(<\/|<)(s)(cript)/gi;
        var scriptReplacer = function(match, prefix2, s, suffix) {
          return "" + prefix2 + (s === "s" ? "\\u0073" : "\\u0053") + suffix;
        };
        var importMapScriptStart = stringToPrecomputedChunk('<script type="importmap">');
        var importMapScriptEnd = stringToPrecomputedChunk("<\/script>");
        var DEFAULT_HEADERS_CAPACITY_IN_UTF16_CODE_UNITS = 2e3;
        function createRenderState$1(resumableState, nonce, externalRuntimeConfig, importMap, onHeaders, maxHeadersLength) {
          var inlineScriptWithNonce = nonce === void 0 ? startInlineScript : stringToPrecomputedChunk('<script nonce="' + escapeTextForBrowser(nonce) + '">');
          var idPrefix = resumableState.idPrefix;
          var bootstrapChunks = [];
          var externalRuntimeScript = null;
          var bootstrapScriptContent = resumableState.bootstrapScriptContent, bootstrapScripts = resumableState.bootstrapScripts, bootstrapModules = resumableState.bootstrapModules;
          if (bootstrapScriptContent !== void 0) {
            bootstrapChunks.push(inlineScriptWithNonce, stringToChunk(escapeBootstrapAndImportMapScriptContent(bootstrapScriptContent)), endInlineScript);
          }
          {
            if (externalRuntimeConfig !== void 0) {
              if (typeof externalRuntimeConfig === "string") {
                externalRuntimeScript = {
                  src: externalRuntimeConfig,
                  chunks: []
                };
                pushScriptImpl(externalRuntimeScript.chunks, {
                  src: externalRuntimeConfig,
                  async: true,
                  integrity: void 0,
                  nonce
                });
              } else {
                externalRuntimeScript = {
                  src: externalRuntimeConfig.src,
                  chunks: []
                };
                pushScriptImpl(externalRuntimeScript.chunks, {
                  src: externalRuntimeConfig.src,
                  async: true,
                  integrity: externalRuntimeConfig.integrity,
                  nonce
                });
              }
            }
          }
          var importMapChunks = [];
          if (importMap !== void 0) {
            var map = importMap;
            importMapChunks.push(importMapScriptStart);
            importMapChunks.push(stringToChunk(escapeBootstrapAndImportMapScriptContent(JSON.stringify(map))));
            importMapChunks.push(importMapScriptEnd);
          }
          {
            if (onHeaders && typeof maxHeadersLength === "number") {
              if (maxHeadersLength <= 0) {
                error("React expected a positive non-zero `maxHeadersLength` option but found %s instead. When using the `onHeaders` option you may supply an optional `maxHeadersLength` option as well however, when setting this value to zero or less no headers will be captured.", maxHeadersLength === 0 ? "zero" : maxHeadersLength);
              }
            }
          }
          var headers = onHeaders ? {
            preconnects: "",
            fontPreloads: "",
            highImagePreloads: "",
            remainingCapacity: typeof maxHeadersLength === "number" ? maxHeadersLength : DEFAULT_HEADERS_CAPACITY_IN_UTF16_CODE_UNITS
          } : null;
          var renderState = {
            placeholderPrefix: stringToPrecomputedChunk(idPrefix + "P:"),
            segmentPrefix: stringToPrecomputedChunk(idPrefix + "S:"),
            boundaryPrefix: stringToPrecomputedChunk(idPrefix + "B:"),
            startInlineScript: inlineScriptWithNonce,
            htmlChunks: null,
            headChunks: null,
            externalRuntimeScript,
            bootstrapChunks,
            importMapChunks,
            onHeaders,
            headers,
            resets: {
              font: {},
              dns: {},
              connect: {
                default: {},
                anonymous: {},
                credentials: {}
              },
              image: {},
              style: {}
            },
            charsetChunks: [],
            viewportChunks: [],
            hoistableChunks: [],
            // cleared on flush
            preconnects: /* @__PURE__ */ new Set(),
            fontPreloads: /* @__PURE__ */ new Set(),
            highImagePreloads: /* @__PURE__ */ new Set(),
            // usedImagePreloads: new Set(),
            styles: /* @__PURE__ */ new Map(),
            bootstrapScripts: /* @__PURE__ */ new Set(),
            scripts: /* @__PURE__ */ new Set(),
            bulkPreloads: /* @__PURE__ */ new Set(),
            preloads: {
              images: /* @__PURE__ */ new Map(),
              stylesheets: /* @__PURE__ */ new Map(),
              scripts: /* @__PURE__ */ new Map(),
              moduleScripts: /* @__PURE__ */ new Map()
            },
            nonce,
            // like a module global for currently rendering boundary
            hoistableState: null,
            stylesToHoist: false
          };
          if (bootstrapScripts !== void 0) {
            for (var i = 0; i < bootstrapScripts.length; i++) {
              var scriptConfig = bootstrapScripts[i];
              var src = void 0, crossOrigin = void 0, integrity = void 0;
              var props = {
                rel: "preload",
                as: "script",
                fetchPriority: "low",
                nonce
              };
              if (typeof scriptConfig === "string") {
                props.href = src = scriptConfig;
              } else {
                props.href = src = scriptConfig.src;
                props.integrity = integrity = typeof scriptConfig.integrity === "string" ? scriptConfig.integrity : void 0;
                props.crossOrigin = crossOrigin = typeof scriptConfig === "string" || scriptConfig.crossOrigin == null ? void 0 : scriptConfig.crossOrigin === "use-credentials" ? "use-credentials" : "";
              }
              preloadBootstrapScriptOrModule(resumableState, renderState, src, props);
              bootstrapChunks.push(startScriptSrc, stringToChunk(escapeTextForBrowser(src)));
              if (nonce) {
                bootstrapChunks.push(scriptNonce, stringToChunk(escapeTextForBrowser(nonce)));
              }
              if (typeof integrity === "string") {
                bootstrapChunks.push(scriptIntegirty, stringToChunk(escapeTextForBrowser(integrity)));
              }
              if (typeof crossOrigin === "string") {
                bootstrapChunks.push(scriptCrossOrigin, stringToChunk(escapeTextForBrowser(crossOrigin)));
              }
              bootstrapChunks.push(endAsyncScript);
            }
          }
          if (bootstrapModules !== void 0) {
            for (var _i = 0; _i < bootstrapModules.length; _i++) {
              var _scriptConfig = bootstrapModules[_i];
              var _src = void 0, _crossOrigin = void 0, _integrity = void 0;
              var _props = {
                rel: "modulepreload",
                fetchPriority: "low",
                nonce
              };
              if (typeof _scriptConfig === "string") {
                _props.href = _src = _scriptConfig;
              } else {
                _props.href = _src = _scriptConfig.src;
                _props.integrity = _integrity = typeof _scriptConfig.integrity === "string" ? _scriptConfig.integrity : void 0;
                _props.crossOrigin = _crossOrigin = typeof _scriptConfig === "string" || _scriptConfig.crossOrigin == null ? void 0 : _scriptConfig.crossOrigin === "use-credentials" ? "use-credentials" : "";
              }
              preloadBootstrapScriptOrModule(resumableState, renderState, _src, _props);
              bootstrapChunks.push(startModuleSrc, stringToChunk(escapeTextForBrowser(_src)));
              if (nonce) {
                bootstrapChunks.push(scriptNonce, stringToChunk(escapeTextForBrowser(nonce)));
              }
              if (typeof _integrity === "string") {
                bootstrapChunks.push(scriptIntegirty, stringToChunk(escapeTextForBrowser(_integrity)));
              }
              if (typeof _crossOrigin === "string") {
                bootstrapChunks.push(scriptCrossOrigin, stringToChunk(escapeTextForBrowser(_crossOrigin)));
              }
              bootstrapChunks.push(endAsyncScript);
            }
          }
          return renderState;
        }
        function createResumableState(identifierPrefix, externalRuntimeConfig, bootstrapScriptContent, bootstrapScripts, bootstrapModules) {
          var idPrefix = identifierPrefix === void 0 ? "" : identifierPrefix;
          var streamingFormat = ScriptStreamingFormat;
          {
            if (externalRuntimeConfig !== void 0) {
              streamingFormat = DataStreamingFormat;
            }
          }
          return {
            idPrefix,
            nextFormID: 0,
            streamingFormat,
            bootstrapScriptContent,
            bootstrapScripts,
            bootstrapModules,
            instructions: NothingSent,
            hasBody: false,
            hasHtml: false,
            // @TODO add bootstrap script to implicit preloads
            // persistent
            unknownResources: {},
            dnsResources: {},
            connectResources: {
              default: {},
              anonymous: {},
              credentials: {}
            },
            imageResources: {},
            styleResources: {},
            scriptResources: {},
            moduleUnknownResources: {},
            moduleScriptResources: {}
          };
        }
        var ROOT_HTML_MODE = 0;
        var HTML_HTML_MODE = 1;
        var HTML_MODE = 2;
        var SVG_MODE = 3;
        var MATHML_MODE = 4;
        var HTML_TABLE_MODE = 5;
        var HTML_TABLE_BODY_MODE = 6;
        var HTML_TABLE_ROW_MODE = 7;
        var HTML_COLGROUP_MODE = 8;
        var NO_SCOPE = (
          /*         */
          0
        );
        var NOSCRIPT_SCOPE = (
          /*   */
          1
        );
        var PICTURE_SCOPE = (
          /*    */
          2
        );
        function createFormatContext(insertionMode, selectedValue, tagScope) {
          return {
            insertionMode,
            selectedValue,
            tagScope
          };
        }
        function createRootFormatContext(namespaceURI) {
          var insertionMode = namespaceURI === "http://www.w3.org/2000/svg" ? SVG_MODE : namespaceURI === "http://www.w3.org/1998/Math/MathML" ? MATHML_MODE : ROOT_HTML_MODE;
          return createFormatContext(insertionMode, null, NO_SCOPE);
        }
        function getChildFormatContext(parentContext, type, props) {
          switch (type) {
            case "noscript":
              return createFormatContext(HTML_MODE, null, parentContext.tagScope | NOSCRIPT_SCOPE);
            case "select":
              return createFormatContext(HTML_MODE, props.value != null ? props.value : props.defaultValue, parentContext.tagScope);
            case "svg":
              return createFormatContext(SVG_MODE, null, parentContext.tagScope);
            case "picture":
              return createFormatContext(HTML_MODE, null, parentContext.tagScope | PICTURE_SCOPE);
            case "math":
              return createFormatContext(MATHML_MODE, null, parentContext.tagScope);
            case "foreignObject":
              return createFormatContext(HTML_MODE, null, parentContext.tagScope);
            case "table":
              return createFormatContext(HTML_TABLE_MODE, null, parentContext.tagScope);
            case "thead":
            case "tbody":
            case "tfoot":
              return createFormatContext(HTML_TABLE_BODY_MODE, null, parentContext.tagScope);
            case "colgroup":
              return createFormatContext(HTML_COLGROUP_MODE, null, parentContext.tagScope);
            case "tr":
              return createFormatContext(HTML_TABLE_ROW_MODE, null, parentContext.tagScope);
          }
          if (parentContext.insertionMode >= HTML_TABLE_MODE) {
            return createFormatContext(HTML_MODE, null, parentContext.tagScope);
          }
          if (parentContext.insertionMode === ROOT_HTML_MODE) {
            if (type === "html") {
              return createFormatContext(HTML_HTML_MODE, null, parentContext.tagScope);
            } else {
              return createFormatContext(HTML_MODE, null, parentContext.tagScope);
            }
          } else if (parentContext.insertionMode === HTML_HTML_MODE) {
            return createFormatContext(HTML_MODE, null, parentContext.tagScope);
          }
          return parentContext;
        }
        function makeId(resumableState, treeId, localId) {
          var idPrefix = resumableState.idPrefix;
          var id = ":" + idPrefix + "R" + treeId;
          if (localId > 0) {
            id += "H" + localId.toString(32);
          }
          return id + ":";
        }
        function encodeHTMLTextNode(text) {
          return escapeTextForBrowser(text);
        }
        var textSeparator = stringToPrecomputedChunk("<!-- -->");
        function pushTextInstance$1(target, text, renderState, textEmbedded) {
          if (text === "") {
            return textEmbedded;
          }
          if (textEmbedded) {
            target.push(textSeparator);
          }
          target.push(stringToChunk(encodeHTMLTextNode(text)));
          return true;
        }
        function pushSegmentFinale$1(target, renderState, lastPushedText, textEmbedded) {
          if (lastPushedText && textEmbedded) {
            target.push(textSeparator);
          }
        }
        var styleNameCache = /* @__PURE__ */ new Map();
        function processStyleName(styleName) {
          var chunk = styleNameCache.get(styleName);
          if (chunk !== void 0) {
            return chunk;
          }
          var result = stringToPrecomputedChunk(escapeTextForBrowser(hyphenateStyleName(styleName)));
          styleNameCache.set(styleName, result);
          return result;
        }
        var styleAttributeStart = stringToPrecomputedChunk(' style="');
        var styleAssign = stringToPrecomputedChunk(":");
        var styleSeparator = stringToPrecomputedChunk(";");
        function pushStyleAttribute(target, style) {
          if (typeof style !== "object") {
            throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
          }
          var isFirst = true;
          for (var styleName in style) {
            if (!hasOwnProperty.call(style, styleName)) {
              continue;
            }
            var styleValue = style[styleName];
            if (styleValue == null || typeof styleValue === "boolean" || styleValue === "") {
              continue;
            }
            var nameChunk = void 0;
            var valueChunk = void 0;
            var isCustomProperty = styleName.indexOf("--") === 0;
            if (isCustomProperty) {
              nameChunk = stringToChunk(escapeTextForBrowser(styleName));
              {
                checkCSSPropertyStringCoercion(styleValue, styleName);
              }
              valueChunk = stringToChunk(escapeTextForBrowser(("" + styleValue).trim()));
            } else {
              {
                warnValidStyle(styleName, styleValue);
              }
              nameChunk = processStyleName(styleName);
              if (typeof styleValue === "number") {
                if (styleValue !== 0 && !isUnitlessNumber(styleName)) {
                  valueChunk = stringToChunk(styleValue + "px");
                } else {
                  valueChunk = stringToChunk("" + styleValue);
                }
              } else {
                {
                  checkCSSPropertyStringCoercion(styleValue, styleName);
                }
                valueChunk = stringToChunk(escapeTextForBrowser(("" + styleValue).trim()));
              }
            }
            if (isFirst) {
              isFirst = false;
              target.push(styleAttributeStart, nameChunk, styleAssign, valueChunk);
            } else {
              target.push(styleSeparator, nameChunk, styleAssign, valueChunk);
            }
          }
          if (!isFirst) {
            target.push(attributeEnd);
          }
        }
        var attributeSeparator = stringToPrecomputedChunk(" ");
        var attributeAssign = stringToPrecomputedChunk('="');
        var attributeEnd = stringToPrecomputedChunk('"');
        var attributeEmptyString = stringToPrecomputedChunk('=""');
        function pushBooleanAttribute(target, name, value) {
          if (value && typeof value !== "function" && typeof value !== "symbol") {
            target.push(attributeSeparator, stringToChunk(name), attributeEmptyString);
          }
        }
        function pushStringAttribute(target, name, value) {
          if (typeof value !== "function" && typeof value !== "symbol" && typeof value !== "boolean") {
            target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
          }
        }
        function makeFormFieldPrefix(resumableState) {
          var id = resumableState.nextFormID++;
          return resumableState.idPrefix + id;
        }
        var actionJavaScriptURL = stringToPrecomputedChunk(escapeTextForBrowser(
          // eslint-disable-next-line no-script-url
          "javascript:throw new Error('React form unexpectedly submitted.')"
        ));
        var startHiddenInputChunk = stringToPrecomputedChunk('<input type="hidden"');
        function pushAdditionalFormField(value, key) {
          var target = this;
          target.push(startHiddenInputChunk);
          if (typeof value !== "string") {
            throw new Error("File/Blob fields are not yet supported in progressive forms. It probably means you are closing over binary data or FormData in a Server Action.");
          }
          pushStringAttribute(target, "name", key);
          pushStringAttribute(target, "value", value);
          target.push(endOfStartTagSelfClosing);
        }
        function pushAdditionalFormFields(target, formData) {
          if (formData !== null) {
            formData.forEach(pushAdditionalFormField, target);
          }
        }
        function pushFormActionAttribute(target, resumableState, renderState, formAction, formEncType, formMethod, formTarget, name) {
          var formData = null;
          if (typeof formAction === "function") {
            {
              if (name !== null && !didWarnFormActionName) {
                didWarnFormActionName = true;
                error('Cannot specify a "name" prop for a button that specifies a function as a formAction. React needs it to encode which action should be invoked. It will get overridden.');
              }
              if ((formEncType !== null || formMethod !== null) && !didWarnFormActionMethod) {
                didWarnFormActionMethod = true;
                error("Cannot specify a formEncType or formMethod for a button that specifies a function as a formAction. React provides those automatically. They will get overridden.");
              }
              if (formTarget !== null && !didWarnFormActionTarget) {
                didWarnFormActionTarget = true;
                error("Cannot specify a formTarget for a button that specifies a function as a formAction. The function will always be executed in the same window.");
              }
            }
            var customAction = formAction.$$FORM_ACTION;
            if (typeof customAction === "function") {
              var prefix2 = makeFormFieldPrefix(resumableState);
              var customFields = formAction.$$FORM_ACTION(prefix2);
              name = customFields.name;
              formAction = customFields.action || "";
              formEncType = customFields.encType;
              formMethod = customFields.method;
              formTarget = customFields.target;
              formData = customFields.data;
            } else {
              target.push(attributeSeparator, stringToChunk("formAction"), attributeAssign, actionJavaScriptURL, attributeEnd);
              name = null;
              formAction = null;
              formEncType = null;
              formMethod = null;
              formTarget = null;
              injectFormReplayingRuntime(resumableState, renderState);
            }
          }
          if (name != null) {
            pushAttribute(target, "name", name);
          }
          if (formAction != null) {
            pushAttribute(target, "formAction", formAction);
          }
          if (formEncType != null) {
            pushAttribute(target, "formEncType", formEncType);
          }
          if (formMethod != null) {
            pushAttribute(target, "formMethod", formMethod);
          }
          if (formTarget != null) {
            pushAttribute(target, "formTarget", formTarget);
          }
          return formData;
        }
        function pushAttribute(target, name, value) {
          switch (name) {
            case "className": {
              pushStringAttribute(target, "class", value);
              break;
            }
            case "tabIndex": {
              pushStringAttribute(target, "tabindex", value);
              break;
            }
            case "dir":
            case "role":
            case "viewBox":
            case "width":
            case "height": {
              pushStringAttribute(target, name, value);
              break;
            }
            case "style": {
              pushStyleAttribute(target, value);
              return;
            }
            case "src":
            case "href":
            case "action":
            case "formAction": {
              if (value == null || typeof value === "function" || typeof value === "symbol" || typeof value === "boolean") {
                return;
              }
              {
                checkAttributeStringCoercion(value, name);
              }
              var sanitizedValue = sanitizeURL("" + value);
              target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(sanitizedValue)), attributeEnd);
              return;
            }
            case "defaultValue":
            case "defaultChecked":
            case "innerHTML":
            case "suppressContentEditableWarning":
            case "suppressHydrationWarning":
            case "ref":
              return;
            case "autoFocus":
            case "multiple":
            case "muted": {
              pushBooleanAttribute(target, name.toLowerCase(), value);
              return;
            }
            case "xlinkHref": {
              if (typeof value === "function" || typeof value === "symbol" || typeof value === "boolean") {
                return;
              }
              {
                checkAttributeStringCoercion(value, name);
              }
              var _sanitizedValue = sanitizeURL("" + value);
              target.push(attributeSeparator, stringToChunk("xlink:href"), attributeAssign, stringToChunk(escapeTextForBrowser(_sanitizedValue)), attributeEnd);
              return;
            }
            case "contentEditable":
            case "spellCheck":
            case "draggable":
            case "value":
            case "autoReverse":
            case "externalResourcesRequired":
            case "focusable":
            case "preserveAlpha": {
              if (typeof value !== "function" && typeof value !== "symbol") {
                target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
              }
              return;
            }
            case "allowFullScreen":
            case "async":
            case "autoPlay":
            case "controls":
            case "default":
            case "defer":
            case "disabled":
            case "disablePictureInPicture":
            case "disableRemotePlayback":
            case "formNoValidate":
            case "hidden":
            case "loop":
            case "noModule":
            case "noValidate":
            case "open":
            case "playsInline":
            case "readOnly":
            case "required":
            case "reversed":
            case "scoped":
            case "seamless":
            case "itemScope": {
              if (value && typeof value !== "function" && typeof value !== "symbol") {
                target.push(attributeSeparator, stringToChunk(name), attributeEmptyString);
              }
              return;
            }
            case "capture":
            case "download": {
              if (value === true) {
                target.push(attributeSeparator, stringToChunk(name), attributeEmptyString);
              } else if (value === false) ;
              else if (typeof value !== "function" && typeof value !== "symbol") {
                target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
              }
              return;
            }
            case "cols":
            case "rows":
            case "size":
            case "span": {
              if (typeof value !== "function" && typeof value !== "symbol" && !isNaN(value) && value >= 1) {
                target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
              }
              return;
            }
            case "rowSpan":
            case "start": {
              if (typeof value !== "function" && typeof value !== "symbol" && !isNaN(value)) {
                target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
              }
              return;
            }
            case "xlinkActuate":
              pushStringAttribute(target, "xlink:actuate", value);
              return;
            case "xlinkArcrole":
              pushStringAttribute(target, "xlink:arcrole", value);
              return;
            case "xlinkRole":
              pushStringAttribute(target, "xlink:role", value);
              return;
            case "xlinkShow":
              pushStringAttribute(target, "xlink:show", value);
              return;
            case "xlinkTitle":
              pushStringAttribute(target, "xlink:title", value);
              return;
            case "xlinkType":
              pushStringAttribute(target, "xlink:type", value);
              return;
            case "xmlBase":
              pushStringAttribute(target, "xml:base", value);
              return;
            case "xmlLang":
              pushStringAttribute(target, "xml:lang", value);
              return;
            case "xmlSpace":
              pushStringAttribute(target, "xml:space", value);
              return;
            default:
              if (
                // shouldIgnoreAttribute
                // We have already filtered out null/undefined and reserved words.
                name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")
              ) {
                return;
              }
              var attributeName = getAttributeAlias(name);
              if (isAttributeNameSafe(attributeName)) {
                switch (typeof value) {
                  case "function":
                  case "symbol":
                    return;
                  case "boolean": {
                    var prefix2 = attributeName.toLowerCase().slice(0, 5);
                    if (prefix2 !== "data-" && prefix2 !== "aria-") {
                      return;
                    }
                  }
                }
                target.push(attributeSeparator, stringToChunk(attributeName), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
              }
          }
        }
        var endOfStartTag = stringToPrecomputedChunk(">");
        var endOfStartTagSelfClosing = stringToPrecomputedChunk("/>");
        function pushInnerHTML(target, innerHTML, children) {
          if (innerHTML != null) {
            if (children != null) {
              throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
            }
            if (typeof innerHTML !== "object" || !("__html" in innerHTML)) {
              throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
            }
            var html = innerHTML.__html;
            if (html !== null && html !== void 0) {
              {
                checkHtmlStringCoercion(html);
              }
              target.push(stringToChunk("" + html));
            }
          }
        }
        var didWarnDefaultInputValue = false;
        var didWarnDefaultChecked = false;
        var didWarnDefaultSelectValue = false;
        var didWarnDefaultTextareaValue = false;
        var didWarnInvalidOptionChildren = false;
        var didWarnInvalidOptionInnerHTML = false;
        var didWarnSelectedSetOnOption = false;
        var didWarnFormActionType = false;
        var didWarnFormActionName = false;
        var didWarnFormActionTarget = false;
        var didWarnFormActionMethod = false;
        function checkSelectProp(props, propName) {
          {
            var value = props[propName];
            if (value != null) {
              var array = isArray(value);
              if (props.multiple && !array) {
                error("The `%s` prop supplied to <select> must be an array if `multiple` is true.", propName);
              } else if (!props.multiple && array) {
                error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.", propName);
              }
            }
          }
        }
        function pushStartSelect(target, props) {
          {
            checkControlledValueProps("select", props);
            checkSelectProp(props, "value");
            checkSelectProp(props, "defaultValue");
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultSelectValue) {
              error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
              didWarnDefaultSelectValue = true;
            }
          }
          target.push(startChunkForTag("select"));
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                case "defaultValue":
                case "value":
                  break;
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          pushInnerHTML(target, innerHTML, children);
          return children;
        }
        function flattenOptionChildren(children) {
          var content = "";
          React.Children.forEach(children, function(child) {
            if (child == null) {
              return;
            }
            content += child;
            {
              if (!didWarnInvalidOptionChildren && typeof child !== "string" && typeof child !== "number" && !enableBigIntSupport) {
                didWarnInvalidOptionChildren = true;
                error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
              }
            }
          });
          return content;
        }
        var selectedMarkerAttribute = stringToPrecomputedChunk(' selected=""');
        function pushStartOption(target, props, formatContext) {
          var selectedValue = formatContext.selectedValue;
          target.push(startChunkForTag("option"));
          var children = null;
          var value = null;
          var selected = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "selected":
                  selected = propValue;
                  {
                    if (!didWarnSelectedSetOnOption) {
                      error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                      didWarnSelectedSetOnOption = true;
                    }
                  }
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                case "value":
                  value = propValue;
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          if (selectedValue != null) {
            var stringValue;
            if (value !== null) {
              {
                checkAttributeStringCoercion(value, "value");
              }
              stringValue = "" + value;
            } else {
              {
                if (innerHTML !== null) {
                  if (!didWarnInvalidOptionInnerHTML) {
                    didWarnInvalidOptionInnerHTML = true;
                    error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                  }
                }
              }
              stringValue = flattenOptionChildren(children);
            }
            if (isArray(selectedValue)) {
              for (var i = 0; i < selectedValue.length; i++) {
                {
                  checkAttributeStringCoercion(selectedValue[i], "value");
                }
                var v = "" + selectedValue[i];
                if (v === stringValue) {
                  target.push(selectedMarkerAttribute);
                  break;
                }
              }
            } else {
              {
                checkAttributeStringCoercion(selectedValue, "select.value");
              }
              if ("" + selectedValue === stringValue) {
                target.push(selectedMarkerAttribute);
              }
            }
          } else if (selected) {
            target.push(selectedMarkerAttribute);
          }
          target.push(endOfStartTag);
          pushInnerHTML(target, innerHTML, children);
          return children;
        }
        var formReplayingRuntimeScript = stringToPrecomputedChunk(formReplaying);
        function injectFormReplayingRuntime(resumableState, renderState) {
          if ((resumableState.instructions & SentFormReplayingRuntime) === NothingSent && !renderState.externalRuntimeScript) {
            resumableState.instructions |= SentFormReplayingRuntime;
            renderState.bootstrapChunks.unshift(renderState.startInlineScript, formReplayingRuntimeScript, endInlineScript);
          }
        }
        var formStateMarkerIsMatching = stringToPrecomputedChunk("<!--F!-->");
        var formStateMarkerIsNotMatching = stringToPrecomputedChunk("<!--F-->");
        function pushFormStateMarkerIsMatching(target) {
          target.push(formStateMarkerIsMatching);
        }
        function pushFormStateMarkerIsNotMatching(target) {
          target.push(formStateMarkerIsNotMatching);
        }
        function pushStartForm(target, props, resumableState, renderState) {
          target.push(startChunkForTag("form"));
          var children = null;
          var innerHTML = null;
          var formAction = null;
          var formEncType = null;
          var formMethod = null;
          var formTarget = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                case "action":
                  formAction = propValue;
                  break;
                case "encType":
                  formEncType = propValue;
                  break;
                case "method":
                  formMethod = propValue;
                  break;
                case "target":
                  formTarget = propValue;
                  break;
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          var formData = null;
          var formActionName = null;
          if (typeof formAction === "function") {
            {
              if ((formEncType !== null || formMethod !== null) && !didWarnFormActionMethod) {
                didWarnFormActionMethod = true;
                error("Cannot specify a encType or method for a form that specifies a function as the action. React provides those automatically. They will get overridden.");
              }
              if (formTarget !== null && !didWarnFormActionTarget) {
                didWarnFormActionTarget = true;
                error("Cannot specify a target for a form that specifies a function as the action. The function will always be executed in the same window.");
              }
            }
            var customAction = formAction.$$FORM_ACTION;
            if (typeof customAction === "function") {
              var prefix2 = makeFormFieldPrefix(resumableState);
              var customFields = formAction.$$FORM_ACTION(prefix2);
              formAction = customFields.action || "";
              formEncType = customFields.encType;
              formMethod = customFields.method;
              formTarget = customFields.target;
              formData = customFields.data;
              formActionName = customFields.name;
            } else {
              target.push(attributeSeparator, stringToChunk("action"), attributeAssign, actionJavaScriptURL, attributeEnd);
              formAction = null;
              formEncType = null;
              formMethod = null;
              formTarget = null;
              injectFormReplayingRuntime(resumableState, renderState);
            }
          }
          if (formAction != null) {
            pushAttribute(target, "action", formAction);
          }
          if (formEncType != null) {
            pushAttribute(target, "encType", formEncType);
          }
          if (formMethod != null) {
            pushAttribute(target, "method", formMethod);
          }
          if (formTarget != null) {
            pushAttribute(target, "target", formTarget);
          }
          target.push(endOfStartTag);
          if (formActionName !== null) {
            target.push(startHiddenInputChunk);
            pushStringAttribute(target, "name", formActionName);
            target.push(endOfStartTagSelfClosing);
            pushAdditionalFormFields(target, formData);
          }
          pushInnerHTML(target, innerHTML, children);
          if (typeof children === "string") {
            target.push(stringToChunk(encodeHTMLTextNode(children)));
            return null;
          }
          return children;
        }
        function pushInput(target, props, resumableState, renderState) {
          {
            checkControlledValueProps("input", props);
          }
          target.push(startChunkForTag("input"));
          var name = null;
          var formAction = null;
          var formEncType = null;
          var formMethod = null;
          var formTarget = null;
          var value = null;
          var defaultValue = null;
          var checked = null;
          var defaultChecked = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                case "dangerouslySetInnerHTML":
                  throw new Error("input is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                case "name":
                  name = propValue;
                  break;
                case "formAction":
                  formAction = propValue;
                  break;
                case "formEncType":
                  formEncType = propValue;
                  break;
                case "formMethod":
                  formMethod = propValue;
                  break;
                case "formTarget":
                  formTarget = propValue;
                  break;
                case "defaultChecked":
                  defaultChecked = propValue;
                  break;
                case "defaultValue":
                  defaultValue = propValue;
                  break;
                case "checked":
                  checked = propValue;
                  break;
                case "value":
                  value = propValue;
                  break;
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          {
            if (formAction !== null && props.type !== "image" && props.type !== "submit" && !didWarnFormActionType) {
              didWarnFormActionType = true;
              error('An input can only specify a formAction along with type="submit" or type="image".');
            }
          }
          var formData = pushFormActionAttribute(target, resumableState, renderState, formAction, formEncType, formMethod, formTarget, name);
          {
            if (checked !== null && defaultChecked !== null && !didWarnDefaultChecked) {
              error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", "A component", props.type);
              didWarnDefaultChecked = true;
            }
            if (value !== null && defaultValue !== null && !didWarnDefaultInputValue) {
              error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", "A component", props.type);
              didWarnDefaultInputValue = true;
            }
          }
          if (checked !== null) {
            pushBooleanAttribute(target, "checked", checked);
          } else if (defaultChecked !== null) {
            pushBooleanAttribute(target, "checked", defaultChecked);
          }
          if (value !== null) {
            pushAttribute(target, "value", value);
          } else if (defaultValue !== null) {
            pushAttribute(target, "value", defaultValue);
          }
          target.push(endOfStartTagSelfClosing);
          pushAdditionalFormFields(target, formData);
          return null;
        }
        function pushStartButton(target, props, resumableState, renderState) {
          target.push(startChunkForTag("button"));
          var children = null;
          var innerHTML = null;
          var name = null;
          var formAction = null;
          var formEncType = null;
          var formMethod = null;
          var formTarget = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                case "name":
                  name = propValue;
                  break;
                case "formAction":
                  formAction = propValue;
                  break;
                case "formEncType":
                  formEncType = propValue;
                  break;
                case "formMethod":
                  formMethod = propValue;
                  break;
                case "formTarget":
                  formTarget = propValue;
                  break;
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          {
            if (formAction !== null && props.type != null && props.type !== "submit" && !didWarnFormActionType) {
              didWarnFormActionType = true;
              error('A button can only specify a formAction along with type="submit" or no type.');
            }
          }
          var formData = pushFormActionAttribute(target, resumableState, renderState, formAction, formEncType, formMethod, formTarget, name);
          target.push(endOfStartTag);
          pushAdditionalFormFields(target, formData);
          pushInnerHTML(target, innerHTML, children);
          if (typeof children === "string") {
            target.push(stringToChunk(encodeHTMLTextNode(children)));
            return null;
          }
          return children;
        }
        function pushStartTextArea(target, props) {
          {
            checkControlledValueProps("textarea", props);
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultTextareaValue) {
              error("Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components");
              didWarnDefaultTextareaValue = true;
            }
          }
          target.push(startChunkForTag("textarea"));
          var value = null;
          var defaultValue = null;
          var children = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "value":
                  value = propValue;
                  break;
                case "defaultValue":
                  defaultValue = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          if (value === null && defaultValue !== null) {
            value = defaultValue;
          }
          target.push(endOfStartTag);
          if (children != null) {
            {
              error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
            }
            if (value != null) {
              throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
            }
            if (isArray(children)) {
              if (children.length > 1) {
                throw new Error("<textarea> can only have at most one child.");
              }
              {
                checkHtmlStringCoercion(children[0]);
              }
              value = "" + children[0];
            }
            {
              checkHtmlStringCoercion(children);
            }
            value = "" + children;
          }
          if (typeof value === "string" && value[0] === "\n") {
            target.push(leadingNewline);
          }
          if (value !== null) {
            {
              checkAttributeStringCoercion(value, "value");
            }
            target.push(stringToChunk(encodeHTMLTextNode("" + value)));
          }
          return null;
        }
        function pushMeta(target, props, renderState, textEmbedded, insertionMode, noscriptTagInScope, isFallback) {
          {
            if (insertionMode === SVG_MODE || noscriptTagInScope || props.itemProp != null) {
              return pushSelfClosing(target, props, "meta");
            } else {
              if (textEmbedded) {
                target.push(textSeparator);
              }
              if (isFallback) {
                return null;
              } else if (typeof props.charSet === "string") {
                return pushSelfClosing(renderState.charsetChunks, props, "meta");
              } else if (props.name === "viewport") {
                return pushSelfClosing(renderState.viewportChunks, props, "meta");
              } else {
                return pushSelfClosing(renderState.hoistableChunks, props, "meta");
              }
            }
          }
        }
        function pushLink(target, props, resumableState, renderState, hoistableState, textEmbedded, insertionMode, noscriptTagInScope, isFallback) {
          {
            var rel = props.rel;
            var href = props.href;
            var precedence = props.precedence;
            if (insertionMode === SVG_MODE || noscriptTagInScope || props.itemProp != null || typeof rel !== "string" || typeof href !== "string" || href === "") {
              {
                if (rel === "stylesheet" && typeof props.precedence === "string") {
                  if (typeof href !== "string" || !href) {
                    error('React encountered a `<link rel="stylesheet" .../>` with a `precedence` prop and expected the `href` prop to be a non-empty string but ecountered %s instead. If your intent was to have React hoist and deduplciate this stylesheet using the `precedence` prop ensure there is a non-empty string `href` prop as well, otherwise remove the `precedence` prop.', getValueDescriptorExpectingObjectForWarning(href));
                  }
                }
              }
              pushLinkImpl(target, props);
              return null;
            }
            if (props.rel === "stylesheet") {
              var key = getResourceKey(href);
              if (typeof precedence !== "string" || props.disabled != null || props.onLoad || props.onError) {
                {
                  if (typeof precedence === "string") {
                    if (props.disabled != null) {
                      error('React encountered a `<link rel="stylesheet" .../>` with a `precedence` prop and a `disabled` prop. The presence of the `disabled` prop indicates an intent to manage the stylesheet active state from your from your Component code and React will not hoist or deduplicate this stylesheet. If your intent was to have React hoist and deduplciate this stylesheet using the `precedence` prop remove the `disabled` prop, otherwise remove the `precedence` prop.');
                    } else if (props.onLoad || props.onError) {
                      var propDescription = props.onLoad && props.onError ? "`onLoad` and `onError` props" : props.onLoad ? "`onLoad` prop" : "`onError` prop";
                      error('React encountered a `<link rel="stylesheet" .../>` with a `precedence` prop and %s. The presence of loading and error handlers indicates an intent to manage the stylesheet loading state from your from your Component code and React will not hoist or deduplicate this stylesheet. If your intent was to have React hoist and deduplciate this stylesheet using the `precedence` prop remove the %s, otherwise remove the `precedence` prop.', propDescription, propDescription);
                    }
                  }
                }
                return pushLinkImpl(target, props);
              } else {
                var styleQueue = renderState.styles.get(precedence);
                var hasKey = resumableState.styleResources.hasOwnProperty(key);
                var resourceState = hasKey ? resumableState.styleResources[key] : void 0;
                if (resourceState !== EXISTS) {
                  resumableState.styleResources[key] = EXISTS;
                  if (!styleQueue) {
                    styleQueue = {
                      precedence: stringToChunk(escapeTextForBrowser(precedence)),
                      rules: [],
                      hrefs: [],
                      sheets: /* @__PURE__ */ new Map()
                    };
                    renderState.styles.set(precedence, styleQueue);
                  }
                  var resource = {
                    state: PENDING$1,
                    props: stylesheetPropsFromRawProps(props)
                  };
                  if (resourceState) {
                    var preloadState = resourceState;
                    if (preloadState.length === 2) {
                      adoptPreloadCredentials(resource.props, preloadState);
                    }
                    var preloadResource = renderState.preloads.stylesheets.get(key);
                    if (preloadResource && preloadResource.length > 0) {
                      preloadResource.length = 0;
                    } else {
                      resource.state = PRELOADED;
                    }
                  }
                  styleQueue.sheets.set(key, resource);
                  if (hoistableState) {
                    hoistableState.stylesheets.add(resource);
                  }
                } else {
                  if (styleQueue) {
                    var _resource = styleQueue.sheets.get(key);
                    if (_resource) {
                      if (hoistableState) {
                        hoistableState.stylesheets.add(_resource);
                      }
                    }
                  }
                }
                if (textEmbedded) {
                  target.push(textSeparator);
                }
                return null;
              }
            } else if (props.onLoad || props.onError) {
              return pushLinkImpl(target, props);
            } else {
              if (textEmbedded) {
                target.push(textSeparator);
              }
              if (isFallback) {
                return null;
              } else {
                return pushLinkImpl(renderState.hoistableChunks, props);
              }
            }
          }
        }
        function pushLinkImpl(target, props) {
          target.push(startChunkForTag("link"));
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                case "dangerouslySetInnerHTML":
                  throw new Error("link is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTagSelfClosing);
          return null;
        }
        function pushStyle(target, props, resumableState, renderState, hoistableState, textEmbedded, insertionMode, noscriptTagInScope) {
          {
            if (hasOwnProperty.call(props, "children")) {
              var children = props.children;
              var child = Array.isArray(children) ? children.length < 2 ? children[0] : null : children;
              if (typeof child === "function" || typeof child === "symbol" || Array.isArray(child)) {
                var childType = typeof child === "function" ? "a Function" : typeof child === "symbol" ? "a Sybmol" : "an Array";
                error("React expect children of <style> tags to be a string, number, or object with a `toString` method but found %s instead. In browsers style Elements can only have `Text` Nodes as children.", childType);
              }
            }
          }
          {
            var precedence = props.precedence;
            var href = props.href;
            if (insertionMode === SVG_MODE || noscriptTagInScope || props.itemProp != null || typeof precedence !== "string" || typeof href !== "string" || href === "") {
              return pushStyleImpl(target, props);
            }
            {
              if (href.includes(" ")) {
                error('React expected the `href` prop for a <style> tag opting into hoisting semantics using the `precedence` prop to not have any spaces but ecountered spaces instead. using spaces in this prop will cause hydration of this style to fail on the client. The href for the <style> where this ocurred is "%s".', href);
              }
            }
            var key = getResourceKey(href);
            var styleQueue = renderState.styles.get(precedence);
            var hasKey = resumableState.styleResources.hasOwnProperty(key);
            var resourceState = hasKey ? resumableState.styleResources[key] : void 0;
            if (resourceState !== EXISTS) {
              resumableState.styleResources[key] = EXISTS;
              {
                if (resourceState) {
                  error('React encountered a hoistable style tag for the same href as a preload: "%s". When using a style tag to inline styles you should not also preload it as a stylsheet.', href);
                }
              }
              if (!styleQueue) {
                styleQueue = {
                  precedence: stringToChunk(escapeTextForBrowser(precedence)),
                  rules: [],
                  hrefs: [stringToChunk(escapeTextForBrowser(href))],
                  sheets: /* @__PURE__ */ new Map()
                };
                renderState.styles.set(precedence, styleQueue);
              } else {
                styleQueue.hrefs.push(stringToChunk(escapeTextForBrowser(href)));
              }
              pushStyleContents(styleQueue.rules, props);
            }
            if (styleQueue) {
              if (hoistableState) {
                hoistableState.styles.add(styleQueue);
              }
            }
            if (textEmbedded) {
              target.push(textSeparator);
            }
          }
        }
        function pushStyleImpl(target, props) {
          target.push(startChunkForTag("style"));
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          var child = Array.isArray(children) ? children.length < 2 ? children[0] : null : children;
          if (typeof child !== "function" && typeof child !== "symbol" && child !== null && child !== void 0) {
            target.push(stringToChunk(escapeTextForBrowser("" + child)));
          }
          pushInnerHTML(target, innerHTML, children);
          target.push(endChunkForTag("style"));
          return null;
        }
        function pushStyleContents(target, props) {
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
              }
            }
          }
          var child = Array.isArray(children) ? children.length < 2 ? children[0] : null : children;
          if (typeof child !== "function" && typeof child !== "symbol" && child !== null && child !== void 0) {
            target.push(stringToChunk(escapeTextForBrowser("" + child)));
          }
          pushInnerHTML(target, innerHTML, children);
          return;
        }
        function pushImg(target, props, resumableState, renderState, pictureTagInScope) {
          var src = props.src, srcSet = props.srcSet;
          if (props.loading !== "lazy" && (src || srcSet) && (typeof src === "string" || src == null) && (typeof srcSet === "string" || srcSet == null) && props.fetchPriority !== "low" && pictureTagInScope === false && // We exclude data URIs in src and srcSet since these should not be preloaded
          !(typeof src === "string" && src[4] === ":" && (src[0] === "d" || src[0] === "D") && (src[1] === "a" || src[1] === "A") && (src[2] === "t" || src[2] === "T") && (src[3] === "a" || src[3] === "A")) && !(typeof srcSet === "string" && srcSet[4] === ":" && (srcSet[0] === "d" || srcSet[0] === "D") && (srcSet[1] === "a" || srcSet[1] === "A") && (srcSet[2] === "t" || srcSet[2] === "T") && (srcSet[3] === "a" || srcSet[3] === "A"))) {
            var sizes = typeof props.sizes === "string" ? props.sizes : void 0;
            var key = getImageResourceKey(src, srcSet, sizes);
            var promotablePreloads = renderState.preloads.images;
            var resource = promotablePreloads.get(key);
            if (resource) {
              if (props.fetchPriority === "high" || renderState.highImagePreloads.size < 10) {
                promotablePreloads.delete(key);
                renderState.highImagePreloads.add(resource);
              }
            } else if (!resumableState.imageResources.hasOwnProperty(key)) {
              resumableState.imageResources[key] = PRELOAD_NO_CREDS;
              var crossOrigin = getCrossOriginString(props.crossOrigin);
              var headers = renderState.headers;
              var header;
              if (headers && headers.remainingCapacity > 0 && // this is a hueristic similar to capping element preloads to 10 unless explicitly
              // fetchPriority="high". We use length here which means it will fit fewer images when
              // the urls are long and more when short. arguably byte size is a better hueristic because
              // it directly translates to how much we send down before content is actually seen.
              // We could unify the counts and also make it so the total is tracked regardless of
              // flushing output but since the headers are likely to be go earlier than content
              // they don't really conflict so for now I've kept them separate
              (props.fetchPriority === "high" || headers.highImagePreloads.length < 500) && // We manually construct the options for the preload only from strings. We don't want to pollute
              // the params list with arbitrary props and if we copied everything over as it we might get
              // coercion errors. We have checks for this in Dev but it seems safer to just only accept values
              // that are strings
              (header = getPreloadAsHeader(src, "image", {
                imageSrcSet: props.srcSet,
                imageSizes: props.sizes,
                crossOrigin,
                integrity: props.integrity,
                nonce: props.nonce,
                type: props.type,
                fetchPriority: props.fetchPriority,
                referrerPolicy: props.refererPolicy
              }), // We always consume the header length since once we find one header that doesn't fit
              // we assume all the rest won't as well. This is to avoid getting into a situation
              // where we have a very small remaining capacity but no headers will ever fit and we end
              // up constantly trying to see if the next resource might make it. In the future we can
              // make this behavior different between render and prerender since in the latter case
              // we are less sensitive to the current requests runtime per and more sensitive to maximizing
              // headers.
              (headers.remainingCapacity -= header.length) >= 2)) {
                renderState.resets.image[key] = PRELOAD_NO_CREDS;
                if (headers.highImagePreloads) {
                  headers.highImagePreloads += ", ";
                }
                headers.highImagePreloads += header;
              } else {
                resource = [];
                pushLinkImpl(resource, {
                  rel: "preload",
                  as: "image",
                  // There is a bug in Safari where imageSrcSet is not respected on preload links
                  // so we omit the href here if we have imageSrcSet b/c safari will load the wrong image.
                  // This harms older browers that do not support imageSrcSet by making their preloads not work
                  // but this population is shrinking fast and is already small so we accept this tradeoff.
                  href: srcSet ? void 0 : src,
                  imageSrcSet: srcSet,
                  imageSizes: sizes,
                  crossOrigin,
                  integrity: props.integrity,
                  type: props.type,
                  fetchPriority: props.fetchPriority,
                  referrerPolicy: props.referrerPolicy
                });
                if (props.fetchPriority === "high" || renderState.highImagePreloads.size < 10) {
                  renderState.highImagePreloads.add(resource);
                } else {
                  renderState.bulkPreloads.add(resource);
                  promotablePreloads.set(key, resource);
                }
              }
            }
          }
          return pushSelfClosing(target, props, "img");
        }
        function pushSelfClosing(target, props, tag) {
          target.push(startChunkForTag(tag));
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                case "dangerouslySetInnerHTML":
                  throw new Error(tag + " is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTagSelfClosing);
          return null;
        }
        function pushStartMenuItem(target, props) {
          target.push(startChunkForTag("menuitem"));
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                case "dangerouslySetInnerHTML":
                  throw new Error("menuitems cannot have `children` nor `dangerouslySetInnerHTML`.");
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          return null;
        }
        function pushTitle(target, props, renderState, insertionMode, noscriptTagInScope, isFallback) {
          {
            if (hasOwnProperty.call(props, "children")) {
              var children = props.children;
              var child = Array.isArray(children) ? children.length < 2 ? children[0] : null : children;
              if (Array.isArray(children) && children.length > 1) {
                error("React expects the `children` prop of <title> tags to be a string, number%s, or object with a novel `toString` method but found an Array with length %s instead. Browsers treat all child Nodes of <title> tags as Text content and React expects to be able to convert `children` of <title> tags to a single string value which is why Arrays of length greater than 1 are not supported. When using JSX it can be commong to combine text nodes and value nodes. For example: <title>hello {nameOfUser}</title>. While not immediately apparent, `children` in this case is an Array with length 2. If your `children` prop is using this form try rewriting it using a template string: <title>{`hello ${nameOfUser}`}</title>.", "", children.length);
              } else if (typeof child === "function" || typeof child === "symbol") {
                var childType = typeof child === "function" ? "a Function" : "a Sybmol";
                error("React expect children of <title> tags to be a string, number%s, or object with a novel `toString` method but found %s instead. Browsers treat all child Nodes of <title> tags as Text content and React expects to be able to convert children of <title> tags to a single string value.", "", childType);
              } else if (child && child.toString === {}.toString) {
                if (child.$$typeof != null) {
                  error("React expects the `children` prop of <title> tags to be a string, number%s, or object with a novel `toString` method but found an object that appears to be a React element which never implements a suitable `toString` method. Browsers treat all child Nodes of <title> tags as Text content and React expects to be able to convert children of <title> tags to a single string value which is why rendering React elements is not supported. If the `children` of <title> is a React Component try moving the <title> tag into that component. If the `children` of <title> is some HTML markup change it to be Text only to be valid HTML.", "");
                } else {
                  error("React expects the `children` prop of <title> tags to be a string, number%s, or object with a novel `toString` method but found an object that does not implement a suitable `toString` method. Browsers treat all child Nodes of <title> tags as Text content and React expects to be able to convert children of <title> tags to a single string value. Using the default `toString` method available on every object is almost certainly an error. Consider whether the `children` of this <title> is an object in error and change it to a string or number value if so. Otherwise implement a `toString` method that React can use to produce a valid <title>.", "");
                }
              }
            }
          }
          {
            if (insertionMode !== SVG_MODE && !noscriptTagInScope && props.itemProp == null) {
              if (isFallback) {
                return null;
              } else {
                pushTitleImpl(renderState.hoistableChunks, props);
              }
            } else {
              return pushTitleImpl(target, props);
            }
          }
        }
        function pushTitleImpl(target, props) {
          target.push(startChunkForTag("title"));
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          var child = Array.isArray(children) ? children.length < 2 ? children[0] : null : children;
          if (typeof child !== "function" && typeof child !== "symbol" && child !== null && child !== void 0) {
            target.push(stringToChunk(escapeTextForBrowser("" + child)));
          }
          pushInnerHTML(target, innerHTML, children);
          target.push(endChunkForTag("title"));
          return null;
        }
        function pushStartHead(target, props, renderState, insertionMode) {
          {
            if (insertionMode < HTML_MODE && renderState.headChunks === null) {
              renderState.headChunks = [];
              return pushStartGenericElement(renderState.headChunks, props, "head");
            } else {
              return pushStartGenericElement(target, props, "head");
            }
          }
        }
        function pushStartHtml(target, props, renderState, insertionMode) {
          {
            if (insertionMode === ROOT_HTML_MODE && renderState.htmlChunks === null) {
              renderState.htmlChunks = [doctypeChunk];
              return pushStartGenericElement(renderState.htmlChunks, props, "html");
            } else {
              return pushStartGenericElement(target, props, "html");
            }
          }
        }
        function pushScript(target, props, resumableState, renderState, textEmbedded, insertionMode, noscriptTagInScope) {
          {
            var asyncProp = props.async;
            if (typeof props.src !== "string" || !props.src || !(asyncProp && typeof asyncProp !== "function" && typeof asyncProp !== "symbol") || props.onLoad || props.onError || insertionMode === SVG_MODE || noscriptTagInScope || props.itemProp != null) {
              return pushScriptImpl(target, props);
            }
            var src = props.src;
            var key = getResourceKey(src);
            var resources, preloads;
            if (props.type === "module") {
              resources = resumableState.moduleScriptResources;
              preloads = renderState.preloads.moduleScripts;
            } else {
              resources = resumableState.scriptResources;
              preloads = renderState.preloads.scripts;
            }
            var hasKey = resources.hasOwnProperty(key);
            var resourceState = hasKey ? resources[key] : void 0;
            if (resourceState !== EXISTS) {
              resources[key] = EXISTS;
              var scriptProps = props;
              if (resourceState) {
                var preloadState = resourceState;
                if (preloadState.length === 2) {
                  scriptProps = assign({}, props);
                  adoptPreloadCredentials(scriptProps, preloadState);
                }
                var preloadResource = preloads.get(key);
                if (preloadResource) {
                  preloadResource.length = 0;
                }
              }
              var resource = [];
              renderState.scripts.add(resource);
              pushScriptImpl(resource, scriptProps);
            }
            if (textEmbedded) {
              target.push(textSeparator);
            }
            return null;
          }
        }
        function pushScriptImpl(target, props) {
          target.push(startChunkForTag("script"));
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          {
            if (children != null && typeof children !== "string") {
              var descriptiveStatement = typeof children === "number" ? "a number for children" : Array.isArray(children) ? "an array for children" : "something unexpected for children";
              error("A script element was rendered with %s. If script element has children it must be a single string. Consider using dangerouslySetInnerHTML or passing a plain string as children.", descriptiveStatement);
            }
          }
          pushInnerHTML(target, innerHTML, children);
          if (typeof children === "string") {
            target.push(stringToChunk(encodeHTMLTextNode(children)));
          }
          target.push(endChunkForTag("script"));
          return null;
        }
        function pushStartGenericElement(target, props, tag) {
          target.push(startChunkForTag(tag));
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          pushInnerHTML(target, innerHTML, children);
          if (typeof children === "string") {
            target.push(stringToChunk(encodeHTMLTextNode(children)));
            return null;
          }
          return children;
        }
        function pushStartCustomElement(target, props, tag) {
          target.push(startChunkForTag(tag));
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              var attributeName = propKey;
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                case "style":
                  pushStyleAttribute(target, propValue);
                  break;
                case "suppressContentEditableWarning":
                case "suppressHydrationWarning":
                case "ref":
                  break;
                case "className":
                default:
                  if (isAttributeNameSafe(propKey) && typeof propValue !== "function" && typeof propValue !== "symbol") {
                    target.push(attributeSeparator, stringToChunk(attributeName), attributeAssign, stringToChunk(escapeTextForBrowser(propValue)), attributeEnd);
                  }
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          pushInnerHTML(target, innerHTML, children);
          return children;
        }
        var leadingNewline = stringToPrecomputedChunk("\n");
        function pushStartPreformattedElement(target, props, tag) {
          target.push(startChunkForTag(tag));
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          if (innerHTML != null) {
            if (children != null) {
              throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
            }
            if (typeof innerHTML !== "object" || !("__html" in innerHTML)) {
              throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
            }
            var html = innerHTML.__html;
            if (html !== null && html !== void 0) {
              if (typeof html === "string" && html.length > 0 && html[0] === "\n") {
                target.push(leadingNewline, stringToChunk(html));
              } else {
                {
                  checkHtmlStringCoercion(html);
                }
                target.push(stringToChunk("" + html));
              }
            }
          }
          if (typeof children === "string" && children[0] === "\n") {
            target.push(leadingNewline);
          }
          return children;
        }
        var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/;
        var validatedTagCache = /* @__PURE__ */ new Map();
        function startChunkForTag(tag) {
          var tagStartChunk = validatedTagCache.get(tag);
          if (tagStartChunk === void 0) {
            if (!VALID_TAG_REGEX.test(tag)) {
              throw new Error("Invalid tag: " + tag);
            }
            tagStartChunk = stringToPrecomputedChunk("<" + tag);
            validatedTagCache.set(tag, tagStartChunk);
          }
          return tagStartChunk;
        }
        function pushStartInstance(target, type, props, resumableState, renderState, hoistableState, formatContext, textEmbedded, isFallback) {
          {
            validateProperties$2(type, props);
            validateProperties$1(type, props);
            validateProperties(type, props, null);
            if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
              error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
            }
            if (formatContext.insertionMode !== SVG_MODE && formatContext.insertionMode !== MATHML_MODE) {
              if (type.indexOf("-") === -1 && type.toLowerCase() !== type) {
                error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
              }
            }
          }
          switch (type) {
            case "div":
            case "span":
            case "svg":
            case "path":
              break;
            case "a": {
              break;
            }
            case "g":
            case "p":
            case "li":
              break;
            case "select":
              return pushStartSelect(target, props);
            case "option":
              return pushStartOption(target, props, formatContext);
            case "textarea":
              return pushStartTextArea(target, props);
            case "input":
              return pushInput(target, props, resumableState, renderState);
            case "button":
              return pushStartButton(target, props, resumableState, renderState);
            case "form":
              return pushStartForm(target, props, resumableState, renderState);
            case "menuitem":
              return pushStartMenuItem(target, props);
            case "title":
              return pushTitle(target, props, renderState, formatContext.insertionMode, !!(formatContext.tagScope & NOSCRIPT_SCOPE), isFallback);
            case "link":
              return pushLink(target, props, resumableState, renderState, hoistableState, textEmbedded, formatContext.insertionMode, !!(formatContext.tagScope & NOSCRIPT_SCOPE), isFallback);
            case "script":
              return pushScript(target, props, resumableState, renderState, textEmbedded, formatContext.insertionMode, !!(formatContext.tagScope & NOSCRIPT_SCOPE));
            case "style":
              return pushStyle(target, props, resumableState, renderState, hoistableState, textEmbedded, formatContext.insertionMode, !!(formatContext.tagScope & NOSCRIPT_SCOPE));
            case "meta":
              return pushMeta(target, props, renderState, textEmbedded, formatContext.insertionMode, !!(formatContext.tagScope & NOSCRIPT_SCOPE), isFallback);
            case "listing":
            case "pre": {
              return pushStartPreformattedElement(target, props, type);
            }
            case "img": {
              return pushImg(target, props, resumableState, renderState, !!(formatContext.tagScope & PICTURE_SCOPE));
            }
            case "base":
            case "area":
            case "br":
            case "col":
            case "embed":
            case "hr":
            case "keygen":
            case "param":
            case "source":
            case "track":
            case "wbr": {
              return pushSelfClosing(target, props, type);
            }
            case "annotation-xml":
            case "color-profile":
            case "font-face":
            case "font-face-src":
            case "font-face-uri":
            case "font-face-format":
            case "font-face-name":
            case "missing-glyph": {
              break;
            }
            case "head":
              return pushStartHead(target, props, renderState, formatContext.insertionMode);
            case "html": {
              return pushStartHtml(target, props, renderState, formatContext.insertionMode);
            }
            default: {
              if (type.indexOf("-") !== -1) {
                return pushStartCustomElement(target, props, type);
              }
            }
          }
          return pushStartGenericElement(target, props, type);
        }
        var endTagCache = /* @__PURE__ */ new Map();
        function endChunkForTag(tag) {
          var chunk = endTagCache.get(tag);
          if (chunk === void 0) {
            chunk = stringToPrecomputedChunk("</" + tag + ">");
            endTagCache.set(tag, chunk);
          }
          return chunk;
        }
        function pushEndInstance(target, type, props, resumableState, formatContext) {
          switch (type) {
            case "title":
            case "style":
            case "script":
            case "area":
            case "base":
            case "br":
            case "col":
            case "embed":
            case "hr":
            case "img":
            case "input":
            case "keygen":
            case "link":
            case "meta":
            case "param":
            case "source":
            case "track":
            case "wbr": {
              return;
            }
            case "body": {
              if (formatContext.insertionMode <= HTML_HTML_MODE) {
                resumableState.hasBody = true;
                return;
              }
              break;
            }
            case "html":
              if (formatContext.insertionMode === ROOT_HTML_MODE) {
                resumableState.hasHtml = true;
                return;
              }
              break;
          }
          target.push(endChunkForTag(type));
        }
        function writeBootstrap(destination, renderState) {
          var bootstrapChunks = renderState.bootstrapChunks;
          var i = 0;
          for (; i < bootstrapChunks.length - 1; i++) {
            writeChunk(destination, bootstrapChunks[i]);
          }
          if (i < bootstrapChunks.length) {
            var lastChunk = bootstrapChunks[i];
            bootstrapChunks.length = 0;
            return writeChunkAndReturn(destination, lastChunk);
          }
          return true;
        }
        function writeCompletedRoot(destination, renderState) {
          return writeBootstrap(destination, renderState);
        }
        var placeholder1 = stringToPrecomputedChunk('<template id="');
        var placeholder2 = stringToPrecomputedChunk('"></template>');
        function writePlaceholder(destination, renderState, id) {
          writeChunk(destination, placeholder1);
          writeChunk(destination, renderState.placeholderPrefix);
          var formattedID = stringToChunk(id.toString(16));
          writeChunk(destination, formattedID);
          return writeChunkAndReturn(destination, placeholder2);
        }
        var startCompletedSuspenseBoundary = stringToPrecomputedChunk("<!--$-->");
        var startPendingSuspenseBoundary1 = stringToPrecomputedChunk('<!--$?--><template id="');
        var startPendingSuspenseBoundary2 = stringToPrecomputedChunk('"></template>');
        var startClientRenderedSuspenseBoundary = stringToPrecomputedChunk("<!--$!-->");
        var endSuspenseBoundary = stringToPrecomputedChunk("<!--/$-->");
        var clientRenderedSuspenseBoundaryError1 = stringToPrecomputedChunk("<template");
        var clientRenderedSuspenseBoundaryErrorAttrInterstitial = stringToPrecomputedChunk('"');
        var clientRenderedSuspenseBoundaryError1A = stringToPrecomputedChunk(' data-dgst="');
        var clientRenderedSuspenseBoundaryError1B = stringToPrecomputedChunk(' data-msg="');
        var clientRenderedSuspenseBoundaryError1C = stringToPrecomputedChunk(' data-stck="');
        var clientRenderedSuspenseBoundaryError2 = stringToPrecomputedChunk("></template>");
        function writeStartCompletedSuspenseBoundary$1(destination, renderState) {
          return writeChunkAndReturn(destination, startCompletedSuspenseBoundary);
        }
        function writeStartPendingSuspenseBoundary(destination, renderState, id) {
          writeChunk(destination, startPendingSuspenseBoundary1);
          if (id === null) {
            throw new Error("An ID must have been assigned before we can complete the boundary.");
          }
          writeChunk(destination, renderState.boundaryPrefix);
          writeChunk(destination, stringToChunk(id.toString(16)));
          return writeChunkAndReturn(destination, startPendingSuspenseBoundary2);
        }
        function writeStartClientRenderedSuspenseBoundary$1(destination, renderState, errorDigest, errorMesssage, errorComponentStack) {
          var result;
          result = writeChunkAndReturn(destination, startClientRenderedSuspenseBoundary);
          writeChunk(destination, clientRenderedSuspenseBoundaryError1);
          if (errorDigest) {
            writeChunk(destination, clientRenderedSuspenseBoundaryError1A);
            writeChunk(destination, stringToChunk(escapeTextForBrowser(errorDigest)));
            writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial);
          }
          {
            if (errorMesssage) {
              writeChunk(destination, clientRenderedSuspenseBoundaryError1B);
              writeChunk(destination, stringToChunk(escapeTextForBrowser(errorMesssage)));
              writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial);
            }
            if (errorComponentStack) {
              writeChunk(destination, clientRenderedSuspenseBoundaryError1C);
              writeChunk(destination, stringToChunk(escapeTextForBrowser(errorComponentStack)));
              writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial);
            }
          }
          result = writeChunkAndReturn(destination, clientRenderedSuspenseBoundaryError2);
          return result;
        }
        function writeEndCompletedSuspenseBoundary$1(destination, renderState) {
          return writeChunkAndReturn(destination, endSuspenseBoundary);
        }
        function writeEndPendingSuspenseBoundary(destination, renderState) {
          return writeChunkAndReturn(destination, endSuspenseBoundary);
        }
        function writeEndClientRenderedSuspenseBoundary$1(destination, renderState) {
          return writeChunkAndReturn(destination, endSuspenseBoundary);
        }
        var startSegmentHTML = stringToPrecomputedChunk('<div hidden id="');
        var startSegmentHTML2 = stringToPrecomputedChunk('">');
        var endSegmentHTML = stringToPrecomputedChunk("</div>");
        var startSegmentSVG = stringToPrecomputedChunk('<svg aria-hidden="true" style="display:none" id="');
        var startSegmentSVG2 = stringToPrecomputedChunk('">');
        var endSegmentSVG = stringToPrecomputedChunk("</svg>");
        var startSegmentMathML = stringToPrecomputedChunk('<math aria-hidden="true" style="display:none" id="');
        var startSegmentMathML2 = stringToPrecomputedChunk('">');
        var endSegmentMathML = stringToPrecomputedChunk("</math>");
        var startSegmentTable = stringToPrecomputedChunk('<table hidden id="');
        var startSegmentTable2 = stringToPrecomputedChunk('">');
        var endSegmentTable = stringToPrecomputedChunk("</table>");
        var startSegmentTableBody = stringToPrecomputedChunk('<table hidden><tbody id="');
        var startSegmentTableBody2 = stringToPrecomputedChunk('">');
        var endSegmentTableBody = stringToPrecomputedChunk("</tbody></table>");
        var startSegmentTableRow = stringToPrecomputedChunk('<table hidden><tr id="');
        var startSegmentTableRow2 = stringToPrecomputedChunk('">');
        var endSegmentTableRow = stringToPrecomputedChunk("</tr></table>");
        var startSegmentColGroup = stringToPrecomputedChunk('<table hidden><colgroup id="');
        var startSegmentColGroup2 = stringToPrecomputedChunk('">');
        var endSegmentColGroup = stringToPrecomputedChunk("</colgroup></table>");
        function writeStartSegment(destination, renderState, formatContext, id) {
          switch (formatContext.insertionMode) {
            case ROOT_HTML_MODE:
            case HTML_HTML_MODE:
            case HTML_MODE: {
              writeChunk(destination, startSegmentHTML);
              writeChunk(destination, renderState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentHTML2);
            }
            case SVG_MODE: {
              writeChunk(destination, startSegmentSVG);
              writeChunk(destination, renderState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentSVG2);
            }
            case MATHML_MODE: {
              writeChunk(destination, startSegmentMathML);
              writeChunk(destination, renderState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentMathML2);
            }
            case HTML_TABLE_MODE: {
              writeChunk(destination, startSegmentTable);
              writeChunk(destination, renderState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentTable2);
            }
            case HTML_TABLE_BODY_MODE: {
              writeChunk(destination, startSegmentTableBody);
              writeChunk(destination, renderState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentTableBody2);
            }
            case HTML_TABLE_ROW_MODE: {
              writeChunk(destination, startSegmentTableRow);
              writeChunk(destination, renderState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentTableRow2);
            }
            case HTML_COLGROUP_MODE: {
              writeChunk(destination, startSegmentColGroup);
              writeChunk(destination, renderState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentColGroup2);
            }
            default: {
              throw new Error("Unknown insertion mode. This is a bug in React.");
            }
          }
        }
        function writeEndSegment(destination, formatContext) {
          switch (formatContext.insertionMode) {
            case ROOT_HTML_MODE:
            case HTML_HTML_MODE:
            case HTML_MODE: {
              return writeChunkAndReturn(destination, endSegmentHTML);
            }
            case SVG_MODE: {
              return writeChunkAndReturn(destination, endSegmentSVG);
            }
            case MATHML_MODE: {
              return writeChunkAndReturn(destination, endSegmentMathML);
            }
            case HTML_TABLE_MODE: {
              return writeChunkAndReturn(destination, endSegmentTable);
            }
            case HTML_TABLE_BODY_MODE: {
              return writeChunkAndReturn(destination, endSegmentTableBody);
            }
            case HTML_TABLE_ROW_MODE: {
              return writeChunkAndReturn(destination, endSegmentTableRow);
            }
            case HTML_COLGROUP_MODE: {
              return writeChunkAndReturn(destination, endSegmentColGroup);
            }
            default: {
              throw new Error("Unknown insertion mode. This is a bug in React.");
            }
          }
        }
        var completeSegmentScript1Full = stringToPrecomputedChunk(completeSegment + '$RS("');
        var completeSegmentScript1Partial = stringToPrecomputedChunk('$RS("');
        var completeSegmentScript2 = stringToPrecomputedChunk('","');
        var completeSegmentScriptEnd = stringToPrecomputedChunk('")<\/script>');
        var completeSegmentData1 = stringToPrecomputedChunk('<template data-rsi="" data-sid="');
        var completeSegmentData2 = stringToPrecomputedChunk('" data-pid="');
        var completeSegmentDataEnd = dataElementQuotedEnd;
        function writeCompletedSegmentInstruction(destination, resumableState, renderState, contentSegmentID) {
          var scriptFormat = resumableState.streamingFormat === ScriptStreamingFormat;
          if (scriptFormat) {
            writeChunk(destination, renderState.startInlineScript);
            if ((resumableState.instructions & SentCompleteSegmentFunction) === NothingSent) {
              resumableState.instructions |= SentCompleteSegmentFunction;
              writeChunk(destination, completeSegmentScript1Full);
            } else {
              writeChunk(destination, completeSegmentScript1Partial);
            }
          } else {
            writeChunk(destination, completeSegmentData1);
          }
          writeChunk(destination, renderState.segmentPrefix);
          var formattedID = stringToChunk(contentSegmentID.toString(16));
          writeChunk(destination, formattedID);
          if (scriptFormat) {
            writeChunk(destination, completeSegmentScript2);
          } else {
            writeChunk(destination, completeSegmentData2);
          }
          writeChunk(destination, renderState.placeholderPrefix);
          writeChunk(destination, formattedID);
          if (scriptFormat) {
            return writeChunkAndReturn(destination, completeSegmentScriptEnd);
          } else {
            return writeChunkAndReturn(destination, completeSegmentDataEnd);
          }
        }
        var completeBoundaryScript1Full = stringToPrecomputedChunk(completeBoundary + '$RC("');
        var completeBoundaryScript1Partial = stringToPrecomputedChunk('$RC("');
        var completeBoundaryWithStylesScript1FullBoth = stringToPrecomputedChunk(completeBoundary + completeBoundaryWithStyles + '$RR("');
        var completeBoundaryWithStylesScript1FullPartial = stringToPrecomputedChunk(completeBoundaryWithStyles + '$RR("');
        var completeBoundaryWithStylesScript1Partial = stringToPrecomputedChunk('$RR("');
        var completeBoundaryScript2 = stringToPrecomputedChunk('","');
        var completeBoundaryScript3a = stringToPrecomputedChunk('",');
        var completeBoundaryScript3b = stringToPrecomputedChunk('"');
        var completeBoundaryScriptEnd = stringToPrecomputedChunk(")<\/script>");
        var completeBoundaryData1 = stringToPrecomputedChunk('<template data-rci="" data-bid="');
        var completeBoundaryWithStylesData1 = stringToPrecomputedChunk('<template data-rri="" data-bid="');
        var completeBoundaryData2 = stringToPrecomputedChunk('" data-sid="');
        var completeBoundaryData3a = stringToPrecomputedChunk('" data-sty="');
        var completeBoundaryDataEnd = dataElementQuotedEnd;
        function writeCompletedBoundaryInstruction(destination, resumableState, renderState, id, hoistableState) {
          var requiresStyleInsertion;
          {
            requiresStyleInsertion = renderState.stylesToHoist;
            renderState.stylesToHoist = false;
          }
          var scriptFormat = resumableState.streamingFormat === ScriptStreamingFormat;
          if (scriptFormat) {
            writeChunk(destination, renderState.startInlineScript);
            if (requiresStyleInsertion) {
              if ((resumableState.instructions & SentCompleteBoundaryFunction) === NothingSent) {
                resumableState.instructions |= SentStyleInsertionFunction | SentCompleteBoundaryFunction;
                writeChunk(destination, clonePrecomputedChunk(completeBoundaryWithStylesScript1FullBoth));
              } else if ((resumableState.instructions & SentStyleInsertionFunction) === NothingSent) {
                resumableState.instructions |= SentStyleInsertionFunction;
                writeChunk(destination, completeBoundaryWithStylesScript1FullPartial);
              } else {
                writeChunk(destination, completeBoundaryWithStylesScript1Partial);
              }
            } else {
              if ((resumableState.instructions & SentCompleteBoundaryFunction) === NothingSent) {
                resumableState.instructions |= SentCompleteBoundaryFunction;
                writeChunk(destination, completeBoundaryScript1Full);
              } else {
                writeChunk(destination, completeBoundaryScript1Partial);
              }
            }
          } else {
            if (requiresStyleInsertion) {
              writeChunk(destination, completeBoundaryWithStylesData1);
            } else {
              writeChunk(destination, completeBoundaryData1);
            }
          }
          var idChunk = stringToChunk(id.toString(16));
          writeChunk(destination, renderState.boundaryPrefix);
          writeChunk(destination, idChunk);
          if (scriptFormat) {
            writeChunk(destination, completeBoundaryScript2);
          } else {
            writeChunk(destination, completeBoundaryData2);
          }
          writeChunk(destination, renderState.segmentPrefix);
          writeChunk(destination, idChunk);
          if (requiresStyleInsertion) {
            if (scriptFormat) {
              writeChunk(destination, completeBoundaryScript3a);
              writeStyleResourceDependenciesInJS(destination, hoistableState);
            } else {
              writeChunk(destination, completeBoundaryData3a);
              writeStyleResourceDependenciesInAttr(destination, hoistableState);
            }
          } else {
            if (scriptFormat) {
              writeChunk(destination, completeBoundaryScript3b);
            }
          }
          var writeMore;
          if (scriptFormat) {
            writeMore = writeChunkAndReturn(destination, completeBoundaryScriptEnd);
          } else {
            writeMore = writeChunkAndReturn(destination, completeBoundaryDataEnd);
          }
          return writeBootstrap(destination, renderState) && writeMore;
        }
        var clientRenderScript1Full = stringToPrecomputedChunk(clientRenderBoundary + ';$RX("');
        var clientRenderScript1Partial = stringToPrecomputedChunk('$RX("');
        var clientRenderScript1A = stringToPrecomputedChunk('"');
        var clientRenderErrorScriptArgInterstitial = stringToPrecomputedChunk(",");
        var clientRenderScriptEnd = stringToPrecomputedChunk(")<\/script>");
        var clientRenderData1 = stringToPrecomputedChunk('<template data-rxi="" data-bid="');
        var clientRenderData2 = stringToPrecomputedChunk('" data-dgst="');
        var clientRenderData3 = stringToPrecomputedChunk('" data-msg="');
        var clientRenderData4 = stringToPrecomputedChunk('" data-stck="');
        var clientRenderDataEnd = dataElementQuotedEnd;
        function writeClientRenderBoundaryInstruction(destination, resumableState, renderState, id, errorDigest, errorMessage, errorComponentStack) {
          var scriptFormat = resumableState.streamingFormat === ScriptStreamingFormat;
          if (scriptFormat) {
            writeChunk(destination, renderState.startInlineScript);
            if ((resumableState.instructions & SentClientRenderFunction) === NothingSent) {
              resumableState.instructions |= SentClientRenderFunction;
              writeChunk(destination, clientRenderScript1Full);
            } else {
              writeChunk(destination, clientRenderScript1Partial);
            }
          } else {
            writeChunk(destination, clientRenderData1);
          }
          writeChunk(destination, renderState.boundaryPrefix);
          writeChunk(destination, stringToChunk(id.toString(16)));
          if (scriptFormat) {
            writeChunk(destination, clientRenderScript1A);
          }
          if (errorDigest || errorMessage || errorComponentStack) {
            if (scriptFormat) {
              writeChunk(destination, clientRenderErrorScriptArgInterstitial);
              writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorDigest || "")));
            } else {
              writeChunk(destination, clientRenderData2);
              writeChunk(destination, stringToChunk(escapeTextForBrowser(errorDigest || "")));
            }
          }
          if (errorMessage || errorComponentStack) {
            if (scriptFormat) {
              writeChunk(destination, clientRenderErrorScriptArgInterstitial);
              writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorMessage || "")));
            } else {
              writeChunk(destination, clientRenderData3);
              writeChunk(destination, stringToChunk(escapeTextForBrowser(errorMessage || "")));
            }
          }
          if (errorComponentStack) {
            if (scriptFormat) {
              writeChunk(destination, clientRenderErrorScriptArgInterstitial);
              writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorComponentStack)));
            } else {
              writeChunk(destination, clientRenderData4);
              writeChunk(destination, stringToChunk(escapeTextForBrowser(errorComponentStack)));
            }
          }
          if (scriptFormat) {
            return writeChunkAndReturn(destination, clientRenderScriptEnd);
          } else {
            return writeChunkAndReturn(destination, clientRenderDataEnd);
          }
        }
        var regexForJSStringsInInstructionScripts = /[<\u2028\u2029]/g;
        function escapeJSStringsForInstructionScripts(input) {
          var escaped = JSON.stringify(input);
          return escaped.replace(regexForJSStringsInInstructionScripts, function(match) {
            switch (match) {
              case "<":
                return "\\u003c";
              case "\u2028":
                return "\\u2028";
              case "\u2029":
                return "\\u2029";
              default: {
                throw new Error("escapeJSStringsForInstructionScripts encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React");
              }
            }
          });
        }
        var regexForJSStringsInScripts = /[&><\u2028\u2029]/g;
        function escapeJSObjectForInstructionScripts(input) {
          var escaped = JSON.stringify(input);
          return escaped.replace(regexForJSStringsInScripts, function(match) {
            switch (match) {
              case "&":
                return "\\u0026";
              case ">":
                return "\\u003e";
              case "<":
                return "\\u003c";
              case "\u2028":
                return "\\u2028";
              case "\u2029":
                return "\\u2029";
              default: {
                throw new Error("escapeJSObjectForInstructionScripts encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React");
              }
            }
          });
        }
        var lateStyleTagResourceOpen1 = stringToPrecomputedChunk('<style media="not all" data-precedence="');
        var lateStyleTagResourceOpen2 = stringToPrecomputedChunk('" data-href="');
        var lateStyleTagResourceOpen3 = stringToPrecomputedChunk('">');
        var lateStyleTagTemplateClose = stringToPrecomputedChunk("</style>");
        var currentlyRenderingBoundaryHasStylesToHoist = false;
        var destinationHasCapacity = true;
        function flushStyleTagsLateForBoundary(styleQueue) {
          var rules = styleQueue.rules;
          var hrefs = styleQueue.hrefs;
          {
            if (rules.length > 0 && hrefs.length === 0) {
              error("React expected to have at least one href for an a hoistable style but found none. This is a bug in React.");
            }
          }
          var i = 0;
          if (hrefs.length) {
            writeChunk(this, lateStyleTagResourceOpen1);
            writeChunk(this, styleQueue.precedence);
            writeChunk(this, lateStyleTagResourceOpen2);
            for (; i < hrefs.length - 1; i++) {
              writeChunk(this, hrefs[i]);
              writeChunk(this, spaceSeparator);
            }
            writeChunk(this, hrefs[i]);
            writeChunk(this, lateStyleTagResourceOpen3);
            for (i = 0; i < rules.length; i++) {
              writeChunk(this, rules[i]);
            }
            destinationHasCapacity = writeChunkAndReturn(this, lateStyleTagTemplateClose);
            currentlyRenderingBoundaryHasStylesToHoist = true;
            rules.length = 0;
            hrefs.length = 0;
          }
        }
        function hasStylesToHoist(stylesheet) {
          if (stylesheet.state !== PREAMBLE) {
            currentlyRenderingBoundaryHasStylesToHoist = true;
            return true;
          }
          return false;
        }
        function writeHoistablesForBoundary(destination, hoistableState, renderState) {
          currentlyRenderingBoundaryHasStylesToHoist = false;
          destinationHasCapacity = true;
          hoistableState.styles.forEach(flushStyleTagsLateForBoundary, destination);
          hoistableState.stylesheets.forEach(hasStylesToHoist);
          if (currentlyRenderingBoundaryHasStylesToHoist) {
            renderState.stylesToHoist = true;
          }
          return destinationHasCapacity;
        }
        function flushResource(resource) {
          for (var i = 0; i < resource.length; i++) {
            writeChunk(this, resource[i]);
          }
          resource.length = 0;
        }
        var stylesheetFlushingQueue = [];
        function flushStyleInPreamble(stylesheet, key, map) {
          pushLinkImpl(stylesheetFlushingQueue, stylesheet.props);
          for (var i = 0; i < stylesheetFlushingQueue.length; i++) {
            writeChunk(this, stylesheetFlushingQueue[i]);
          }
          stylesheetFlushingQueue.length = 0;
          stylesheet.state = PREAMBLE;
        }
        var styleTagResourceOpen1 = stringToPrecomputedChunk('<style data-precedence="');
        var styleTagResourceOpen2 = stringToPrecomputedChunk('" data-href="');
        var spaceSeparator = stringToPrecomputedChunk(" ");
        var styleTagResourceOpen3 = stringToPrecomputedChunk('">');
        var styleTagResourceClose = stringToPrecomputedChunk("</style>");
        function flushStylesInPreamble(styleQueue, precedence) {
          var hasStylesheets = styleQueue.sheets.size > 0;
          styleQueue.sheets.forEach(flushStyleInPreamble, this);
          styleQueue.sheets.clear();
          var rules = styleQueue.rules;
          var hrefs = styleQueue.hrefs;
          if (!hasStylesheets || hrefs.length) {
            writeChunk(this, styleTagResourceOpen1);
            writeChunk(this, styleQueue.precedence);
            var i = 0;
            if (hrefs.length) {
              writeChunk(this, styleTagResourceOpen2);
              for (; i < hrefs.length - 1; i++) {
                writeChunk(this, hrefs[i]);
                writeChunk(this, spaceSeparator);
              }
              writeChunk(this, hrefs[i]);
            }
            writeChunk(this, styleTagResourceOpen3);
            for (i = 0; i < rules.length; i++) {
              writeChunk(this, rules[i]);
            }
            writeChunk(this, styleTagResourceClose);
            rules.length = 0;
            hrefs.length = 0;
          }
        }
        function preloadLateStyle(stylesheet) {
          if (stylesheet.state === PENDING$1) {
            stylesheet.state = PRELOADED;
            var preloadProps = preloadAsStylePropsFromProps(stylesheet.props.href, stylesheet.props);
            pushLinkImpl(stylesheetFlushingQueue, preloadProps);
            for (var i = 0; i < stylesheetFlushingQueue.length; i++) {
              writeChunk(this, stylesheetFlushingQueue[i]);
            }
            stylesheetFlushingQueue.length = 0;
          }
        }
        function preloadLateStyles(styleQueue) {
          styleQueue.sheets.forEach(preloadLateStyle, this);
          styleQueue.sheets.clear();
        }
        function writePreamble(destination, resumableState, renderState, willFlushAllSegments) {
          if (!willFlushAllSegments && renderState.externalRuntimeScript) {
            var _renderState$external = renderState.externalRuntimeScript, src = _renderState$external.src, chunks = _renderState$external.chunks;
            internalPreinitScript(resumableState, renderState, src, chunks);
          }
          var htmlChunks = renderState.htmlChunks;
          var headChunks = renderState.headChunks;
          var i = 0;
          if (htmlChunks) {
            for (i = 0; i < htmlChunks.length; i++) {
              writeChunk(destination, htmlChunks[i]);
            }
            if (headChunks) {
              for (i = 0; i < headChunks.length; i++) {
                writeChunk(destination, headChunks[i]);
              }
            } else {
              writeChunk(destination, startChunkForTag("head"));
              writeChunk(destination, endOfStartTag);
            }
          } else if (headChunks) {
            for (i = 0; i < headChunks.length; i++) {
              writeChunk(destination, headChunks[i]);
            }
          }
          var charsetChunks = renderState.charsetChunks;
          for (i = 0; i < charsetChunks.length; i++) {
            writeChunk(destination, charsetChunks[i]);
          }
          charsetChunks.length = 0;
          renderState.preconnects.forEach(flushResource, destination);
          renderState.preconnects.clear();
          var viewportChunks = renderState.viewportChunks;
          for (i = 0; i < viewportChunks.length; i++) {
            writeChunk(destination, viewportChunks[i]);
          }
          viewportChunks.length = 0;
          renderState.fontPreloads.forEach(flushResource, destination);
          renderState.fontPreloads.clear();
          renderState.highImagePreloads.forEach(flushResource, destination);
          renderState.highImagePreloads.clear();
          renderState.styles.forEach(flushStylesInPreamble, destination);
          var importMapChunks = renderState.importMapChunks;
          for (i = 0; i < importMapChunks.length; i++) {
            writeChunk(destination, importMapChunks[i]);
          }
          importMapChunks.length = 0;
          renderState.bootstrapScripts.forEach(flushResource, destination);
          renderState.scripts.forEach(flushResource, destination);
          renderState.scripts.clear();
          renderState.bulkPreloads.forEach(flushResource, destination);
          renderState.bulkPreloads.clear();
          var hoistableChunks = renderState.hoistableChunks;
          for (i = 0; i < hoistableChunks.length; i++) {
            writeChunk(destination, hoistableChunks[i]);
          }
          hoistableChunks.length = 0;
          if (htmlChunks && headChunks === null) {
            writeChunk(destination, endChunkForTag("head"));
          }
        }
        function writeHoistables(destination, resumableState, renderState) {
          var i = 0;
          var viewportChunks = renderState.viewportChunks;
          for (i = 0; i < viewportChunks.length; i++) {
            writeChunk(destination, viewportChunks[i]);
          }
          viewportChunks.length = 0;
          renderState.preconnects.forEach(flushResource, destination);
          renderState.preconnects.clear();
          renderState.fontPreloads.forEach(flushResource, destination);
          renderState.fontPreloads.clear();
          renderState.highImagePreloads.forEach(flushResource, destination);
          renderState.highImagePreloads.clear();
          renderState.styles.forEach(preloadLateStyles, destination);
          renderState.scripts.forEach(flushResource, destination);
          renderState.scripts.clear();
          renderState.bulkPreloads.forEach(flushResource, destination);
          renderState.bulkPreloads.clear();
          var hoistableChunks = renderState.hoistableChunks;
          for (i = 0; i < hoistableChunks.length; i++) {
            writeChunk(destination, hoistableChunks[i]);
          }
          hoistableChunks.length = 0;
        }
        function writePostamble(destination, resumableState) {
          if (resumableState.hasBody) {
            writeChunk(destination, endChunkForTag("body"));
          }
          if (resumableState.hasHtml) {
            writeChunk(destination, endChunkForTag("html"));
          }
        }
        var arrayFirstOpenBracket = stringToPrecomputedChunk("[");
        var arraySubsequentOpenBracket = stringToPrecomputedChunk(",[");
        var arrayInterstitial = stringToPrecomputedChunk(",");
        var arrayCloseBracket = stringToPrecomputedChunk("]");
        function writeStyleResourceDependenciesInJS(destination, hoistableState) {
          writeChunk(destination, arrayFirstOpenBracket);
          var nextArrayOpenBrackChunk = arrayFirstOpenBracket;
          hoistableState.stylesheets.forEach(function(resource) {
            if (resource.state === PREAMBLE) ;
            else if (resource.state === LATE) {
              writeChunk(destination, nextArrayOpenBrackChunk);
              writeStyleResourceDependencyHrefOnlyInJS(destination, resource.props.href);
              writeChunk(destination, arrayCloseBracket);
              nextArrayOpenBrackChunk = arraySubsequentOpenBracket;
            } else {
              writeChunk(destination, nextArrayOpenBrackChunk);
              writeStyleResourceDependencyInJS(destination, resource.props.href, resource.props["data-precedence"], resource.props);
              writeChunk(destination, arrayCloseBracket);
              nextArrayOpenBrackChunk = arraySubsequentOpenBracket;
              resource.state = LATE;
            }
          });
          writeChunk(destination, arrayCloseBracket);
        }
        function writeStyleResourceDependencyHrefOnlyInJS(destination, href) {
          {
            checkAttributeStringCoercion(href, "href");
          }
          var coercedHref = "" + href;
          writeChunk(destination, stringToChunk(escapeJSObjectForInstructionScripts(coercedHref)));
        }
        function writeStyleResourceDependencyInJS(destination, href, precedence, props) {
          var coercedHref = sanitizeURL("" + href);
          writeChunk(destination, stringToChunk(escapeJSObjectForInstructionScripts(coercedHref)));
          {
            checkAttributeStringCoercion(precedence, "precedence");
          }
          var coercedPrecedence = "" + precedence;
          writeChunk(destination, arrayInterstitial);
          writeChunk(destination, stringToChunk(escapeJSObjectForInstructionScripts(coercedPrecedence)));
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "href":
                case "rel":
                case "precedence":
                case "data-precedence": {
                  break;
                }
                case "children":
                case "dangerouslySetInnerHTML":
                  throw new Error("link is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                default:
                  writeStyleResourceAttributeInJS(destination, propKey, propValue);
                  break;
              }
            }
          }
          return null;
        }
        function writeStyleResourceAttributeInJS(destination, name, value) {
          var attributeName = name.toLowerCase();
          var attributeValue;
          switch (typeof value) {
            case "function":
            case "symbol":
              return;
          }
          switch (name) {
            case "innerHTML":
            case "dangerouslySetInnerHTML":
            case "suppressContentEditableWarning":
            case "suppressHydrationWarning":
            case "style":
            case "ref":
              return;
            case "className": {
              attributeName = "class";
              {
                checkAttributeStringCoercion(value, attributeName);
              }
              attributeValue = "" + value;
              break;
            }
            case "hidden": {
              if (value === false) {
                return;
              }
              attributeValue = "";
              break;
            }
            case "src":
            case "href": {
              value = sanitizeURL(value);
              {
                checkAttributeStringCoercion(value, attributeName);
              }
              attributeValue = "" + value;
              break;
            }
            default: {
              if (
                // unrecognized event handlers are not SSR'd and we (apparently)
                // use on* as hueristic for these handler props
                name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")
              ) {
                return;
              }
              if (!isAttributeNameSafe(name)) {
                return;
              }
              {
                checkAttributeStringCoercion(value, attributeName);
              }
              attributeValue = "" + value;
            }
          }
          writeChunk(destination, arrayInterstitial);
          writeChunk(destination, stringToChunk(escapeJSObjectForInstructionScripts(attributeName)));
          writeChunk(destination, arrayInterstitial);
          writeChunk(destination, stringToChunk(escapeJSObjectForInstructionScripts(attributeValue)));
        }
        function writeStyleResourceDependenciesInAttr(destination, hoistableState) {
          writeChunk(destination, arrayFirstOpenBracket);
          var nextArrayOpenBrackChunk = arrayFirstOpenBracket;
          hoistableState.stylesheets.forEach(function(resource) {
            if (resource.state === PREAMBLE) ;
            else if (resource.state === LATE) {
              writeChunk(destination, nextArrayOpenBrackChunk);
              writeStyleResourceDependencyHrefOnlyInAttr(destination, resource.props.href);
              writeChunk(destination, arrayCloseBracket);
              nextArrayOpenBrackChunk = arraySubsequentOpenBracket;
            } else {
              writeChunk(destination, nextArrayOpenBrackChunk);
              writeStyleResourceDependencyInAttr(destination, resource.props.href, resource.props["data-precedence"], resource.props);
              writeChunk(destination, arrayCloseBracket);
              nextArrayOpenBrackChunk = arraySubsequentOpenBracket;
              resource.state = LATE;
            }
          });
          writeChunk(destination, arrayCloseBracket);
        }
        function writeStyleResourceDependencyHrefOnlyInAttr(destination, href) {
          {
            checkAttributeStringCoercion(href, "href");
          }
          var coercedHref = "" + href;
          writeChunk(destination, stringToChunk(escapeTextForBrowser(JSON.stringify(coercedHref))));
        }
        function writeStyleResourceDependencyInAttr(destination, href, precedence, props) {
          var coercedHref = sanitizeURL("" + href);
          writeChunk(destination, stringToChunk(escapeTextForBrowser(JSON.stringify(coercedHref))));
          {
            checkAttributeStringCoercion(precedence, "precedence");
          }
          var coercedPrecedence = "" + precedence;
          writeChunk(destination, arrayInterstitial);
          writeChunk(destination, stringToChunk(escapeTextForBrowser(JSON.stringify(coercedPrecedence))));
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "href":
                case "rel":
                case "precedence":
                case "data-precedence": {
                  break;
                }
                case "children":
                case "dangerouslySetInnerHTML":
                  throw new Error("link is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                default:
                  writeStyleResourceAttributeInAttr(destination, propKey, propValue);
                  break;
              }
            }
          }
          return null;
        }
        function writeStyleResourceAttributeInAttr(destination, name, value) {
          var attributeName = name.toLowerCase();
          var attributeValue;
          switch (typeof value) {
            case "function":
            case "symbol":
              return;
          }
          switch (name) {
            case "innerHTML":
            case "dangerouslySetInnerHTML":
            case "suppressContentEditableWarning":
            case "suppressHydrationWarning":
            case "style":
            case "ref":
              return;
            case "className": {
              attributeName = "class";
              {
                checkAttributeStringCoercion(value, attributeName);
              }
              attributeValue = "" + value;
              break;
            }
            case "hidden": {
              if (value === false) {
                return;
              }
              attributeValue = "";
              break;
            }
            case "src":
            case "href": {
              value = sanitizeURL(value);
              {
                checkAttributeStringCoercion(value, attributeName);
              }
              attributeValue = "" + value;
              break;
            }
            default: {
              if (
                // unrecognized event handlers are not SSR'd and we (apparently)
                // use on* as hueristic for these handler props
                name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")
              ) {
                return;
              }
              if (!isAttributeNameSafe(name)) {
                return;
              }
              {
                checkAttributeStringCoercion(value, attributeName);
              }
              attributeValue = "" + value;
            }
          }
          writeChunk(destination, arrayInterstitial);
          writeChunk(destination, stringToChunk(escapeTextForBrowser(JSON.stringify(attributeName))));
          writeChunk(destination, arrayInterstitial);
          writeChunk(destination, stringToChunk(escapeTextForBrowser(JSON.stringify(attributeValue))));
        }
        var PENDING$1 = 0;
        var PRELOADED = 1;
        var PREAMBLE = 2;
        var LATE = 3;
        function createHoistableState() {
          return {
            styles: /* @__PURE__ */ new Set(),
            stylesheets: /* @__PURE__ */ new Set()
          };
        }
        function getResourceKey(href) {
          return href;
        }
        function getImageResourceKey(href, imageSrcSet, imageSizes) {
          if (imageSrcSet) {
            return imageSrcSet + "\n" + (imageSizes || "");
          }
          return href;
        }
        function prefetchDNS(href) {
          var request = resolveRequest();
          if (!request) {
            return;
          }
          var resumableState = getResumableState(request);
          var renderState = getRenderState(request);
          if (typeof href === "string" && href) {
            var key = getResourceKey(href);
            if (!resumableState.dnsResources.hasOwnProperty(key)) {
              resumableState.dnsResources[key] = EXISTS;
              var headers = renderState.headers;
              var header;
              if (headers && headers.remainingCapacity > 0 && // Compute the header since we might be able to fit it in the max length
              (header = getPrefetchDNSAsHeader(href), // We always consume the header length since once we find one header that doesn't fit
              // we assume all the rest won't as well. This is to avoid getting into a situation
              // where we have a very small remaining capacity but no headers will ever fit and we end
              // up constantly trying to see if the next resource might make it. In the future we can
              // make this behavior different between render and prerender since in the latter case
              // we are less sensitive to the current requests runtime per and more sensitive to maximizing
              // headers.
              (headers.remainingCapacity -= header.length) >= 2)) {
                renderState.resets.dns[key] = EXISTS;
                if (headers.preconnects) {
                  headers.preconnects += ", ";
                }
                headers.preconnects += header;
              } else {
                var resource = [];
                pushLinkImpl(resource, {
                  href,
                  rel: "dns-prefetch"
                });
                renderState.preconnects.add(resource);
              }
            }
            flushResources(request);
          }
        }
        function preconnect(href, crossOrigin) {
          var request = resolveRequest();
          if (!request) {
            return;
          }
          var resumableState = getResumableState(request);
          var renderState = getRenderState(request);
          if (typeof href === "string" && href) {
            var bucket = crossOrigin === "use-credentials" ? "credentials" : typeof crossOrigin === "string" ? "anonymous" : "default";
            var key = getResourceKey(href);
            if (!resumableState.connectResources[bucket].hasOwnProperty(key)) {
              resumableState.connectResources[bucket][key] = EXISTS;
              var headers = renderState.headers;
              var header;
              if (headers && headers.remainingCapacity > 0 && // Compute the header since we might be able to fit it in the max length
              (header = getPreconnectAsHeader(href, crossOrigin), // We always consume the header length since once we find one header that doesn't fit
              // we assume all the rest won't as well. This is to avoid getting into a situation
              // where we have a very small remaining capacity but no headers will ever fit and we end
              // up constantly trying to see if the next resource might make it. In the future we can
              // make this behavior different between render and prerender since in the latter case
              // we are less sensitive to the current requests runtime per and more sensitive to maximizing
              // headers.
              (headers.remainingCapacity -= header.length) >= 2)) {
                renderState.resets.connect[bucket][key] = EXISTS;
                if (headers.preconnects) {
                  headers.preconnects += ", ";
                }
                headers.preconnects += header;
              } else {
                var resource = [];
                pushLinkImpl(resource, {
                  rel: "preconnect",
                  href,
                  crossOrigin
                });
                renderState.preconnects.add(resource);
              }
            }
            flushResources(request);
          }
        }
        function preload(href, as, options) {
          var request = resolveRequest();
          if (!request) {
            return;
          }
          var resumableState = getResumableState(request);
          var renderState = getRenderState(request);
          if (as && href) {
            switch (as) {
              case "image": {
                var imageSrcSet, imageSizes, fetchPriority;
                if (options) {
                  imageSrcSet = options.imageSrcSet;
                  imageSizes = options.imageSizes;
                  fetchPriority = options.fetchPriority;
                }
                var key = getImageResourceKey(href, imageSrcSet, imageSizes);
                if (resumableState.imageResources.hasOwnProperty(key)) {
                  return;
                }
                resumableState.imageResources[key] = PRELOAD_NO_CREDS;
                var headers = renderState.headers;
                var header;
                if (headers && headers.remainingCapacity > 0 && fetchPriority === "high" && // Compute the header since we might be able to fit it in the max length
                (header = getPreloadAsHeader(href, as, options), // We always consume the header length since once we find one header that doesn't fit
                // we assume all the rest won't as well. This is to avoid getting into a situation
                // where we have a very small remaining capacity but no headers will ever fit and we end
                // up constantly trying to see if the next resource might make it. In the future we can
                // make this behavior different between render and prerender since in the latter case
                // we are less sensitive to the current requests runtime per and more sensitive to maximizing
                // headers.
                (headers.remainingCapacity -= header.length) >= 2)) {
                  renderState.resets.image[key] = PRELOAD_NO_CREDS;
                  if (headers.highImagePreloads) {
                    headers.highImagePreloads += ", ";
                  }
                  headers.highImagePreloads += header;
                } else {
                  var resource = [];
                  pushLinkImpl(resource, assign({
                    rel: "preload",
                    // There is a bug in Safari where imageSrcSet is not respected on preload links
                    // so we omit the href here if we have imageSrcSet b/c safari will load the wrong image.
                    // This harms older browers that do not support imageSrcSet by making their preloads not work
                    // but this population is shrinking fast and is already small so we accept this tradeoff.
                    href: imageSrcSet ? void 0 : href,
                    as
                  }, options));
                  if (fetchPriority === "high") {
                    renderState.highImagePreloads.add(resource);
                  } else {
                    renderState.bulkPreloads.add(resource);
                    renderState.preloads.images.set(key, resource);
                  }
                }
                break;
              }
              case "style": {
                var _key = getResourceKey(href);
                if (resumableState.styleResources.hasOwnProperty(_key)) {
                  return;
                }
                var _resource2 = [];
                pushLinkImpl(_resource2, assign({
                  rel: "preload",
                  href,
                  as
                }, options));
                resumableState.styleResources[_key] = options && (typeof options.crossOrigin === "string" || typeof options.integrity === "string") ? [options.crossOrigin, options.integrity] : PRELOAD_NO_CREDS;
                renderState.preloads.stylesheets.set(_key, _resource2);
                renderState.bulkPreloads.add(_resource2);
                break;
              }
              case "script": {
                var _key2 = getResourceKey(href);
                if (resumableState.scriptResources.hasOwnProperty(_key2)) {
                  return;
                }
                var _resource3 = [];
                renderState.preloads.scripts.set(_key2, _resource3);
                renderState.bulkPreloads.add(_resource3);
                pushLinkImpl(_resource3, assign({
                  rel: "preload",
                  href,
                  as
                }, options));
                resumableState.scriptResources[_key2] = options && (typeof options.crossOrigin === "string" || typeof options.integrity === "string") ? [options.crossOrigin, options.integrity] : PRELOAD_NO_CREDS;
                break;
              }
              default: {
                var _key3 = getResourceKey(href);
                var hasAsType = resumableState.unknownResources.hasOwnProperty(as);
                var resources;
                if (hasAsType) {
                  resources = resumableState.unknownResources[as];
                  if (resources.hasOwnProperty(_key3)) {
                    return;
                  }
                } else {
                  resources = {};
                  resumableState.unknownResources[as] = resources;
                }
                resources[_key3] = PRELOAD_NO_CREDS;
                var _headers = renderState.headers;
                var _header;
                if (_headers && _headers.remainingCapacity > 0 && as === "font" && // We compute the header here because we might be able to fit it in the max length
                (_header = getPreloadAsHeader(href, as, options), // We always consume the header length since once we find one header that doesn't fit
                // we assume all the rest won't as well. This is to avoid getting into a situation
                // where we have a very small remaining capacity but no headers will ever fit and we end
                // up constantly trying to see if the next resource might make it. In the future we can
                // make this behavior different between render and prerender since in the latter case
                // we are less sensitive to the current requests runtime per and more sensitive to maximizing
                // headers.
                (_headers.remainingCapacity -= _header.length) >= 2)) {
                  renderState.resets.font[_key3] = PRELOAD_NO_CREDS;
                  if (_headers.fontPreloads) {
                    _headers.fontPreloads += ", ";
                  }
                  _headers.fontPreloads += _header;
                } else {
                  var _resource4 = [];
                  var props = assign({
                    rel: "preload",
                    href,
                    as
                  }, options);
                  pushLinkImpl(_resource4, props);
                  switch (as) {
                    case "font":
                      renderState.fontPreloads.add(_resource4);
                      break;
                    default:
                      renderState.bulkPreloads.add(_resource4);
                  }
                }
              }
            }
            flushResources(request);
          }
        }
        function preloadModule(href, options) {
          var request = resolveRequest();
          if (!request) {
            return;
          }
          var resumableState = getResumableState(request);
          var renderState = getRenderState(request);
          if (href) {
            var key = getResourceKey(href);
            var as = options && typeof options.as === "string" ? options.as : "script";
            var resource;
            switch (as) {
              case "script": {
                if (resumableState.moduleScriptResources.hasOwnProperty(key)) {
                  return;
                }
                resource = [];
                resumableState.moduleScriptResources[key] = options && (typeof options.crossOrigin === "string" || typeof options.integrity === "string") ? [options.crossOrigin, options.integrity] : PRELOAD_NO_CREDS;
                renderState.preloads.moduleScripts.set(key, resource);
                break;
              }
              default: {
                var hasAsType = resumableState.moduleUnknownResources.hasOwnProperty(as);
                var resources;
                if (hasAsType) {
                  resources = resumableState.unknownResources[as];
                  if (resources.hasOwnProperty(key)) {
                    return;
                  }
                } else {
                  resources = {};
                  resumableState.moduleUnknownResources[as] = resources;
                }
                resource = [];
                resources[key] = PRELOAD_NO_CREDS;
              }
            }
            pushLinkImpl(resource, assign({
              rel: "modulepreload",
              href
            }, options));
            renderState.bulkPreloads.add(resource);
            flushResources(request);
          }
        }
        function preinitStyle(href, precedence, options) {
          var request = resolveRequest();
          if (!request) {
            return;
          }
          var resumableState = getResumableState(request);
          var renderState = getRenderState(request);
          if (href) {
            precedence = precedence || "default";
            var key = getResourceKey(href);
            var styleQueue = renderState.styles.get(precedence);
            var hasKey = resumableState.styleResources.hasOwnProperty(key);
            var resourceState = hasKey ? resumableState.styleResources[key] : void 0;
            if (resourceState !== EXISTS) {
              resumableState.styleResources[key] = EXISTS;
              if (!styleQueue) {
                styleQueue = {
                  precedence: stringToChunk(escapeTextForBrowser(precedence)),
                  rules: [],
                  hrefs: [],
                  sheets: /* @__PURE__ */ new Map()
                };
                renderState.styles.set(precedence, styleQueue);
              }
              var resource = {
                state: PENDING$1,
                props: assign({
                  rel: "stylesheet",
                  href,
                  "data-precedence": precedence
                }, options)
              };
              if (resourceState) {
                var preloadState = resourceState;
                if (preloadState.length === 2) {
                  adoptPreloadCredentials(resource.props, preloadState);
                }
                var preloadResource = renderState.preloads.stylesheets.get(key);
                if (preloadResource && preloadResource.length > 0) {
                  preloadResource.length = 0;
                } else {
                  resource.state = PRELOADED;
                }
              }
              styleQueue.sheets.set(key, resource);
              flushResources(request);
            }
          }
        }
        function preinitScript(src, options) {
          var request = resolveRequest();
          if (!request) {
            return;
          }
          var resumableState = getResumableState(request);
          var renderState = getRenderState(request);
          if (src) {
            var key = getResourceKey(src);
            var hasKey = resumableState.scriptResources.hasOwnProperty(key);
            var resourceState = hasKey ? resumableState.scriptResources[key] : void 0;
            if (resourceState !== EXISTS) {
              resumableState.scriptResources[key] = EXISTS;
              var props = assign({
                src,
                async: true
              }, options);
              if (resourceState) {
                var preloadState = resourceState;
                if (preloadState.length === 2) {
                  adoptPreloadCredentials(props, preloadState);
                }
                var preloadResource = renderState.preloads.scripts.get(key);
                if (preloadResource) {
                  preloadResource.length = 0;
                }
              }
              var resource = [];
              renderState.scripts.add(resource);
              pushScriptImpl(resource, props);
              flushResources(request);
            }
            return;
          }
        }
        function preinitModuleScript(src, options) {
          var request = resolveRequest();
          if (!request) {
            return;
          }
          var resumableState = getResumableState(request);
          var renderState = getRenderState(request);
          if (src) {
            var key = getResourceKey(src);
            var hasKey = resumableState.moduleScriptResources.hasOwnProperty(key);
            var resourceState = hasKey ? resumableState.moduleScriptResources[key] : void 0;
            if (resourceState !== EXISTS) {
              resumableState.moduleScriptResources[key] = EXISTS;
              var props = assign({
                src,
                type: "module",
                async: true
              }, options);
              if (resourceState) {
                var preloadState = resourceState;
                if (preloadState.length === 2) {
                  adoptPreloadCredentials(props, preloadState);
                }
                var preloadResource = renderState.preloads.moduleScripts.get(key);
                if (preloadResource) {
                  preloadResource.length = 0;
                }
              }
              var resource = [];
              renderState.scripts.add(resource);
              pushScriptImpl(resource, props);
              flushResources(request);
            }
            return;
          }
        }
        function preloadBootstrapScriptOrModule(resumableState, renderState, href, props) {
          var key = getResourceKey(href);
          {
            if (resumableState.scriptResources.hasOwnProperty(key) || resumableState.moduleScriptResources.hasOwnProperty(key)) {
              error('Internal React Error: React expected bootstrap script or module with src "%s" to not have been preloaded already. please file an issue', href);
            }
          }
          resumableState.scriptResources[key] = EXISTS;
          resumableState.moduleScriptResources[key] = EXISTS;
          var resource = [];
          pushLinkImpl(resource, props);
          renderState.bootstrapScripts.add(resource);
        }
        function internalPreinitScript(resumableState, renderState, src, chunks) {
          var key = getResourceKey(src);
          if (!resumableState.scriptResources.hasOwnProperty(key)) {
            var resource = chunks;
            resumableState.scriptResources[key] = EXISTS;
            renderState.scripts.add(resource);
          }
          return;
        }
        function preloadAsStylePropsFromProps(href, props) {
          return {
            rel: "preload",
            as: "style",
            href,
            crossOrigin: props.crossOrigin,
            fetchPriority: props.fetchPriority,
            integrity: props.integrity,
            media: props.media,
            hrefLang: props.hrefLang,
            referrerPolicy: props.referrerPolicy
          };
        }
        function stylesheetPropsFromRawProps(rawProps) {
          return assign({}, rawProps, {
            "data-precedence": rawProps.precedence,
            precedence: null
          });
        }
        function adoptPreloadCredentials(target, preloadState) {
          if (target.crossOrigin == null) target.crossOrigin = preloadState[0];
          if (target.integrity == null) target.integrity = preloadState[1];
        }
        function getPrefetchDNSAsHeader(href) {
          var escapedHref = escapeHrefForLinkHeaderURLContext(href);
          return "<" + escapedHref + ">; rel=dns-prefetch";
        }
        function getPreconnectAsHeader(href, crossOrigin) {
          var escapedHref = escapeHrefForLinkHeaderURLContext(href);
          var value = "<" + escapedHref + ">; rel=preconnect";
          if (typeof crossOrigin === "string") {
            var escapedCrossOrigin = escapeStringForLinkHeaderQuotedParamValueContext(crossOrigin, "crossOrigin");
            value += '; crossorigin="' + escapedCrossOrigin + '"';
          }
          return value;
        }
        function getPreloadAsHeader(href, as, params) {
          var escapedHref = escapeHrefForLinkHeaderURLContext(href);
          var escapedAs = escapeStringForLinkHeaderQuotedParamValueContext(as, "as");
          var value = "<" + escapedHref + '>; rel=preload; as="' + escapedAs + '"';
          for (var paramName in params) {
            if (hasOwnProperty.call(params, paramName)) {
              var paramValue = params[paramName];
              if (typeof paramValue === "string") {
                value += "; " + paramName.toLowerCase() + '="' + escapeStringForLinkHeaderQuotedParamValueContext(paramValue, paramName) + '"';
              }
            }
          }
          return value;
        }
        function getStylesheetPreloadAsHeader(stylesheet) {
          var props = stylesheet.props;
          var preloadOptions = {
            crossOrigin: props.crossOrigin,
            integrity: props.integrity,
            nonce: props.nonce,
            type: props.type,
            fetchPriority: props.fetchPriority,
            referrerPolicy: props.referrerPolicy,
            media: props.media
          };
          return getPreloadAsHeader(props.href, "style", preloadOptions);
        }
        var regexForHrefInLinkHeaderURLContext = /[<>\r\n]/g;
        function escapeHrefForLinkHeaderURLContext(hrefInput) {
          {
            checkAttributeStringCoercion(hrefInput, "href");
          }
          var coercedHref = "" + hrefInput;
          return coercedHref.replace(regexForHrefInLinkHeaderURLContext, escapeHrefForLinkHeaderURLContextReplacer);
        }
        function escapeHrefForLinkHeaderURLContextReplacer(match) {
          switch (match) {
            case "<":
              return "%3C";
            case ">":
              return "%3E";
            case "\n":
              return "%0A";
            case "\r":
              return "%0D";
            default: {
              throw new Error("escapeLinkHrefForHeaderContextReplacer encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React");
            }
          }
        }
        var regexForLinkHeaderQuotedParamValueContext = /["';,\r\n]/g;
        function escapeStringForLinkHeaderQuotedParamValueContext(value, name) {
          {
            checkOptionStringCoercion(value, name);
          }
          var coerced = "" + value;
          return coerced.replace(regexForLinkHeaderQuotedParamValueContext, escapeStringForLinkHeaderQuotedParamValueContextReplacer);
        }
        function escapeStringForLinkHeaderQuotedParamValueContextReplacer(match) {
          switch (match) {
            case '"':
              return "%22";
            case "'":
              return "%27";
            case ";":
              return "%3B";
            case ",":
              return "%2C";
            case "\n":
              return "%0A";
            case "\r":
              return "%0D";
            default: {
              throw new Error("escapeStringForLinkHeaderQuotedParamValueContextReplacer encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React");
            }
          }
        }
        function hoistStyleQueueDependency(styleQueue) {
          this.styles.add(styleQueue);
        }
        function hoistStylesheetDependency(stylesheet) {
          this.stylesheets.add(stylesheet);
        }
        function hoistHoistables(parentState, childState) {
          childState.styles.forEach(hoistStyleQueueDependency, parentState);
          childState.stylesheets.forEach(hoistStylesheetDependency, parentState);
        }
        function emitEarlyPreloads(renderState, resumableState, shellComplete) {
          var onHeaders = renderState.onHeaders;
          if (onHeaders) {
            var headers = renderState.headers;
            if (headers) {
              renderState.headers = null;
              var linkHeader = headers.preconnects;
              if (headers.fontPreloads) {
                if (linkHeader) {
                  linkHeader += ", ";
                }
                linkHeader += headers.fontPreloads;
              }
              if (headers.highImagePreloads) {
                if (linkHeader) {
                  linkHeader += ", ";
                }
                linkHeader += headers.highImagePreloads;
              }
              if (!shellComplete) {
                var queueIter = renderState.styles.values();
                outer: for (var queueStep = queueIter.next(); headers.remainingCapacity > 0 && !queueStep.done; queueStep = queueIter.next()) {
                  var sheets = queueStep.value.sheets;
                  var sheetIter = sheets.values();
                  for (var sheetStep = sheetIter.next(); headers.remainingCapacity > 0 && !sheetStep.done; sheetStep = sheetIter.next()) {
                    var sheet = sheetStep.value;
                    var props = sheet.props;
                    var key = getResourceKey(props.href);
                    var header = getStylesheetPreloadAsHeader(sheet);
                    if ((headers.remainingCapacity -= header.length) >= 2) {
                      renderState.resets.style[key] = PRELOAD_NO_CREDS;
                      if (linkHeader) {
                        linkHeader += ", ";
                      }
                      linkHeader += header;
                      renderState.resets.style[key] = typeof props.crossOrigin === "string" || typeof props.integrity === "string" ? [props.crossOrigin, props.integrity] : PRELOAD_NO_CREDS;
                    } else {
                      break outer;
                    }
                  }
                }
              }
              if (linkHeader) {
                onHeaders({
                  Link: linkHeader
                });
              } else {
                onHeaders({});
              }
              return;
            }
          }
        }
        function createRenderState(resumableState, generateStaticMarkup) {
          var renderState = createRenderState$1(resumableState, void 0, void 0, void 0, void 0, void 0);
          return {
            // Keep this in sync with ReactFizzConfigDOM
            placeholderPrefix: renderState.placeholderPrefix,
            segmentPrefix: renderState.segmentPrefix,
            boundaryPrefix: renderState.boundaryPrefix,
            startInlineScript: renderState.startInlineScript,
            htmlChunks: renderState.htmlChunks,
            headChunks: renderState.headChunks,
            externalRuntimeScript: renderState.externalRuntimeScript,
            bootstrapChunks: renderState.bootstrapChunks,
            importMapChunks: renderState.importMapChunks,
            onHeaders: renderState.onHeaders,
            headers: renderState.headers,
            resets: renderState.resets,
            charsetChunks: renderState.charsetChunks,
            viewportChunks: renderState.viewportChunks,
            hoistableChunks: renderState.hoistableChunks,
            preconnects: renderState.preconnects,
            fontPreloads: renderState.fontPreloads,
            highImagePreloads: renderState.highImagePreloads,
            // usedImagePreloads: renderState.usedImagePreloads,
            styles: renderState.styles,
            bootstrapScripts: renderState.bootstrapScripts,
            scripts: renderState.scripts,
            bulkPreloads: renderState.bulkPreloads,
            preloads: renderState.preloads,
            stylesToHoist: renderState.stylesToHoist,
            // This is an extra field for the legacy renderer
            generateStaticMarkup
          };
        }
        var doctypeChunk = stringToPrecomputedChunk("");
        function pushTextInstance(target, text, renderState, textEmbedded) {
          if (renderState.generateStaticMarkup) {
            target.push(stringToChunk(escapeTextForBrowser(text)));
            return false;
          } else {
            return pushTextInstance$1(target, text, renderState, textEmbedded);
          }
        }
        function pushSegmentFinale(target, renderState, lastPushedText, textEmbedded) {
          if (renderState.generateStaticMarkup) {
            return;
          } else {
            return pushSegmentFinale$1(target, renderState, lastPushedText, textEmbedded);
          }
        }
        function writeStartCompletedSuspenseBoundary(destination, renderState) {
          if (renderState.generateStaticMarkup) {
            return true;
          }
          return writeStartCompletedSuspenseBoundary$1(destination);
        }
        function writeStartClientRenderedSuspenseBoundary(destination, renderState, errorDigest, errorMessage, errorComponentStack) {
          if (renderState.generateStaticMarkup) {
            return true;
          }
          return writeStartClientRenderedSuspenseBoundary$1(destination, renderState, errorDigest, errorMessage, errorComponentStack);
        }
        function writeEndCompletedSuspenseBoundary(destination, renderState) {
          if (renderState.generateStaticMarkup) {
            return true;
          }
          return writeEndCompletedSuspenseBoundary$1(destination);
        }
        function writeEndClientRenderedSuspenseBoundary(destination, renderState) {
          if (renderState.generateStaticMarkup) {
            return true;
          }
          return writeEndClientRenderedSuspenseBoundary$1(destination);
        }
        var NotPendingTransition = NotPending;
        function getWrappedName(outerType, innerType, wrapperName) {
          var displayName = outerType.displayName;
          if (displayName) {
            return displayName;
          }
          var functionName = innerType.displayName || innerType.name || "";
          return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        var REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference");
        function getComponentNameFromType(type) {
          if (type == null) {
            return null;
          }
          if (typeof type === "function") {
            if (type.$$typeof === REACT_CLIENT_REFERENCE) {
              return null;
            }
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
            case REACT_CACHE_TYPE: {
              return "Cache";
            }
          }
          if (typeof type === "object") {
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            switch (type.$$typeof) {
              case REACT_PROVIDER_TYPE: {
                var provider = type;
                return getContextName(provider._context) + ".Provider";
              }
              case REACT_CONTEXT_TYPE:
                var context = type;
                {
                  return getContextName(context) + ".Consumer";
                }
              case REACT_CONSUMER_TYPE: {
                return null;
              }
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) {
                  return outerName;
                }
                return getComponentNameFromType(type.type) || "Memo";
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return getComponentNameFromType(init(payload));
                } catch (x) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        var warnedAboutMissingGetChildContext;
        {
          warnedAboutMissingGetChildContext = {};
        }
        var emptyContextObject = {};
        {
          Object.freeze(emptyContextObject);
        }
        function getMaskedContext(type, unmaskedContext) {
          {
            var contextTypes = type.contextTypes;
            if (!contextTypes) {
              return emptyContextObject;
            }
            var context = {};
            for (var key in contextTypes) {
              context[key] = unmaskedContext[key];
            }
            return context;
          }
        }
        function processChildContext(instance, type, parentContext, childContextTypes) {
          {
            if (typeof instance.getChildContext !== "function") {
              {
                var componentName = getComponentNameFromType(type) || "Unknown";
                if (!warnedAboutMissingGetChildContext[componentName]) {
                  warnedAboutMissingGetChildContext[componentName] = true;
                  error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                }
              }
              return parentContext;
            }
            var childContext = instance.getChildContext();
            for (var contextKey in childContext) {
              if (!(contextKey in childContextTypes)) {
                throw new Error((getComponentNameFromType(type) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
              }
            }
            return assign({}, parentContext, childContext);
          }
        }
        var rendererSigil;
        {
          rendererSigil = {};
        }
        var rootContextSnapshot = null;
        var currentActiveSnapshot = null;
        function popNode(prev) {
          {
            prev.context._currentValue2 = prev.parentValue;
          }
        }
        function pushNode(next) {
          {
            next.context._currentValue2 = next.value;
          }
        }
        function popToNearestCommonAncestor(prev, next) {
          if (prev === next) ;
          else {
            popNode(prev);
            var parentPrev = prev.parent;
            var parentNext = next.parent;
            if (parentPrev === null) {
              if (parentNext !== null) {
                throw new Error("The stacks must reach the root at the same time. This is a bug in React.");
              }
            } else {
              if (parentNext === null) {
                throw new Error("The stacks must reach the root at the same time. This is a bug in React.");
              }
              popToNearestCommonAncestor(parentPrev, parentNext);
            }
            pushNode(next);
          }
        }
        function popAllPrevious(prev) {
          popNode(prev);
          var parentPrev = prev.parent;
          if (parentPrev !== null) {
            popAllPrevious(parentPrev);
          }
        }
        function pushAllNext(next) {
          var parentNext = next.parent;
          if (parentNext !== null) {
            pushAllNext(parentNext);
          }
          pushNode(next);
        }
        function popPreviousToCommonLevel(prev, next) {
          popNode(prev);
          var parentPrev = prev.parent;
          if (parentPrev === null) {
            throw new Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");
          }
          if (parentPrev.depth === next.depth) {
            popToNearestCommonAncestor(parentPrev, next);
          } else {
            popPreviousToCommonLevel(parentPrev, next);
          }
        }
        function popNextToCommonLevel(prev, next) {
          var parentNext = next.parent;
          if (parentNext === null) {
            throw new Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");
          }
          if (prev.depth === parentNext.depth) {
            popToNearestCommonAncestor(prev, parentNext);
          } else {
            popNextToCommonLevel(prev, parentNext);
          }
          pushNode(next);
        }
        function switchContext(newSnapshot) {
          var prev = currentActiveSnapshot;
          var next = newSnapshot;
          if (prev !== next) {
            if (prev === null) {
              pushAllNext(next);
            } else if (next === null) {
              popAllPrevious(prev);
            } else if (prev.depth === next.depth) {
              popToNearestCommonAncestor(prev, next);
            } else if (prev.depth > next.depth) {
              popPreviousToCommonLevel(prev, next);
            } else {
              popNextToCommonLevel(prev, next);
            }
            currentActiveSnapshot = next;
          }
        }
        function pushProvider(context, nextValue) {
          var prevValue;
          {
            prevValue = context._currentValue2;
            context._currentValue2 = nextValue;
            {
              if (context._currentRenderer2 !== void 0 && context._currentRenderer2 !== null && context._currentRenderer2 !== rendererSigil) {
                error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
              }
              context._currentRenderer2 = rendererSigil;
            }
          }
          var prevNode = currentActiveSnapshot;
          var newNode = {
            parent: prevNode,
            depth: prevNode === null ? 0 : prevNode.depth + 1,
            context,
            parentValue: prevValue,
            value: nextValue
          };
          currentActiveSnapshot = newNode;
          return newNode;
        }
        function popProvider(context) {
          var prevSnapshot = currentActiveSnapshot;
          if (prevSnapshot === null) {
            throw new Error("Tried to pop a Context at the root of the app. This is a bug in React.");
          }
          {
            if (prevSnapshot.context !== context) {
              error("The parent context is not the expected context. This is probably a bug in React.");
            }
          }
          {
            var _value = prevSnapshot.parentValue;
            prevSnapshot.context._currentValue2 = _value;
            {
              if (context._currentRenderer2 !== void 0 && context._currentRenderer2 !== null && context._currentRenderer2 !== rendererSigil) {
                error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
              }
              context._currentRenderer2 = rendererSigil;
            }
          }
          return currentActiveSnapshot = prevSnapshot.parent;
        }
        function getActiveContext() {
          return currentActiveSnapshot;
        }
        function readContext$1(context) {
          var value = context._currentValue2;
          return value;
        }
        function get(key) {
          return key._reactInternals;
        }
        function set(key, value) {
          key._reactInternals = value;
        }
        var didWarnAboutNoopUpdateForComponent = {};
        var didWarnAboutDeprecatedWillMount = {};
        var didWarnAboutUninitializedState;
        var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
        var didWarnAboutLegacyLifecyclesAndDerivedState;
        var didWarnAboutUndefinedDerivedState;
        var didWarnAboutDirectlyAssigningPropsToState;
        var didWarnAboutContextTypeAndContextTypes;
        var didWarnAboutInvalidateContextType;
        var didWarnOnInvalidCallback;
        {
          didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
          didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
          didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
          didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
          didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
          didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
          didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
          didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
        }
        function warnOnInvalidCallback(callback) {
          {
            if (callback === null || typeof callback === "function") {
              return;
            }
            var key = String(callback);
            if (!didWarnOnInvalidCallback.has(key)) {
              didWarnOnInvalidCallback.add(key);
              error("Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
            }
          }
        }
        function warnOnUndefinedDerivedState(type, partialState) {
          {
            if (partialState === void 0) {
              var componentName = getComponentNameFromType(type) || "Component";
              if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                didWarnAboutUndefinedDerivedState.add(componentName);
                error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
              }
            }
          }
        }
        function warnNoop(publicInstance, callerName) {
          {
            var _constructor = publicInstance.constructor;
            var componentName = _constructor && getComponentNameFromType(_constructor) || "ReactClass";
            var warningKey = componentName + "." + callerName;
            if (didWarnAboutNoopUpdateForComponent[warningKey]) {
              return;
            }
            error("Can only update a mounting component. This usually means you called %s() outside componentWillMount() on the server. This is a no-op.\n\nPlease check the code for the %s component.", callerName, componentName);
            didWarnAboutNoopUpdateForComponent[warningKey] = true;
          }
        }
        var classComponentUpdater = {
          isMounted: function(inst) {
            return false;
          },
          // $FlowFixMe[missing-local-annot]
          enqueueSetState: function(inst, payload, callback) {
            var internals = get(inst);
            if (internals.queue === null) {
              warnNoop(inst, "setState");
            } else {
              internals.queue.push(payload);
              {
                if (callback !== void 0 && callback !== null) {
                  warnOnInvalidCallback(callback);
                }
              }
            }
          },
          enqueueReplaceState: function(inst, payload, callback) {
            var internals = get(inst);
            internals.replace = true;
            internals.queue = [payload];
            {
              if (callback !== void 0 && callback !== null) {
                warnOnInvalidCallback(callback);
              }
            }
          },
          // $FlowFixMe[missing-local-annot]
          enqueueForceUpdate: function(inst, callback) {
            var internals = get(inst);
            if (internals.queue === null) {
              warnNoop(inst, "forceUpdate");
            } else {
              {
                if (callback !== void 0 && callback !== null) {
                  warnOnInvalidCallback(callback);
                }
              }
            }
          }
        };
        function applyDerivedStateFromProps(instance, ctor, getDerivedStateFromProps, prevState, nextProps) {
          var partialState = getDerivedStateFromProps(nextProps, prevState);
          {
            warnOnUndefinedDerivedState(ctor, partialState);
          }
          var newState = partialState === null || partialState === void 0 ? prevState : assign({}, prevState, partialState);
          return newState;
        }
        function constructClassInstance(ctor, props, maskedLegacyContext) {
          var context = emptyContextObject;
          var contextType = ctor.contextType;
          {
            if ("contextType" in ctor) {
              var isValid = (
                // Allow null for conditional declaration
                contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE
              );
              if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                didWarnAboutInvalidateContextType.add(ctor);
                var addendum = "";
                if (contextType === void 0) {
                  addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                } else if (typeof contextType !== "object") {
                  addendum = " However, it is set to a " + typeof contextType + ".";
                } else if (contextType.$$typeof === REACT_CONSUMER_TYPE) {
                  addendum = " Did you accidentally pass the Context.Consumer instead?";
                } else {
                  addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                }
                error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
              }
            }
          }
          if (typeof contextType === "object" && contextType !== null) {
            context = readContext$1(contextType);
          } else {
            context = maskedLegacyContext;
          }
          var instance = new ctor(props, context);
          {
            if (typeof ctor.getDerivedStateFromProps === "function" && (instance.state === null || instance.state === void 0)) {
              var componentName = getComponentNameFromType(ctor) || "Component";
              if (!didWarnAboutUninitializedState.has(componentName)) {
                didWarnAboutUninitializedState.add(componentName);
                error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
              }
            }
            if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
              var foundWillMountName = null;
              var foundWillReceivePropsName = null;
              var foundWillUpdateName = null;
              if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                foundWillMountName = "componentWillMount";
              } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                foundWillMountName = "UNSAFE_componentWillMount";
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                foundWillReceivePropsName = "componentWillReceiveProps";
              } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                foundWillUpdateName = "componentWillUpdate";
              } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                foundWillUpdateName = "UNSAFE_componentWillUpdate";
              }
              if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                var _componentName = getComponentNameFromType(ctor) || "Component";
                var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                  didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                  error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                }
              }
            }
          }
          return instance;
        }
        function checkClassInstance(instance, ctor, newProps) {
          {
            var name = getComponentNameFromType(ctor) || "Component";
            var renderPresent = instance.render;
            if (!renderPresent) {
              if (ctor.prototype && typeof ctor.prototype.render === "function") {
                error("No `render` method found on the %s instance: did you accidentally return an object from the constructor?", name);
              } else {
                error("No `render` method found on the %s instance: you may have forgotten to define `render`.", name);
              }
            }
            if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
              error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
            }
            if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
            }
            if (instance.propTypes) {
              error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
            }
            if (instance.contextType) {
              error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
            }
            {
              if (instance.contextTypes) {
                error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
              }
              if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                didWarnAboutContextTypeAndContextTypes.add(ctor);
                error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
              }
            }
            if (typeof instance.componentShouldUpdate === "function") {
              error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
              error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
            }
            if (typeof instance.componentDidUnmount === "function") {
              error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
            }
            if (typeof instance.componentDidReceiveProps === "function") {
              error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
            }
            if (typeof instance.componentWillRecieveProps === "function") {
              error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
            }
            if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
              error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
            }
            var hasMutatedProps = instance.props !== newProps;
            if (instance.props !== void 0 && hasMutatedProps) {
              error("When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name);
            }
            if (instance.defaultProps) {
              error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
              didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
              error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
            }
            if (typeof instance.getDerivedStateFromProps === "function") {
              error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
            }
            if (typeof instance.getDerivedStateFromError === "function") {
              error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
            }
            if (typeof ctor.getSnapshotBeforeUpdate === "function") {
              error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
            }
            var state = instance.state;
            if (state && (typeof state !== "object" || isArray(state))) {
              error("%s.state: must be set to an object or null", name);
            }
            if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
              error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
            }
          }
        }
        function callComponentWillMount(type, instance) {
          var oldState = instance.state;
          if (typeof instance.componentWillMount === "function") {
            {
              if (instance.componentWillMount.__suppressDeprecationWarning !== true) {
                var componentName = getComponentNameFromType(type) || "Unknown";
                if (!didWarnAboutDeprecatedWillMount[componentName]) {
                  warn(
                    // keep this warning in sync with ReactStrictModeWarning.js
                    "componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code from componentWillMount to componentDidMount (preferred in most cases) or the constructor.\n\nPlease update the following components: %s",
                    componentName
                  );
                  didWarnAboutDeprecatedWillMount[componentName] = true;
                }
              }
            }
            instance.componentWillMount();
          }
          if (typeof instance.UNSAFE_componentWillMount === "function") {
            instance.UNSAFE_componentWillMount();
          }
          if (oldState !== instance.state) {
            {
              error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromType(type) || "Component");
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function processUpdateQueue(internalInstance, inst, props, maskedLegacyContext) {
          if (internalInstance.queue !== null && internalInstance.queue.length > 0) {
            var oldQueue = internalInstance.queue;
            var oldReplace = internalInstance.replace;
            internalInstance.queue = null;
            internalInstance.replace = false;
            if (oldReplace && oldQueue.length === 1) {
              inst.state = oldQueue[0];
            } else {
              var nextState = oldReplace ? oldQueue[0] : inst.state;
              var dontMutate = true;
              for (var i = oldReplace ? 1 : 0; i < oldQueue.length; i++) {
                var partial = oldQueue[i];
                var partialState = typeof partial === "function" ? partial.call(inst, nextState, props, maskedLegacyContext) : partial;
                if (partialState != null) {
                  if (dontMutate) {
                    dontMutate = false;
                    nextState = assign({}, nextState, partialState);
                  } else {
                    assign(nextState, partialState);
                  }
                }
              }
              inst.state = nextState;
            }
          } else {
            internalInstance.queue = null;
          }
        }
        function mountClassInstance(instance, ctor, newProps, maskedLegacyContext) {
          {
            checkClassInstance(instance, ctor, newProps);
          }
          var initialState = instance.state !== void 0 ? instance.state : null;
          instance.updater = classComponentUpdater;
          instance.props = newProps;
          instance.state = initialState;
          var internalInstance = {
            queue: [],
            replace: false
          };
          set(instance, internalInstance);
          var contextType = ctor.contextType;
          if (typeof contextType === "object" && contextType !== null) {
            instance.context = readContext$1(contextType);
          } else {
            instance.context = maskedLegacyContext;
          }
          {
            if (instance.state === newProps) {
              var componentName = getComponentNameFromType(ctor) || "Component";
              if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
              }
            }
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          if (typeof getDerivedStateFromProps === "function") {
            instance.state = applyDerivedStateFromProps(instance, ctor, getDerivedStateFromProps, initialState, newProps);
          }
          if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
            callComponentWillMount(ctor, instance);
            processUpdateQueue(internalInstance, instance, newProps, maskedLegacyContext);
          }
        }
        var emptyTreeContext = {
          id: 1,
          overflow: ""
        };
        function getTreeId(context) {
          var overflow = context.overflow;
          var idWithLeadingBit = context.id;
          var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
          return id.toString(32) + overflow;
        }
        function pushTreeContext(baseContext, totalChildren, index) {
          var baseIdWithLeadingBit = baseContext.id;
          var baseOverflow = baseContext.overflow;
          var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
          var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
          var slot = index + 1;
          var length = getBitLength(totalChildren) + baseLength;
          if (length > 30) {
            var numberOfOverflowBits = baseLength - baseLength % 5;
            var newOverflowBits = (1 << numberOfOverflowBits) - 1;
            var newOverflow = (baseId & newOverflowBits).toString(32);
            var restOfBaseId = baseId >> numberOfOverflowBits;
            var restOfBaseLength = baseLength - numberOfOverflowBits;
            var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
            var restOfNewBits = slot << restOfBaseLength;
            var id = restOfNewBits | restOfBaseId;
            var overflow = newOverflow + baseOverflow;
            return {
              id: 1 << restOfLength | id,
              overflow
            };
          } else {
            var newBits = slot << baseLength;
            var _id = newBits | baseId;
            var _overflow = baseOverflow;
            return {
              id: 1 << length | _id,
              overflow: _overflow
            };
          }
        }
        function getBitLength(number) {
          return 32 - clz32(number);
        }
        function getLeadingBit(id) {
          return 1 << getBitLength(id) - 1;
        }
        var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
        var log = Math.log;
        var LN2 = Math.LN2;
        function clz32Fallback(x) {
          var asUint = x >>> 0;
          if (asUint === 0) {
            return 32;
          }
          return 31 - (log(asUint) / LN2 | 0) | 0;
        }
        var SuspenseException = new Error("Suspense Exception: This is not a real error! It's an implementation detail of `use` to interrupt the current render. You must either rethrow it immediately, or move the `use` call outside of the `try/catch` block. Capturing without rethrowing will lead to unexpected behavior.\n\nTo handle async errors, wrap your component in an error boundary, or call the promise's `.catch` method and pass the result to `use`");
        function createThenableState() {
          return [];
        }
        function noop$2() {
        }
        function trackUsedThenable(thenableState2, thenable, index) {
          var previous = thenableState2[index];
          if (previous === void 0) {
            thenableState2.push(thenable);
          } else {
            if (previous !== thenable) {
              thenable.then(noop$2, noop$2);
              thenable = previous;
            }
          }
          switch (thenable.status) {
            case "fulfilled": {
              var fulfilledValue = thenable.value;
              return fulfilledValue;
            }
            case "rejected": {
              var rejectedError = thenable.reason;
              throw rejectedError;
            }
            default: {
              if (typeof thenable.status === "string") ;
              else {
                var pendingThenable = thenable;
                pendingThenable.status = "pending";
                pendingThenable.then(function(fulfilledValue2) {
                  if (thenable.status === "pending") {
                    var fulfilledThenable2 = thenable;
                    fulfilledThenable2.status = "fulfilled";
                    fulfilledThenable2.value = fulfilledValue2;
                  }
                }, function(error2) {
                  if (thenable.status === "pending") {
                    var rejectedThenable2 = thenable;
                    rejectedThenable2.status = "rejected";
                    rejectedThenable2.reason = error2;
                  }
                });
                switch (thenable.status) {
                  case "fulfilled": {
                    var fulfilledThenable = thenable;
                    return fulfilledThenable.value;
                  }
                  case "rejected": {
                    var rejectedThenable = thenable;
                    throw rejectedThenable.reason;
                  }
                }
              }
              suspendedThenable = thenable;
              throw SuspenseException;
            }
          }
        }
        var suspendedThenable = null;
        function getSuspendedThenable() {
          if (suspendedThenable === null) {
            throw new Error("Expected a suspended thenable. This is a bug in React. Please file an issue.");
          }
          var thenable = suspendedThenable;
          suspendedThenable = null;
          return thenable;
        }
        function is(x, y) {
          return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
        }
        var objectIs = (
          // $FlowFixMe[method-unbinding]
          typeof Object.is === "function" ? Object.is : is
        );
        var currentlyRenderingComponent = null;
        var currentlyRenderingTask = null;
        var currentlyRenderingRequest = null;
        var currentlyRenderingKeyPath = null;
        var firstWorkInProgressHook = null;
        var workInProgressHook = null;
        var isReRender = false;
        var didScheduleRenderPhaseUpdate = false;
        var localIdCounter = 0;
        var formStateCounter = 0;
        var formStateMatchingIndex = -1;
        var thenableIndexCounter = 0;
        var thenableState = null;
        var renderPhaseUpdates = null;
        var numberOfReRenders = 0;
        var RE_RENDER_LIMIT = 25;
        var isInHookUserCodeInDev = false;
        var currentHookNameInDev;
        function resolveCurrentlyRenderingComponent() {
          if (currentlyRenderingComponent === null) {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
          {
            if (isInHookUserCodeInDev) {
              error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
            }
          }
          return currentlyRenderingComponent;
        }
        function areHookInputsEqual(nextDeps, prevDeps) {
          if (prevDeps === null) {
            {
              error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
            }
            return false;
          }
          {
            if (nextDeps.length !== prevDeps.length) {
              error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + nextDeps.join(", ") + "]", "[" + prevDeps.join(", ") + "]");
            }
          }
          for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
            if (objectIs(nextDeps[i], prevDeps[i])) {
              continue;
            }
            return false;
          }
          return true;
        }
        function createHook() {
          if (numberOfReRenders > 0) {
            throw new Error("Rendered more hooks than during the previous render");
          }
          return {
            memoizedState: null,
            queue: null,
            next: null
          };
        }
        function createWorkInProgressHook() {
          if (workInProgressHook === null) {
            if (firstWorkInProgressHook === null) {
              isReRender = false;
              firstWorkInProgressHook = workInProgressHook = createHook();
            } else {
              isReRender = true;
              workInProgressHook = firstWorkInProgressHook;
            }
          } else {
            if (workInProgressHook.next === null) {
              isReRender = false;
              workInProgressHook = workInProgressHook.next = createHook();
            } else {
              isReRender = true;
              workInProgressHook = workInProgressHook.next;
            }
          }
          return workInProgressHook;
        }
        function prepareToUseHooks(request, task, keyPath, componentIdentity, prevThenableState) {
          currentlyRenderingComponent = componentIdentity;
          currentlyRenderingTask = task;
          currentlyRenderingRequest = request;
          currentlyRenderingKeyPath = keyPath;
          {
            isInHookUserCodeInDev = false;
          }
          localIdCounter = 0;
          formStateCounter = 0;
          formStateMatchingIndex = -1;
          thenableIndexCounter = 0;
          thenableState = prevThenableState;
        }
        function finishHooks(Component, props, children, refOrContext) {
          while (didScheduleRenderPhaseUpdate) {
            didScheduleRenderPhaseUpdate = false;
            localIdCounter = 0;
            formStateCounter = 0;
            formStateMatchingIndex = -1;
            thenableIndexCounter = 0;
            numberOfReRenders += 1;
            workInProgressHook = null;
            children = Component(props, refOrContext);
          }
          resetHooksState();
          return children;
        }
        function getThenableStateAfterSuspending() {
          var state = thenableState;
          thenableState = null;
          return state;
        }
        function checkDidRenderIdHook() {
          var didRenderIdHook = localIdCounter !== 0;
          return didRenderIdHook;
        }
        function getFormStateCount() {
          return formStateCounter;
        }
        function getFormStateMatchingIndex() {
          return formStateMatchingIndex;
        }
        function resetHooksState() {
          {
            isInHookUserCodeInDev = false;
          }
          currentlyRenderingComponent = null;
          currentlyRenderingTask = null;
          currentlyRenderingRequest = null;
          currentlyRenderingKeyPath = null;
          didScheduleRenderPhaseUpdate = false;
          firstWorkInProgressHook = null;
          numberOfReRenders = 0;
          renderPhaseUpdates = null;
          workInProgressHook = null;
        }
        function readContext(context) {
          {
            if (isInHookUserCodeInDev) {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            }
          }
          return readContext$1(context);
        }
        function useContext(context) {
          {
            currentHookNameInDev = "useContext";
          }
          resolveCurrentlyRenderingComponent();
          return readContext$1(context);
        }
        function basicStateReducer(state, action) {
          return typeof action === "function" ? action(state) : action;
        }
        function useState(initialState) {
          {
            currentHookNameInDev = "useState";
          }
          return useReducer(
            basicStateReducer,
            // useReducer has a special case to support lazy useState initializers
            initialState
          );
        }
        function useReducer(reducer, initialArg, init) {
          {
            if (reducer !== basicStateReducer) {
              currentHookNameInDev = "useReducer";
            }
          }
          currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
          workInProgressHook = createWorkInProgressHook();
          if (isReRender) {
            var queue = workInProgressHook.queue;
            var dispatch = queue.dispatch;
            if (renderPhaseUpdates !== null) {
              var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
              if (firstRenderPhaseUpdate !== void 0) {
                renderPhaseUpdates.delete(queue);
                var newState = workInProgressHook.memoizedState;
                var update = firstRenderPhaseUpdate;
                do {
                  var action = update.action;
                  {
                    isInHookUserCodeInDev = true;
                  }
                  newState = reducer(newState, action);
                  {
                    isInHookUserCodeInDev = false;
                  }
                  update = update.next;
                } while (update !== null);
                workInProgressHook.memoizedState = newState;
                return [newState, dispatch];
              }
            }
            return [workInProgressHook.memoizedState, dispatch];
          } else {
            {
              isInHookUserCodeInDev = true;
            }
            var initialState;
            if (reducer === basicStateReducer) {
              initialState = typeof initialArg === "function" ? initialArg() : initialArg;
            } else {
              initialState = init !== void 0 ? init(initialArg) : initialArg;
            }
            {
              isInHookUserCodeInDev = false;
            }
            workInProgressHook.memoizedState = initialState;
            var _queue = workInProgressHook.queue = {
              last: null,
              dispatch: null
            };
            var _dispatch = _queue.dispatch = dispatchAction.bind(null, currentlyRenderingComponent, _queue);
            return [workInProgressHook.memoizedState, _dispatch];
          }
        }
        function useMemo(nextCreate, deps) {
          currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
          workInProgressHook = createWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          if (workInProgressHook !== null) {
            var prevState = workInProgressHook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
          }
          {
            isInHookUserCodeInDev = true;
          }
          var nextValue = nextCreate();
          {
            isInHookUserCodeInDev = false;
          }
          workInProgressHook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function useRef(initialValue) {
          currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
          workInProgressHook = createWorkInProgressHook();
          var previousRef = workInProgressHook.memoizedState;
          if (previousRef === null) {
            var ref = {
              current: initialValue
            };
            {
              Object.seal(ref);
            }
            workInProgressHook.memoizedState = ref;
            return ref;
          } else {
            return previousRef;
          }
        }
        function dispatchAction(componentIdentity, queue, action) {
          if (numberOfReRenders >= RE_RENDER_LIMIT) {
            throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
          }
          if (componentIdentity === currentlyRenderingComponent) {
            didScheduleRenderPhaseUpdate = true;
            var update = {
              action,
              next: null
            };
            if (renderPhaseUpdates === null) {
              renderPhaseUpdates = /* @__PURE__ */ new Map();
            }
            var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
            if (firstRenderPhaseUpdate === void 0) {
              renderPhaseUpdates.set(queue, update);
            } else {
              var lastRenderPhaseUpdate = firstRenderPhaseUpdate;
              while (lastRenderPhaseUpdate.next !== null) {
                lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              }
              lastRenderPhaseUpdate.next = update;
            }
          }
        }
        function useCallback(callback, deps) {
          return useMemo(function() {
            return callback;
          }, deps);
        }
        function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          if (getServerSnapshot === void 0) {
            throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
          }
          return getServerSnapshot();
        }
        function useDeferredValue(value, initialValue) {
          resolveCurrentlyRenderingComponent();
          {
            return value;
          }
        }
        function unsupportedStartTransition() {
          throw new Error("startTransition cannot be called during server rendering.");
        }
        function useTransition() {
          resolveCurrentlyRenderingComponent();
          return [false, unsupportedStartTransition];
        }
        function useHostTransitionStatus() {
          resolveCurrentlyRenderingComponent();
          return NotPendingTransition;
        }
        function unsupportedSetOptimisticState() {
          throw new Error("Cannot update optimistic state while rendering.");
        }
        function useOptimistic(passthrough, reducer) {
          resolveCurrentlyRenderingComponent();
          return [passthrough, unsupportedSetOptimisticState];
        }
        function createPostbackFormStateKey(permalink, componentKeyPath, hookIndex) {
          if (permalink !== void 0) {
            return "p" + permalink;
          } else {
            var keyPath = [componentKeyPath, null, hookIndex];
            var keyPathHash = createFastHashJS(JSON.stringify(keyPath));
            return "k" + keyPathHash;
          }
        }
        function useFormState(action, initialState, permalink) {
          resolveCurrentlyRenderingComponent();
          var formStateHookIndex = formStateCounter++;
          var request = currentlyRenderingRequest;
          var formAction = action.$$FORM_ACTION;
          if (typeof formAction === "function") {
            var nextPostbackStateKey = null;
            var state = initialState;
            var componentKeyPath = currentlyRenderingKeyPath;
            var postbackFormState = getFormState(request);
            var isSignatureEqual = action.$$IS_SIGNATURE_EQUAL;
            if (postbackFormState !== null && typeof isSignatureEqual === "function") {
              var postbackKey = postbackFormState[1];
              var postbackReferenceId = postbackFormState[2];
              var postbackBoundArity = postbackFormState[3];
              if (isSignatureEqual.call(action, postbackReferenceId, postbackBoundArity)) {
                nextPostbackStateKey = createPostbackFormStateKey(permalink, componentKeyPath, formStateHookIndex);
                if (postbackKey === nextPostbackStateKey) {
                  formStateMatchingIndex = formStateHookIndex;
                  state = postbackFormState[0];
                }
              }
            }
            var boundAction = action.bind(null, state);
            var dispatch = function(payload) {
              boundAction(payload);
            };
            if (typeof boundAction.$$FORM_ACTION === "function") {
              dispatch.$$FORM_ACTION = function(prefix2) {
                var metadata = boundAction.$$FORM_ACTION(prefix2);
                if (permalink !== void 0) {
                  {
                    checkAttributeStringCoercion(permalink, "target");
                  }
                  permalink += "";
                  metadata.action = permalink;
                }
                var formData = metadata.data;
                if (formData) {
                  if (nextPostbackStateKey === null) {
                    nextPostbackStateKey = createPostbackFormStateKey(permalink, componentKeyPath, formStateHookIndex);
                  }
                  formData.append("$ACTION_KEY", nextPostbackStateKey);
                }
                return metadata;
              };
            }
            return [state, dispatch];
          } else {
            var _boundAction = action.bind(null, initialState);
            var _dispatch2 = function(payload) {
              _boundAction(payload);
            };
            return [initialState, _dispatch2];
          }
        }
        function useId() {
          var task = currentlyRenderingTask;
          var treeId = getTreeId(task.treeContext);
          var resumableState = currentResumableState;
          if (resumableState === null) {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component.");
          }
          var localId = localIdCounter++;
          return makeId(resumableState, treeId, localId);
        }
        function use(usable) {
          if (usable !== null && typeof usable === "object") {
            if (typeof usable.then === "function") {
              var thenable = usable;
              return unwrapThenable(thenable);
            } else if (usable.$$typeof === REACT_CONTEXT_TYPE) {
              var context = usable;
              return readContext(context);
            }
          }
          throw new Error("An unsupported type was passed to use(): " + String(usable));
        }
        function unwrapThenable(thenable) {
          var index = thenableIndexCounter;
          thenableIndexCounter += 1;
          if (thenableState === null) {
            thenableState = createThenableState();
          }
          return trackUsedThenable(thenableState, thenable, index);
        }
        function unsupportedRefresh() {
          throw new Error("Cache cannot be refreshed during server rendering.");
        }
        function useCacheRefresh() {
          return unsupportedRefresh;
        }
        function noop$1() {
        }
        var HooksDispatcher = {
          readContext,
          use,
          useContext,
          useMemo,
          useReducer,
          useRef,
          useState,
          useInsertionEffect: noop$1,
          useLayoutEffect: noop$1,
          useCallback,
          // useImperativeHandle is not run in the server environment
          useImperativeHandle: noop$1,
          // Effects are not run in the server environment.
          useEffect: noop$1,
          // Debugging effect
          useDebugValue: noop$1,
          useDeferredValue,
          useTransition,
          useId,
          // Subscriptions are not setup in a server environment.
          useSyncExternalStore
        };
        {
          HooksDispatcher.useCacheRefresh = useCacheRefresh;
        }
        {
          HooksDispatcher.useHostTransitionStatus = useHostTransitionStatus;
        }
        {
          HooksDispatcher.useOptimistic = useOptimistic;
          HooksDispatcher.useFormState = useFormState;
        }
        var currentResumableState = null;
        function setCurrentResumableState(resumableState) {
          currentResumableState = resumableState;
        }
        function getCacheSignal() {
          throw new Error("Not implemented.");
        }
        function getCacheForType(resourceType) {
          throw new Error("Not implemented.");
        }
        var DefaultCacheDispatcher = {
          getCacheSignal,
          getCacheForType
        };
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: assign({}, props, {
                  value: prevLog
                }),
                info: assign({}, props, {
                  value: prevInfo
                }),
                warn: assign({}, props, {
                  value: prevWarn
                }),
                error: assign({}, props, {
                  value: prevError
                }),
                group: assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix;
        function describeBuiltInComponentFrame(name, ownerFn) {
          {
            if (prefix === void 0) {
              try {
                throw Error();
              } catch (x) {
                var match = x.stack.trim().match(/\n( *(at )?)/);
                prefix = match && match[1] || "";
              }
            }
            return "\n" + prefix + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) {
            return "";
          }
          {
            var frame = componentFrameCache.get(fn);
            if (frame !== void 0) {
              return frame;
            }
          }
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = null;
            disableLogs();
          }
          var RunInRootFrame = {
            DetermineComponentFrameRoot: function() {
              var control;
              try {
                if (construct) {
                  var Fake = function() {
                    throw Error();
                  };
                  Object.defineProperty(Fake.prototype, "props", {
                    set: function() {
                      throw Error();
                    }
                  });
                  if (typeof Reflect === "object" && Reflect.construct) {
                    try {
                      Reflect.construct(Fake, []);
                    } catch (x) {
                      control = x;
                    }
                    Reflect.construct(fn, [], Fake);
                  } else {
                    try {
                      Fake.call();
                    } catch (x) {
                      control = x;
                    }
                    fn.call(Fake.prototype);
                  }
                } else {
                  try {
                    throw Error();
                  } catch (x) {
                    control = x;
                  }
                  var maybePromise = fn();
                  if (maybePromise && typeof maybePromise.catch === "function") {
                    maybePromise.catch(function() {
                    });
                  }
                }
              } catch (sample) {
                if (sample && control && typeof sample.stack === "string") {
                  return [sample.stack, control.stack];
                }
              }
              return [null, null];
            }
          };
          RunInRootFrame.DetermineComponentFrameRoot.displayName = "DetermineComponentFrameRoot";
          var namePropDescriptor = Object.getOwnPropertyDescriptor(RunInRootFrame.DetermineComponentFrameRoot, "name");
          if (namePropDescriptor && namePropDescriptor.configurable) {
            Object.defineProperty(
              RunInRootFrame.DetermineComponentFrameRoot,
              // Configurable properties can be updated even if its writable descriptor
              // is set to `false`.
              // $FlowFixMe[cannot-write]
              "name",
              {
                value: "DetermineComponentFrameRoot"
              }
            );
          }
          try {
            var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(), sampleStack = _RunInRootFrame$Deter[0], controlStack = _RunInRootFrame$Deter[1];
            if (sampleStack && controlStack) {
              var sampleLines = sampleStack.split("\n");
              var controlLines = controlStack.split("\n");
              var s = 0;
              var c = 0;
              while (s < sampleLines.length && !sampleLines[s].includes("DetermineComponentFrameRoot")) {
                s++;
              }
              while (c < controlLines.length && !controlLines[c].includes("DetermineComponentFrameRoot")) {
                c++;
              }
              if (s === sampleLines.length || c === controlLines.length) {
                s = sampleLines.length - 1;
                c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
              }
              for (; s >= 1 && c >= 0; s--, c--) {
                if (sampleLines[s] !== controlLines[c]) {
                  if (s !== 1 || c !== 1) {
                    do {
                      s--;
                      c--;
                      if (c < 0 || sampleLines[s] !== controlLines[c]) {
                        var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                        if (fn.displayName && _frame.includes("<anonymous>")) {
                          _frame = _frame.replace("<anonymous>", fn.displayName);
                        }
                        if (true) {
                          if (typeof fn === "function") {
                            componentFrameCache.set(fn, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s >= 1 && c >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher$1.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn ? fn.displayName || fn.name : "";
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
          {
            if (typeof fn === "function") {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeClassComponentFrame(ctor, ownerFn) {
          {
            return describeNativeComponentFrame(ctor, true);
          }
        }
        function describeFunctionComponentFrame(fn, ownerFn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }
        function getStackByComponentStackNode(componentStack) {
          try {
            var info = "";
            var node = componentStack;
            do {
              switch (node.tag) {
                case 0:
                  info += describeBuiltInComponentFrame(node.type, null);
                  break;
                case 1:
                  info += describeFunctionComponentFrame(node.type, null);
                  break;
                case 2:
                  info += describeClassComponentFrame(node.type, null);
                  break;
              }
              node = node.parent;
            } while (node);
            return info;
          } catch (x) {
            return "\nError generating stack: " + x.message + "\n" + x.stack;
          }
        }
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
        var ReactCurrentCache = ReactSharedInternals.ReactCurrentCache;
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var CLIENT_RENDERED = 4;
        var PENDING = 0;
        var COMPLETED = 1;
        var FLUSHED = 2;
        var ABORTED = 3;
        var ERRORED = 4;
        var POSTPONED = 5;
        var OPEN = 0;
        var CLOSING = 1;
        var CLOSED = 2;
        var DEFAULT_PROGRESSIVE_CHUNK_SIZE = 12800;
        function defaultErrorHandler(error2) {
          console["error"](error2);
          return null;
        }
        function noop() {
        }
        function createRequest(children, resumableState, renderState, rootFormatContext, progressiveChunkSize, onError2, onAllReady, onShellReady, onShellError, onFatalError, onPostpone, formState) {
          prepareHostDispatcher();
          var pingedTasks = [];
          var abortSet = /* @__PURE__ */ new Set();
          var request = {
            destination: null,
            flushScheduled: false,
            resumableState,
            renderState,
            rootFormatContext,
            progressiveChunkSize: progressiveChunkSize === void 0 ? DEFAULT_PROGRESSIVE_CHUNK_SIZE : progressiveChunkSize,
            status: OPEN,
            fatalError: null,
            nextSegmentId: 0,
            allPendingTasks: 0,
            pendingRootTasks: 0,
            completedRootSegment: null,
            abortableTasks: abortSet,
            pingedTasks,
            clientRenderedBoundaries: [],
            completedBoundaries: [],
            partialBoundaries: [],
            trackedPostpones: null,
            onError: onError2 === void 0 ? defaultErrorHandler : onError2,
            onPostpone: onPostpone === void 0 ? noop : onPostpone,
            onAllReady: onAllReady === void 0 ? noop : onAllReady,
            onShellReady: onShellReady === void 0 ? noop : onShellReady,
            onShellError: onShellError === void 0 ? noop : onShellError,
            onFatalError: onFatalError === void 0 ? noop : onFatalError,
            formState: formState === void 0 ? null : formState
          };
          var rootSegment = createPendingSegment(
            request,
            0,
            null,
            rootFormatContext,
            // Root segments are never embedded in Text on either edge
            false,
            false
          );
          rootSegment.parentFlushed = true;
          var rootTask = createRenderTask(request, null, children, -1, null, rootSegment, null, abortSet, null, rootFormatContext, emptyContextObject, rootContextSnapshot, emptyTreeContext, null, false);
          pingedTasks.push(rootTask);
          return request;
        }
        var currentRequest = null;
        function resolveRequest() {
          if (currentRequest) return currentRequest;
          return null;
        }
        function pingTask(request, task) {
          var pingedTasks = request.pingedTasks;
          pingedTasks.push(task);
          if (request.pingedTasks.length === 1) {
            request.flushScheduled = request.destination !== null;
            scheduleWork(function() {
              return performWork(request);
            });
          }
        }
        function createSuspenseBoundary(request, fallbackAbortableTasks) {
          return {
            status: PENDING,
            rootSegmentID: -1,
            parentFlushed: false,
            pendingTasks: 0,
            completedSegments: [],
            byteSize: 0,
            fallbackAbortableTasks,
            errorDigest: null,
            contentState: createHoistableState(),
            fallbackState: createHoistableState(),
            trackedContentKeyPath: null,
            trackedFallbackNode: null
          };
        }
        function createRenderTask(request, thenableState2, node, childIndex, blockedBoundary, blockedSegment, hoistableState, abortSet, keyPath, formatContext, legacyContext, context, treeContext, componentStack, isFallback) {
          request.allPendingTasks++;
          if (blockedBoundary === null) {
            request.pendingRootTasks++;
          } else {
            blockedBoundary.pendingTasks++;
          }
          var task = {
            replay: null,
            node,
            childIndex,
            ping: function() {
              return pingTask(request, task);
            },
            blockedBoundary,
            blockedSegment,
            hoistableState,
            abortSet,
            keyPath,
            formatContext,
            legacyContext,
            context,
            treeContext,
            componentStack,
            thenableState: thenableState2,
            isFallback
          };
          abortSet.add(task);
          return task;
        }
        function createReplayTask(request, thenableState2, replay, node, childIndex, blockedBoundary, hoistableState, abortSet, keyPath, formatContext, legacyContext, context, treeContext, componentStack, isFallback) {
          request.allPendingTasks++;
          if (blockedBoundary === null) {
            request.pendingRootTasks++;
          } else {
            blockedBoundary.pendingTasks++;
          }
          replay.pendingTasks++;
          var task = {
            replay,
            node,
            childIndex,
            ping: function() {
              return pingTask(request, task);
            },
            blockedBoundary,
            blockedSegment: null,
            hoistableState,
            abortSet,
            keyPath,
            formatContext,
            legacyContext,
            context,
            treeContext,
            componentStack,
            thenableState: thenableState2,
            isFallback
          };
          abortSet.add(task);
          return task;
        }
        function createPendingSegment(request, index, boundary, parentFormatContext, lastPushedText, textEmbedded) {
          return {
            status: PENDING,
            id: -1,
            // lazily assigned later
            index,
            parentFlushed: false,
            chunks: [],
            children: [],
            parentFormatContext,
            boundary,
            lastPushedText,
            textEmbedded
          };
        }
        var currentTaskInDEV = null;
        function getCurrentStackInDEV() {
          {
            if (currentTaskInDEV === null || currentTaskInDEV.componentStack === null) {
              return "";
            }
            return getStackByComponentStackNode(currentTaskInDEV.componentStack);
          }
        }
        function getStackFromNode(stackNode) {
          return getStackByComponentStackNode(stackNode);
        }
        function createBuiltInComponentStack(task, type) {
          return {
            tag: 0,
            parent: task.componentStack,
            type
          };
        }
        function createFunctionComponentStack(task, type) {
          return {
            tag: 1,
            parent: task.componentStack,
            type
          };
        }
        function createClassComponentStack(task, type) {
          return {
            tag: 2,
            parent: task.componentStack,
            type
          };
        }
        function getThrownInfo(request, node) {
          if (node && // Always produce a stack in dev
          true) {
            return {
              componentStack: getStackFromNode(node)
            };
          } else {
            return {};
          }
        }
        function encodeErrorForBoundary(boundary, digest, error2, thrownInfo) {
          boundary.errorDigest = digest;
          {
            var message;
            if (error2 instanceof Error) {
              message = String(error2.message);
            } else if (typeof error2 === "object" && error2 !== null) {
              message = describeObjectForErrorMessage(error2);
            } else {
              message = String(error2);
            }
            boundary.errorMessage = message;
            boundary.errorComponentStack = thrownInfo.componentStack;
          }
        }
        function logRecoverableError(request, error$1, errorInfo) {
          var errorDigest = request.onError(error$1, errorInfo);
          if (errorDigest != null && typeof errorDigest !== "string") {
            {
              error('onError returned something with a type other than "string". onError should return a string and may return null or undefined but must not return anything else. It received something of type "%s" instead', typeof errorDigest);
            }
            return;
          }
          return errorDigest;
        }
        function fatalError(request, error2) {
          var onShellError = request.onShellError;
          onShellError(error2);
          var onFatalError = request.onFatalError;
          onFatalError(error2);
          if (request.destination !== null) {
            request.status = CLOSED;
            closeWithError(request.destination, error2);
          } else {
            request.status = CLOSING;
            request.fatalError = error2;
          }
        }
        function renderSuspenseBoundary(request, someTask, keyPath, props) {
          if (someTask.replay !== null) {
            var _prevKeyPath = someTask.keyPath;
            someTask.keyPath = keyPath;
            var _content = props.children;
            try {
              renderNode(request, someTask, _content, -1);
            } finally {
              someTask.keyPath = _prevKeyPath;
            }
            return;
          }
          var task = someTask;
          var previousComponentStack = task.componentStack;
          var suspenseComponentStack = task.componentStack = createBuiltInComponentStack(task, "Suspense");
          var prevKeyPath = task.keyPath;
          var parentBoundary = task.blockedBoundary;
          var parentHoistableState = task.hoistableState;
          var parentSegment = task.blockedSegment;
          var fallback = props.fallback;
          var content = props.children;
          var fallbackAbortSet = /* @__PURE__ */ new Set();
          var newBoundary = createSuspenseBoundary(request, fallbackAbortSet);
          if (request.trackedPostpones !== null) {
            newBoundary.trackedContentKeyPath = keyPath;
          }
          var insertionIndex = parentSegment.chunks.length;
          var boundarySegment = createPendingSegment(
            request,
            insertionIndex,
            newBoundary,
            task.formatContext,
            // boundaries never require text embedding at their edges because comment nodes bound them
            false,
            false
          );
          parentSegment.children.push(boundarySegment);
          parentSegment.lastPushedText = false;
          var contentRootSegment = createPendingSegment(
            request,
            0,
            null,
            task.formatContext,
            // boundaries never require text embedding at their edges because comment nodes bound them
            false,
            false
          );
          contentRootSegment.parentFlushed = true;
          task.blockedBoundary = newBoundary;
          task.hoistableState = newBoundary.contentState;
          task.blockedSegment = contentRootSegment;
          task.keyPath = keyPath;
          try {
            renderNode(request, task, content, -1);
            pushSegmentFinale(contentRootSegment.chunks, request.renderState, contentRootSegment.lastPushedText, contentRootSegment.textEmbedded);
            contentRootSegment.status = COMPLETED;
            queueCompletedSegment(newBoundary, contentRootSegment);
            if (newBoundary.pendingTasks === 0 && newBoundary.status === PENDING) {
              newBoundary.status = COMPLETED;
              task.componentStack = previousComponentStack;
              return;
            }
          } catch (error2) {
            contentRootSegment.status = ERRORED;
            newBoundary.status = CLIENT_RENDERED;
            var thrownInfo = getThrownInfo(request, task.componentStack);
            var errorDigest;
            {
              errorDigest = logRecoverableError(request, error2, thrownInfo);
            }
            encodeErrorForBoundary(newBoundary, errorDigest, error2, thrownInfo);
            untrackBoundary(request, newBoundary);
          } finally {
            task.blockedBoundary = parentBoundary;
            task.hoistableState = parentHoistableState;
            task.blockedSegment = parentSegment;
            task.keyPath = prevKeyPath;
            task.componentStack = previousComponentStack;
          }
          var fallbackKeyPath = [keyPath[0], "Suspense Fallback", keyPath[2]];
          var trackedPostpones = request.trackedPostpones;
          if (trackedPostpones !== null) {
            var fallbackReplayNode = [fallbackKeyPath[1], fallbackKeyPath[2], [], null];
            trackedPostpones.workingMap.set(fallbackKeyPath, fallbackReplayNode);
            if (newBoundary.status === POSTPONED) {
              var boundaryReplayNode = trackedPostpones.workingMap.get(keyPath);
              boundaryReplayNode[4] = fallbackReplayNode;
            } else {
              newBoundary.trackedFallbackNode = fallbackReplayNode;
            }
          }
          var suspendedFallbackTask = createRenderTask(
            request,
            null,
            fallback,
            -1,
            parentBoundary,
            boundarySegment,
            newBoundary.fallbackState,
            fallbackAbortSet,
            fallbackKeyPath,
            task.formatContext,
            task.legacyContext,
            task.context,
            task.treeContext,
            // This stack should be the Suspense boundary stack because while the fallback is actually a child segment
            // of the parent boundary from a component standpoint the fallback is a child of the Suspense boundary itself
            suspenseComponentStack,
            true
          );
          request.pingedTasks.push(suspendedFallbackTask);
        }
        function replaySuspenseBoundary(request, task, keyPath, props, id, childNodes, childSlots, fallbackNodes, fallbackSlots) {
          var previousComponentStack = task.componentStack;
          var suspenseComponentStack = task.componentStack = createBuiltInComponentStack(task, "Suspense");
          var prevKeyPath = task.keyPath;
          var previousReplaySet = task.replay;
          var parentBoundary = task.blockedBoundary;
          var parentHoistableState = task.hoistableState;
          var content = props.children;
          var fallback = props.fallback;
          var fallbackAbortSet = /* @__PURE__ */ new Set();
          var resumedBoundary = createSuspenseBoundary(request, fallbackAbortSet);
          resumedBoundary.parentFlushed = true;
          resumedBoundary.rootSegmentID = id;
          task.blockedBoundary = resumedBoundary;
          task.hoistableState = resumedBoundary.contentState;
          task.replay = {
            nodes: childNodes,
            slots: childSlots,
            pendingTasks: 1
          };
          try {
            renderNode(request, task, content, -1);
            if (task.replay.pendingTasks === 1 && task.replay.nodes.length > 0) {
              throw new Error("Couldn't find all resumable slots by key/index during replaying. The tree doesn't match so React will fallback to client rendering.");
            }
            task.replay.pendingTasks--;
            if (resumedBoundary.pendingTasks === 0 && resumedBoundary.status === PENDING) {
              resumedBoundary.status = COMPLETED;
              request.completedBoundaries.push(resumedBoundary);
              return;
            }
          } catch (error2) {
            resumedBoundary.status = CLIENT_RENDERED;
            var thrownInfo = getThrownInfo(request, task.componentStack);
            var errorDigest;
            {
              errorDigest = logRecoverableError(request, error2, thrownInfo);
            }
            encodeErrorForBoundary(resumedBoundary, errorDigest, error2, thrownInfo);
            task.replay.pendingTasks--;
            request.clientRenderedBoundaries.push(resumedBoundary);
          } finally {
            task.blockedBoundary = parentBoundary;
            task.hoistableState = parentHoistableState;
            task.replay = previousReplaySet;
            task.keyPath = prevKeyPath;
            task.componentStack = previousComponentStack;
          }
          var fallbackKeyPath = [keyPath[0], "Suspense Fallback", keyPath[2]];
          var fallbackReplay = {
            nodes: fallbackNodes,
            slots: fallbackSlots,
            pendingTasks: 0
          };
          var suspendedFallbackTask = createReplayTask(
            request,
            null,
            fallbackReplay,
            fallback,
            -1,
            parentBoundary,
            resumedBoundary.fallbackState,
            fallbackAbortSet,
            fallbackKeyPath,
            task.formatContext,
            task.legacyContext,
            task.context,
            task.treeContext,
            // This stack should be the Suspense boundary stack because while the fallback is actually a child segment
            // of the parent boundary from a component standpoint the fallback is a child of the Suspense boundary itself
            suspenseComponentStack,
            true
          );
          request.pingedTasks.push(suspendedFallbackTask);
        }
        function renderHostElement(request, task, keyPath, type, props) {
          var previousComponentStack = task.componentStack;
          task.componentStack = createBuiltInComponentStack(task, type);
          var segment = task.blockedSegment;
          if (segment === null) {
            var children = props.children;
            var prevContext = task.formatContext;
            var prevKeyPath = task.keyPath;
            task.formatContext = getChildFormatContext(prevContext, type, props);
            task.keyPath = keyPath;
            renderNode(request, task, children, -1);
            task.formatContext = prevContext;
            task.keyPath = prevKeyPath;
          } else {
            var _children = pushStartInstance(segment.chunks, type, props, request.resumableState, request.renderState, task.hoistableState, task.formatContext, segment.lastPushedText, task.isFallback);
            segment.lastPushedText = false;
            var _prevContext = task.formatContext;
            var _prevKeyPath2 = task.keyPath;
            task.formatContext = getChildFormatContext(_prevContext, type, props);
            task.keyPath = keyPath;
            renderNode(request, task, _children, -1);
            task.formatContext = _prevContext;
            task.keyPath = _prevKeyPath2;
            pushEndInstance(segment.chunks, type, props, request.resumableState, _prevContext);
            segment.lastPushedText = false;
          }
          task.componentStack = previousComponentStack;
        }
        function shouldConstruct(Component) {
          return Component.prototype && Component.prototype.isReactComponent;
        }
        function renderWithHooks(request, task, keyPath, Component, props, secondArg) {
          var prevThenableState = task.thenableState;
          task.thenableState = null;
          var componentIdentity = {};
          prepareToUseHooks(request, task, keyPath, componentIdentity, prevThenableState);
          var result = Component(props, secondArg);
          return finishHooks(Component, props, result, secondArg);
        }
        function finishClassComponent(request, task, keyPath, instance, Component, props) {
          var nextChildren = instance.render();
          {
            if (instance.props !== props) {
              if (!didWarnAboutReassigningProps) {
                error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromType(Component) || "a component");
              }
              didWarnAboutReassigningProps = true;
            }
          }
          {
            var childContextTypes = Component.childContextTypes;
            if (childContextTypes !== null && childContextTypes !== void 0) {
              var previousContext = task.legacyContext;
              var mergedContext = processChildContext(instance, Component, previousContext, childContextTypes);
              task.legacyContext = mergedContext;
              renderNodeDestructive(request, task, nextChildren, -1);
              task.legacyContext = previousContext;
              return;
            }
          }
          var prevKeyPath = task.keyPath;
          task.keyPath = keyPath;
          renderNodeDestructive(request, task, nextChildren, -1);
          task.keyPath = prevKeyPath;
        }
        function renderClassComponent(request, task, keyPath, Component, props) {
          var previousComponentStack = task.componentStack;
          task.componentStack = createClassComponentStack(task, Component);
          var maskedContext = getMaskedContext(Component, task.legacyContext);
          var instance = constructClassInstance(Component, props, maskedContext);
          mountClassInstance(instance, Component, props, maskedContext);
          finishClassComponent(request, task, keyPath, instance, Component, props);
          task.componentStack = previousComponentStack;
        }
        var didWarnAboutBadClass = {};
        var didWarnAboutModulePatternComponent = {};
        var didWarnAboutContextTypeOnFunctionComponent = {};
        var didWarnAboutGetDerivedStateOnFunctionComponent = {};
        var didWarnAboutReassigningProps = false;
        var didWarnAboutDefaultPropsOnFunctionComponent = {};
        var didWarnAboutGenerators = false;
        var didWarnAboutMaps = false;
        function renderIndeterminateComponent(request, task, keyPath, Component, props) {
          var legacyContext;
          {
            legacyContext = getMaskedContext(Component, task.legacyContext);
          }
          var previousComponentStack = task.componentStack;
          task.componentStack = createFunctionComponentStack(task, Component);
          {
            if (Component.prototype && typeof Component.prototype.render === "function") {
              var componentName = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutBadClass[componentName]) {
                error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                didWarnAboutBadClass[componentName] = true;
              }
            }
          }
          var value = renderWithHooks(request, task, keyPath, Component, props, legacyContext);
          var hasId = checkDidRenderIdHook();
          var formStateCount = getFormStateCount();
          var formStateMatchingIndex2 = getFormStateMatchingIndex();
          {
            if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
              var _componentName = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                didWarnAboutModulePatternComponent[_componentName] = true;
              }
            }
          }
          if (
            // Run these checks in production only if the flag is off.
            // Eventually we'll delete this branch altogether.
            typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0
          ) {
            {
              var _componentName2 = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName2]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                didWarnAboutModulePatternComponent[_componentName2] = true;
              }
            }
            mountClassInstance(value, Component, props, legacyContext);
            finishClassComponent(request, task, keyPath, value, Component, props);
          } else {
            {
              validateFunctionComponentInDev(Component);
            }
            finishFunctionComponent(request, task, keyPath, value, hasId, formStateCount, formStateMatchingIndex2);
          }
          task.componentStack = previousComponentStack;
        }
        function finishFunctionComponent(request, task, keyPath, children, hasId, formStateCount, formStateMatchingIndex2) {
          var didEmitFormStateMarkers = false;
          if (formStateCount !== 0 && request.formState !== null) {
            var segment = task.blockedSegment;
            if (segment === null) ;
            else {
              didEmitFormStateMarkers = true;
              var target = segment.chunks;
              for (var i = 0; i < formStateCount; i++) {
                if (i === formStateMatchingIndex2) {
                  pushFormStateMarkerIsMatching(target);
                } else {
                  pushFormStateMarkerIsNotMatching(target);
                }
              }
            }
          }
          var prevKeyPath = task.keyPath;
          task.keyPath = keyPath;
          if (hasId) {
            var prevTreeContext = task.treeContext;
            var totalChildren = 1;
            var index = 0;
            task.treeContext = pushTreeContext(prevTreeContext, totalChildren, index);
            renderNode(request, task, children, -1);
            task.treeContext = prevTreeContext;
          } else if (didEmitFormStateMarkers) {
            renderNode(request, task, children, -1);
          } else {
            renderNodeDestructive(request, task, children, -1);
          }
          task.keyPath = prevKeyPath;
        }
        function validateFunctionComponentInDev(Component) {
          {
            if (Component) {
              if (Component.childContextTypes) {
                error("childContextTypes cannot be defined on a function component.\n  %s.childContextTypes = ...", Component.displayName || Component.name || "Component");
              }
            }
            if (Component.defaultProps !== void 0) {
              var componentName = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
                error("%s: Support for defaultProps will be removed from function components in a future major release. Use JavaScript default parameters instead.", componentName);
                didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
              }
            }
            if (typeof Component.getDerivedStateFromProps === "function") {
              var _componentName3 = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
              }
            }
            if (typeof Component.contextType === "object" && Component.contextType !== null) {
              var _componentName4 = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                error("%s: Function components do not support contextType.", _componentName4);
                didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
              }
            }
          }
        }
        function resolveDefaultProps(Component, baseProps) {
          if (Component && Component.defaultProps) {
            var props = assign({}, baseProps);
            var defaultProps = Component.defaultProps;
            for (var propName in defaultProps) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps[propName];
              }
            }
            return props;
          }
          return baseProps;
        }
        function renderForwardRef(request, task, keyPath, type, props, ref) {
          var previousComponentStack = task.componentStack;
          task.componentStack = createFunctionComponentStack(task, type.render);
          var propsWithoutRef;
          {
            propsWithoutRef = props;
          }
          var children = renderWithHooks(request, task, keyPath, type.render, propsWithoutRef, ref);
          var hasId = checkDidRenderIdHook();
          var formStateCount = getFormStateCount();
          var formStateMatchingIndex2 = getFormStateMatchingIndex();
          finishFunctionComponent(request, task, keyPath, children, hasId, formStateCount, formStateMatchingIndex2);
          task.componentStack = previousComponentStack;
        }
        function renderMemo(request, task, keyPath, type, props, ref) {
          var innerType = type.type;
          var resolvedProps = resolveDefaultProps(innerType, props);
          renderElement(request, task, keyPath, innerType, resolvedProps, ref);
        }
        function renderContextConsumer(request, task, keyPath, context, props) {
          var render = props.children;
          {
            if (typeof render !== "function") {
              error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
            }
          }
          var newValue = readContext$1(context);
          var newChildren = render(newValue);
          var prevKeyPath = task.keyPath;
          task.keyPath = keyPath;
          renderNodeDestructive(request, task, newChildren, -1);
          task.keyPath = prevKeyPath;
        }
        function renderContextProvider(request, task, keyPath, context, props) {
          var value = props.value;
          var children = props.children;
          var prevSnapshot;
          {
            prevSnapshot = task.context;
          }
          var prevKeyPath = task.keyPath;
          task.context = pushProvider(context, value);
          task.keyPath = keyPath;
          renderNodeDestructive(request, task, children, -1);
          task.context = popProvider(context);
          task.keyPath = prevKeyPath;
          {
            if (prevSnapshot !== task.context) {
              error("Popping the context provider did not return back to the original snapshot. This is a bug in React.");
            }
          }
        }
        function renderLazyComponent(request, task, keyPath, lazyComponent, props, ref) {
          var previousComponentStack = task.componentStack;
          task.componentStack = createBuiltInComponentStack(task, "Lazy");
          var payload = lazyComponent._payload;
          var init = lazyComponent._init;
          var Component = init(payload);
          var resolvedProps = resolveDefaultProps(Component, props);
          renderElement(request, task, keyPath, Component, resolvedProps, ref);
          task.componentStack = previousComponentStack;
        }
        function renderOffscreen(request, task, keyPath, props) {
          var mode = props.mode;
          if (mode === "hidden") ;
          else {
            var prevKeyPath = task.keyPath;
            task.keyPath = keyPath;
            renderNodeDestructive(request, task, props.children, -1);
            task.keyPath = prevKeyPath;
          }
        }
        function renderElement(request, task, keyPath, type, props, ref) {
          if (typeof type === "function") {
            if (shouldConstruct(type)) {
              renderClassComponent(request, task, keyPath, type, props);
              return;
            } else {
              renderIndeterminateComponent(request, task, keyPath, type, props);
              return;
            }
          }
          if (typeof type === "string") {
            renderHostElement(request, task, keyPath, type, props);
            return;
          }
          switch (type) {
            case REACT_LEGACY_HIDDEN_TYPE:
            case REACT_DEBUG_TRACING_MODE_TYPE:
            case REACT_STRICT_MODE_TYPE:
            case REACT_PROFILER_TYPE:
            case REACT_FRAGMENT_TYPE: {
              var prevKeyPath = task.keyPath;
              task.keyPath = keyPath;
              renderNodeDestructive(request, task, props.children, -1);
              task.keyPath = prevKeyPath;
              return;
            }
            case REACT_OFFSCREEN_TYPE: {
              renderOffscreen(request, task, keyPath, props);
              return;
            }
            case REACT_SUSPENSE_LIST_TYPE: {
              var preiousComponentStack = task.componentStack;
              task.componentStack = createBuiltInComponentStack(task, "SuspenseList");
              var _prevKeyPath3 = task.keyPath;
              task.keyPath = keyPath;
              renderNodeDestructive(request, task, props.children, -1);
              task.keyPath = _prevKeyPath3;
              task.componentStack = preiousComponentStack;
              return;
            }
            case REACT_SCOPE_TYPE: {
              throw new Error("ReactDOMServer does not yet support scope components.");
            }
            case REACT_SUSPENSE_TYPE: {
              {
                renderSuspenseBoundary(request, task, keyPath, props);
              }
              return;
            }
          }
          if (typeof type === "object" && type !== null) {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE: {
                renderForwardRef(request, task, keyPath, type, props, ref);
                return;
              }
              case REACT_MEMO_TYPE: {
                renderMemo(request, task, keyPath, type, props, ref);
                return;
              }
              case REACT_PROVIDER_TYPE: {
                {
                  var context = type._context;
                  renderContextProvider(request, task, keyPath, context, props);
                  return;
                }
              }
              case REACT_CONTEXT_TYPE: {
                {
                  var _context2 = type;
                  {
                    if (_context2._context !== void 0) {
                      _context2 = _context2._context;
                    }
                  }
                  renderContextConsumer(request, task, keyPath, _context2, props);
                  return;
                }
              }
              case REACT_CONSUMER_TYPE:
              case REACT_LAZY_TYPE: {
                renderLazyComponent(request, task, keyPath, type, props);
                return;
              }
            }
          }
          var info = "";
          {
            if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
              info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            }
          }
          throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
        }
        function resumeNode(request, task, segmentId, node, childIndex) {
          var prevReplay = task.replay;
          var blockedBoundary = task.blockedBoundary;
          var resumedSegment = createPendingSegment(request, 0, null, task.formatContext, false, false);
          resumedSegment.id = segmentId;
          resumedSegment.parentFlushed = true;
          try {
            var renderTask = task;
            renderTask.replay = null;
            renderTask.blockedSegment = resumedSegment;
            renderNode(request, task, node, childIndex);
            resumedSegment.status = COMPLETED;
            if (blockedBoundary === null) {
              request.completedRootSegment = resumedSegment;
            } else {
              queueCompletedSegment(blockedBoundary, resumedSegment);
              if (blockedBoundary.parentFlushed) {
                request.partialBoundaries.push(blockedBoundary);
              }
            }
          } finally {
            task.replay = prevReplay;
            task.blockedSegment = null;
          }
        }
        function replayElement(request, task, keyPath, name, keyOrIndex, childIndex, type, props, ref, replay) {
          var replayNodes = replay.nodes;
          for (var i = 0; i < replayNodes.length; i++) {
            var node = replayNodes[i];
            if (keyOrIndex !== node[1]) {
              continue;
            }
            if (node.length === 4) {
              if (name !== null && name !== node[0]) {
                throw new Error("Expected the resume to render <" + node[0] + "> in this slot but instead it rendered <" + name + ">. The tree doesn't match so React will fallback to client rendering.");
              }
              var childNodes = node[2];
              var childSlots = node[3];
              var currentNode = task.node;
              task.replay = {
                nodes: childNodes,
                slots: childSlots,
                pendingTasks: 1
              };
              try {
                renderElement(request, task, keyPath, type, props, ref);
                if (task.replay.pendingTasks === 1 && task.replay.nodes.length > 0) {
                  throw new Error("Couldn't find all resumable slots by key/index during replaying. The tree doesn't match so React will fallback to client rendering.");
                }
                task.replay.pendingTasks--;
              } catch (x) {
                if (typeof x === "object" && x !== null && (x === SuspenseException || typeof x.then === "function")) {
                  if (task.node === currentNode) {
                    task.replay = replay;
                  }
                  throw x;
                }
                task.replay.pendingTasks--;
                var thrownInfo = getThrownInfo(request, task.componentStack);
                erroredReplay(request, task.blockedBoundary, x, thrownInfo, childNodes, childSlots);
              }
              task.replay = replay;
            } else {
              if (type !== REACT_SUSPENSE_TYPE) {
                var expectedType = "Suspense";
                throw new Error("Expected the resume to render <" + expectedType + "> in this slot but instead it rendered <" + (getComponentNameFromType(type) || "Unknown") + ">. The tree doesn't match so React will fallback to client rendering.");
              }
              replaySuspenseBoundary(request, task, keyPath, props, node[5], node[2], node[3], node[4] === null ? [] : node[4][2], node[4] === null ? null : node[4][3]);
            }
            replayNodes.splice(i, 1);
            return;
          }
        }
        function validateIterable(iterable, iteratorFn) {
          {
            if (typeof Symbol === "function" && iterable[Symbol.toStringTag] === "Generator") {
              if (!didWarnAboutGenerators) {
                error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
              }
              didWarnAboutGenerators = true;
            }
            if (iterable.entries === iteratorFn) {
              if (!didWarnAboutMaps) {
                error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
              }
              didWarnAboutMaps = true;
            }
          }
        }
        function warnOnFunctionType(invalidChild) {
          {
            var name = invalidChild.displayName || invalidChild.name || "Component";
            error("Functions are not valid as a React child. This may happen if you return %s instead of <%s /> from render. Or maybe you meant to call this function rather than return it.", name, name);
          }
        }
        function warnOnSymbolType(invalidChild) {
          {
            var name = String(invalidChild);
            error("Symbols are not valid as a React child.\n  %s", name);
          }
        }
        function renderNodeDestructive(request, task, node, childIndex) {
          if (task.replay !== null && typeof task.replay.slots === "number") {
            var resumeSegmentID = task.replay.slots;
            resumeNode(request, task, resumeSegmentID, node, childIndex);
            return;
          }
          task.node = node;
          task.childIndex = childIndex;
          if (node === null) {
            return;
          }
          if (typeof node === "object") {
            switch (node.$$typeof) {
              case REACT_ELEMENT_TYPE: {
                var element = node;
                var type = element.type;
                var key = element.key;
                var props = element.props;
                var ref;
                {
                  ref = element.ref;
                }
                var name = getComponentNameFromType(type);
                var keyOrIndex = key == null ? childIndex === -1 ? 0 : childIndex : key;
                var keyPath = [task.keyPath, name, keyOrIndex];
                if (task.replay !== null) {
                  replayElement(request, task, keyPath, name, keyOrIndex, childIndex, type, props, ref, task.replay);
                } else {
                  renderElement(request, task, keyPath, type, props, ref);
                }
                return;
              }
              case REACT_PORTAL_TYPE:
                throw new Error("Portals are not currently supported by the server renderer. Render them conditionally so that they only appear on the client render.");
              case REACT_LAZY_TYPE: {
                var previousComponentStack = task.componentStack;
                task.componentStack = createBuiltInComponentStack(task, "Lazy");
                var lazyNode = node;
                var payload = lazyNode._payload;
                var init = lazyNode._init;
                var resolvedNode = init(payload);
                task.componentStack = previousComponentStack;
                renderNodeDestructive(request, task, resolvedNode, childIndex);
                return;
              }
            }
            if (isArray(node)) {
              renderChildrenArray(request, task, node, childIndex);
              return;
            }
            var iteratorFn = getIteratorFn(node);
            if (iteratorFn) {
              {
                validateIterable(node, iteratorFn);
              }
              var iterator = iteratorFn.call(node);
              if (iterator) {
                var step = iterator.next();
                if (!step.done) {
                  var children = [];
                  do {
                    children.push(step.value);
                    step = iterator.next();
                  } while (!step.done);
                  renderChildrenArray(request, task, children, childIndex);
                  return;
                }
                return;
              }
            }
            var maybeUsable = node;
            if (typeof maybeUsable.then === "function") {
              task.thenableState = null;
              var thenable = maybeUsable;
              return renderNodeDestructive(request, task, unwrapThenable(thenable), childIndex);
            }
            if (maybeUsable.$$typeof === REACT_CONTEXT_TYPE) {
              var context = maybeUsable;
              return renderNodeDestructive(request, task, readContext$1(context), childIndex);
            }
            var childString = Object.prototype.toString.call(node);
            throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(node).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
          }
          if (typeof node === "string") {
            var segment = task.blockedSegment;
            if (segment === null) ;
            else {
              segment.lastPushedText = pushTextInstance(segment.chunks, node, request.renderState, segment.lastPushedText);
            }
            return;
          }
          if (typeof node === "number" || enableBigIntSupport) {
            var _segment = task.blockedSegment;
            if (_segment === null) ;
            else {
              _segment.lastPushedText = pushTextInstance(_segment.chunks, "" + node, request.renderState, _segment.lastPushedText);
            }
            return;
          }
          {
            if (typeof node === "function") {
              warnOnFunctionType(node);
            }
            if (typeof node === "symbol") {
              warnOnSymbolType(node);
            }
          }
        }
        function replayFragment(request, task, children, childIndex) {
          var replay = task.replay;
          var replayNodes = replay.nodes;
          for (var j = 0; j < replayNodes.length; j++) {
            var node = replayNodes[j];
            if (node[1] !== childIndex) {
              continue;
            }
            var childNodes = node[2];
            var childSlots = node[3];
            task.replay = {
              nodes: childNodes,
              slots: childSlots,
              pendingTasks: 1
            };
            try {
              renderChildrenArray(request, task, children, -1);
              if (task.replay.pendingTasks === 1 && task.replay.nodes.length > 0) {
                throw new Error("Couldn't find all resumable slots by key/index during replaying. The tree doesn't match so React will fallback to client rendering.");
              }
              task.replay.pendingTasks--;
            } catch (x) {
              if (typeof x === "object" && x !== null && (x === SuspenseException || typeof x.then === "function")) {
                throw x;
              }
              task.replay.pendingTasks--;
              var thrownInfo = getThrownInfo(request, task.componentStack);
              erroredReplay(request, task.blockedBoundary, x, thrownInfo, childNodes, childSlots);
            }
            task.replay = replay;
            replayNodes.splice(j, 1);
            break;
          }
        }
        function renderChildrenArray(request, task, children, childIndex) {
          var prevKeyPath = task.keyPath;
          if (childIndex !== -1) {
            task.keyPath = [task.keyPath, "Fragment", childIndex];
            if (task.replay !== null) {
              replayFragment(
                request,
                // $FlowFixMe: Refined.
                task,
                children,
                childIndex
              );
              task.keyPath = prevKeyPath;
              return;
            }
          }
          var prevTreeContext = task.treeContext;
          var totalChildren = children.length;
          if (task.replay !== null) {
            var resumeSlots = task.replay.slots;
            if (resumeSlots !== null && typeof resumeSlots === "object") {
              for (var i = 0; i < totalChildren; i++) {
                var node = children[i];
                task.treeContext = pushTreeContext(prevTreeContext, totalChildren, i);
                var resumeSegmentID = resumeSlots[i];
                if (typeof resumeSegmentID === "number") {
                  resumeNode(request, task, resumeSegmentID, node, i);
                  delete resumeSlots[i];
                } else {
                  renderNode(request, task, node, i);
                }
              }
              task.treeContext = prevTreeContext;
              task.keyPath = prevKeyPath;
              return;
            }
          }
          for (var _i = 0; _i < totalChildren; _i++) {
            var _node = children[_i];
            task.treeContext = pushTreeContext(prevTreeContext, totalChildren, _i);
            renderNode(request, task, _node, _i);
          }
          task.treeContext = prevTreeContext;
          task.keyPath = prevKeyPath;
        }
        function untrackBoundary(request, boundary) {
          var trackedPostpones = request.trackedPostpones;
          if (trackedPostpones === null) {
            return;
          }
          var boundaryKeyPath = boundary.trackedContentKeyPath;
          if (boundaryKeyPath === null) {
            return;
          }
          var boundaryNode = trackedPostpones.workingMap.get(boundaryKeyPath);
          if (boundaryNode === void 0) {
            return;
          }
          boundaryNode.length = 4;
          boundaryNode[2] = [];
          boundaryNode[3] = null;
        }
        function spawnNewSuspendedReplayTask(request, task, thenableState2, x) {
          var newTask = createReplayTask(
            request,
            thenableState2,
            task.replay,
            task.node,
            task.childIndex,
            task.blockedBoundary,
            task.hoistableState,
            task.abortSet,
            task.keyPath,
            task.formatContext,
            task.legacyContext,
            task.context,
            task.treeContext,
            // We pop one task off the stack because the node that suspended will be tried again,
            // which will add it back onto the stack.
            task.componentStack !== null ? task.componentStack.parent : null,
            task.isFallback
          );
          var ping = newTask.ping;
          x.then(ping, ping);
        }
        function spawnNewSuspendedRenderTask(request, task, thenableState2, x) {
          var segment = task.blockedSegment;
          var insertionIndex = segment.chunks.length;
          var newSegment = createPendingSegment(
            request,
            insertionIndex,
            null,
            task.formatContext,
            // Adopt the parent segment's leading text embed
            segment.lastPushedText,
            // Assume we are text embedded at the trailing edge
            true
          );
          segment.children.push(newSegment);
          segment.lastPushedText = false;
          var newTask = createRenderTask(
            request,
            thenableState2,
            task.node,
            task.childIndex,
            task.blockedBoundary,
            newSegment,
            task.hoistableState,
            task.abortSet,
            task.keyPath,
            task.formatContext,
            task.legacyContext,
            task.context,
            task.treeContext,
            // We pop one task off the stack because the node that suspended will be tried again,
            // which will add it back onto the stack.
            task.componentStack !== null ? task.componentStack.parent : null,
            task.isFallback
          );
          var ping = newTask.ping;
          x.then(ping, ping);
        }
        function renderNode(request, task, node, childIndex) {
          var previousFormatContext = task.formatContext;
          var previousLegacyContext = task.legacyContext;
          var previousContext = task.context;
          var previousKeyPath = task.keyPath;
          var previousTreeContext = task.treeContext;
          var previousComponentStack = task.componentStack;
          var x;
          var segment = task.blockedSegment;
          if (segment === null) {
            try {
              return renderNodeDestructive(request, task, node, childIndex);
            } catch (thrownValue) {
              resetHooksState();
              x = thrownValue === SuspenseException ? (
                // This is a special type of exception used for Suspense. For historical
                // reasons, the rest of the Suspense implementation expects the thrown
                // value to be a thenable, because before `use` existed that was the
                // (unstable) API for suspending. This implementation detail can change
                // later, once we deprecate the old API in favor of `use`.
                getSuspendedThenable()
              ) : thrownValue;
              if (typeof x === "object" && x !== null) {
                if (typeof x.then === "function") {
                  var wakeable = x;
                  var thenableState2 = getThenableStateAfterSuspending();
                  spawnNewSuspendedReplayTask(
                    request,
                    // $FlowFixMe: Refined.
                    task,
                    thenableState2,
                    wakeable
                  );
                  task.formatContext = previousFormatContext;
                  task.legacyContext = previousLegacyContext;
                  task.context = previousContext;
                  task.keyPath = previousKeyPath;
                  task.treeContext = previousTreeContext;
                  task.componentStack = previousComponentStack;
                  switchContext(previousContext);
                  return;
                }
              }
            }
          } else {
            var childrenLength = segment.children.length;
            var chunkLength = segment.chunks.length;
            try {
              return renderNodeDestructive(request, task, node, childIndex);
            } catch (thrownValue) {
              resetHooksState();
              segment.children.length = childrenLength;
              segment.chunks.length = chunkLength;
              x = thrownValue === SuspenseException ? (
                // This is a special type of exception used for Suspense. For historical
                // reasons, the rest of the Suspense implementation expects the thrown
                // value to be a thenable, because before `use` existed that was the
                // (unstable) API for suspending. This implementation detail can change
                // later, once we deprecate the old API in favor of `use`.
                getSuspendedThenable()
              ) : thrownValue;
              if (typeof x === "object" && x !== null) {
                if (typeof x.then === "function") {
                  var _wakeable = x;
                  var _thenableState = getThenableStateAfterSuspending();
                  spawnNewSuspendedRenderTask(
                    request,
                    // $FlowFixMe: Refined.
                    task,
                    _thenableState,
                    _wakeable
                  );
                  task.formatContext = previousFormatContext;
                  task.legacyContext = previousLegacyContext;
                  task.context = previousContext;
                  task.keyPath = previousKeyPath;
                  task.treeContext = previousTreeContext;
                  task.componentStack = previousComponentStack;
                  switchContext(previousContext);
                  return;
                }
              }
            }
          }
          task.formatContext = previousFormatContext;
          task.legacyContext = previousLegacyContext;
          task.context = previousContext;
          task.keyPath = previousKeyPath;
          task.treeContext = previousTreeContext;
          switchContext(previousContext);
          throw x;
        }
        function erroredReplay(request, boundary, error2, errorInfo, replayNodes, resumeSlots) {
          var errorDigest;
          {
            errorDigest = logRecoverableError(request, error2, errorInfo);
          }
          abortRemainingReplayNodes(request, boundary, replayNodes, resumeSlots, error2, errorDigest, errorInfo);
        }
        function erroredTask(request, boundary, error2, errorInfo) {
          var errorDigest;
          {
            errorDigest = logRecoverableError(request, error2, errorInfo);
          }
          if (boundary === null) {
            fatalError(request, error2);
          } else {
            boundary.pendingTasks--;
            if (boundary.status !== CLIENT_RENDERED) {
              boundary.status = CLIENT_RENDERED;
              encodeErrorForBoundary(boundary, errorDigest, error2, errorInfo);
              untrackBoundary(request, boundary);
              if (boundary.parentFlushed) {
                request.clientRenderedBoundaries.push(boundary);
              }
            }
          }
          request.allPendingTasks--;
          if (request.allPendingTasks === 0) {
            completeAll(request);
          }
        }
        function abortTaskSoft(task) {
          var request = this;
          var boundary = task.blockedBoundary;
          var segment = task.blockedSegment;
          if (segment !== null) {
            segment.status = ABORTED;
            finishedTask(request, boundary, segment);
          }
        }
        function abortRemainingSuspenseBoundary(request, rootSegmentID, error2, errorDigest, errorInfo) {
          var resumedBoundary = createSuspenseBoundary(request, /* @__PURE__ */ new Set());
          resumedBoundary.parentFlushed = true;
          resumedBoundary.rootSegmentID = rootSegmentID;
          resumedBoundary.status = CLIENT_RENDERED;
          var errorMessage = error2;
          {
            var errorPrefix = "The server did not finish this Suspense boundary: ";
            if (error2 && typeof error2.message === "string") {
              errorMessage = errorPrefix + error2.message;
            } else {
              errorMessage = errorPrefix + String(error2);
            }
          }
          encodeErrorForBoundary(resumedBoundary, errorDigest, errorMessage, errorInfo);
          if (resumedBoundary.parentFlushed) {
            request.clientRenderedBoundaries.push(resumedBoundary);
          }
        }
        function abortRemainingReplayNodes(request, boundary, nodes, slots, error2, errorDigest, errorInfo) {
          for (var i = 0; i < nodes.length; i++) {
            var node = nodes[i];
            if (node.length === 4) {
              abortRemainingReplayNodes(request, boundary, node[2], node[3], error2, errorDigest, errorInfo);
            } else {
              var boundaryNode = node;
              var rootSegmentID = boundaryNode[5];
              abortRemainingSuspenseBoundary(request, rootSegmentID, error2, errorDigest, errorInfo);
            }
          }
          nodes.length = 0;
          if (slots !== null) {
            if (boundary === null) {
              throw new Error("We should not have any resumable nodes in the shell. This is a bug in React.");
            } else if (boundary.status !== CLIENT_RENDERED) {
              boundary.status = CLIENT_RENDERED;
              encodeErrorForBoundary(boundary, errorDigest, error2, errorInfo);
              if (boundary.parentFlushed) {
                request.clientRenderedBoundaries.push(boundary);
              }
            }
            if (typeof slots === "object") {
              for (var index in slots) {
                delete slots[index];
              }
            }
          }
        }
        function abortTask(task, request, error2) {
          var boundary = task.blockedBoundary;
          var segment = task.blockedSegment;
          if (segment !== null) {
            segment.status = ABORTED;
          }
          if (boundary === null) {
            var errorInfo = {};
            if (request.status !== CLOSING && request.status !== CLOSED) {
              var replay = task.replay;
              if (replay === null) {
                {
                  logRecoverableError(request, error2, errorInfo);
                  fatalError(request, error2);
                }
                return;
              } else {
                replay.pendingTasks--;
                if (replay.pendingTasks === 0 && replay.nodes.length > 0) {
                  var errorDigest;
                  {
                    errorDigest = logRecoverableError(request, error2, errorInfo);
                  }
                  abortRemainingReplayNodes(request, null, replay.nodes, replay.slots, error2, errorDigest, errorInfo);
                }
                request.pendingRootTasks--;
                if (request.pendingRootTasks === 0) {
                  completeShell(request);
                }
              }
            }
          } else {
            boundary.pendingTasks--;
            if (boundary.status !== CLIENT_RENDERED) {
              boundary.status = CLIENT_RENDERED;
              var _errorInfo = getThrownInfo(request, task.componentStack);
              var _errorDigest;
              {
                _errorDigest = logRecoverableError(request, error2, _errorInfo);
              }
              var errorMessage = error2;
              {
                var errorPrefix = "The server did not finish this Suspense boundary: ";
                if (error2 && typeof error2.message === "string") {
                  errorMessage = errorPrefix + error2.message;
                } else {
                  errorMessage = errorPrefix + String(error2);
                }
              }
              encodeErrorForBoundary(boundary, _errorDigest, errorMessage, _errorInfo);
              untrackBoundary(request, boundary);
              if (boundary.parentFlushed) {
                request.clientRenderedBoundaries.push(boundary);
              }
            }
            boundary.fallbackAbortableTasks.forEach(function(fallbackTask) {
              return abortTask(fallbackTask, request, error2);
            });
            boundary.fallbackAbortableTasks.clear();
          }
          request.allPendingTasks--;
          if (request.allPendingTasks === 0) {
            completeAll(request);
          }
        }
        function safelyEmitEarlyPreloads(request, shellComplete) {
          try {
            emitEarlyPreloads(request.renderState, request.resumableState, shellComplete);
          } catch (error2) {
            var errorInfo = {};
            logRecoverableError(request, error2, errorInfo);
          }
        }
        function completeShell(request) {
          if (request.trackedPostpones === null) {
            var shellComplete = true;
            safelyEmitEarlyPreloads(request, shellComplete);
          }
          request.onShellError = noop;
          var onShellReady = request.onShellReady;
          onShellReady();
        }
        function completeAll(request) {
          var shellComplete = request.trackedPostpones === null ? (
            // Render, we assume it is completed
            true
          ) : (
            // Prerender Request, we use the state of the root segment
            request.completedRootSegment === null || request.completedRootSegment.status !== POSTPONED
          );
          safelyEmitEarlyPreloads(request, shellComplete);
          var onAllReady = request.onAllReady;
          onAllReady();
        }
        function queueCompletedSegment(boundary, segment) {
          if (segment.chunks.length === 0 && segment.children.length === 1 && segment.children[0].boundary === null && segment.children[0].id === -1) {
            var childSegment = segment.children[0];
            childSegment.id = segment.id;
            childSegment.parentFlushed = true;
            if (childSegment.status === COMPLETED) {
              queueCompletedSegment(boundary, childSegment);
            }
          } else {
            var completedSegments = boundary.completedSegments;
            completedSegments.push(segment);
          }
        }
        function finishedTask(request, boundary, segment) {
          if (boundary === null) {
            if (segment !== null && segment.parentFlushed) {
              if (request.completedRootSegment !== null) {
                throw new Error("There can only be one root segment. This is a bug in React.");
              }
              request.completedRootSegment = segment;
            }
            request.pendingRootTasks--;
            if (request.pendingRootTasks === 0) {
              completeShell(request);
            }
          } else {
            boundary.pendingTasks--;
            if (boundary.status === CLIENT_RENDERED) ;
            else if (boundary.pendingTasks === 0) {
              if (boundary.status === PENDING) {
                boundary.status = COMPLETED;
              }
              if (segment !== null && segment.parentFlushed) {
                if (segment.status === COMPLETED) {
                  queueCompletedSegment(boundary, segment);
                }
              }
              if (boundary.parentFlushed) {
                request.completedBoundaries.push(boundary);
              }
              if (boundary.status === COMPLETED) {
                boundary.fallbackAbortableTasks.forEach(abortTaskSoft, request);
                boundary.fallbackAbortableTasks.clear();
              }
            } else {
              if (segment !== null && segment.parentFlushed) {
                if (segment.status === COMPLETED) {
                  queueCompletedSegment(boundary, segment);
                  var completedSegments = boundary.completedSegments;
                  if (completedSegments.length === 1) {
                    if (boundary.parentFlushed) {
                      request.partialBoundaries.push(boundary);
                    }
                  }
                }
              }
            }
          }
          request.allPendingTasks--;
          if (request.allPendingTasks === 0) {
            completeAll(request);
          }
        }
        function retryTask(request, task) {
          var segment = task.blockedSegment;
          if (segment === null) {
            retryReplayTask(
              request,
              // $FlowFixMe: Refined.
              task
            );
          } else {
            retryRenderTask(
              request,
              // $FlowFixMe: Refined.
              task,
              segment
            );
          }
        }
        function retryRenderTask(request, task, segment) {
          if (segment.status !== PENDING) {
            return;
          }
          switchContext(task.context);
          var prevTaskInDEV = null;
          {
            prevTaskInDEV = currentTaskInDEV;
            currentTaskInDEV = task;
          }
          var childrenLength = segment.children.length;
          var chunkLength = segment.chunks.length;
          try {
            renderNodeDestructive(request, task, task.node, task.childIndex);
            pushSegmentFinale(segment.chunks, request.renderState, segment.lastPushedText, segment.textEmbedded);
            task.abortSet.delete(task);
            segment.status = COMPLETED;
            finishedTask(request, task.blockedBoundary, segment);
          } catch (thrownValue) {
            resetHooksState();
            segment.children.length = childrenLength;
            segment.chunks.length = chunkLength;
            var x = thrownValue === SuspenseException ? (
              // This is a special type of exception used for Suspense. For historical
              // reasons, the rest of the Suspense implementation expects the thrown
              // value to be a thenable, because before `use` existed that was the
              // (unstable) API for suspending. This implementation detail can change
              // later, once we deprecate the old API in favor of `use`.
              getSuspendedThenable()
            ) : thrownValue;
            if (typeof x === "object" && x !== null) {
              if (typeof x.then === "function") {
                var ping = task.ping;
                x.then(ping, ping);
                task.thenableState = getThenableStateAfterSuspending();
                return;
              }
            }
            var errorInfo = getThrownInfo(request, task.componentStack);
            task.abortSet.delete(task);
            segment.status = ERRORED;
            erroredTask(request, task.blockedBoundary, x, errorInfo);
            return;
          } finally {
            {
              currentTaskInDEV = prevTaskInDEV;
            }
          }
        }
        function retryReplayTask(request, task) {
          if (task.replay.pendingTasks === 0) {
            return;
          }
          switchContext(task.context);
          var prevTaskInDEV = null;
          {
            prevTaskInDEV = currentTaskInDEV;
            currentTaskInDEV = task;
          }
          try {
            renderNodeDestructive(request, task, task.node, task.childIndex);
            if (task.replay.pendingTasks === 1 && task.replay.nodes.length > 0) {
              throw new Error("Couldn't find all resumable slots by key/index during replaying. The tree doesn't match so React will fallback to client rendering.");
            }
            task.replay.pendingTasks--;
            task.abortSet.delete(task);
            finishedTask(request, task.blockedBoundary, null);
          } catch (thrownValue) {
            resetHooksState();
            var x = thrownValue === SuspenseException ? (
              // This is a special type of exception used for Suspense. For historical
              // reasons, the rest of the Suspense implementation expects the thrown
              // value to be a thenable, because before `use` existed that was the
              // (unstable) API for suspending. This implementation detail can change
              // later, once we deprecate the old API in favor of `use`.
              getSuspendedThenable()
            ) : thrownValue;
            if (typeof x === "object" && x !== null) {
              if (typeof x.then === "function") {
                var ping = task.ping;
                x.then(ping, ping);
                task.thenableState = getThenableStateAfterSuspending();
                return;
              }
            }
            task.replay.pendingTasks--;
            task.abortSet.delete(task);
            var errorInfo = getThrownInfo(request, task.componentStack);
            erroredReplay(request, task.blockedBoundary, x, errorInfo, task.replay.nodes, task.replay.slots);
            request.pendingRootTasks--;
            if (request.pendingRootTasks === 0) {
              completeShell(request);
            }
            request.allPendingTasks--;
            if (request.allPendingTasks === 0) {
              completeAll(request);
            }
            return;
          } finally {
            {
              currentTaskInDEV = prevTaskInDEV;
            }
          }
        }
        function performWork(request) {
          if (request.status === CLOSED) {
            return;
          }
          var prevContext = getActiveContext();
          var prevDispatcher = ReactCurrentDispatcher.current;
          ReactCurrentDispatcher.current = HooksDispatcher;
          var prevCacheDispatcher;
          {
            prevCacheDispatcher = ReactCurrentCache.current;
            ReactCurrentCache.current = DefaultCacheDispatcher;
          }
          var prevRequest = currentRequest;
          currentRequest = request;
          var prevGetCurrentStackImpl;
          {
            prevGetCurrentStackImpl = ReactDebugCurrentFrame.getCurrentStack;
            ReactDebugCurrentFrame.getCurrentStack = getCurrentStackInDEV;
          }
          var prevResumableState = currentResumableState;
          setCurrentResumableState(request.resumableState);
          try {
            var pingedTasks = request.pingedTasks;
            var i;
            for (i = 0; i < pingedTasks.length; i++) {
              var task = pingedTasks[i];
              retryTask(request, task);
            }
            pingedTasks.splice(0, i);
            if (request.destination !== null) {
              flushCompletedQueues(request, request.destination);
            }
          } catch (error2) {
            var errorInfo = {};
            logRecoverableError(request, error2, errorInfo);
            fatalError(request, error2);
          } finally {
            setCurrentResumableState(prevResumableState);
            ReactCurrentDispatcher.current = prevDispatcher;
            {
              ReactCurrentCache.current = prevCacheDispatcher;
            }
            {
              ReactDebugCurrentFrame.getCurrentStack = prevGetCurrentStackImpl;
            }
            if (prevDispatcher === HooksDispatcher) {
              switchContext(prevContext);
            }
            currentRequest = prevRequest;
          }
        }
        function flushPreamble(request, destination, rootSegment) {
          var willFlushAllSegments = request.allPendingTasks === 0 && request.trackedPostpones === null;
          writePreamble(destination, request.resumableState, request.renderState, willFlushAllSegments);
        }
        function flushSubtree(request, destination, segment, hoistableState) {
          segment.parentFlushed = true;
          switch (segment.status) {
            case PENDING: {
              segment.id = request.nextSegmentId++;
            }
            case POSTPONED: {
              var segmentID = segment.id;
              segment.lastPushedText = false;
              segment.textEmbedded = false;
              return writePlaceholder(destination, request.renderState, segmentID);
            }
            case COMPLETED: {
              segment.status = FLUSHED;
              var r = true;
              var chunks = segment.chunks;
              var chunkIdx = 0;
              var children = segment.children;
              for (var childIdx = 0; childIdx < children.length; childIdx++) {
                var nextChild = children[childIdx];
                for (; chunkIdx < nextChild.index; chunkIdx++) {
                  writeChunk(destination, chunks[chunkIdx]);
                }
                r = flushSegment(request, destination, nextChild, hoistableState);
              }
              for (; chunkIdx < chunks.length - 1; chunkIdx++) {
                writeChunk(destination, chunks[chunkIdx]);
              }
              if (chunkIdx < chunks.length) {
                r = writeChunkAndReturn(destination, chunks[chunkIdx]);
              }
              return r;
            }
            default: {
              throw new Error("Aborted, errored or already flushed boundaries should not be flushed again. This is a bug in React.");
            }
          }
        }
        function flushSegment(request, destination, segment, hoistableState) {
          var boundary = segment.boundary;
          if (boundary === null) {
            return flushSubtree(request, destination, segment, hoistableState);
          }
          boundary.parentFlushed = true;
          if (boundary.status === CLIENT_RENDERED) {
            writeStartClientRenderedSuspenseBoundary(destination, request.renderState, boundary.errorDigest, boundary.errorMessage, boundary.errorComponentStack);
            flushSubtree(request, destination, segment, hoistableState);
            return writeEndClientRenderedSuspenseBoundary(destination, request.renderState);
          } else if (boundary.status !== COMPLETED) {
            if (boundary.status === PENDING) {
              boundary.rootSegmentID = request.nextSegmentId++;
            }
            if (boundary.completedSegments.length > 0) {
              request.partialBoundaries.push(boundary);
            }
            var id = boundary.rootSegmentID;
            writeStartPendingSuspenseBoundary(destination, request.renderState, id);
            {
              if (hoistableState) {
                hoistHoistables(hoistableState, boundary.fallbackState);
              }
            }
            flushSubtree(request, destination, segment, hoistableState);
            return writeEndPendingSuspenseBoundary(destination);
          } else if (boundary.byteSize > request.progressiveChunkSize) {
            boundary.rootSegmentID = request.nextSegmentId++;
            request.completedBoundaries.push(boundary);
            writeStartPendingSuspenseBoundary(destination, request.renderState, boundary.rootSegmentID);
            flushSubtree(request, destination, segment, hoistableState);
            return writeEndPendingSuspenseBoundary(destination);
          } else {
            {
              if (hoistableState) {
                hoistHoistables(hoistableState, boundary.contentState);
              }
            }
            writeStartCompletedSuspenseBoundary(destination, request.renderState);
            var completedSegments = boundary.completedSegments;
            if (completedSegments.length !== 1) {
              throw new Error("A previously unvisited boundary must have exactly one root segment. This is a bug in React.");
            }
            var contentSegment = completedSegments[0];
            flushSegment(request, destination, contentSegment, hoistableState);
            return writeEndCompletedSuspenseBoundary(destination, request.renderState);
          }
        }
        function flushClientRenderedBoundary(request, destination, boundary) {
          return writeClientRenderBoundaryInstruction(destination, request.resumableState, request.renderState, boundary.rootSegmentID, boundary.errorDigest, boundary.errorMessage, boundary.errorComponentStack);
        }
        function flushSegmentContainer(request, destination, segment, hoistableState) {
          writeStartSegment(destination, request.renderState, segment.parentFormatContext, segment.id);
          flushSegment(request, destination, segment, hoistableState);
          return writeEndSegment(destination, segment.parentFormatContext);
        }
        function flushCompletedBoundary(request, destination, boundary) {
          var completedSegments = boundary.completedSegments;
          var i = 0;
          for (; i < completedSegments.length; i++) {
            var segment = completedSegments[i];
            flushPartiallyCompletedSegment(request, destination, boundary, segment);
          }
          completedSegments.length = 0;
          {
            writeHoistablesForBoundary(destination, boundary.contentState, request.renderState);
          }
          return writeCompletedBoundaryInstruction(destination, request.resumableState, request.renderState, boundary.rootSegmentID, boundary.contentState);
        }
        function flushPartialBoundary(request, destination, boundary) {
          var completedSegments = boundary.completedSegments;
          var i = 0;
          for (; i < completedSegments.length; i++) {
            var segment = completedSegments[i];
            if (!flushPartiallyCompletedSegment(request, destination, boundary, segment)) {
              i++;
              completedSegments.splice(0, i);
              return false;
            }
          }
          completedSegments.splice(0, i);
          {
            return writeHoistablesForBoundary(destination, boundary.contentState, request.renderState);
          }
        }
        function flushPartiallyCompletedSegment(request, destination, boundary, segment) {
          if (segment.status === FLUSHED) {
            return true;
          }
          var hoistableState = boundary.contentState;
          var segmentID = segment.id;
          if (segmentID === -1) {
            var rootSegmentID = segment.id = boundary.rootSegmentID;
            if (rootSegmentID === -1) {
              throw new Error("A root segment ID must have been assigned by now. This is a bug in React.");
            }
            return flushSegmentContainer(request, destination, segment, hoistableState);
          } else if (segmentID === boundary.rootSegmentID) {
            return flushSegmentContainer(request, destination, segment, hoistableState);
          } else {
            flushSegmentContainer(request, destination, segment, hoistableState);
            return writeCompletedSegmentInstruction(destination, request.resumableState, request.renderState, segmentID);
          }
        }
        function flushCompletedQueues(request, destination) {
          try {
            var i;
            var completedRootSegment = request.completedRootSegment;
            if (completedRootSegment !== null) {
              if (completedRootSegment.status === POSTPONED) {
                return;
              } else if (request.pendingRootTasks === 0) {
                if (enableFloat) {
                  flushPreamble(request, destination, completedRootSegment);
                }
                flushSegment(request, destination, completedRootSegment, null);
                request.completedRootSegment = null;
                writeCompletedRoot(destination, request.renderState);
              } else {
                return;
              }
            }
            if (enableFloat) {
              writeHoistables(destination, request.resumableState, request.renderState);
            }
            var clientRenderedBoundaries = request.clientRenderedBoundaries;
            for (i = 0; i < clientRenderedBoundaries.length; i++) {
              var boundary = clientRenderedBoundaries[i];
              if (!flushClientRenderedBoundary(request, destination, boundary)) {
                request.destination = null;
                i++;
                clientRenderedBoundaries.splice(0, i);
                return;
              }
            }
            clientRenderedBoundaries.splice(0, i);
            var completedBoundaries = request.completedBoundaries;
            for (i = 0; i < completedBoundaries.length; i++) {
              var _boundary = completedBoundaries[i];
              if (!flushCompletedBoundary(request, destination, _boundary)) {
                request.destination = null;
                i++;
                completedBoundaries.splice(0, i);
                return;
              }
            }
            completedBoundaries.splice(0, i);
            completeWriting(destination);
            beginWriting(destination);
            var partialBoundaries = request.partialBoundaries;
            for (i = 0; i < partialBoundaries.length; i++) {
              var _boundary2 = partialBoundaries[i];
              if (!flushPartialBoundary(request, destination, _boundary2)) {
                request.destination = null;
                i++;
                partialBoundaries.splice(0, i);
                return;
              }
            }
            partialBoundaries.splice(0, i);
            var largeBoundaries = request.completedBoundaries;
            for (i = 0; i < largeBoundaries.length; i++) {
              var _boundary3 = largeBoundaries[i];
              if (!flushCompletedBoundary(request, destination, _boundary3)) {
                request.destination = null;
                i++;
                largeBoundaries.splice(0, i);
                return;
              }
            }
            largeBoundaries.splice(0, i);
          } finally {
            if (request.allPendingTasks === 0 && request.pingedTasks.length === 0 && request.clientRenderedBoundaries.length === 0 && request.completedBoundaries.length === 0) {
              request.flushScheduled = false;
              {
                {
                  writePostamble(destination, request.resumableState);
                }
              }
              {
                if (request.abortableTasks.size !== 0) {
                  error("There was still abortable task at the root when we closed. This is a bug in React.");
                }
              }
              close(destination);
              stopFlowing(request);
            }
          }
        }
        function startWork(request) {
          request.flushScheduled = request.destination !== null;
          {
            scheduleWork(function() {
              return performWork(request);
            });
          }
          if (request.trackedPostpones === null) {
            {
              scheduleWork(function() {
                return enqueueEarlyPreloadsAfterInitialWork(request);
              });
            }
          }
        }
        function enqueueEarlyPreloadsAfterInitialWork(request) {
          var shellComplete = request.pendingRootTasks === 0;
          safelyEmitEarlyPreloads(request, shellComplete);
        }
        function enqueueFlush(request) {
          if (request.flushScheduled === false && // If there are pinged tasks we are going to flush anyway after work completes
          request.pingedTasks.length === 0 && // If there is no destination there is nothing we can flush to. A flush will
          // happen when we start flowing again
          request.destination !== null) {
            request.flushScheduled = true;
            scheduleWork(function() {
              var destination = request.destination;
              if (destination) {
                flushCompletedQueues(request, destination);
              } else {
                request.flushScheduled = false;
              }
            });
          }
        }
        function startFlowing(request, destination) {
          if (request.status === CLOSING) {
            request.status = CLOSED;
            closeWithError(destination, request.fatalError);
            return;
          }
          if (request.status === CLOSED) {
            return;
          }
          if (request.destination !== null) {
            return;
          }
          request.destination = destination;
          try {
            flushCompletedQueues(request, destination);
          } catch (error2) {
            var errorInfo = {};
            logRecoverableError(request, error2, errorInfo);
            fatalError(request, error2);
          }
        }
        function stopFlowing(request) {
          request.destination = null;
        }
        function abort(request, reason) {
          try {
            var abortableTasks = request.abortableTasks;
            if (abortableTasks.size > 0) {
              var error2 = reason === void 0 ? new Error("The render was aborted by the server without a reason.") : reason;
              abortableTasks.forEach(function(task) {
                return abortTask(task, request, error2);
              });
              abortableTasks.clear();
            }
            if (request.destination !== null) {
              flushCompletedQueues(request, request.destination);
            }
          } catch (error3) {
            var errorInfo = {};
            logRecoverableError(request, error3, errorInfo);
            fatalError(request, error3);
          }
        }
        function flushResources(request) {
          enqueueFlush(request);
        }
        function getFormState(request) {
          return request.formState;
        }
        function getResumableState(request) {
          return request.resumableState;
        }
        function getRenderState(request) {
          return request.renderState;
        }
        function onError() {
        }
        function renderToStringImpl(children, options, generateStaticMarkup, abortReason) {
          var didFatal = false;
          var fatalError2 = null;
          var result = "";
          var destination = {
            // $FlowFixMe[missing-local-annot]
            push: function(chunk) {
              if (chunk !== null) {
                result += chunk;
              }
              return true;
            },
            // $FlowFixMe[missing-local-annot]
            destroy: function(error2) {
              didFatal = true;
              fatalError2 = error2;
            }
          };
          var readyToStream = false;
          function onShellReady() {
            readyToStream = true;
          }
          var resumableState = createResumableState(options ? options.identifierPrefix : void 0, void 0);
          var request = createRequest(children, resumableState, createRenderState(resumableState, generateStaticMarkup), createRootFormatContext(), Infinity, onError, void 0, onShellReady, void 0, void 0, void 0);
          startWork(request);
          abort(request, abortReason);
          startFlowing(request, destination);
          if (didFatal && fatalError2 !== abortReason) {
            throw fatalError2;
          }
          if (!readyToStream) {
            throw new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
          }
          return result;
        }
        function renderToString(children, options) {
          return renderToStringImpl(children, options, false, 'The server used "renderToString" which does not support Suspense. If you intended for this Suspense boundary to render the fallback content on the server consider throwing an Error somewhere within the Suspense boundary. If you intended to have the server wait for the suspended component please switch to "renderToReadableStream" which supports Suspense on the server');
        }
        function renderToStaticMarkup(children, options) {
          return renderToStringImpl(children, options, true, 'The server used "renderToStaticMarkup" which does not support Suspense. If you intended to have the server wait for the suspended component please switch to "renderToReadableStream" which supports Suspense on the server');
        }
        function renderToNodeStream() {
          throw new Error("ReactDOMServer.renderToNodeStream(): The streaming API is not available in the browser. Use ReactDOMServer.renderToString() instead.");
        }
        function renderToStaticNodeStream() {
          throw new Error("ReactDOMServer.renderToStaticNodeStream(): The streaming API is not available in the browser. Use ReactDOMServer.renderToStaticMarkup() instead.");
        }
        exports.renderToNodeStream = renderToNodeStream;
        exports.renderToStaticMarkup = renderToStaticMarkup;
        exports.renderToStaticNodeStream = renderToStaticNodeStream;
        exports.renderToString = renderToString;
        exports.version = ReactVersion;
      })();
    }
  }
});

// node_modules/react-dom/cjs/react-dom-server.browser.development.js
var require_react_dom_server_browser_development = __commonJS({
  "node_modules/react-dom/cjs/react-dom-server.browser.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var React = require_react();
        var ReactDOM = require_react_dom();
        var ReactVersion = "18.3.0-canary-2f8f77602-20240229";
        var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        function warn(format) {
          {
            {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
        }
        function error(format) {
          {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        var REACT_ELEMENT_TYPE = Symbol.for("react.element");
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        var REACT_CONSUMER_TYPE = Symbol.for("react.consumer");
        var REACT_CONTEXT_TYPE = Symbol.for("react.context");
        var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE = Symbol.for("react.memo");
        var REACT_LAZY_TYPE = Symbol.for("react.lazy");
        var REACT_SCOPE_TYPE = Symbol.for("react.scope");
        var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
        var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
        var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
        var REACT_CACHE_TYPE = Symbol.for("react.cache");
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var isArrayImpl = Array.isArray;
        function isArray(a) {
          return isArrayImpl(a);
        }
        var jsxPropsParents = /* @__PURE__ */ new WeakMap();
        var jsxChildrenParents = /* @__PURE__ */ new WeakMap();
        function objectName(object) {
          var name = Object.prototype.toString.call(object);
          return name.replace(/^\[object (.*)\]$/, function(m, p0) {
            return p0;
          });
        }
        function describeKeyForErrorMessage(key) {
          var encodedKey = JSON.stringify(key);
          return '"' + key + '"' === encodedKey ? key : encodedKey;
        }
        function describeValueForErrorMessage(value) {
          switch (typeof value) {
            case "string": {
              return JSON.stringify(value.length <= 10 ? value : value.slice(0, 10) + "...");
            }
            case "object": {
              if (isArray(value)) {
                return "[...]";
              }
              if (value !== null && value.$$typeof === CLIENT_REFERENCE_TAG) {
                return describeClientReference();
              }
              var name = objectName(value);
              if (name === "Object") {
                return "{...}";
              }
              return name;
            }
            case "function": {
              if (value.$$typeof === CLIENT_REFERENCE_TAG) {
                return describeClientReference();
              }
              var _name = value.displayName || value.name;
              return _name ? "function " + _name : "function";
            }
            default:
              return String(value);
          }
        }
        function describeElementType(type) {
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeElementType(type.render);
              case REACT_MEMO_TYPE:
                return describeElementType(type.type);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return describeElementType(init(payload));
                } catch (x) {
                }
              }
            }
          }
          return "";
        }
        var CLIENT_REFERENCE_TAG = Symbol.for("react.client.reference");
        function describeClientReference(ref) {
          return "client";
        }
        function describeObjectForErrorMessage(objectOrArray, expandedName) {
          var objKind = objectName(objectOrArray);
          if (objKind !== "Object" && objKind !== "Array") {
            return objKind;
          }
          var str = "";
          var start = -1;
          var length = 0;
          if (isArray(objectOrArray)) {
            if (jsxChildrenParents.has(objectOrArray)) {
              var type = jsxChildrenParents.get(objectOrArray);
              str = "<" + describeElementType(type) + ">";
              var array = objectOrArray;
              for (var i = 0; i < array.length; i++) {
                var value = array[i];
                var substr = void 0;
                if (typeof value === "string") {
                  substr = value;
                } else if (typeof value === "object" && value !== null) {
                  substr = "{" + describeObjectForErrorMessage(value) + "}";
                } else {
                  substr = "{" + describeValueForErrorMessage(value) + "}";
                }
                if ("" + i === expandedName) {
                  start = str.length;
                  length = substr.length;
                  str += substr;
                } else if (substr.length < 15 && str.length + substr.length < 40) {
                  str += substr;
                } else {
                  str += "{...}";
                }
              }
              str += "</" + describeElementType(type) + ">";
            } else {
              str = "[";
              var _array = objectOrArray;
              for (var _i = 0; _i < _array.length; _i++) {
                if (_i > 0) {
                  str += ", ";
                }
                var _value = _array[_i];
                var _substr = void 0;
                if (typeof _value === "object" && _value !== null) {
                  _substr = describeObjectForErrorMessage(_value);
                } else {
                  _substr = describeValueForErrorMessage(_value);
                }
                if ("" + _i === expandedName) {
                  start = str.length;
                  length = _substr.length;
                  str += _substr;
                } else if (_substr.length < 10 && str.length + _substr.length < 40) {
                  str += _substr;
                } else {
                  str += "...";
                }
              }
              str += "]";
            }
          } else {
            if (objectOrArray.$$typeof === REACT_ELEMENT_TYPE) {
              str = "<" + describeElementType(objectOrArray.type) + "/>";
            } else if (objectOrArray.$$typeof === CLIENT_REFERENCE_TAG) {
              return describeClientReference();
            } else if (jsxPropsParents.has(objectOrArray)) {
              var _type = jsxPropsParents.get(objectOrArray);
              str = "<" + (describeElementType(_type) || "...");
              var object = objectOrArray;
              var names = Object.keys(object);
              for (var _i2 = 0; _i2 < names.length; _i2++) {
                str += " ";
                var name = names[_i2];
                str += describeKeyForErrorMessage(name) + "=";
                var _value2 = object[name];
                var _substr2 = void 0;
                if (name === expandedName && typeof _value2 === "object" && _value2 !== null) {
                  _substr2 = describeObjectForErrorMessage(_value2);
                } else {
                  _substr2 = describeValueForErrorMessage(_value2);
                }
                if (typeof _value2 !== "string") {
                  _substr2 = "{" + _substr2 + "}";
                }
                if (name === expandedName) {
                  start = str.length;
                  length = _substr2.length;
                  str += _substr2;
                } else if (_substr2.length < 10 && str.length + _substr2.length < 40) {
                  str += _substr2;
                } else {
                  str += "...";
                }
              }
              str += ">";
            } else {
              str = "{";
              var _object = objectOrArray;
              var _names = Object.keys(_object);
              for (var _i3 = 0; _i3 < _names.length; _i3++) {
                if (_i3 > 0) {
                  str += ", ";
                }
                var _name2 = _names[_i3];
                str += describeKeyForErrorMessage(_name2) + ": ";
                var _value3 = _object[_name2];
                var _substr3 = void 0;
                if (typeof _value3 === "object" && _value3 !== null) {
                  _substr3 = describeObjectForErrorMessage(_value3);
                } else {
                  _substr3 = describeValueForErrorMessage(_value3);
                }
                if (_name2 === expandedName) {
                  start = str.length;
                  length = _substr3.length;
                  str += _substr3;
                } else if (_substr3.length < 10 && str.length + _substr3.length < 40) {
                  str += _substr3;
                } else {
                  str += "...";
                }
              }
              str += "}";
            }
          }
          if (expandedName === void 0) {
            return str;
          }
          if (start > -1 && length > 0) {
            var highlight = " ".repeat(start) + "^".repeat(length);
            return "\n  " + str + "\n  " + highlight;
          }
          return "\n  " + str;
        }
        function createFastHashJS(key) {
          return murmurhash3_32_gc(key, 0);
        }
        function murmurhash3_32_gc(key, seed) {
          var remainder, bytes, h1, h1b, c1, c2, k1, i;
          remainder = key.length & 3;
          bytes = key.length - remainder;
          h1 = seed;
          c1 = 3432918353;
          c2 = 461845907;
          i = 0;
          while (i < bytes) {
            k1 = key.charCodeAt(i) & 255 | (key.charCodeAt(++i) & 255) << 8 | (key.charCodeAt(++i) & 255) << 16 | (key.charCodeAt(++i) & 255) << 24;
            ++i;
            k1 = (k1 & 65535) * c1 + (((k1 >>> 16) * c1 & 65535) << 16) & 4294967295;
            k1 = k1 << 15 | k1 >>> 17;
            k1 = (k1 & 65535) * c2 + (((k1 >>> 16) * c2 & 65535) << 16) & 4294967295;
            h1 ^= k1;
            h1 = h1 << 13 | h1 >>> 19;
            h1b = (h1 & 65535) * 5 + (((h1 >>> 16) * 5 & 65535) << 16) & 4294967295;
            h1 = (h1b & 65535) + 27492 + (((h1b >>> 16) + 58964 & 65535) << 16);
          }
          k1 = 0;
          switch (remainder) {
            case 3:
              k1 ^= (key.charCodeAt(i + 2) & 255) << 16;
            case 2:
              k1 ^= (key.charCodeAt(i + 1) & 255) << 8;
            case 1:
              k1 ^= key.charCodeAt(i) & 255;
              k1 = (k1 & 65535) * c1 + (((k1 >>> 16) * c1 & 65535) << 16) & 4294967295;
              k1 = k1 << 15 | k1 >>> 17;
              k1 = (k1 & 65535) * c2 + (((k1 >>> 16) * c2 & 65535) << 16) & 4294967295;
              h1 ^= k1;
          }
          h1 ^= key.length;
          h1 ^= h1 >>> 16;
          h1 = (h1 & 65535) * 2246822507 + (((h1 >>> 16) * 2246822507 & 65535) << 16) & 4294967295;
          h1 ^= h1 >>> 13;
          h1 = (h1 & 65535) * 3266489909 + (((h1 >>> 16) * 3266489909 & 65535) << 16) & 4294967295;
          h1 ^= h1 >>> 16;
          return h1 >>> 0;
        }
        function scheduleWork(callback) {
          callback();
        }
        var VIEW_SIZE = 512;
        var currentView = null;
        var writtenBytes = 0;
        function beginWriting(destination) {
          currentView = new Uint8Array(VIEW_SIZE);
          writtenBytes = 0;
        }
        function writeChunk(destination, chunk) {
          if (chunk.byteLength === 0) {
            return;
          }
          if (chunk.byteLength > VIEW_SIZE) {
            {
              if (precomputedChunkSet.has(chunk)) {
                error('A large precomputed chunk was passed to writeChunk without being copied. Large chunks get enqueued directly and are not copied. This is incompatible with precomputed chunks because you cannot enqueue the same precomputed chunk twice. Use "cloneChunk" to make a copy of this large precomputed chunk before writing it. This is a bug in React.');
              }
            }
            if (writtenBytes > 0) {
              destination.enqueue(new Uint8Array(currentView.buffer, 0, writtenBytes));
              currentView = new Uint8Array(VIEW_SIZE);
              writtenBytes = 0;
            }
            destination.enqueue(chunk);
            return;
          }
          var bytesToWrite = chunk;
          var allowableBytes = currentView.length - writtenBytes;
          if (allowableBytes < bytesToWrite.byteLength) {
            if (allowableBytes === 0) {
              destination.enqueue(currentView);
            } else {
              currentView.set(bytesToWrite.subarray(0, allowableBytes), writtenBytes);
              destination.enqueue(currentView);
              bytesToWrite = bytesToWrite.subarray(allowableBytes);
            }
            currentView = new Uint8Array(VIEW_SIZE);
            writtenBytes = 0;
          }
          currentView.set(bytesToWrite, writtenBytes);
          writtenBytes += bytesToWrite.byteLength;
        }
        function writeChunkAndReturn(destination, chunk) {
          writeChunk(destination, chunk);
          return true;
        }
        function completeWriting(destination) {
          if (currentView && writtenBytes > 0) {
            destination.enqueue(new Uint8Array(currentView.buffer, 0, writtenBytes));
            currentView = null;
            writtenBytes = 0;
          }
        }
        function close(destination) {
          destination.close();
        }
        var textEncoder = new TextEncoder();
        function stringToChunk(content) {
          return textEncoder.encode(content);
        }
        var precomputedChunkSet = /* @__PURE__ */ new Set();
        function stringToPrecomputedChunk(content) {
          var precomputedChunk = textEncoder.encode(content);
          {
            precomputedChunkSet.add(precomputedChunk);
          }
          return precomputedChunk;
        }
        function clonePrecomputedChunk(precomputedChunk) {
          return precomputedChunk.byteLength > VIEW_SIZE ? precomputedChunk.slice() : precomputedChunk;
        }
        function closeWithError(destination, error2) {
          if (typeof destination.error === "function") {
            destination.error(error2);
          } else {
            destination.close();
          }
        }
        var assign = Object.assign;
        function typeName(value) {
          {
            var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
            var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            return type;
          }
        }
        function willCoercionThrow(value) {
          {
            try {
              testStringCoercion(value);
              return false;
            } catch (e) {
              return true;
            }
          }
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function checkAttributeStringCoercion(value, attributeName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before using it here.", attributeName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkOptionStringCoercion(value, propName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` option is an unsupported type %s. This value must be coerced to a string before using it here.", propName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkCSSPropertyStringCoercion(value, propName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before using it here.", propName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkHtmlStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        var enableFloat = true;
        var __NEXT_MAJOR__ = false;
        var enableBigIntSupport = __NEXT_MAJOR__;
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
        var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
        var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
        var illegalAttributeNameCache = {};
        var validatedAttributeNameCache = {};
        function isAttributeNameSafe(attributeName) {
          if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
            return true;
          }
          if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
            return false;
          }
          if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
            validatedAttributeNameCache[attributeName] = true;
            return true;
          }
          illegalAttributeNameCache[attributeName] = true;
          {
            error("Invalid attribute name: `%s`", attributeName);
          }
          return false;
        }
        var unitlessNumbers = /* @__PURE__ */ new Set([
          "animationIterationCount",
          "aspectRatio",
          "borderImageOutset",
          "borderImageSlice",
          "borderImageWidth",
          "boxFlex",
          "boxFlexGroup",
          "boxOrdinalGroup",
          "columnCount",
          "columns",
          "flex",
          "flexGrow",
          "flexPositive",
          "flexShrink",
          "flexNegative",
          "flexOrder",
          "gridArea",
          "gridRow",
          "gridRowEnd",
          "gridRowSpan",
          "gridRowStart",
          "gridColumn",
          "gridColumnEnd",
          "gridColumnSpan",
          "gridColumnStart",
          "fontWeight",
          "lineClamp",
          "lineHeight",
          "opacity",
          "order",
          "orphans",
          "scale",
          "tabSize",
          "widows",
          "zIndex",
          "zoom",
          "fillOpacity",
          // SVG-related properties
          "floodOpacity",
          "stopOpacity",
          "strokeDasharray",
          "strokeDashoffset",
          "strokeMiterlimit",
          "strokeOpacity",
          "strokeWidth",
          "MozAnimationIterationCount",
          // Known Prefixed Properties
          "MozBoxFlex",
          // TODO: Remove these since they shouldn't be used in modern code
          "MozBoxFlexGroup",
          "MozLineClamp",
          "msAnimationIterationCount",
          "msFlex",
          "msZoom",
          "msFlexGrow",
          "msFlexNegative",
          "msFlexOrder",
          "msFlexPositive",
          "msFlexShrink",
          "msGridColumn",
          "msGridColumnSpan",
          "msGridRow",
          "msGridRowSpan",
          "WebkitAnimationIterationCount",
          "WebkitBoxFlex",
          "WebKitBoxFlexGroup",
          "WebkitBoxOrdinalGroup",
          "WebkitColumnCount",
          "WebkitColumns",
          "WebkitFlex",
          "WebkitFlexGrow",
          "WebkitFlexPositive",
          "WebkitFlexShrink",
          "WebkitLineClamp"
        ]);
        function isUnitlessNumber(name) {
          return unitlessNumbers.has(name);
        }
        var aliases = /* @__PURE__ */ new Map([
          ["acceptCharset", "accept-charset"],
          ["htmlFor", "for"],
          ["httpEquiv", "http-equiv"],
          // HTML and SVG attributes, but the SVG attribute is case sensitive.],
          ["crossOrigin", "crossorigin"],
          // This is a list of all SVG attributes that need special casing.
          // Regular attributes that just accept strings.],
          ["accentHeight", "accent-height"],
          ["alignmentBaseline", "alignment-baseline"],
          ["arabicForm", "arabic-form"],
          ["baselineShift", "baseline-shift"],
          ["capHeight", "cap-height"],
          ["clipPath", "clip-path"],
          ["clipRule", "clip-rule"],
          ["colorInterpolation", "color-interpolation"],
          ["colorInterpolationFilters", "color-interpolation-filters"],
          ["colorProfile", "color-profile"],
          ["colorRendering", "color-rendering"],
          ["dominantBaseline", "dominant-baseline"],
          ["enableBackground", "enable-background"],
          ["fillOpacity", "fill-opacity"],
          ["fillRule", "fill-rule"],
          ["floodColor", "flood-color"],
          ["floodOpacity", "flood-opacity"],
          ["fontFamily", "font-family"],
          ["fontSize", "font-size"],
          ["fontSizeAdjust", "font-size-adjust"],
          ["fontStretch", "font-stretch"],
          ["fontStyle", "font-style"],
          ["fontVariant", "font-variant"],
          ["fontWeight", "font-weight"],
          ["glyphName", "glyph-name"],
          ["glyphOrientationHorizontal", "glyph-orientation-horizontal"],
          ["glyphOrientationVertical", "glyph-orientation-vertical"],
          ["horizAdvX", "horiz-adv-x"],
          ["horizOriginX", "horiz-origin-x"],
          ["imageRendering", "image-rendering"],
          ["letterSpacing", "letter-spacing"],
          ["lightingColor", "lighting-color"],
          ["markerEnd", "marker-end"],
          ["markerMid", "marker-mid"],
          ["markerStart", "marker-start"],
          ["overlinePosition", "overline-position"],
          ["overlineThickness", "overline-thickness"],
          ["paintOrder", "paint-order"],
          ["panose-1", "panose-1"],
          ["pointerEvents", "pointer-events"],
          ["renderingIntent", "rendering-intent"],
          ["shapeRendering", "shape-rendering"],
          ["stopColor", "stop-color"],
          ["stopOpacity", "stop-opacity"],
          ["strikethroughPosition", "strikethrough-position"],
          ["strikethroughThickness", "strikethrough-thickness"],
          ["strokeDasharray", "stroke-dasharray"],
          ["strokeDashoffset", "stroke-dashoffset"],
          ["strokeLinecap", "stroke-linecap"],
          ["strokeLinejoin", "stroke-linejoin"],
          ["strokeMiterlimit", "stroke-miterlimit"],
          ["strokeOpacity", "stroke-opacity"],
          ["strokeWidth", "stroke-width"],
          ["textAnchor", "text-anchor"],
          ["textDecoration", "text-decoration"],
          ["textRendering", "text-rendering"],
          ["transformOrigin", "transform-origin"],
          ["underlinePosition", "underline-position"],
          ["underlineThickness", "underline-thickness"],
          ["unicodeBidi", "unicode-bidi"],
          ["unicodeRange", "unicode-range"],
          ["unitsPerEm", "units-per-em"],
          ["vAlphabetic", "v-alphabetic"],
          ["vHanging", "v-hanging"],
          ["vIdeographic", "v-ideographic"],
          ["vMathematical", "v-mathematical"],
          ["vectorEffect", "vector-effect"],
          ["vertAdvY", "vert-adv-y"],
          ["vertOriginX", "vert-origin-x"],
          ["vertOriginY", "vert-origin-y"],
          ["wordSpacing", "word-spacing"],
          ["writingMode", "writing-mode"],
          ["xmlnsXlink", "xmlns:xlink"],
          ["xHeight", "x-height"]
        ]);
        function getAttributeAlias(name) {
          return aliases.get(name) || name;
        }
        var hasReadOnlyValue = {
          button: true,
          checkbox: true,
          image: true,
          hidden: true,
          radio: true,
          reset: true,
          submit: true
        };
        function checkControlledValueProps(tagName, props) {
          {
            if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
              if (tagName === "select") {
                error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set `onChange`.");
              } else {
                error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
              }
            }
            if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
              error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
            }
          }
        }
        var ariaProperties = {
          "aria-current": 0,
          // state
          "aria-description": 0,
          "aria-details": 0,
          "aria-disabled": 0,
          // state
          "aria-hidden": 0,
          // state
          "aria-invalid": 0,
          // state
          "aria-keyshortcuts": 0,
          "aria-label": 0,
          "aria-roledescription": 0,
          // Widget Attributes
          "aria-autocomplete": 0,
          "aria-checked": 0,
          "aria-expanded": 0,
          "aria-haspopup": 0,
          "aria-level": 0,
          "aria-modal": 0,
          "aria-multiline": 0,
          "aria-multiselectable": 0,
          "aria-orientation": 0,
          "aria-placeholder": 0,
          "aria-pressed": 0,
          "aria-readonly": 0,
          "aria-required": 0,
          "aria-selected": 0,
          "aria-sort": 0,
          "aria-valuemax": 0,
          "aria-valuemin": 0,
          "aria-valuenow": 0,
          "aria-valuetext": 0,
          // Live Region Attributes
          "aria-atomic": 0,
          "aria-busy": 0,
          "aria-live": 0,
          "aria-relevant": 0,
          // Drag-and-Drop Attributes
          "aria-dropeffect": 0,
          "aria-grabbed": 0,
          // Relationship Attributes
          "aria-activedescendant": 0,
          "aria-colcount": 0,
          "aria-colindex": 0,
          "aria-colspan": 0,
          "aria-controls": 0,
          "aria-describedby": 0,
          "aria-errormessage": 0,
          "aria-flowto": 0,
          "aria-labelledby": 0,
          "aria-owns": 0,
          "aria-posinset": 0,
          "aria-rowcount": 0,
          "aria-rowindex": 0,
          "aria-rowspan": 0,
          "aria-setsize": 0
        };
        var warnedProperties$1 = {};
        var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
        var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
        function validateProperty$1(tagName, name) {
          {
            if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
              return true;
            }
            if (rARIACamel$1.test(name)) {
              var ariaName = "aria-" + name.slice(4).toLowerCase();
              var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
              if (correctName == null) {
                error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                warnedProperties$1[name] = true;
                return true;
              }
              if (name !== correctName) {
                error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                warnedProperties$1[name] = true;
                return true;
              }
            }
            if (rARIA$1.test(name)) {
              var lowerCasedName = name.toLowerCase();
              var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
              if (standardName == null) {
                warnedProperties$1[name] = true;
                return false;
              }
              if (name !== standardName) {
                error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties$1[name] = true;
                return true;
              }
            }
          }
          return true;
        }
        function validateProperties$2(type, props) {
          {
            var invalidProps = [];
            for (var key in props) {
              var isValid = validateProperty$1(type, key);
              if (!isValid) {
                invalidProps.push(key);
              }
            }
            var unknownPropString = invalidProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (invalidProps.length === 1) {
              error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
            } else if (invalidProps.length > 1) {
              error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
            }
          }
        }
        var didWarnValueNull = false;
        function validateProperties$1(type, props) {
          {
            if (type !== "input" && type !== "textarea" && type !== "select") {
              return;
            }
            if (props != null && props.value === null && !didWarnValueNull) {
              didWarnValueNull = true;
              if (type === "select" && props.multiple) {
                error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
              } else {
                error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
              }
            }
          }
        }
        function isCustomElement(tagName, props) {
          if (tagName.indexOf("-") === -1) {
            return false;
          }
          switch (tagName) {
            case "annotation-xml":
            case "color-profile":
            case "font-face":
            case "font-face-src":
            case "font-face-uri":
            case "font-face-format":
            case "font-face-name":
            case "missing-glyph":
              return false;
            default:
              return true;
          }
        }
        var possibleStandardNames = {
          // HTML
          accept: "accept",
          acceptcharset: "acceptCharset",
          "accept-charset": "acceptCharset",
          accesskey: "accessKey",
          action: "action",
          allowfullscreen: "allowFullScreen",
          alt: "alt",
          as: "as",
          async: "async",
          autocapitalize: "autoCapitalize",
          autocomplete: "autoComplete",
          autocorrect: "autoCorrect",
          autofocus: "autoFocus",
          autoplay: "autoPlay",
          autosave: "autoSave",
          capture: "capture",
          cellpadding: "cellPadding",
          cellspacing: "cellSpacing",
          challenge: "challenge",
          charset: "charSet",
          checked: "checked",
          children: "children",
          cite: "cite",
          class: "className",
          classid: "classID",
          classname: "className",
          cols: "cols",
          colspan: "colSpan",
          content: "content",
          contenteditable: "contentEditable",
          contextmenu: "contextMenu",
          controls: "controls",
          controlslist: "controlsList",
          coords: "coords",
          crossorigin: "crossOrigin",
          dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
          data: "data",
          datetime: "dateTime",
          default: "default",
          defaultchecked: "defaultChecked",
          defaultvalue: "defaultValue",
          defer: "defer",
          dir: "dir",
          disabled: "disabled",
          disablepictureinpicture: "disablePictureInPicture",
          disableremoteplayback: "disableRemotePlayback",
          download: "download",
          draggable: "draggable",
          enctype: "encType",
          enterkeyhint: "enterKeyHint",
          fetchpriority: "fetchPriority",
          for: "htmlFor",
          form: "form",
          formmethod: "formMethod",
          formaction: "formAction",
          formenctype: "formEncType",
          formnovalidate: "formNoValidate",
          formtarget: "formTarget",
          frameborder: "frameBorder",
          headers: "headers",
          height: "height",
          hidden: "hidden",
          high: "high",
          href: "href",
          hreflang: "hrefLang",
          htmlfor: "htmlFor",
          httpequiv: "httpEquiv",
          "http-equiv": "httpEquiv",
          icon: "icon",
          id: "id",
          imagesizes: "imageSizes",
          imagesrcset: "imageSrcSet",
          innerhtml: "innerHTML",
          inputmode: "inputMode",
          integrity: "integrity",
          is: "is",
          itemid: "itemID",
          itemprop: "itemProp",
          itemref: "itemRef",
          itemscope: "itemScope",
          itemtype: "itemType",
          keyparams: "keyParams",
          keytype: "keyType",
          kind: "kind",
          label: "label",
          lang: "lang",
          list: "list",
          loop: "loop",
          low: "low",
          manifest: "manifest",
          marginwidth: "marginWidth",
          marginheight: "marginHeight",
          max: "max",
          maxlength: "maxLength",
          media: "media",
          mediagroup: "mediaGroup",
          method: "method",
          min: "min",
          minlength: "minLength",
          multiple: "multiple",
          muted: "muted",
          name: "name",
          nomodule: "noModule",
          nonce: "nonce",
          novalidate: "noValidate",
          open: "open",
          optimum: "optimum",
          pattern: "pattern",
          placeholder: "placeholder",
          playsinline: "playsInline",
          poster: "poster",
          preload: "preload",
          profile: "profile",
          radiogroup: "radioGroup",
          readonly: "readOnly",
          referrerpolicy: "referrerPolicy",
          rel: "rel",
          required: "required",
          reversed: "reversed",
          role: "role",
          rows: "rows",
          rowspan: "rowSpan",
          sandbox: "sandbox",
          scope: "scope",
          scoped: "scoped",
          scrolling: "scrolling",
          seamless: "seamless",
          selected: "selected",
          shape: "shape",
          size: "size",
          sizes: "sizes",
          span: "span",
          spellcheck: "spellCheck",
          src: "src",
          srcdoc: "srcDoc",
          srclang: "srcLang",
          srcset: "srcSet",
          start: "start",
          step: "step",
          style: "style",
          summary: "summary",
          tabindex: "tabIndex",
          target: "target",
          title: "title",
          type: "type",
          usemap: "useMap",
          value: "value",
          width: "width",
          wmode: "wmode",
          wrap: "wrap",
          // SVG
          about: "about",
          accentheight: "accentHeight",
          "accent-height": "accentHeight",
          accumulate: "accumulate",
          additive: "additive",
          alignmentbaseline: "alignmentBaseline",
          "alignment-baseline": "alignmentBaseline",
          allowreorder: "allowReorder",
          alphabetic: "alphabetic",
          amplitude: "amplitude",
          arabicform: "arabicForm",
          "arabic-form": "arabicForm",
          ascent: "ascent",
          attributename: "attributeName",
          attributetype: "attributeType",
          autoreverse: "autoReverse",
          azimuth: "azimuth",
          basefrequency: "baseFrequency",
          baselineshift: "baselineShift",
          "baseline-shift": "baselineShift",
          baseprofile: "baseProfile",
          bbox: "bbox",
          begin: "begin",
          bias: "bias",
          by: "by",
          calcmode: "calcMode",
          capheight: "capHeight",
          "cap-height": "capHeight",
          clip: "clip",
          clippath: "clipPath",
          "clip-path": "clipPath",
          clippathunits: "clipPathUnits",
          cliprule: "clipRule",
          "clip-rule": "clipRule",
          color: "color",
          colorinterpolation: "colorInterpolation",
          "color-interpolation": "colorInterpolation",
          colorinterpolationfilters: "colorInterpolationFilters",
          "color-interpolation-filters": "colorInterpolationFilters",
          colorprofile: "colorProfile",
          "color-profile": "colorProfile",
          colorrendering: "colorRendering",
          "color-rendering": "colorRendering",
          contentscripttype: "contentScriptType",
          contentstyletype: "contentStyleType",
          cursor: "cursor",
          cx: "cx",
          cy: "cy",
          d: "d",
          datatype: "datatype",
          decelerate: "decelerate",
          descent: "descent",
          diffuseconstant: "diffuseConstant",
          direction: "direction",
          display: "display",
          divisor: "divisor",
          dominantbaseline: "dominantBaseline",
          "dominant-baseline": "dominantBaseline",
          dur: "dur",
          dx: "dx",
          dy: "dy",
          edgemode: "edgeMode",
          elevation: "elevation",
          enablebackground: "enableBackground",
          "enable-background": "enableBackground",
          end: "end",
          exponent: "exponent",
          externalresourcesrequired: "externalResourcesRequired",
          fill: "fill",
          fillopacity: "fillOpacity",
          "fill-opacity": "fillOpacity",
          fillrule: "fillRule",
          "fill-rule": "fillRule",
          filter: "filter",
          filterres: "filterRes",
          filterunits: "filterUnits",
          floodopacity: "floodOpacity",
          "flood-opacity": "floodOpacity",
          floodcolor: "floodColor",
          "flood-color": "floodColor",
          focusable: "focusable",
          fontfamily: "fontFamily",
          "font-family": "fontFamily",
          fontsize: "fontSize",
          "font-size": "fontSize",
          fontsizeadjust: "fontSizeAdjust",
          "font-size-adjust": "fontSizeAdjust",
          fontstretch: "fontStretch",
          "font-stretch": "fontStretch",
          fontstyle: "fontStyle",
          "font-style": "fontStyle",
          fontvariant: "fontVariant",
          "font-variant": "fontVariant",
          fontweight: "fontWeight",
          "font-weight": "fontWeight",
          format: "format",
          from: "from",
          fx: "fx",
          fy: "fy",
          g1: "g1",
          g2: "g2",
          glyphname: "glyphName",
          "glyph-name": "glyphName",
          glyphorientationhorizontal: "glyphOrientationHorizontal",
          "glyph-orientation-horizontal": "glyphOrientationHorizontal",
          glyphorientationvertical: "glyphOrientationVertical",
          "glyph-orientation-vertical": "glyphOrientationVertical",
          glyphref: "glyphRef",
          gradienttransform: "gradientTransform",
          gradientunits: "gradientUnits",
          hanging: "hanging",
          horizadvx: "horizAdvX",
          "horiz-adv-x": "horizAdvX",
          horizoriginx: "horizOriginX",
          "horiz-origin-x": "horizOriginX",
          ideographic: "ideographic",
          imagerendering: "imageRendering",
          "image-rendering": "imageRendering",
          in2: "in2",
          in: "in",
          inlist: "inlist",
          intercept: "intercept",
          k1: "k1",
          k2: "k2",
          k3: "k3",
          k4: "k4",
          k: "k",
          kernelmatrix: "kernelMatrix",
          kernelunitlength: "kernelUnitLength",
          kerning: "kerning",
          keypoints: "keyPoints",
          keysplines: "keySplines",
          keytimes: "keyTimes",
          lengthadjust: "lengthAdjust",
          letterspacing: "letterSpacing",
          "letter-spacing": "letterSpacing",
          lightingcolor: "lightingColor",
          "lighting-color": "lightingColor",
          limitingconeangle: "limitingConeAngle",
          local: "local",
          markerend: "markerEnd",
          "marker-end": "markerEnd",
          markerheight: "markerHeight",
          markermid: "markerMid",
          "marker-mid": "markerMid",
          markerstart: "markerStart",
          "marker-start": "markerStart",
          markerunits: "markerUnits",
          markerwidth: "markerWidth",
          mask: "mask",
          maskcontentunits: "maskContentUnits",
          maskunits: "maskUnits",
          mathematical: "mathematical",
          mode: "mode",
          numoctaves: "numOctaves",
          offset: "offset",
          opacity: "opacity",
          operator: "operator",
          order: "order",
          orient: "orient",
          orientation: "orientation",
          origin: "origin",
          overflow: "overflow",
          overlineposition: "overlinePosition",
          "overline-position": "overlinePosition",
          overlinethickness: "overlineThickness",
          "overline-thickness": "overlineThickness",
          paintorder: "paintOrder",
          "paint-order": "paintOrder",
          panose1: "panose1",
          "panose-1": "panose1",
          pathlength: "pathLength",
          patterncontentunits: "patternContentUnits",
          patterntransform: "patternTransform",
          patternunits: "patternUnits",
          pointerevents: "pointerEvents",
          "pointer-events": "pointerEvents",
          points: "points",
          pointsatx: "pointsAtX",
          pointsaty: "pointsAtY",
          pointsatz: "pointsAtZ",
          prefix: "prefix",
          preservealpha: "preserveAlpha",
          preserveaspectratio: "preserveAspectRatio",
          primitiveunits: "primitiveUnits",
          property: "property",
          r: "r",
          radius: "radius",
          refx: "refX",
          refy: "refY",
          renderingintent: "renderingIntent",
          "rendering-intent": "renderingIntent",
          repeatcount: "repeatCount",
          repeatdur: "repeatDur",
          requiredextensions: "requiredExtensions",
          requiredfeatures: "requiredFeatures",
          resource: "resource",
          restart: "restart",
          result: "result",
          results: "results",
          rotate: "rotate",
          rx: "rx",
          ry: "ry",
          scale: "scale",
          security: "security",
          seed: "seed",
          shaperendering: "shapeRendering",
          "shape-rendering": "shapeRendering",
          slope: "slope",
          spacing: "spacing",
          specularconstant: "specularConstant",
          specularexponent: "specularExponent",
          speed: "speed",
          spreadmethod: "spreadMethod",
          startoffset: "startOffset",
          stddeviation: "stdDeviation",
          stemh: "stemh",
          stemv: "stemv",
          stitchtiles: "stitchTiles",
          stopcolor: "stopColor",
          "stop-color": "stopColor",
          stopopacity: "stopOpacity",
          "stop-opacity": "stopOpacity",
          strikethroughposition: "strikethroughPosition",
          "strikethrough-position": "strikethroughPosition",
          strikethroughthickness: "strikethroughThickness",
          "strikethrough-thickness": "strikethroughThickness",
          string: "string",
          stroke: "stroke",
          strokedasharray: "strokeDasharray",
          "stroke-dasharray": "strokeDasharray",
          strokedashoffset: "strokeDashoffset",
          "stroke-dashoffset": "strokeDashoffset",
          strokelinecap: "strokeLinecap",
          "stroke-linecap": "strokeLinecap",
          strokelinejoin: "strokeLinejoin",
          "stroke-linejoin": "strokeLinejoin",
          strokemiterlimit: "strokeMiterlimit",
          "stroke-miterlimit": "strokeMiterlimit",
          strokewidth: "strokeWidth",
          "stroke-width": "strokeWidth",
          strokeopacity: "strokeOpacity",
          "stroke-opacity": "strokeOpacity",
          suppresscontenteditablewarning: "suppressContentEditableWarning",
          suppresshydrationwarning: "suppressHydrationWarning",
          surfacescale: "surfaceScale",
          systemlanguage: "systemLanguage",
          tablevalues: "tableValues",
          targetx: "targetX",
          targety: "targetY",
          textanchor: "textAnchor",
          "text-anchor": "textAnchor",
          textdecoration: "textDecoration",
          "text-decoration": "textDecoration",
          textlength: "textLength",
          textrendering: "textRendering",
          "text-rendering": "textRendering",
          to: "to",
          transform: "transform",
          transformorigin: "transformOrigin",
          "transform-origin": "transformOrigin",
          typeof: "typeof",
          u1: "u1",
          u2: "u2",
          underlineposition: "underlinePosition",
          "underline-position": "underlinePosition",
          underlinethickness: "underlineThickness",
          "underline-thickness": "underlineThickness",
          unicode: "unicode",
          unicodebidi: "unicodeBidi",
          "unicode-bidi": "unicodeBidi",
          unicoderange: "unicodeRange",
          "unicode-range": "unicodeRange",
          unitsperem: "unitsPerEm",
          "units-per-em": "unitsPerEm",
          unselectable: "unselectable",
          valphabetic: "vAlphabetic",
          "v-alphabetic": "vAlphabetic",
          values: "values",
          vectoreffect: "vectorEffect",
          "vector-effect": "vectorEffect",
          version: "version",
          vertadvy: "vertAdvY",
          "vert-adv-y": "vertAdvY",
          vertoriginx: "vertOriginX",
          "vert-origin-x": "vertOriginX",
          vertoriginy: "vertOriginY",
          "vert-origin-y": "vertOriginY",
          vhanging: "vHanging",
          "v-hanging": "vHanging",
          videographic: "vIdeographic",
          "v-ideographic": "vIdeographic",
          viewbox: "viewBox",
          viewtarget: "viewTarget",
          visibility: "visibility",
          vmathematical: "vMathematical",
          "v-mathematical": "vMathematical",
          vocab: "vocab",
          widths: "widths",
          wordspacing: "wordSpacing",
          "word-spacing": "wordSpacing",
          writingmode: "writingMode",
          "writing-mode": "writingMode",
          x1: "x1",
          x2: "x2",
          x: "x",
          xchannelselector: "xChannelSelector",
          xheight: "xHeight",
          "x-height": "xHeight",
          xlinkactuate: "xlinkActuate",
          "xlink:actuate": "xlinkActuate",
          xlinkarcrole: "xlinkArcrole",
          "xlink:arcrole": "xlinkArcrole",
          xlinkhref: "xlinkHref",
          "xlink:href": "xlinkHref",
          xlinkrole: "xlinkRole",
          "xlink:role": "xlinkRole",
          xlinkshow: "xlinkShow",
          "xlink:show": "xlinkShow",
          xlinktitle: "xlinkTitle",
          "xlink:title": "xlinkTitle",
          xlinktype: "xlinkType",
          "xlink:type": "xlinkType",
          xmlbase: "xmlBase",
          "xml:base": "xmlBase",
          xmllang: "xmlLang",
          "xml:lang": "xmlLang",
          xmlns: "xmlns",
          "xml:space": "xmlSpace",
          xmlnsxlink: "xmlnsXlink",
          "xmlns:xlink": "xmlnsXlink",
          xmlspace: "xmlSpace",
          y1: "y1",
          y2: "y2",
          y: "y",
          ychannelselector: "yChannelSelector",
          z: "z",
          zoomandpan: "zoomAndPan"
        };
        var warnedProperties = {};
        var EVENT_NAME_REGEX = /^on./;
        var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
        var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
        var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
        function validateProperty(tagName, name, value, eventRegistry) {
          {
            if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {
              return true;
            }
            var lowerCasedName = name.toLowerCase();
            if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
              error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
              warnedProperties[name] = true;
              return true;
            }
            {
              if (typeof value === "function") {
                if (tagName === "form" && name === "action") {
                  return true;
                }
                if (tagName === "input" && name === "formAction") {
                  return true;
                }
                if (tagName === "button" && name === "formAction") {
                  return true;
                }
              }
            }
            if (eventRegistry != null) {
              var registrationNameDependencies = eventRegistry.registrationNameDependencies, possibleRegistrationNames = eventRegistry.possibleRegistrationNames;
              if (registrationNameDependencies.hasOwnProperty(name)) {
                return true;
              }
              var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;
              if (registrationName != null) {
                error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                warnedProperties[name] = true;
                return true;
              }
              if (EVENT_NAME_REGEX.test(name)) {
                error("Unknown event handler property `%s`. It will be ignored.", name);
                warnedProperties[name] = true;
                return true;
              }
            } else if (EVENT_NAME_REGEX.test(name)) {
              if (INVALID_EVENT_NAME_REGEX.test(name)) {
                error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
              }
              warnedProperties[name] = true;
              return true;
            }
            if (rARIA.test(name) || rARIACamel.test(name)) {
              return true;
            }
            if (lowerCasedName === "innerhtml") {
              error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
              warnedProperties[name] = true;
              return true;
            }
            if (lowerCasedName === "aria") {
              error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
              warnedProperties[name] = true;
              return true;
            }
            if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
              error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
              warnedProperties[name] = true;
              return true;
            }
            if (typeof value === "number" && isNaN(value)) {
              error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
              warnedProperties[name] = true;
              return true;
            }
            if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              var standardName = possibleStandardNames[lowerCasedName];
              if (standardName !== name) {
                error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties[name] = true;
                return true;
              }
            } else if (name !== lowerCasedName) {
              error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
              warnedProperties[name] = true;
              return true;
            }
            switch (name) {
              case "dangerouslySetInnerHTML":
              case "children":
              case "style":
              case "suppressContentEditableWarning":
              case "suppressHydrationWarning":
              case "defaultValue":
              case "defaultChecked":
              case "innerHTML":
              case "ref": {
                return true;
              }
            }
            switch (typeof value) {
              case "boolean": {
                switch (name) {
                  case "autoFocus":
                  case "checked":
                  case "multiple":
                  case "muted":
                  case "selected":
                  case "contentEditable":
                  case "spellCheck":
                  case "draggable":
                  case "value":
                  case "autoReverse":
                  case "externalResourcesRequired":
                  case "focusable":
                  case "preserveAlpha":
                  case "allowFullScreen":
                  case "async":
                  case "autoPlay":
                  case "controls":
                  case "default":
                  case "defer":
                  case "disabled":
                  case "disablePictureInPicture":
                  case "disableRemotePlayback":
                  case "formNoValidate":
                  case "hidden":
                  case "loop":
                  case "noModule":
                  case "noValidate":
                  case "open":
                  case "playsInline":
                  case "readOnly":
                  case "required":
                  case "reversed":
                  case "scoped":
                  case "seamless":
                  case "itemScope":
                  case "capture":
                  case "download": {
                    return true;
                  }
                  default: {
                    var prefix2 = name.toLowerCase().slice(0, 5);
                    if (prefix2 === "data-" || prefix2 === "aria-") {
                      return true;
                    }
                    if (value) {
                      error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
                    } else {
                      error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
                    }
                    warnedProperties[name] = true;
                    return true;
                  }
                }
              }
              case "function":
              case "symbol":
                warnedProperties[name] = true;
                return false;
              case "string": {
                if (value === "false" || value === "true") {
                  switch (name) {
                    case "checked":
                    case "selected":
                    case "multiple":
                    case "muted":
                    case "allowFullScreen":
                    case "async":
                    case "autoPlay":
                    case "controls":
                    case "default":
                    case "defer":
                    case "disabled":
                    case "disablePictureInPicture":
                    case "disableRemotePlayback":
                    case "formNoValidate":
                    case "hidden":
                    case "loop":
                    case "noModule":
                    case "noValidate":
                    case "open":
                    case "playsInline":
                    case "readOnly":
                    case "required":
                    case "reversed":
                    case "scoped":
                    case "seamless":
                    case "itemScope": {
                      break;
                    }
                    default: {
                      return true;
                    }
                  }
                  error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
                  warnedProperties[name] = true;
                  return true;
                }
              }
            }
            return true;
          }
        }
        function warnUnknownProperties(type, props, eventRegistry) {
          {
            var unknownProps = [];
            for (var key in props) {
              var isValid = validateProperty(type, key, props[key], eventRegistry);
              if (!isValid) {
                unknownProps.push(key);
              }
            }
            var unknownPropString = unknownProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (unknownProps.length === 1) {
              error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
            } else if (unknownProps.length > 1) {
              error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
            }
          }
        }
        function validateProperties(type, props, eventRegistry) {
          if (isCustomElement(type) || typeof props.is === "string") {
            return;
          }
          warnUnknownProperties(type, props, eventRegistry);
        }
        var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
        var msPattern$1 = /^-ms-/;
        var hyphenPattern = /-(.)/g;
        var badStyleValueWithSemicolonPattern = /;\s*$/;
        var warnedStyleNames = {};
        var warnedStyleValues = {};
        var warnedForNaNValue = false;
        var warnedForInfinityValue = false;
        function camelize(string) {
          return string.replace(hyphenPattern, function(_, character) {
            return character.toUpperCase();
          });
        }
        function warnHyphenatedStyleName(name) {
          {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
              return;
            }
            warnedStyleNames[name] = true;
            error(
              "Unsupported style property %s. Did you mean %s?",
              name,
              // As Andi Smith suggests
              // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
              // is converted to lowercase `ms`.
              camelize(name.replace(msPattern$1, "ms-"))
            );
          }
        }
        function warnBadVendoredStyleName(name) {
          {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
              return;
            }
            warnedStyleNames[name] = true;
            error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
          }
        }
        function warnStyleValueWithSemicolon(name, value) {
          {
            if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
              return;
            }
            warnedStyleValues[value] = true;
            error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
          }
        }
        function warnStyleValueIsNaN(name, value) {
          {
            if (warnedForNaNValue) {
              return;
            }
            warnedForNaNValue = true;
            error("`NaN` is an invalid value for the `%s` css style property.", name);
          }
        }
        function warnStyleValueIsInfinity(name, value) {
          {
            if (warnedForInfinityValue) {
              return;
            }
            warnedForInfinityValue = true;
            error("`Infinity` is an invalid value for the `%s` css style property.", name);
          }
        }
        function warnValidStyle(name, value) {
          {
            if (name.indexOf("-") > -1) {
              warnHyphenatedStyleName(name);
            } else if (badVendoredStyleNamePattern.test(name)) {
              warnBadVendoredStyleName(name);
            } else if (badStyleValueWithSemicolonPattern.test(value)) {
              warnStyleValueWithSemicolon(name, value);
            }
            if (typeof value === "number") {
              if (isNaN(value)) {
                warnStyleValueIsNaN(name);
              } else if (!isFinite(value)) {
                warnStyleValueIsInfinity(name);
              }
            }
          }
        }
        function getCrossOriginString(input) {
          if (typeof input === "string") {
            return input === "use-credentials" ? input : "";
          }
          return void 0;
        }
        var matchHtmlRegExp = /["'&<>]/;
        function escapeHtml(string) {
          {
            checkHtmlStringCoercion(string);
          }
          var str = "" + string;
          var match = matchHtmlRegExp.exec(str);
          if (!match) {
            return str;
          }
          var escape;
          var html = "";
          var index;
          var lastIndex = 0;
          for (index = match.index; index < str.length; index++) {
            switch (str.charCodeAt(index)) {
              case 34:
                escape = "&quot;";
                break;
              case 38:
                escape = "&amp;";
                break;
              case 39:
                escape = "&#x27;";
                break;
              case 60:
                escape = "&lt;";
                break;
              case 62:
                escape = "&gt;";
                break;
              default:
                continue;
            }
            if (lastIndex !== index) {
              html += str.slice(lastIndex, index);
            }
            lastIndex = index + 1;
            html += escape;
          }
          return lastIndex !== index ? html + str.slice(lastIndex, index) : html;
        }
        function escapeTextForBrowser(text) {
          if (typeof text === "boolean" || typeof text === "number" || enableBigIntSupport) {
            return "" + text;
          }
          return escapeHtml(text);
        }
        var uppercasePattern = /([A-Z])/g;
        var msPattern = /^ms-/;
        function hyphenateStyleName(name) {
          return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
        }
        var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
        var didWarn = false;
        function sanitizeURL(url) {
          var stringifiedURL = "" + url;
          {
            if (!didWarn && isJavaScriptProtocol.test(stringifiedURL)) {
              didWarn = true;
              error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(stringifiedURL));
            }
          }
          return url;
        }
        var clientRenderBoundary = '$RX=function(b,c,d,e){var a=document.getElementById(b);a&&(b=a.previousSibling,b.data="$!",a=a.dataset,c&&(a.dgst=c),d&&(a.msg=d),e&&(a.stck=e),b._reactRetry&&b._reactRetry())};';
        var completeBoundary = '$RC=function(b,c,e){c=document.getElementById(c);c.parentNode.removeChild(c);var a=document.getElementById(b);if(a){b=a.previousSibling;if(e)b.data="$!",a.setAttribute("data-dgst",e);else{e=b.parentNode;a=b.nextSibling;var f=0;do{if(a&&8===a.nodeType){var d=a.data;if("/$"===d)if(0===f)break;else f--;else"$"!==d&&"$?"!==d&&"$!"!==d||f++}d=a.nextSibling;e.removeChild(a);a=d}while(a);for(;c.firstChild;)e.insertBefore(c.firstChild,a);b.data="$"}b._reactRetry&&b._reactRetry()}};';
        var completeBoundaryWithStyles = '$RM=new Map;\n$RR=function(r,t,w){for(var u=$RC,n=$RM,p=new Map,q=document,g,b,h=q.querySelectorAll("link[data-precedence],style[data-precedence]"),v=[],k=0;b=h[k++];)"not all"===b.getAttribute("media")?v.push(b):("LINK"===b.tagName&&n.set(b.getAttribute("href"),b),p.set(b.dataset.precedence,g=b));b=0;h=[];var l,a;for(k=!0;;){if(k){var f=w[b++];if(!f){k=!1;b=0;continue}var c=!1,m=0;var d=f[m++];if(a=n.get(d)){var e=a._p;c=!0}else{a=q.createElement("link");a.href=d;a.rel="stylesheet";for(a.dataset.precedence=\nl=f[m++];e=f[m++];)a.setAttribute(e,f[m++]);e=a._p=new Promise(function(x,y){a.onload=x;a.onerror=y});n.set(d,a)}d=a.getAttribute("media");!e||"l"===e.s||d&&!matchMedia(d).matches||h.push(e);if(c)continue}else{a=v[b++];if(!a)break;l=a.getAttribute("data-precedence");a.removeAttribute("media")}c=p.get(l)||g;c===g&&(g=a);p.set(l,a);c?c.parentNode.insertBefore(a,c.nextSibling):(c=q.head,c.insertBefore(a,c.firstChild))}Promise.all(h).then(u.bind(null,r,t,""),u.bind(null,r,t,"Resource failed to load"))};';
        var completeSegment = "$RS=function(a,b){a=document.getElementById(a);b=document.getElementById(b);for(a.parentNode.removeChild(a);a.firstChild;)b.parentNode.insertBefore(a.firstChild,b);b.parentNode.removeChild(b)};";
        var formReplaying = `addEventListener("submit",function(a){if(!a.defaultPrevented){var c=a.target,d=a.submitter,e=c.action,b=d;if(d){var f=d.getAttribute("formAction");null!=f&&(e=f,b=null)}"javascript:throw new Error('React form unexpectedly submitted.')"===e&&(a.preventDefault(),b?(a=document.createElement("input"),a.name=b.name,a.value=b.value,b.parentNode.insertBefore(a,b),b=new FormData(c),a.parentNode.removeChild(a)):b=new FormData(c),a=c.ownerDocument||c,(a.$$reactFormReplay=a.$$reactFormReplay||[]).push(c,d,b))}});`;
        function getValueDescriptorExpectingObjectForWarning(thing) {
          return thing === null ? "`null`" : thing === void 0 ? "`undefined`" : thing === "" ? "an empty string" : 'something with type "' + typeof thing + '"';
        }
        var sharedNotPendingObject = {
          pending: false,
          data: null,
          method: null,
          action: null
        };
        var NotPending = Object.freeze(sharedNotPendingObject);
        var ReactDOMSharedInternals = ReactDOM.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        var ReactDOMCurrentDispatcher = ReactDOMSharedInternals.Dispatcher;
        var ReactDOMServerDispatcher = {
          prefetchDNS,
          preconnect,
          preload,
          preloadModule,
          preinitStyle,
          preinitScript,
          preinitModuleScript
        };
        function prepareHostDispatcher() {
          ReactDOMCurrentDispatcher.current = ReactDOMServerDispatcher;
        }
        var ScriptStreamingFormat = 0;
        var DataStreamingFormat = 1;
        var NothingSent = 0;
        var SentCompleteSegmentFunction = 1;
        var SentCompleteBoundaryFunction = 2;
        var SentClientRenderFunction = 4;
        var SentStyleInsertionFunction = 8;
        var SentFormReplayingRuntime = 16;
        var EXISTS = null;
        var PRELOAD_NO_CREDS = [];
        {
          Object.freeze(PRELOAD_NO_CREDS);
        }
        var dataElementQuotedEnd = stringToPrecomputedChunk('"></template>');
        var startInlineScript = stringToPrecomputedChunk("<script>");
        var endInlineScript = stringToPrecomputedChunk("<\/script>");
        var startScriptSrc = stringToPrecomputedChunk('<script src="');
        var startModuleSrc = stringToPrecomputedChunk('<script type="module" src="');
        var scriptNonce = stringToPrecomputedChunk('" nonce="');
        var scriptIntegirty = stringToPrecomputedChunk('" integrity="');
        var scriptCrossOrigin = stringToPrecomputedChunk('" crossorigin="');
        var endAsyncScript = stringToPrecomputedChunk('" async=""><\/script>');
        function escapeBootstrapAndImportMapScriptContent(scriptText) {
          {
            checkHtmlStringCoercion(scriptText);
          }
          return ("" + scriptText).replace(scriptRegex, scriptReplacer);
        }
        var scriptRegex = /(<\/|<)(s)(cript)/gi;
        var scriptReplacer = function(match, prefix2, s, suffix) {
          return "" + prefix2 + (s === "s" ? "\\u0073" : "\\u0053") + suffix;
        };
        var importMapScriptStart = stringToPrecomputedChunk('<script type="importmap">');
        var importMapScriptEnd = stringToPrecomputedChunk("<\/script>");
        var DEFAULT_HEADERS_CAPACITY_IN_UTF16_CODE_UNITS = 2e3;
        function createRenderState(resumableState, nonce, externalRuntimeConfig, importMap, onHeaders, maxHeadersLength) {
          var inlineScriptWithNonce = nonce === void 0 ? startInlineScript : stringToPrecomputedChunk('<script nonce="' + escapeTextForBrowser(nonce) + '">');
          var idPrefix = resumableState.idPrefix;
          var bootstrapChunks = [];
          var externalRuntimeScript = null;
          var bootstrapScriptContent = resumableState.bootstrapScriptContent, bootstrapScripts = resumableState.bootstrapScripts, bootstrapModules = resumableState.bootstrapModules;
          if (bootstrapScriptContent !== void 0) {
            bootstrapChunks.push(inlineScriptWithNonce, stringToChunk(escapeBootstrapAndImportMapScriptContent(bootstrapScriptContent)), endInlineScript);
          }
          {
            if (externalRuntimeConfig !== void 0) {
              if (typeof externalRuntimeConfig === "string") {
                externalRuntimeScript = {
                  src: externalRuntimeConfig,
                  chunks: []
                };
                pushScriptImpl(externalRuntimeScript.chunks, {
                  src: externalRuntimeConfig,
                  async: true,
                  integrity: void 0,
                  nonce
                });
              } else {
                externalRuntimeScript = {
                  src: externalRuntimeConfig.src,
                  chunks: []
                };
                pushScriptImpl(externalRuntimeScript.chunks, {
                  src: externalRuntimeConfig.src,
                  async: true,
                  integrity: externalRuntimeConfig.integrity,
                  nonce
                });
              }
            }
          }
          var importMapChunks = [];
          if (importMap !== void 0) {
            var map = importMap;
            importMapChunks.push(importMapScriptStart);
            importMapChunks.push(stringToChunk(escapeBootstrapAndImportMapScriptContent(JSON.stringify(map))));
            importMapChunks.push(importMapScriptEnd);
          }
          {
            if (onHeaders && typeof maxHeadersLength === "number") {
              if (maxHeadersLength <= 0) {
                error("React expected a positive non-zero `maxHeadersLength` option but found %s instead. When using the `onHeaders` option you may supply an optional `maxHeadersLength` option as well however, when setting this value to zero or less no headers will be captured.", maxHeadersLength === 0 ? "zero" : maxHeadersLength);
              }
            }
          }
          var headers = onHeaders ? {
            preconnects: "",
            fontPreloads: "",
            highImagePreloads: "",
            remainingCapacity: typeof maxHeadersLength === "number" ? maxHeadersLength : DEFAULT_HEADERS_CAPACITY_IN_UTF16_CODE_UNITS
          } : null;
          var renderState = {
            placeholderPrefix: stringToPrecomputedChunk(idPrefix + "P:"),
            segmentPrefix: stringToPrecomputedChunk(idPrefix + "S:"),
            boundaryPrefix: stringToPrecomputedChunk(idPrefix + "B:"),
            startInlineScript: inlineScriptWithNonce,
            htmlChunks: null,
            headChunks: null,
            externalRuntimeScript,
            bootstrapChunks,
            importMapChunks,
            onHeaders,
            headers,
            resets: {
              font: {},
              dns: {},
              connect: {
                default: {},
                anonymous: {},
                credentials: {}
              },
              image: {},
              style: {}
            },
            charsetChunks: [],
            viewportChunks: [],
            hoistableChunks: [],
            // cleared on flush
            preconnects: /* @__PURE__ */ new Set(),
            fontPreloads: /* @__PURE__ */ new Set(),
            highImagePreloads: /* @__PURE__ */ new Set(),
            // usedImagePreloads: new Set(),
            styles: /* @__PURE__ */ new Map(),
            bootstrapScripts: /* @__PURE__ */ new Set(),
            scripts: /* @__PURE__ */ new Set(),
            bulkPreloads: /* @__PURE__ */ new Set(),
            preloads: {
              images: /* @__PURE__ */ new Map(),
              stylesheets: /* @__PURE__ */ new Map(),
              scripts: /* @__PURE__ */ new Map(),
              moduleScripts: /* @__PURE__ */ new Map()
            },
            nonce,
            // like a module global for currently rendering boundary
            hoistableState: null,
            stylesToHoist: false
          };
          if (bootstrapScripts !== void 0) {
            for (var i = 0; i < bootstrapScripts.length; i++) {
              var scriptConfig = bootstrapScripts[i];
              var src = void 0, crossOrigin = void 0, integrity = void 0;
              var props = {
                rel: "preload",
                as: "script",
                fetchPriority: "low",
                nonce
              };
              if (typeof scriptConfig === "string") {
                props.href = src = scriptConfig;
              } else {
                props.href = src = scriptConfig.src;
                props.integrity = integrity = typeof scriptConfig.integrity === "string" ? scriptConfig.integrity : void 0;
                props.crossOrigin = crossOrigin = typeof scriptConfig === "string" || scriptConfig.crossOrigin == null ? void 0 : scriptConfig.crossOrigin === "use-credentials" ? "use-credentials" : "";
              }
              preloadBootstrapScriptOrModule(resumableState, renderState, src, props);
              bootstrapChunks.push(startScriptSrc, stringToChunk(escapeTextForBrowser(src)));
              if (nonce) {
                bootstrapChunks.push(scriptNonce, stringToChunk(escapeTextForBrowser(nonce)));
              }
              if (typeof integrity === "string") {
                bootstrapChunks.push(scriptIntegirty, stringToChunk(escapeTextForBrowser(integrity)));
              }
              if (typeof crossOrigin === "string") {
                bootstrapChunks.push(scriptCrossOrigin, stringToChunk(escapeTextForBrowser(crossOrigin)));
              }
              bootstrapChunks.push(endAsyncScript);
            }
          }
          if (bootstrapModules !== void 0) {
            for (var _i = 0; _i < bootstrapModules.length; _i++) {
              var _scriptConfig = bootstrapModules[_i];
              var _src = void 0, _crossOrigin = void 0, _integrity = void 0;
              var _props = {
                rel: "modulepreload",
                fetchPriority: "low",
                nonce
              };
              if (typeof _scriptConfig === "string") {
                _props.href = _src = _scriptConfig;
              } else {
                _props.href = _src = _scriptConfig.src;
                _props.integrity = _integrity = typeof _scriptConfig.integrity === "string" ? _scriptConfig.integrity : void 0;
                _props.crossOrigin = _crossOrigin = typeof _scriptConfig === "string" || _scriptConfig.crossOrigin == null ? void 0 : _scriptConfig.crossOrigin === "use-credentials" ? "use-credentials" : "";
              }
              preloadBootstrapScriptOrModule(resumableState, renderState, _src, _props);
              bootstrapChunks.push(startModuleSrc, stringToChunk(escapeTextForBrowser(_src)));
              if (nonce) {
                bootstrapChunks.push(scriptNonce, stringToChunk(escapeTextForBrowser(nonce)));
              }
              if (typeof _integrity === "string") {
                bootstrapChunks.push(scriptIntegirty, stringToChunk(escapeTextForBrowser(_integrity)));
              }
              if (typeof _crossOrigin === "string") {
                bootstrapChunks.push(scriptCrossOrigin, stringToChunk(escapeTextForBrowser(_crossOrigin)));
              }
              bootstrapChunks.push(endAsyncScript);
            }
          }
          return renderState;
        }
        function createResumableState(identifierPrefix, externalRuntimeConfig, bootstrapScriptContent, bootstrapScripts, bootstrapModules) {
          var idPrefix = identifierPrefix === void 0 ? "" : identifierPrefix;
          var streamingFormat = ScriptStreamingFormat;
          {
            if (externalRuntimeConfig !== void 0) {
              streamingFormat = DataStreamingFormat;
            }
          }
          return {
            idPrefix,
            nextFormID: 0,
            streamingFormat,
            bootstrapScriptContent,
            bootstrapScripts,
            bootstrapModules,
            instructions: NothingSent,
            hasBody: false,
            hasHtml: false,
            // @TODO add bootstrap script to implicit preloads
            // persistent
            unknownResources: {},
            dnsResources: {},
            connectResources: {
              default: {},
              anonymous: {},
              credentials: {}
            },
            imageResources: {},
            styleResources: {},
            scriptResources: {},
            moduleUnknownResources: {},
            moduleScriptResources: {}
          };
        }
        var ROOT_HTML_MODE = 0;
        var HTML_HTML_MODE = 1;
        var HTML_MODE = 2;
        var SVG_MODE = 3;
        var MATHML_MODE = 4;
        var HTML_TABLE_MODE = 5;
        var HTML_TABLE_BODY_MODE = 6;
        var HTML_TABLE_ROW_MODE = 7;
        var HTML_COLGROUP_MODE = 8;
        var NO_SCOPE = (
          /*         */
          0
        );
        var NOSCRIPT_SCOPE = (
          /*   */
          1
        );
        var PICTURE_SCOPE = (
          /*    */
          2
        );
        function createFormatContext(insertionMode, selectedValue, tagScope) {
          return {
            insertionMode,
            selectedValue,
            tagScope
          };
        }
        function createRootFormatContext(namespaceURI) {
          var insertionMode = namespaceURI === "http://www.w3.org/2000/svg" ? SVG_MODE : namespaceURI === "http://www.w3.org/1998/Math/MathML" ? MATHML_MODE : ROOT_HTML_MODE;
          return createFormatContext(insertionMode, null, NO_SCOPE);
        }
        function getChildFormatContext(parentContext, type, props) {
          switch (type) {
            case "noscript":
              return createFormatContext(HTML_MODE, null, parentContext.tagScope | NOSCRIPT_SCOPE);
            case "select":
              return createFormatContext(HTML_MODE, props.value != null ? props.value : props.defaultValue, parentContext.tagScope);
            case "svg":
              return createFormatContext(SVG_MODE, null, parentContext.tagScope);
            case "picture":
              return createFormatContext(HTML_MODE, null, parentContext.tagScope | PICTURE_SCOPE);
            case "math":
              return createFormatContext(MATHML_MODE, null, parentContext.tagScope);
            case "foreignObject":
              return createFormatContext(HTML_MODE, null, parentContext.tagScope);
            case "table":
              return createFormatContext(HTML_TABLE_MODE, null, parentContext.tagScope);
            case "thead":
            case "tbody":
            case "tfoot":
              return createFormatContext(HTML_TABLE_BODY_MODE, null, parentContext.tagScope);
            case "colgroup":
              return createFormatContext(HTML_COLGROUP_MODE, null, parentContext.tagScope);
            case "tr":
              return createFormatContext(HTML_TABLE_ROW_MODE, null, parentContext.tagScope);
          }
          if (parentContext.insertionMode >= HTML_TABLE_MODE) {
            return createFormatContext(HTML_MODE, null, parentContext.tagScope);
          }
          if (parentContext.insertionMode === ROOT_HTML_MODE) {
            if (type === "html") {
              return createFormatContext(HTML_HTML_MODE, null, parentContext.tagScope);
            } else {
              return createFormatContext(HTML_MODE, null, parentContext.tagScope);
            }
          } else if (parentContext.insertionMode === HTML_HTML_MODE) {
            return createFormatContext(HTML_MODE, null, parentContext.tagScope);
          }
          return parentContext;
        }
        function makeId(resumableState, treeId, localId) {
          var idPrefix = resumableState.idPrefix;
          var id = ":" + idPrefix + "R" + treeId;
          if (localId > 0) {
            id += "H" + localId.toString(32);
          }
          return id + ":";
        }
        function encodeHTMLTextNode(text) {
          return escapeTextForBrowser(text);
        }
        var textSeparator = stringToPrecomputedChunk("<!-- -->");
        function pushTextInstance(target, text, renderState, textEmbedded) {
          if (text === "") {
            return textEmbedded;
          }
          if (textEmbedded) {
            target.push(textSeparator);
          }
          target.push(stringToChunk(encodeHTMLTextNode(text)));
          return true;
        }
        function pushSegmentFinale(target, renderState, lastPushedText, textEmbedded) {
          if (lastPushedText && textEmbedded) {
            target.push(textSeparator);
          }
        }
        var styleNameCache = /* @__PURE__ */ new Map();
        function processStyleName(styleName) {
          var chunk = styleNameCache.get(styleName);
          if (chunk !== void 0) {
            return chunk;
          }
          var result = stringToPrecomputedChunk(escapeTextForBrowser(hyphenateStyleName(styleName)));
          styleNameCache.set(styleName, result);
          return result;
        }
        var styleAttributeStart = stringToPrecomputedChunk(' style="');
        var styleAssign = stringToPrecomputedChunk(":");
        var styleSeparator = stringToPrecomputedChunk(";");
        function pushStyleAttribute(target, style) {
          if (typeof style !== "object") {
            throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
          }
          var isFirst = true;
          for (var styleName in style) {
            if (!hasOwnProperty.call(style, styleName)) {
              continue;
            }
            var styleValue = style[styleName];
            if (styleValue == null || typeof styleValue === "boolean" || styleValue === "") {
              continue;
            }
            var nameChunk = void 0;
            var valueChunk = void 0;
            var isCustomProperty = styleName.indexOf("--") === 0;
            if (isCustomProperty) {
              nameChunk = stringToChunk(escapeTextForBrowser(styleName));
              {
                checkCSSPropertyStringCoercion(styleValue, styleName);
              }
              valueChunk = stringToChunk(escapeTextForBrowser(("" + styleValue).trim()));
            } else {
              {
                warnValidStyle(styleName, styleValue);
              }
              nameChunk = processStyleName(styleName);
              if (typeof styleValue === "number") {
                if (styleValue !== 0 && !isUnitlessNumber(styleName)) {
                  valueChunk = stringToChunk(styleValue + "px");
                } else {
                  valueChunk = stringToChunk("" + styleValue);
                }
              } else {
                {
                  checkCSSPropertyStringCoercion(styleValue, styleName);
                }
                valueChunk = stringToChunk(escapeTextForBrowser(("" + styleValue).trim()));
              }
            }
            if (isFirst) {
              isFirst = false;
              target.push(styleAttributeStart, nameChunk, styleAssign, valueChunk);
            } else {
              target.push(styleSeparator, nameChunk, styleAssign, valueChunk);
            }
          }
          if (!isFirst) {
            target.push(attributeEnd);
          }
        }
        var attributeSeparator = stringToPrecomputedChunk(" ");
        var attributeAssign = stringToPrecomputedChunk('="');
        var attributeEnd = stringToPrecomputedChunk('"');
        var attributeEmptyString = stringToPrecomputedChunk('=""');
        function pushBooleanAttribute(target, name, value) {
          if (value && typeof value !== "function" && typeof value !== "symbol") {
            target.push(attributeSeparator, stringToChunk(name), attributeEmptyString);
          }
        }
        function pushStringAttribute(target, name, value) {
          if (typeof value !== "function" && typeof value !== "symbol" && typeof value !== "boolean") {
            target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
          }
        }
        function makeFormFieldPrefix(resumableState) {
          var id = resumableState.nextFormID++;
          return resumableState.idPrefix + id;
        }
        var actionJavaScriptURL = stringToPrecomputedChunk(escapeTextForBrowser(
          // eslint-disable-next-line no-script-url
          "javascript:throw new Error('React form unexpectedly submitted.')"
        ));
        var startHiddenInputChunk = stringToPrecomputedChunk('<input type="hidden"');
        function pushAdditionalFormField(value, key) {
          var target = this;
          target.push(startHiddenInputChunk);
          if (typeof value !== "string") {
            throw new Error("File/Blob fields are not yet supported in progressive forms. It probably means you are closing over binary data or FormData in a Server Action.");
          }
          pushStringAttribute(target, "name", key);
          pushStringAttribute(target, "value", value);
          target.push(endOfStartTagSelfClosing);
        }
        function pushAdditionalFormFields(target, formData) {
          if (formData !== null) {
            formData.forEach(pushAdditionalFormField, target);
          }
        }
        function pushFormActionAttribute(target, resumableState, renderState, formAction, formEncType, formMethod, formTarget, name) {
          var formData = null;
          if (typeof formAction === "function") {
            {
              if (name !== null && !didWarnFormActionName) {
                didWarnFormActionName = true;
                error('Cannot specify a "name" prop for a button that specifies a function as a formAction. React needs it to encode which action should be invoked. It will get overridden.');
              }
              if ((formEncType !== null || formMethod !== null) && !didWarnFormActionMethod) {
                didWarnFormActionMethod = true;
                error("Cannot specify a formEncType or formMethod for a button that specifies a function as a formAction. React provides those automatically. They will get overridden.");
              }
              if (formTarget !== null && !didWarnFormActionTarget) {
                didWarnFormActionTarget = true;
                error("Cannot specify a formTarget for a button that specifies a function as a formAction. The function will always be executed in the same window.");
              }
            }
            var customAction = formAction.$$FORM_ACTION;
            if (typeof customAction === "function") {
              var prefix2 = makeFormFieldPrefix(resumableState);
              var customFields = formAction.$$FORM_ACTION(prefix2);
              name = customFields.name;
              formAction = customFields.action || "";
              formEncType = customFields.encType;
              formMethod = customFields.method;
              formTarget = customFields.target;
              formData = customFields.data;
            } else {
              target.push(attributeSeparator, stringToChunk("formAction"), attributeAssign, actionJavaScriptURL, attributeEnd);
              name = null;
              formAction = null;
              formEncType = null;
              formMethod = null;
              formTarget = null;
              injectFormReplayingRuntime(resumableState, renderState);
            }
          }
          if (name != null) {
            pushAttribute(target, "name", name);
          }
          if (formAction != null) {
            pushAttribute(target, "formAction", formAction);
          }
          if (formEncType != null) {
            pushAttribute(target, "formEncType", formEncType);
          }
          if (formMethod != null) {
            pushAttribute(target, "formMethod", formMethod);
          }
          if (formTarget != null) {
            pushAttribute(target, "formTarget", formTarget);
          }
          return formData;
        }
        function pushAttribute(target, name, value) {
          switch (name) {
            case "className": {
              pushStringAttribute(target, "class", value);
              break;
            }
            case "tabIndex": {
              pushStringAttribute(target, "tabindex", value);
              break;
            }
            case "dir":
            case "role":
            case "viewBox":
            case "width":
            case "height": {
              pushStringAttribute(target, name, value);
              break;
            }
            case "style": {
              pushStyleAttribute(target, value);
              return;
            }
            case "src":
            case "href":
            case "action":
            case "formAction": {
              if (value == null || typeof value === "function" || typeof value === "symbol" || typeof value === "boolean") {
                return;
              }
              {
                checkAttributeStringCoercion(value, name);
              }
              var sanitizedValue = sanitizeURL("" + value);
              target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(sanitizedValue)), attributeEnd);
              return;
            }
            case "defaultValue":
            case "defaultChecked":
            case "innerHTML":
            case "suppressContentEditableWarning":
            case "suppressHydrationWarning":
            case "ref":
              return;
            case "autoFocus":
            case "multiple":
            case "muted": {
              pushBooleanAttribute(target, name.toLowerCase(), value);
              return;
            }
            case "xlinkHref": {
              if (typeof value === "function" || typeof value === "symbol" || typeof value === "boolean") {
                return;
              }
              {
                checkAttributeStringCoercion(value, name);
              }
              var _sanitizedValue = sanitizeURL("" + value);
              target.push(attributeSeparator, stringToChunk("xlink:href"), attributeAssign, stringToChunk(escapeTextForBrowser(_sanitizedValue)), attributeEnd);
              return;
            }
            case "contentEditable":
            case "spellCheck":
            case "draggable":
            case "value":
            case "autoReverse":
            case "externalResourcesRequired":
            case "focusable":
            case "preserveAlpha": {
              if (typeof value !== "function" && typeof value !== "symbol") {
                target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
              }
              return;
            }
            case "allowFullScreen":
            case "async":
            case "autoPlay":
            case "controls":
            case "default":
            case "defer":
            case "disabled":
            case "disablePictureInPicture":
            case "disableRemotePlayback":
            case "formNoValidate":
            case "hidden":
            case "loop":
            case "noModule":
            case "noValidate":
            case "open":
            case "playsInline":
            case "readOnly":
            case "required":
            case "reversed":
            case "scoped":
            case "seamless":
            case "itemScope": {
              if (value && typeof value !== "function" && typeof value !== "symbol") {
                target.push(attributeSeparator, stringToChunk(name), attributeEmptyString);
              }
              return;
            }
            case "capture":
            case "download": {
              if (value === true) {
                target.push(attributeSeparator, stringToChunk(name), attributeEmptyString);
              } else if (value === false) ;
              else if (typeof value !== "function" && typeof value !== "symbol") {
                target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
              }
              return;
            }
            case "cols":
            case "rows":
            case "size":
            case "span": {
              if (typeof value !== "function" && typeof value !== "symbol" && !isNaN(value) && value >= 1) {
                target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
              }
              return;
            }
            case "rowSpan":
            case "start": {
              if (typeof value !== "function" && typeof value !== "symbol" && !isNaN(value)) {
                target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
              }
              return;
            }
            case "xlinkActuate":
              pushStringAttribute(target, "xlink:actuate", value);
              return;
            case "xlinkArcrole":
              pushStringAttribute(target, "xlink:arcrole", value);
              return;
            case "xlinkRole":
              pushStringAttribute(target, "xlink:role", value);
              return;
            case "xlinkShow":
              pushStringAttribute(target, "xlink:show", value);
              return;
            case "xlinkTitle":
              pushStringAttribute(target, "xlink:title", value);
              return;
            case "xlinkType":
              pushStringAttribute(target, "xlink:type", value);
              return;
            case "xmlBase":
              pushStringAttribute(target, "xml:base", value);
              return;
            case "xmlLang":
              pushStringAttribute(target, "xml:lang", value);
              return;
            case "xmlSpace":
              pushStringAttribute(target, "xml:space", value);
              return;
            default:
              if (
                // shouldIgnoreAttribute
                // We have already filtered out null/undefined and reserved words.
                name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")
              ) {
                return;
              }
              var attributeName = getAttributeAlias(name);
              if (isAttributeNameSafe(attributeName)) {
                switch (typeof value) {
                  case "function":
                  case "symbol":
                    return;
                  case "boolean": {
                    var prefix2 = attributeName.toLowerCase().slice(0, 5);
                    if (prefix2 !== "data-" && prefix2 !== "aria-") {
                      return;
                    }
                  }
                }
                target.push(attributeSeparator, stringToChunk(attributeName), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
              }
          }
        }
        var endOfStartTag = stringToPrecomputedChunk(">");
        var endOfStartTagSelfClosing = stringToPrecomputedChunk("/>");
        function pushInnerHTML(target, innerHTML, children) {
          if (innerHTML != null) {
            if (children != null) {
              throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
            }
            if (typeof innerHTML !== "object" || !("__html" in innerHTML)) {
              throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
            }
            var html = innerHTML.__html;
            if (html !== null && html !== void 0) {
              {
                checkHtmlStringCoercion(html);
              }
              target.push(stringToChunk("" + html));
            }
          }
        }
        var didWarnDefaultInputValue = false;
        var didWarnDefaultChecked = false;
        var didWarnDefaultSelectValue = false;
        var didWarnDefaultTextareaValue = false;
        var didWarnInvalidOptionChildren = false;
        var didWarnInvalidOptionInnerHTML = false;
        var didWarnSelectedSetOnOption = false;
        var didWarnFormActionType = false;
        var didWarnFormActionName = false;
        var didWarnFormActionTarget = false;
        var didWarnFormActionMethod = false;
        function checkSelectProp(props, propName) {
          {
            var value = props[propName];
            if (value != null) {
              var array = isArray(value);
              if (props.multiple && !array) {
                error("The `%s` prop supplied to <select> must be an array if `multiple` is true.", propName);
              } else if (!props.multiple && array) {
                error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.", propName);
              }
            }
          }
        }
        function pushStartSelect(target, props) {
          {
            checkControlledValueProps("select", props);
            checkSelectProp(props, "value");
            checkSelectProp(props, "defaultValue");
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultSelectValue) {
              error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
              didWarnDefaultSelectValue = true;
            }
          }
          target.push(startChunkForTag("select"));
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                case "defaultValue":
                case "value":
                  break;
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          pushInnerHTML(target, innerHTML, children);
          return children;
        }
        function flattenOptionChildren(children) {
          var content = "";
          React.Children.forEach(children, function(child) {
            if (child == null) {
              return;
            }
            content += child;
            {
              if (!didWarnInvalidOptionChildren && typeof child !== "string" && typeof child !== "number" && !enableBigIntSupport) {
                didWarnInvalidOptionChildren = true;
                error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
              }
            }
          });
          return content;
        }
        var selectedMarkerAttribute = stringToPrecomputedChunk(' selected=""');
        function pushStartOption(target, props, formatContext) {
          var selectedValue = formatContext.selectedValue;
          target.push(startChunkForTag("option"));
          var children = null;
          var value = null;
          var selected = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "selected":
                  selected = propValue;
                  {
                    if (!didWarnSelectedSetOnOption) {
                      error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                      didWarnSelectedSetOnOption = true;
                    }
                  }
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                case "value":
                  value = propValue;
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          if (selectedValue != null) {
            var stringValue;
            if (value !== null) {
              {
                checkAttributeStringCoercion(value, "value");
              }
              stringValue = "" + value;
            } else {
              {
                if (innerHTML !== null) {
                  if (!didWarnInvalidOptionInnerHTML) {
                    didWarnInvalidOptionInnerHTML = true;
                    error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                  }
                }
              }
              stringValue = flattenOptionChildren(children);
            }
            if (isArray(selectedValue)) {
              for (var i = 0; i < selectedValue.length; i++) {
                {
                  checkAttributeStringCoercion(selectedValue[i], "value");
                }
                var v = "" + selectedValue[i];
                if (v === stringValue) {
                  target.push(selectedMarkerAttribute);
                  break;
                }
              }
            } else {
              {
                checkAttributeStringCoercion(selectedValue, "select.value");
              }
              if ("" + selectedValue === stringValue) {
                target.push(selectedMarkerAttribute);
              }
            }
          } else if (selected) {
            target.push(selectedMarkerAttribute);
          }
          target.push(endOfStartTag);
          pushInnerHTML(target, innerHTML, children);
          return children;
        }
        var formReplayingRuntimeScript = stringToPrecomputedChunk(formReplaying);
        function injectFormReplayingRuntime(resumableState, renderState) {
          if ((resumableState.instructions & SentFormReplayingRuntime) === NothingSent && !renderState.externalRuntimeScript) {
            resumableState.instructions |= SentFormReplayingRuntime;
            renderState.bootstrapChunks.unshift(renderState.startInlineScript, formReplayingRuntimeScript, endInlineScript);
          }
        }
        var formStateMarkerIsMatching = stringToPrecomputedChunk("<!--F!-->");
        var formStateMarkerIsNotMatching = stringToPrecomputedChunk("<!--F-->");
        function pushFormStateMarkerIsMatching(target) {
          target.push(formStateMarkerIsMatching);
        }
        function pushFormStateMarkerIsNotMatching(target) {
          target.push(formStateMarkerIsNotMatching);
        }
        function pushStartForm(target, props, resumableState, renderState) {
          target.push(startChunkForTag("form"));
          var children = null;
          var innerHTML = null;
          var formAction = null;
          var formEncType = null;
          var formMethod = null;
          var formTarget = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                case "action":
                  formAction = propValue;
                  break;
                case "encType":
                  formEncType = propValue;
                  break;
                case "method":
                  formMethod = propValue;
                  break;
                case "target":
                  formTarget = propValue;
                  break;
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          var formData = null;
          var formActionName = null;
          if (typeof formAction === "function") {
            {
              if ((formEncType !== null || formMethod !== null) && !didWarnFormActionMethod) {
                didWarnFormActionMethod = true;
                error("Cannot specify a encType or method for a form that specifies a function as the action. React provides those automatically. They will get overridden.");
              }
              if (formTarget !== null && !didWarnFormActionTarget) {
                didWarnFormActionTarget = true;
                error("Cannot specify a target for a form that specifies a function as the action. The function will always be executed in the same window.");
              }
            }
            var customAction = formAction.$$FORM_ACTION;
            if (typeof customAction === "function") {
              var prefix2 = makeFormFieldPrefix(resumableState);
              var customFields = formAction.$$FORM_ACTION(prefix2);
              formAction = customFields.action || "";
              formEncType = customFields.encType;
              formMethod = customFields.method;
              formTarget = customFields.target;
              formData = customFields.data;
              formActionName = customFields.name;
            } else {
              target.push(attributeSeparator, stringToChunk("action"), attributeAssign, actionJavaScriptURL, attributeEnd);
              formAction = null;
              formEncType = null;
              formMethod = null;
              formTarget = null;
              injectFormReplayingRuntime(resumableState, renderState);
            }
          }
          if (formAction != null) {
            pushAttribute(target, "action", formAction);
          }
          if (formEncType != null) {
            pushAttribute(target, "encType", formEncType);
          }
          if (formMethod != null) {
            pushAttribute(target, "method", formMethod);
          }
          if (formTarget != null) {
            pushAttribute(target, "target", formTarget);
          }
          target.push(endOfStartTag);
          if (formActionName !== null) {
            target.push(startHiddenInputChunk);
            pushStringAttribute(target, "name", formActionName);
            target.push(endOfStartTagSelfClosing);
            pushAdditionalFormFields(target, formData);
          }
          pushInnerHTML(target, innerHTML, children);
          if (typeof children === "string") {
            target.push(stringToChunk(encodeHTMLTextNode(children)));
            return null;
          }
          return children;
        }
        function pushInput(target, props, resumableState, renderState) {
          {
            checkControlledValueProps("input", props);
          }
          target.push(startChunkForTag("input"));
          var name = null;
          var formAction = null;
          var formEncType = null;
          var formMethod = null;
          var formTarget = null;
          var value = null;
          var defaultValue = null;
          var checked = null;
          var defaultChecked = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                case "dangerouslySetInnerHTML":
                  throw new Error("input is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                case "name":
                  name = propValue;
                  break;
                case "formAction":
                  formAction = propValue;
                  break;
                case "formEncType":
                  formEncType = propValue;
                  break;
                case "formMethod":
                  formMethod = propValue;
                  break;
                case "formTarget":
                  formTarget = propValue;
                  break;
                case "defaultChecked":
                  defaultChecked = propValue;
                  break;
                case "defaultValue":
                  defaultValue = propValue;
                  break;
                case "checked":
                  checked = propValue;
                  break;
                case "value":
                  value = propValue;
                  break;
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          {
            if (formAction !== null && props.type !== "image" && props.type !== "submit" && !didWarnFormActionType) {
              didWarnFormActionType = true;
              error('An input can only specify a formAction along with type="submit" or type="image".');
            }
          }
          var formData = pushFormActionAttribute(target, resumableState, renderState, formAction, formEncType, formMethod, formTarget, name);
          {
            if (checked !== null && defaultChecked !== null && !didWarnDefaultChecked) {
              error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", "A component", props.type);
              didWarnDefaultChecked = true;
            }
            if (value !== null && defaultValue !== null && !didWarnDefaultInputValue) {
              error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", "A component", props.type);
              didWarnDefaultInputValue = true;
            }
          }
          if (checked !== null) {
            pushBooleanAttribute(target, "checked", checked);
          } else if (defaultChecked !== null) {
            pushBooleanAttribute(target, "checked", defaultChecked);
          }
          if (value !== null) {
            pushAttribute(target, "value", value);
          } else if (defaultValue !== null) {
            pushAttribute(target, "value", defaultValue);
          }
          target.push(endOfStartTagSelfClosing);
          pushAdditionalFormFields(target, formData);
          return null;
        }
        function pushStartButton(target, props, resumableState, renderState) {
          target.push(startChunkForTag("button"));
          var children = null;
          var innerHTML = null;
          var name = null;
          var formAction = null;
          var formEncType = null;
          var formMethod = null;
          var formTarget = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                case "name":
                  name = propValue;
                  break;
                case "formAction":
                  formAction = propValue;
                  break;
                case "formEncType":
                  formEncType = propValue;
                  break;
                case "formMethod":
                  formMethod = propValue;
                  break;
                case "formTarget":
                  formTarget = propValue;
                  break;
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          {
            if (formAction !== null && props.type != null && props.type !== "submit" && !didWarnFormActionType) {
              didWarnFormActionType = true;
              error('A button can only specify a formAction along with type="submit" or no type.');
            }
          }
          var formData = pushFormActionAttribute(target, resumableState, renderState, formAction, formEncType, formMethod, formTarget, name);
          target.push(endOfStartTag);
          pushAdditionalFormFields(target, formData);
          pushInnerHTML(target, innerHTML, children);
          if (typeof children === "string") {
            target.push(stringToChunk(encodeHTMLTextNode(children)));
            return null;
          }
          return children;
        }
        function pushStartTextArea(target, props) {
          {
            checkControlledValueProps("textarea", props);
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultTextareaValue) {
              error("Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components");
              didWarnDefaultTextareaValue = true;
            }
          }
          target.push(startChunkForTag("textarea"));
          var value = null;
          var defaultValue = null;
          var children = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "value":
                  value = propValue;
                  break;
                case "defaultValue":
                  defaultValue = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          if (value === null && defaultValue !== null) {
            value = defaultValue;
          }
          target.push(endOfStartTag);
          if (children != null) {
            {
              error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
            }
            if (value != null) {
              throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
            }
            if (isArray(children)) {
              if (children.length > 1) {
                throw new Error("<textarea> can only have at most one child.");
              }
              {
                checkHtmlStringCoercion(children[0]);
              }
              value = "" + children[0];
            }
            {
              checkHtmlStringCoercion(children);
            }
            value = "" + children;
          }
          if (typeof value === "string" && value[0] === "\n") {
            target.push(leadingNewline);
          }
          if (value !== null) {
            {
              checkAttributeStringCoercion(value, "value");
            }
            target.push(stringToChunk(encodeHTMLTextNode("" + value)));
          }
          return null;
        }
        function pushMeta(target, props, renderState, textEmbedded, insertionMode, noscriptTagInScope, isFallback) {
          {
            if (insertionMode === SVG_MODE || noscriptTagInScope || props.itemProp != null) {
              return pushSelfClosing(target, props, "meta");
            } else {
              if (textEmbedded) {
                target.push(textSeparator);
              }
              if (isFallback) {
                return null;
              } else if (typeof props.charSet === "string") {
                return pushSelfClosing(renderState.charsetChunks, props, "meta");
              } else if (props.name === "viewport") {
                return pushSelfClosing(renderState.viewportChunks, props, "meta");
              } else {
                return pushSelfClosing(renderState.hoistableChunks, props, "meta");
              }
            }
          }
        }
        function pushLink(target, props, resumableState, renderState, hoistableState, textEmbedded, insertionMode, noscriptTagInScope, isFallback) {
          {
            var rel = props.rel;
            var href = props.href;
            var precedence = props.precedence;
            if (insertionMode === SVG_MODE || noscriptTagInScope || props.itemProp != null || typeof rel !== "string" || typeof href !== "string" || href === "") {
              {
                if (rel === "stylesheet" && typeof props.precedence === "string") {
                  if (typeof href !== "string" || !href) {
                    error('React encountered a `<link rel="stylesheet" .../>` with a `precedence` prop and expected the `href` prop to be a non-empty string but ecountered %s instead. If your intent was to have React hoist and deduplciate this stylesheet using the `precedence` prop ensure there is a non-empty string `href` prop as well, otherwise remove the `precedence` prop.', getValueDescriptorExpectingObjectForWarning(href));
                  }
                }
              }
              pushLinkImpl(target, props);
              return null;
            }
            if (props.rel === "stylesheet") {
              var key = getResourceKey(href);
              if (typeof precedence !== "string" || props.disabled != null || props.onLoad || props.onError) {
                {
                  if (typeof precedence === "string") {
                    if (props.disabled != null) {
                      error('React encountered a `<link rel="stylesheet" .../>` with a `precedence` prop and a `disabled` prop. The presence of the `disabled` prop indicates an intent to manage the stylesheet active state from your from your Component code and React will not hoist or deduplicate this stylesheet. If your intent was to have React hoist and deduplciate this stylesheet using the `precedence` prop remove the `disabled` prop, otherwise remove the `precedence` prop.');
                    } else if (props.onLoad || props.onError) {
                      var propDescription = props.onLoad && props.onError ? "`onLoad` and `onError` props" : props.onLoad ? "`onLoad` prop" : "`onError` prop";
                      error('React encountered a `<link rel="stylesheet" .../>` with a `precedence` prop and %s. The presence of loading and error handlers indicates an intent to manage the stylesheet loading state from your from your Component code and React will not hoist or deduplicate this stylesheet. If your intent was to have React hoist and deduplciate this stylesheet using the `precedence` prop remove the %s, otherwise remove the `precedence` prop.', propDescription, propDescription);
                    }
                  }
                }
                return pushLinkImpl(target, props);
              } else {
                var styleQueue = renderState.styles.get(precedence);
                var hasKey = resumableState.styleResources.hasOwnProperty(key);
                var resourceState = hasKey ? resumableState.styleResources[key] : void 0;
                if (resourceState !== EXISTS) {
                  resumableState.styleResources[key] = EXISTS;
                  if (!styleQueue) {
                    styleQueue = {
                      precedence: stringToChunk(escapeTextForBrowser(precedence)),
                      rules: [],
                      hrefs: [],
                      sheets: /* @__PURE__ */ new Map()
                    };
                    renderState.styles.set(precedence, styleQueue);
                  }
                  var resource = {
                    state: PENDING$1,
                    props: stylesheetPropsFromRawProps(props)
                  };
                  if (resourceState) {
                    var preloadState = resourceState;
                    if (preloadState.length === 2) {
                      adoptPreloadCredentials(resource.props, preloadState);
                    }
                    var preloadResource = renderState.preloads.stylesheets.get(key);
                    if (preloadResource && preloadResource.length > 0) {
                      preloadResource.length = 0;
                    } else {
                      resource.state = PRELOADED;
                    }
                  }
                  styleQueue.sheets.set(key, resource);
                  if (hoistableState) {
                    hoistableState.stylesheets.add(resource);
                  }
                } else {
                  if (styleQueue) {
                    var _resource = styleQueue.sheets.get(key);
                    if (_resource) {
                      if (hoistableState) {
                        hoistableState.stylesheets.add(_resource);
                      }
                    }
                  }
                }
                if (textEmbedded) {
                  target.push(textSeparator);
                }
                return null;
              }
            } else if (props.onLoad || props.onError) {
              return pushLinkImpl(target, props);
            } else {
              if (textEmbedded) {
                target.push(textSeparator);
              }
              if (isFallback) {
                return null;
              } else {
                return pushLinkImpl(renderState.hoistableChunks, props);
              }
            }
          }
        }
        function pushLinkImpl(target, props) {
          target.push(startChunkForTag("link"));
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                case "dangerouslySetInnerHTML":
                  throw new Error("link is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTagSelfClosing);
          return null;
        }
        function pushStyle(target, props, resumableState, renderState, hoistableState, textEmbedded, insertionMode, noscriptTagInScope) {
          {
            if (hasOwnProperty.call(props, "children")) {
              var children = props.children;
              var child = Array.isArray(children) ? children.length < 2 ? children[0] : null : children;
              if (typeof child === "function" || typeof child === "symbol" || Array.isArray(child)) {
                var childType = typeof child === "function" ? "a Function" : typeof child === "symbol" ? "a Sybmol" : "an Array";
                error("React expect children of <style> tags to be a string, number, or object with a `toString` method but found %s instead. In browsers style Elements can only have `Text` Nodes as children.", childType);
              }
            }
          }
          {
            var precedence = props.precedence;
            var href = props.href;
            if (insertionMode === SVG_MODE || noscriptTagInScope || props.itemProp != null || typeof precedence !== "string" || typeof href !== "string" || href === "") {
              return pushStyleImpl(target, props);
            }
            {
              if (href.includes(" ")) {
                error('React expected the `href` prop for a <style> tag opting into hoisting semantics using the `precedence` prop to not have any spaces but ecountered spaces instead. using spaces in this prop will cause hydration of this style to fail on the client. The href for the <style> where this ocurred is "%s".', href);
              }
            }
            var key = getResourceKey(href);
            var styleQueue = renderState.styles.get(precedence);
            var hasKey = resumableState.styleResources.hasOwnProperty(key);
            var resourceState = hasKey ? resumableState.styleResources[key] : void 0;
            if (resourceState !== EXISTS) {
              resumableState.styleResources[key] = EXISTS;
              {
                if (resourceState) {
                  error('React encountered a hoistable style tag for the same href as a preload: "%s". When using a style tag to inline styles you should not also preload it as a stylsheet.', href);
                }
              }
              if (!styleQueue) {
                styleQueue = {
                  precedence: stringToChunk(escapeTextForBrowser(precedence)),
                  rules: [],
                  hrefs: [stringToChunk(escapeTextForBrowser(href))],
                  sheets: /* @__PURE__ */ new Map()
                };
                renderState.styles.set(precedence, styleQueue);
              } else {
                styleQueue.hrefs.push(stringToChunk(escapeTextForBrowser(href)));
              }
              pushStyleContents(styleQueue.rules, props);
            }
            if (styleQueue) {
              if (hoistableState) {
                hoistableState.styles.add(styleQueue);
              }
            }
            if (textEmbedded) {
              target.push(textSeparator);
            }
          }
        }
        function pushStyleImpl(target, props) {
          target.push(startChunkForTag("style"));
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          var child = Array.isArray(children) ? children.length < 2 ? children[0] : null : children;
          if (typeof child !== "function" && typeof child !== "symbol" && child !== null && child !== void 0) {
            target.push(stringToChunk(escapeTextForBrowser("" + child)));
          }
          pushInnerHTML(target, innerHTML, children);
          target.push(endChunkForTag("style"));
          return null;
        }
        function pushStyleContents(target, props) {
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
              }
            }
          }
          var child = Array.isArray(children) ? children.length < 2 ? children[0] : null : children;
          if (typeof child !== "function" && typeof child !== "symbol" && child !== null && child !== void 0) {
            target.push(stringToChunk(escapeTextForBrowser("" + child)));
          }
          pushInnerHTML(target, innerHTML, children);
          return;
        }
        function pushImg(target, props, resumableState, renderState, pictureTagInScope) {
          var src = props.src, srcSet = props.srcSet;
          if (props.loading !== "lazy" && (src || srcSet) && (typeof src === "string" || src == null) && (typeof srcSet === "string" || srcSet == null) && props.fetchPriority !== "low" && pictureTagInScope === false && // We exclude data URIs in src and srcSet since these should not be preloaded
          !(typeof src === "string" && src[4] === ":" && (src[0] === "d" || src[0] === "D") && (src[1] === "a" || src[1] === "A") && (src[2] === "t" || src[2] === "T") && (src[3] === "a" || src[3] === "A")) && !(typeof srcSet === "string" && srcSet[4] === ":" && (srcSet[0] === "d" || srcSet[0] === "D") && (srcSet[1] === "a" || srcSet[1] === "A") && (srcSet[2] === "t" || srcSet[2] === "T") && (srcSet[3] === "a" || srcSet[3] === "A"))) {
            var sizes = typeof props.sizes === "string" ? props.sizes : void 0;
            var key = getImageResourceKey(src, srcSet, sizes);
            var promotablePreloads = renderState.preloads.images;
            var resource = promotablePreloads.get(key);
            if (resource) {
              if (props.fetchPriority === "high" || renderState.highImagePreloads.size < 10) {
                promotablePreloads.delete(key);
                renderState.highImagePreloads.add(resource);
              }
            } else if (!resumableState.imageResources.hasOwnProperty(key)) {
              resumableState.imageResources[key] = PRELOAD_NO_CREDS;
              var crossOrigin = getCrossOriginString(props.crossOrigin);
              var headers = renderState.headers;
              var header;
              if (headers && headers.remainingCapacity > 0 && // this is a hueristic similar to capping element preloads to 10 unless explicitly
              // fetchPriority="high". We use length here which means it will fit fewer images when
              // the urls are long and more when short. arguably byte size is a better hueristic because
              // it directly translates to how much we send down before content is actually seen.
              // We could unify the counts and also make it so the total is tracked regardless of
              // flushing output but since the headers are likely to be go earlier than content
              // they don't really conflict so for now I've kept them separate
              (props.fetchPriority === "high" || headers.highImagePreloads.length < 500) && // We manually construct the options for the preload only from strings. We don't want to pollute
              // the params list with arbitrary props and if we copied everything over as it we might get
              // coercion errors. We have checks for this in Dev but it seems safer to just only accept values
              // that are strings
              (header = getPreloadAsHeader(src, "image", {
                imageSrcSet: props.srcSet,
                imageSizes: props.sizes,
                crossOrigin,
                integrity: props.integrity,
                nonce: props.nonce,
                type: props.type,
                fetchPriority: props.fetchPriority,
                referrerPolicy: props.refererPolicy
              }), // We always consume the header length since once we find one header that doesn't fit
              // we assume all the rest won't as well. This is to avoid getting into a situation
              // where we have a very small remaining capacity but no headers will ever fit and we end
              // up constantly trying to see if the next resource might make it. In the future we can
              // make this behavior different between render and prerender since in the latter case
              // we are less sensitive to the current requests runtime per and more sensitive to maximizing
              // headers.
              (headers.remainingCapacity -= header.length) >= 2)) {
                renderState.resets.image[key] = PRELOAD_NO_CREDS;
                if (headers.highImagePreloads) {
                  headers.highImagePreloads += ", ";
                }
                headers.highImagePreloads += header;
              } else {
                resource = [];
                pushLinkImpl(resource, {
                  rel: "preload",
                  as: "image",
                  // There is a bug in Safari where imageSrcSet is not respected on preload links
                  // so we omit the href here if we have imageSrcSet b/c safari will load the wrong image.
                  // This harms older browers that do not support imageSrcSet by making their preloads not work
                  // but this population is shrinking fast and is already small so we accept this tradeoff.
                  href: srcSet ? void 0 : src,
                  imageSrcSet: srcSet,
                  imageSizes: sizes,
                  crossOrigin,
                  integrity: props.integrity,
                  type: props.type,
                  fetchPriority: props.fetchPriority,
                  referrerPolicy: props.referrerPolicy
                });
                if (props.fetchPriority === "high" || renderState.highImagePreloads.size < 10) {
                  renderState.highImagePreloads.add(resource);
                } else {
                  renderState.bulkPreloads.add(resource);
                  promotablePreloads.set(key, resource);
                }
              }
            }
          }
          return pushSelfClosing(target, props, "img");
        }
        function pushSelfClosing(target, props, tag) {
          target.push(startChunkForTag(tag));
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                case "dangerouslySetInnerHTML":
                  throw new Error(tag + " is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTagSelfClosing);
          return null;
        }
        function pushStartMenuItem(target, props) {
          target.push(startChunkForTag("menuitem"));
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                case "dangerouslySetInnerHTML":
                  throw new Error("menuitems cannot have `children` nor `dangerouslySetInnerHTML`.");
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          return null;
        }
        function pushTitle(target, props, renderState, insertionMode, noscriptTagInScope, isFallback) {
          {
            if (hasOwnProperty.call(props, "children")) {
              var children = props.children;
              var child = Array.isArray(children) ? children.length < 2 ? children[0] : null : children;
              if (Array.isArray(children) && children.length > 1) {
                error("React expects the `children` prop of <title> tags to be a string, number%s, or object with a novel `toString` method but found an Array with length %s instead. Browsers treat all child Nodes of <title> tags as Text content and React expects to be able to convert `children` of <title> tags to a single string value which is why Arrays of length greater than 1 are not supported. When using JSX it can be commong to combine text nodes and value nodes. For example: <title>hello {nameOfUser}</title>. While not immediately apparent, `children` in this case is an Array with length 2. If your `children` prop is using this form try rewriting it using a template string: <title>{`hello ${nameOfUser}`}</title>.", "", children.length);
              } else if (typeof child === "function" || typeof child === "symbol") {
                var childType = typeof child === "function" ? "a Function" : "a Sybmol";
                error("React expect children of <title> tags to be a string, number%s, or object with a novel `toString` method but found %s instead. Browsers treat all child Nodes of <title> tags as Text content and React expects to be able to convert children of <title> tags to a single string value.", "", childType);
              } else if (child && child.toString === {}.toString) {
                if (child.$$typeof != null) {
                  error("React expects the `children` prop of <title> tags to be a string, number%s, or object with a novel `toString` method but found an object that appears to be a React element which never implements a suitable `toString` method. Browsers treat all child Nodes of <title> tags as Text content and React expects to be able to convert children of <title> tags to a single string value which is why rendering React elements is not supported. If the `children` of <title> is a React Component try moving the <title> tag into that component. If the `children` of <title> is some HTML markup change it to be Text only to be valid HTML.", "");
                } else {
                  error("React expects the `children` prop of <title> tags to be a string, number%s, or object with a novel `toString` method but found an object that does not implement a suitable `toString` method. Browsers treat all child Nodes of <title> tags as Text content and React expects to be able to convert children of <title> tags to a single string value. Using the default `toString` method available on every object is almost certainly an error. Consider whether the `children` of this <title> is an object in error and change it to a string or number value if so. Otherwise implement a `toString` method that React can use to produce a valid <title>.", "");
                }
              }
            }
          }
          {
            if (insertionMode !== SVG_MODE && !noscriptTagInScope && props.itemProp == null) {
              if (isFallback) {
                return null;
              } else {
                pushTitleImpl(renderState.hoistableChunks, props);
              }
            } else {
              return pushTitleImpl(target, props);
            }
          }
        }
        function pushTitleImpl(target, props) {
          target.push(startChunkForTag("title"));
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          var child = Array.isArray(children) ? children.length < 2 ? children[0] : null : children;
          if (typeof child !== "function" && typeof child !== "symbol" && child !== null && child !== void 0) {
            target.push(stringToChunk(escapeTextForBrowser("" + child)));
          }
          pushInnerHTML(target, innerHTML, children);
          target.push(endChunkForTag("title"));
          return null;
        }
        function pushStartHead(target, props, renderState, insertionMode) {
          {
            if (insertionMode < HTML_MODE && renderState.headChunks === null) {
              renderState.headChunks = [];
              return pushStartGenericElement(renderState.headChunks, props, "head");
            } else {
              return pushStartGenericElement(target, props, "head");
            }
          }
        }
        function pushStartHtml(target, props, renderState, insertionMode) {
          {
            if (insertionMode === ROOT_HTML_MODE && renderState.htmlChunks === null) {
              renderState.htmlChunks = [doctypeChunk];
              return pushStartGenericElement(renderState.htmlChunks, props, "html");
            } else {
              return pushStartGenericElement(target, props, "html");
            }
          }
        }
        function pushScript(target, props, resumableState, renderState, textEmbedded, insertionMode, noscriptTagInScope) {
          {
            var asyncProp = props.async;
            if (typeof props.src !== "string" || !props.src || !(asyncProp && typeof asyncProp !== "function" && typeof asyncProp !== "symbol") || props.onLoad || props.onError || insertionMode === SVG_MODE || noscriptTagInScope || props.itemProp != null) {
              return pushScriptImpl(target, props);
            }
            var src = props.src;
            var key = getResourceKey(src);
            var resources, preloads;
            if (props.type === "module") {
              resources = resumableState.moduleScriptResources;
              preloads = renderState.preloads.moduleScripts;
            } else {
              resources = resumableState.scriptResources;
              preloads = renderState.preloads.scripts;
            }
            var hasKey = resources.hasOwnProperty(key);
            var resourceState = hasKey ? resources[key] : void 0;
            if (resourceState !== EXISTS) {
              resources[key] = EXISTS;
              var scriptProps = props;
              if (resourceState) {
                var preloadState = resourceState;
                if (preloadState.length === 2) {
                  scriptProps = assign({}, props);
                  adoptPreloadCredentials(scriptProps, preloadState);
                }
                var preloadResource = preloads.get(key);
                if (preloadResource) {
                  preloadResource.length = 0;
                }
              }
              var resource = [];
              renderState.scripts.add(resource);
              pushScriptImpl(resource, scriptProps);
            }
            if (textEmbedded) {
              target.push(textSeparator);
            }
            return null;
          }
        }
        function pushScriptImpl(target, props) {
          target.push(startChunkForTag("script"));
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          {
            if (children != null && typeof children !== "string") {
              var descriptiveStatement = typeof children === "number" ? "a number for children" : Array.isArray(children) ? "an array for children" : "something unexpected for children";
              error("A script element was rendered with %s. If script element has children it must be a single string. Consider using dangerouslySetInnerHTML or passing a plain string as children.", descriptiveStatement);
            }
          }
          pushInnerHTML(target, innerHTML, children);
          if (typeof children === "string") {
            target.push(stringToChunk(encodeHTMLTextNode(children)));
          }
          target.push(endChunkForTag("script"));
          return null;
        }
        function pushStartGenericElement(target, props, tag) {
          target.push(startChunkForTag(tag));
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          pushInnerHTML(target, innerHTML, children);
          if (typeof children === "string") {
            target.push(stringToChunk(encodeHTMLTextNode(children)));
            return null;
          }
          return children;
        }
        function pushStartCustomElement(target, props, tag) {
          target.push(startChunkForTag(tag));
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              var attributeName = propKey;
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                case "style":
                  pushStyleAttribute(target, propValue);
                  break;
                case "suppressContentEditableWarning":
                case "suppressHydrationWarning":
                case "ref":
                  break;
                case "className":
                default:
                  if (isAttributeNameSafe(propKey) && typeof propValue !== "function" && typeof propValue !== "symbol") {
                    target.push(attributeSeparator, stringToChunk(attributeName), attributeAssign, stringToChunk(escapeTextForBrowser(propValue)), attributeEnd);
                  }
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          pushInnerHTML(target, innerHTML, children);
          return children;
        }
        var leadingNewline = stringToPrecomputedChunk("\n");
        function pushStartPreformattedElement(target, props, tag) {
          target.push(startChunkForTag(tag));
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          if (innerHTML != null) {
            if (children != null) {
              throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
            }
            if (typeof innerHTML !== "object" || !("__html" in innerHTML)) {
              throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
            }
            var html = innerHTML.__html;
            if (html !== null && html !== void 0) {
              if (typeof html === "string" && html.length > 0 && html[0] === "\n") {
                target.push(leadingNewline, stringToChunk(html));
              } else {
                {
                  checkHtmlStringCoercion(html);
                }
                target.push(stringToChunk("" + html));
              }
            }
          }
          if (typeof children === "string" && children[0] === "\n") {
            target.push(leadingNewline);
          }
          return children;
        }
        var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/;
        var validatedTagCache = /* @__PURE__ */ new Map();
        function startChunkForTag(tag) {
          var tagStartChunk = validatedTagCache.get(tag);
          if (tagStartChunk === void 0) {
            if (!VALID_TAG_REGEX.test(tag)) {
              throw new Error("Invalid tag: " + tag);
            }
            tagStartChunk = stringToPrecomputedChunk("<" + tag);
            validatedTagCache.set(tag, tagStartChunk);
          }
          return tagStartChunk;
        }
        var doctypeChunk = stringToPrecomputedChunk("<!DOCTYPE html>");
        function pushStartInstance(target, type, props, resumableState, renderState, hoistableState, formatContext, textEmbedded, isFallback) {
          {
            validateProperties$2(type, props);
            validateProperties$1(type, props);
            validateProperties(type, props, null);
            if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
              error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
            }
            if (formatContext.insertionMode !== SVG_MODE && formatContext.insertionMode !== MATHML_MODE) {
              if (type.indexOf("-") === -1 && type.toLowerCase() !== type) {
                error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
              }
            }
          }
          switch (type) {
            case "div":
            case "span":
            case "svg":
            case "path":
              break;
            case "a": {
              break;
            }
            case "g":
            case "p":
            case "li":
              break;
            case "select":
              return pushStartSelect(target, props);
            case "option":
              return pushStartOption(target, props, formatContext);
            case "textarea":
              return pushStartTextArea(target, props);
            case "input":
              return pushInput(target, props, resumableState, renderState);
            case "button":
              return pushStartButton(target, props, resumableState, renderState);
            case "form":
              return pushStartForm(target, props, resumableState, renderState);
            case "menuitem":
              return pushStartMenuItem(target, props);
            case "title":
              return pushTitle(target, props, renderState, formatContext.insertionMode, !!(formatContext.tagScope & NOSCRIPT_SCOPE), isFallback);
            case "link":
              return pushLink(target, props, resumableState, renderState, hoistableState, textEmbedded, formatContext.insertionMode, !!(formatContext.tagScope & NOSCRIPT_SCOPE), isFallback);
            case "script":
              return pushScript(target, props, resumableState, renderState, textEmbedded, formatContext.insertionMode, !!(formatContext.tagScope & NOSCRIPT_SCOPE));
            case "style":
              return pushStyle(target, props, resumableState, renderState, hoistableState, textEmbedded, formatContext.insertionMode, !!(formatContext.tagScope & NOSCRIPT_SCOPE));
            case "meta":
              return pushMeta(target, props, renderState, textEmbedded, formatContext.insertionMode, !!(formatContext.tagScope & NOSCRIPT_SCOPE), isFallback);
            case "listing":
            case "pre": {
              return pushStartPreformattedElement(target, props, type);
            }
            case "img": {
              return pushImg(target, props, resumableState, renderState, !!(formatContext.tagScope & PICTURE_SCOPE));
            }
            case "base":
            case "area":
            case "br":
            case "col":
            case "embed":
            case "hr":
            case "keygen":
            case "param":
            case "source":
            case "track":
            case "wbr": {
              return pushSelfClosing(target, props, type);
            }
            case "annotation-xml":
            case "color-profile":
            case "font-face":
            case "font-face-src":
            case "font-face-uri":
            case "font-face-format":
            case "font-face-name":
            case "missing-glyph": {
              break;
            }
            case "head":
              return pushStartHead(target, props, renderState, formatContext.insertionMode);
            case "html": {
              return pushStartHtml(target, props, renderState, formatContext.insertionMode);
            }
            default: {
              if (type.indexOf("-") !== -1) {
                return pushStartCustomElement(target, props, type);
              }
            }
          }
          return pushStartGenericElement(target, props, type);
        }
        var endTagCache = /* @__PURE__ */ new Map();
        function endChunkForTag(tag) {
          var chunk = endTagCache.get(tag);
          if (chunk === void 0) {
            chunk = stringToPrecomputedChunk("</" + tag + ">");
            endTagCache.set(tag, chunk);
          }
          return chunk;
        }
        function pushEndInstance(target, type, props, resumableState, formatContext) {
          switch (type) {
            case "title":
            case "style":
            case "script":
            case "area":
            case "base":
            case "br":
            case "col":
            case "embed":
            case "hr":
            case "img":
            case "input":
            case "keygen":
            case "link":
            case "meta":
            case "param":
            case "source":
            case "track":
            case "wbr": {
              return;
            }
            case "body": {
              if (formatContext.insertionMode <= HTML_HTML_MODE) {
                resumableState.hasBody = true;
                return;
              }
              break;
            }
            case "html":
              if (formatContext.insertionMode === ROOT_HTML_MODE) {
                resumableState.hasHtml = true;
                return;
              }
              break;
          }
          target.push(endChunkForTag(type));
        }
        function writeBootstrap(destination, renderState) {
          var bootstrapChunks = renderState.bootstrapChunks;
          var i = 0;
          for (; i < bootstrapChunks.length - 1; i++) {
            writeChunk(destination, bootstrapChunks[i]);
          }
          if (i < bootstrapChunks.length) {
            var lastChunk = bootstrapChunks[i];
            bootstrapChunks.length = 0;
            return writeChunkAndReturn(destination, lastChunk);
          }
          return true;
        }
        function writeCompletedRoot(destination, renderState) {
          return writeBootstrap(destination, renderState);
        }
        var placeholder1 = stringToPrecomputedChunk('<template id="');
        var placeholder2 = stringToPrecomputedChunk('"></template>');
        function writePlaceholder(destination, renderState, id) {
          writeChunk(destination, placeholder1);
          writeChunk(destination, renderState.placeholderPrefix);
          var formattedID = stringToChunk(id.toString(16));
          writeChunk(destination, formattedID);
          return writeChunkAndReturn(destination, placeholder2);
        }
        var startCompletedSuspenseBoundary = stringToPrecomputedChunk("<!--$-->");
        var startPendingSuspenseBoundary1 = stringToPrecomputedChunk('<!--$?--><template id="');
        var startPendingSuspenseBoundary2 = stringToPrecomputedChunk('"></template>');
        var startClientRenderedSuspenseBoundary = stringToPrecomputedChunk("<!--$!-->");
        var endSuspenseBoundary = stringToPrecomputedChunk("<!--/$-->");
        var clientRenderedSuspenseBoundaryError1 = stringToPrecomputedChunk("<template");
        var clientRenderedSuspenseBoundaryErrorAttrInterstitial = stringToPrecomputedChunk('"');
        var clientRenderedSuspenseBoundaryError1A = stringToPrecomputedChunk(' data-dgst="');
        var clientRenderedSuspenseBoundaryError1B = stringToPrecomputedChunk(' data-msg="');
        var clientRenderedSuspenseBoundaryError1C = stringToPrecomputedChunk(' data-stck="');
        var clientRenderedSuspenseBoundaryError2 = stringToPrecomputedChunk("></template>");
        function writeStartCompletedSuspenseBoundary(destination, renderState) {
          return writeChunkAndReturn(destination, startCompletedSuspenseBoundary);
        }
        function writeStartPendingSuspenseBoundary(destination, renderState, id) {
          writeChunk(destination, startPendingSuspenseBoundary1);
          if (id === null) {
            throw new Error("An ID must have been assigned before we can complete the boundary.");
          }
          writeChunk(destination, renderState.boundaryPrefix);
          writeChunk(destination, stringToChunk(id.toString(16)));
          return writeChunkAndReturn(destination, startPendingSuspenseBoundary2);
        }
        function writeStartClientRenderedSuspenseBoundary(destination, renderState, errorDigest, errorMesssage, errorComponentStack) {
          var result;
          result = writeChunkAndReturn(destination, startClientRenderedSuspenseBoundary);
          writeChunk(destination, clientRenderedSuspenseBoundaryError1);
          if (errorDigest) {
            writeChunk(destination, clientRenderedSuspenseBoundaryError1A);
            writeChunk(destination, stringToChunk(escapeTextForBrowser(errorDigest)));
            writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial);
          }
          {
            if (errorMesssage) {
              writeChunk(destination, clientRenderedSuspenseBoundaryError1B);
              writeChunk(destination, stringToChunk(escapeTextForBrowser(errorMesssage)));
              writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial);
            }
            if (errorComponentStack) {
              writeChunk(destination, clientRenderedSuspenseBoundaryError1C);
              writeChunk(destination, stringToChunk(escapeTextForBrowser(errorComponentStack)));
              writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial);
            }
          }
          result = writeChunkAndReturn(destination, clientRenderedSuspenseBoundaryError2);
          return result;
        }
        function writeEndCompletedSuspenseBoundary(destination, renderState) {
          return writeChunkAndReturn(destination, endSuspenseBoundary);
        }
        function writeEndPendingSuspenseBoundary(destination, renderState) {
          return writeChunkAndReturn(destination, endSuspenseBoundary);
        }
        function writeEndClientRenderedSuspenseBoundary(destination, renderState) {
          return writeChunkAndReturn(destination, endSuspenseBoundary);
        }
        var startSegmentHTML = stringToPrecomputedChunk('<div hidden id="');
        var startSegmentHTML2 = stringToPrecomputedChunk('">');
        var endSegmentHTML = stringToPrecomputedChunk("</div>");
        var startSegmentSVG = stringToPrecomputedChunk('<svg aria-hidden="true" style="display:none" id="');
        var startSegmentSVG2 = stringToPrecomputedChunk('">');
        var endSegmentSVG = stringToPrecomputedChunk("</svg>");
        var startSegmentMathML = stringToPrecomputedChunk('<math aria-hidden="true" style="display:none" id="');
        var startSegmentMathML2 = stringToPrecomputedChunk('">');
        var endSegmentMathML = stringToPrecomputedChunk("</math>");
        var startSegmentTable = stringToPrecomputedChunk('<table hidden id="');
        var startSegmentTable2 = stringToPrecomputedChunk('">');
        var endSegmentTable = stringToPrecomputedChunk("</table>");
        var startSegmentTableBody = stringToPrecomputedChunk('<table hidden><tbody id="');
        var startSegmentTableBody2 = stringToPrecomputedChunk('">');
        var endSegmentTableBody = stringToPrecomputedChunk("</tbody></table>");
        var startSegmentTableRow = stringToPrecomputedChunk('<table hidden><tr id="');
        var startSegmentTableRow2 = stringToPrecomputedChunk('">');
        var endSegmentTableRow = stringToPrecomputedChunk("</tr></table>");
        var startSegmentColGroup = stringToPrecomputedChunk('<table hidden><colgroup id="');
        var startSegmentColGroup2 = stringToPrecomputedChunk('">');
        var endSegmentColGroup = stringToPrecomputedChunk("</colgroup></table>");
        function writeStartSegment(destination, renderState, formatContext, id) {
          switch (formatContext.insertionMode) {
            case ROOT_HTML_MODE:
            case HTML_HTML_MODE:
            case HTML_MODE: {
              writeChunk(destination, startSegmentHTML);
              writeChunk(destination, renderState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentHTML2);
            }
            case SVG_MODE: {
              writeChunk(destination, startSegmentSVG);
              writeChunk(destination, renderState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentSVG2);
            }
            case MATHML_MODE: {
              writeChunk(destination, startSegmentMathML);
              writeChunk(destination, renderState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentMathML2);
            }
            case HTML_TABLE_MODE: {
              writeChunk(destination, startSegmentTable);
              writeChunk(destination, renderState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentTable2);
            }
            case HTML_TABLE_BODY_MODE: {
              writeChunk(destination, startSegmentTableBody);
              writeChunk(destination, renderState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentTableBody2);
            }
            case HTML_TABLE_ROW_MODE: {
              writeChunk(destination, startSegmentTableRow);
              writeChunk(destination, renderState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentTableRow2);
            }
            case HTML_COLGROUP_MODE: {
              writeChunk(destination, startSegmentColGroup);
              writeChunk(destination, renderState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentColGroup2);
            }
            default: {
              throw new Error("Unknown insertion mode. This is a bug in React.");
            }
          }
        }
        function writeEndSegment(destination, formatContext) {
          switch (formatContext.insertionMode) {
            case ROOT_HTML_MODE:
            case HTML_HTML_MODE:
            case HTML_MODE: {
              return writeChunkAndReturn(destination, endSegmentHTML);
            }
            case SVG_MODE: {
              return writeChunkAndReturn(destination, endSegmentSVG);
            }
            case MATHML_MODE: {
              return writeChunkAndReturn(destination, endSegmentMathML);
            }
            case HTML_TABLE_MODE: {
              return writeChunkAndReturn(destination, endSegmentTable);
            }
            case HTML_TABLE_BODY_MODE: {
              return writeChunkAndReturn(destination, endSegmentTableBody);
            }
            case HTML_TABLE_ROW_MODE: {
              return writeChunkAndReturn(destination, endSegmentTableRow);
            }
            case HTML_COLGROUP_MODE: {
              return writeChunkAndReturn(destination, endSegmentColGroup);
            }
            default: {
              throw new Error("Unknown insertion mode. This is a bug in React.");
            }
          }
        }
        var completeSegmentScript1Full = stringToPrecomputedChunk(completeSegment + '$RS("');
        var completeSegmentScript1Partial = stringToPrecomputedChunk('$RS("');
        var completeSegmentScript2 = stringToPrecomputedChunk('","');
        var completeSegmentScriptEnd = stringToPrecomputedChunk('")<\/script>');
        var completeSegmentData1 = stringToPrecomputedChunk('<template data-rsi="" data-sid="');
        var completeSegmentData2 = stringToPrecomputedChunk('" data-pid="');
        var completeSegmentDataEnd = dataElementQuotedEnd;
        function writeCompletedSegmentInstruction(destination, resumableState, renderState, contentSegmentID) {
          var scriptFormat = resumableState.streamingFormat === ScriptStreamingFormat;
          if (scriptFormat) {
            writeChunk(destination, renderState.startInlineScript);
            if ((resumableState.instructions & SentCompleteSegmentFunction) === NothingSent) {
              resumableState.instructions |= SentCompleteSegmentFunction;
              writeChunk(destination, completeSegmentScript1Full);
            } else {
              writeChunk(destination, completeSegmentScript1Partial);
            }
          } else {
            writeChunk(destination, completeSegmentData1);
          }
          writeChunk(destination, renderState.segmentPrefix);
          var formattedID = stringToChunk(contentSegmentID.toString(16));
          writeChunk(destination, formattedID);
          if (scriptFormat) {
            writeChunk(destination, completeSegmentScript2);
          } else {
            writeChunk(destination, completeSegmentData2);
          }
          writeChunk(destination, renderState.placeholderPrefix);
          writeChunk(destination, formattedID);
          if (scriptFormat) {
            return writeChunkAndReturn(destination, completeSegmentScriptEnd);
          } else {
            return writeChunkAndReturn(destination, completeSegmentDataEnd);
          }
        }
        var completeBoundaryScript1Full = stringToPrecomputedChunk(completeBoundary + '$RC("');
        var completeBoundaryScript1Partial = stringToPrecomputedChunk('$RC("');
        var completeBoundaryWithStylesScript1FullBoth = stringToPrecomputedChunk(completeBoundary + completeBoundaryWithStyles + '$RR("');
        var completeBoundaryWithStylesScript1FullPartial = stringToPrecomputedChunk(completeBoundaryWithStyles + '$RR("');
        var completeBoundaryWithStylesScript1Partial = stringToPrecomputedChunk('$RR("');
        var completeBoundaryScript2 = stringToPrecomputedChunk('","');
        var completeBoundaryScript3a = stringToPrecomputedChunk('",');
        var completeBoundaryScript3b = stringToPrecomputedChunk('"');
        var completeBoundaryScriptEnd = stringToPrecomputedChunk(")<\/script>");
        var completeBoundaryData1 = stringToPrecomputedChunk('<template data-rci="" data-bid="');
        var completeBoundaryWithStylesData1 = stringToPrecomputedChunk('<template data-rri="" data-bid="');
        var completeBoundaryData2 = stringToPrecomputedChunk('" data-sid="');
        var completeBoundaryData3a = stringToPrecomputedChunk('" data-sty="');
        var completeBoundaryDataEnd = dataElementQuotedEnd;
        function writeCompletedBoundaryInstruction(destination, resumableState, renderState, id, hoistableState) {
          var requiresStyleInsertion;
          {
            requiresStyleInsertion = renderState.stylesToHoist;
            renderState.stylesToHoist = false;
          }
          var scriptFormat = resumableState.streamingFormat === ScriptStreamingFormat;
          if (scriptFormat) {
            writeChunk(destination, renderState.startInlineScript);
            if (requiresStyleInsertion) {
              if ((resumableState.instructions & SentCompleteBoundaryFunction) === NothingSent) {
                resumableState.instructions |= SentStyleInsertionFunction | SentCompleteBoundaryFunction;
                writeChunk(destination, clonePrecomputedChunk(completeBoundaryWithStylesScript1FullBoth));
              } else if ((resumableState.instructions & SentStyleInsertionFunction) === NothingSent) {
                resumableState.instructions |= SentStyleInsertionFunction;
                writeChunk(destination, completeBoundaryWithStylesScript1FullPartial);
              } else {
                writeChunk(destination, completeBoundaryWithStylesScript1Partial);
              }
            } else {
              if ((resumableState.instructions & SentCompleteBoundaryFunction) === NothingSent) {
                resumableState.instructions |= SentCompleteBoundaryFunction;
                writeChunk(destination, completeBoundaryScript1Full);
              } else {
                writeChunk(destination, completeBoundaryScript1Partial);
              }
            }
          } else {
            if (requiresStyleInsertion) {
              writeChunk(destination, completeBoundaryWithStylesData1);
            } else {
              writeChunk(destination, completeBoundaryData1);
            }
          }
          var idChunk = stringToChunk(id.toString(16));
          writeChunk(destination, renderState.boundaryPrefix);
          writeChunk(destination, idChunk);
          if (scriptFormat) {
            writeChunk(destination, completeBoundaryScript2);
          } else {
            writeChunk(destination, completeBoundaryData2);
          }
          writeChunk(destination, renderState.segmentPrefix);
          writeChunk(destination, idChunk);
          if (requiresStyleInsertion) {
            if (scriptFormat) {
              writeChunk(destination, completeBoundaryScript3a);
              writeStyleResourceDependenciesInJS(destination, hoistableState);
            } else {
              writeChunk(destination, completeBoundaryData3a);
              writeStyleResourceDependenciesInAttr(destination, hoistableState);
            }
          } else {
            if (scriptFormat) {
              writeChunk(destination, completeBoundaryScript3b);
            }
          }
          var writeMore;
          if (scriptFormat) {
            writeMore = writeChunkAndReturn(destination, completeBoundaryScriptEnd);
          } else {
            writeMore = writeChunkAndReturn(destination, completeBoundaryDataEnd);
          }
          return writeBootstrap(destination, renderState) && writeMore;
        }
        var clientRenderScript1Full = stringToPrecomputedChunk(clientRenderBoundary + ';$RX("');
        var clientRenderScript1Partial = stringToPrecomputedChunk('$RX("');
        var clientRenderScript1A = stringToPrecomputedChunk('"');
        var clientRenderErrorScriptArgInterstitial = stringToPrecomputedChunk(",");
        var clientRenderScriptEnd = stringToPrecomputedChunk(")<\/script>");
        var clientRenderData1 = stringToPrecomputedChunk('<template data-rxi="" data-bid="');
        var clientRenderData2 = stringToPrecomputedChunk('" data-dgst="');
        var clientRenderData3 = stringToPrecomputedChunk('" data-msg="');
        var clientRenderData4 = stringToPrecomputedChunk('" data-stck="');
        var clientRenderDataEnd = dataElementQuotedEnd;
        function writeClientRenderBoundaryInstruction(destination, resumableState, renderState, id, errorDigest, errorMessage, errorComponentStack) {
          var scriptFormat = resumableState.streamingFormat === ScriptStreamingFormat;
          if (scriptFormat) {
            writeChunk(destination, renderState.startInlineScript);
            if ((resumableState.instructions & SentClientRenderFunction) === NothingSent) {
              resumableState.instructions |= SentClientRenderFunction;
              writeChunk(destination, clientRenderScript1Full);
            } else {
              writeChunk(destination, clientRenderScript1Partial);
            }
          } else {
            writeChunk(destination, clientRenderData1);
          }
          writeChunk(destination, renderState.boundaryPrefix);
          writeChunk(destination, stringToChunk(id.toString(16)));
          if (scriptFormat) {
            writeChunk(destination, clientRenderScript1A);
          }
          if (errorDigest || errorMessage || errorComponentStack) {
            if (scriptFormat) {
              writeChunk(destination, clientRenderErrorScriptArgInterstitial);
              writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorDigest || "")));
            } else {
              writeChunk(destination, clientRenderData2);
              writeChunk(destination, stringToChunk(escapeTextForBrowser(errorDigest || "")));
            }
          }
          if (errorMessage || errorComponentStack) {
            if (scriptFormat) {
              writeChunk(destination, clientRenderErrorScriptArgInterstitial);
              writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorMessage || "")));
            } else {
              writeChunk(destination, clientRenderData3);
              writeChunk(destination, stringToChunk(escapeTextForBrowser(errorMessage || "")));
            }
          }
          if (errorComponentStack) {
            if (scriptFormat) {
              writeChunk(destination, clientRenderErrorScriptArgInterstitial);
              writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorComponentStack)));
            } else {
              writeChunk(destination, clientRenderData4);
              writeChunk(destination, stringToChunk(escapeTextForBrowser(errorComponentStack)));
            }
          }
          if (scriptFormat) {
            return writeChunkAndReturn(destination, clientRenderScriptEnd);
          } else {
            return writeChunkAndReturn(destination, clientRenderDataEnd);
          }
        }
        var regexForJSStringsInInstructionScripts = /[<\u2028\u2029]/g;
        function escapeJSStringsForInstructionScripts(input) {
          var escaped = JSON.stringify(input);
          return escaped.replace(regexForJSStringsInInstructionScripts, function(match) {
            switch (match) {
              case "<":
                return "\\u003c";
              case "\u2028":
                return "\\u2028";
              case "\u2029":
                return "\\u2029";
              default: {
                throw new Error("escapeJSStringsForInstructionScripts encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React");
              }
            }
          });
        }
        var regexForJSStringsInScripts = /[&><\u2028\u2029]/g;
        function escapeJSObjectForInstructionScripts(input) {
          var escaped = JSON.stringify(input);
          return escaped.replace(regexForJSStringsInScripts, function(match) {
            switch (match) {
              case "&":
                return "\\u0026";
              case ">":
                return "\\u003e";
              case "<":
                return "\\u003c";
              case "\u2028":
                return "\\u2028";
              case "\u2029":
                return "\\u2029";
              default: {
                throw new Error("escapeJSObjectForInstructionScripts encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React");
              }
            }
          });
        }
        var lateStyleTagResourceOpen1 = stringToPrecomputedChunk('<style media="not all" data-precedence="');
        var lateStyleTagResourceOpen2 = stringToPrecomputedChunk('" data-href="');
        var lateStyleTagResourceOpen3 = stringToPrecomputedChunk('">');
        var lateStyleTagTemplateClose = stringToPrecomputedChunk("</style>");
        var currentlyRenderingBoundaryHasStylesToHoist = false;
        var destinationHasCapacity = true;
        function flushStyleTagsLateForBoundary(styleQueue) {
          var rules = styleQueue.rules;
          var hrefs = styleQueue.hrefs;
          {
            if (rules.length > 0 && hrefs.length === 0) {
              error("React expected to have at least one href for an a hoistable style but found none. This is a bug in React.");
            }
          }
          var i = 0;
          if (hrefs.length) {
            writeChunk(this, lateStyleTagResourceOpen1);
            writeChunk(this, styleQueue.precedence);
            writeChunk(this, lateStyleTagResourceOpen2);
            for (; i < hrefs.length - 1; i++) {
              writeChunk(this, hrefs[i]);
              writeChunk(this, spaceSeparator);
            }
            writeChunk(this, hrefs[i]);
            writeChunk(this, lateStyleTagResourceOpen3);
            for (i = 0; i < rules.length; i++) {
              writeChunk(this, rules[i]);
            }
            destinationHasCapacity = writeChunkAndReturn(this, lateStyleTagTemplateClose);
            currentlyRenderingBoundaryHasStylesToHoist = true;
            rules.length = 0;
            hrefs.length = 0;
          }
        }
        function hasStylesToHoist(stylesheet) {
          if (stylesheet.state !== PREAMBLE) {
            currentlyRenderingBoundaryHasStylesToHoist = true;
            return true;
          }
          return false;
        }
        function writeHoistablesForBoundary(destination, hoistableState, renderState) {
          currentlyRenderingBoundaryHasStylesToHoist = false;
          destinationHasCapacity = true;
          hoistableState.styles.forEach(flushStyleTagsLateForBoundary, destination);
          hoistableState.stylesheets.forEach(hasStylesToHoist);
          if (currentlyRenderingBoundaryHasStylesToHoist) {
            renderState.stylesToHoist = true;
          }
          return destinationHasCapacity;
        }
        function flushResource(resource) {
          for (var i = 0; i < resource.length; i++) {
            writeChunk(this, resource[i]);
          }
          resource.length = 0;
        }
        var stylesheetFlushingQueue = [];
        function flushStyleInPreamble(stylesheet, key, map) {
          pushLinkImpl(stylesheetFlushingQueue, stylesheet.props);
          for (var i = 0; i < stylesheetFlushingQueue.length; i++) {
            writeChunk(this, stylesheetFlushingQueue[i]);
          }
          stylesheetFlushingQueue.length = 0;
          stylesheet.state = PREAMBLE;
        }
        var styleTagResourceOpen1 = stringToPrecomputedChunk('<style data-precedence="');
        var styleTagResourceOpen2 = stringToPrecomputedChunk('" data-href="');
        var spaceSeparator = stringToPrecomputedChunk(" ");
        var styleTagResourceOpen3 = stringToPrecomputedChunk('">');
        var styleTagResourceClose = stringToPrecomputedChunk("</style>");
        function flushStylesInPreamble(styleQueue, precedence) {
          var hasStylesheets = styleQueue.sheets.size > 0;
          styleQueue.sheets.forEach(flushStyleInPreamble, this);
          styleQueue.sheets.clear();
          var rules = styleQueue.rules;
          var hrefs = styleQueue.hrefs;
          if (!hasStylesheets || hrefs.length) {
            writeChunk(this, styleTagResourceOpen1);
            writeChunk(this, styleQueue.precedence);
            var i = 0;
            if (hrefs.length) {
              writeChunk(this, styleTagResourceOpen2);
              for (; i < hrefs.length - 1; i++) {
                writeChunk(this, hrefs[i]);
                writeChunk(this, spaceSeparator);
              }
              writeChunk(this, hrefs[i]);
            }
            writeChunk(this, styleTagResourceOpen3);
            for (i = 0; i < rules.length; i++) {
              writeChunk(this, rules[i]);
            }
            writeChunk(this, styleTagResourceClose);
            rules.length = 0;
            hrefs.length = 0;
          }
        }
        function preloadLateStyle(stylesheet) {
          if (stylesheet.state === PENDING$1) {
            stylesheet.state = PRELOADED;
            var preloadProps = preloadAsStylePropsFromProps(stylesheet.props.href, stylesheet.props);
            pushLinkImpl(stylesheetFlushingQueue, preloadProps);
            for (var i = 0; i < stylesheetFlushingQueue.length; i++) {
              writeChunk(this, stylesheetFlushingQueue[i]);
            }
            stylesheetFlushingQueue.length = 0;
          }
        }
        function preloadLateStyles(styleQueue) {
          styleQueue.sheets.forEach(preloadLateStyle, this);
          styleQueue.sheets.clear();
        }
        function writePreamble(destination, resumableState, renderState, willFlushAllSegments) {
          if (!willFlushAllSegments && renderState.externalRuntimeScript) {
            var _renderState$external = renderState.externalRuntimeScript, src = _renderState$external.src, chunks = _renderState$external.chunks;
            internalPreinitScript(resumableState, renderState, src, chunks);
          }
          var htmlChunks = renderState.htmlChunks;
          var headChunks = renderState.headChunks;
          var i = 0;
          if (htmlChunks) {
            for (i = 0; i < htmlChunks.length; i++) {
              writeChunk(destination, htmlChunks[i]);
            }
            if (headChunks) {
              for (i = 0; i < headChunks.length; i++) {
                writeChunk(destination, headChunks[i]);
              }
            } else {
              writeChunk(destination, startChunkForTag("head"));
              writeChunk(destination, endOfStartTag);
            }
          } else if (headChunks) {
            for (i = 0; i < headChunks.length; i++) {
              writeChunk(destination, headChunks[i]);
            }
          }
          var charsetChunks = renderState.charsetChunks;
          for (i = 0; i < charsetChunks.length; i++) {
            writeChunk(destination, charsetChunks[i]);
          }
          charsetChunks.length = 0;
          renderState.preconnects.forEach(flushResource, destination);
          renderState.preconnects.clear();
          var viewportChunks = renderState.viewportChunks;
          for (i = 0; i < viewportChunks.length; i++) {
            writeChunk(destination, viewportChunks[i]);
          }
          viewportChunks.length = 0;
          renderState.fontPreloads.forEach(flushResource, destination);
          renderState.fontPreloads.clear();
          renderState.highImagePreloads.forEach(flushResource, destination);
          renderState.highImagePreloads.clear();
          renderState.styles.forEach(flushStylesInPreamble, destination);
          var importMapChunks = renderState.importMapChunks;
          for (i = 0; i < importMapChunks.length; i++) {
            writeChunk(destination, importMapChunks[i]);
          }
          importMapChunks.length = 0;
          renderState.bootstrapScripts.forEach(flushResource, destination);
          renderState.scripts.forEach(flushResource, destination);
          renderState.scripts.clear();
          renderState.bulkPreloads.forEach(flushResource, destination);
          renderState.bulkPreloads.clear();
          var hoistableChunks = renderState.hoistableChunks;
          for (i = 0; i < hoistableChunks.length; i++) {
            writeChunk(destination, hoistableChunks[i]);
          }
          hoistableChunks.length = 0;
          if (htmlChunks && headChunks === null) {
            writeChunk(destination, endChunkForTag("head"));
          }
        }
        function writeHoistables(destination, resumableState, renderState) {
          var i = 0;
          var viewportChunks = renderState.viewportChunks;
          for (i = 0; i < viewportChunks.length; i++) {
            writeChunk(destination, viewportChunks[i]);
          }
          viewportChunks.length = 0;
          renderState.preconnects.forEach(flushResource, destination);
          renderState.preconnects.clear();
          renderState.fontPreloads.forEach(flushResource, destination);
          renderState.fontPreloads.clear();
          renderState.highImagePreloads.forEach(flushResource, destination);
          renderState.highImagePreloads.clear();
          renderState.styles.forEach(preloadLateStyles, destination);
          renderState.scripts.forEach(flushResource, destination);
          renderState.scripts.clear();
          renderState.bulkPreloads.forEach(flushResource, destination);
          renderState.bulkPreloads.clear();
          var hoistableChunks = renderState.hoistableChunks;
          for (i = 0; i < hoistableChunks.length; i++) {
            writeChunk(destination, hoistableChunks[i]);
          }
          hoistableChunks.length = 0;
        }
        function writePostamble(destination, resumableState) {
          if (resumableState.hasBody) {
            writeChunk(destination, endChunkForTag("body"));
          }
          if (resumableState.hasHtml) {
            writeChunk(destination, endChunkForTag("html"));
          }
        }
        var arrayFirstOpenBracket = stringToPrecomputedChunk("[");
        var arraySubsequentOpenBracket = stringToPrecomputedChunk(",[");
        var arrayInterstitial = stringToPrecomputedChunk(",");
        var arrayCloseBracket = stringToPrecomputedChunk("]");
        function writeStyleResourceDependenciesInJS(destination, hoistableState) {
          writeChunk(destination, arrayFirstOpenBracket);
          var nextArrayOpenBrackChunk = arrayFirstOpenBracket;
          hoistableState.stylesheets.forEach(function(resource) {
            if (resource.state === PREAMBLE) ;
            else if (resource.state === LATE) {
              writeChunk(destination, nextArrayOpenBrackChunk);
              writeStyleResourceDependencyHrefOnlyInJS(destination, resource.props.href);
              writeChunk(destination, arrayCloseBracket);
              nextArrayOpenBrackChunk = arraySubsequentOpenBracket;
            } else {
              writeChunk(destination, nextArrayOpenBrackChunk);
              writeStyleResourceDependencyInJS(destination, resource.props.href, resource.props["data-precedence"], resource.props);
              writeChunk(destination, arrayCloseBracket);
              nextArrayOpenBrackChunk = arraySubsequentOpenBracket;
              resource.state = LATE;
            }
          });
          writeChunk(destination, arrayCloseBracket);
        }
        function writeStyleResourceDependencyHrefOnlyInJS(destination, href) {
          {
            checkAttributeStringCoercion(href, "href");
          }
          var coercedHref = "" + href;
          writeChunk(destination, stringToChunk(escapeJSObjectForInstructionScripts(coercedHref)));
        }
        function writeStyleResourceDependencyInJS(destination, href, precedence, props) {
          var coercedHref = sanitizeURL("" + href);
          writeChunk(destination, stringToChunk(escapeJSObjectForInstructionScripts(coercedHref)));
          {
            checkAttributeStringCoercion(precedence, "precedence");
          }
          var coercedPrecedence = "" + precedence;
          writeChunk(destination, arrayInterstitial);
          writeChunk(destination, stringToChunk(escapeJSObjectForInstructionScripts(coercedPrecedence)));
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "href":
                case "rel":
                case "precedence":
                case "data-precedence": {
                  break;
                }
                case "children":
                case "dangerouslySetInnerHTML":
                  throw new Error("link is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                default:
                  writeStyleResourceAttributeInJS(destination, propKey, propValue);
                  break;
              }
            }
          }
          return null;
        }
        function writeStyleResourceAttributeInJS(destination, name, value) {
          var attributeName = name.toLowerCase();
          var attributeValue;
          switch (typeof value) {
            case "function":
            case "symbol":
              return;
          }
          switch (name) {
            case "innerHTML":
            case "dangerouslySetInnerHTML":
            case "suppressContentEditableWarning":
            case "suppressHydrationWarning":
            case "style":
            case "ref":
              return;
            case "className": {
              attributeName = "class";
              {
                checkAttributeStringCoercion(value, attributeName);
              }
              attributeValue = "" + value;
              break;
            }
            case "hidden": {
              if (value === false) {
                return;
              }
              attributeValue = "";
              break;
            }
            case "src":
            case "href": {
              value = sanitizeURL(value);
              {
                checkAttributeStringCoercion(value, attributeName);
              }
              attributeValue = "" + value;
              break;
            }
            default: {
              if (
                // unrecognized event handlers are not SSR'd and we (apparently)
                // use on* as hueristic for these handler props
                name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")
              ) {
                return;
              }
              if (!isAttributeNameSafe(name)) {
                return;
              }
              {
                checkAttributeStringCoercion(value, attributeName);
              }
              attributeValue = "" + value;
            }
          }
          writeChunk(destination, arrayInterstitial);
          writeChunk(destination, stringToChunk(escapeJSObjectForInstructionScripts(attributeName)));
          writeChunk(destination, arrayInterstitial);
          writeChunk(destination, stringToChunk(escapeJSObjectForInstructionScripts(attributeValue)));
        }
        function writeStyleResourceDependenciesInAttr(destination, hoistableState) {
          writeChunk(destination, arrayFirstOpenBracket);
          var nextArrayOpenBrackChunk = arrayFirstOpenBracket;
          hoistableState.stylesheets.forEach(function(resource) {
            if (resource.state === PREAMBLE) ;
            else if (resource.state === LATE) {
              writeChunk(destination, nextArrayOpenBrackChunk);
              writeStyleResourceDependencyHrefOnlyInAttr(destination, resource.props.href);
              writeChunk(destination, arrayCloseBracket);
              nextArrayOpenBrackChunk = arraySubsequentOpenBracket;
            } else {
              writeChunk(destination, nextArrayOpenBrackChunk);
              writeStyleResourceDependencyInAttr(destination, resource.props.href, resource.props["data-precedence"], resource.props);
              writeChunk(destination, arrayCloseBracket);
              nextArrayOpenBrackChunk = arraySubsequentOpenBracket;
              resource.state = LATE;
            }
          });
          writeChunk(destination, arrayCloseBracket);
        }
        function writeStyleResourceDependencyHrefOnlyInAttr(destination, href) {
          {
            checkAttributeStringCoercion(href, "href");
          }
          var coercedHref = "" + href;
          writeChunk(destination, stringToChunk(escapeTextForBrowser(JSON.stringify(coercedHref))));
        }
        function writeStyleResourceDependencyInAttr(destination, href, precedence, props) {
          var coercedHref = sanitizeURL("" + href);
          writeChunk(destination, stringToChunk(escapeTextForBrowser(JSON.stringify(coercedHref))));
          {
            checkAttributeStringCoercion(precedence, "precedence");
          }
          var coercedPrecedence = "" + precedence;
          writeChunk(destination, arrayInterstitial);
          writeChunk(destination, stringToChunk(escapeTextForBrowser(JSON.stringify(coercedPrecedence))));
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "href":
                case "rel":
                case "precedence":
                case "data-precedence": {
                  break;
                }
                case "children":
                case "dangerouslySetInnerHTML":
                  throw new Error("link is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                default:
                  writeStyleResourceAttributeInAttr(destination, propKey, propValue);
                  break;
              }
            }
          }
          return null;
        }
        function writeStyleResourceAttributeInAttr(destination, name, value) {
          var attributeName = name.toLowerCase();
          var attributeValue;
          switch (typeof value) {
            case "function":
            case "symbol":
              return;
          }
          switch (name) {
            case "innerHTML":
            case "dangerouslySetInnerHTML":
            case "suppressContentEditableWarning":
            case "suppressHydrationWarning":
            case "style":
            case "ref":
              return;
            case "className": {
              attributeName = "class";
              {
                checkAttributeStringCoercion(value, attributeName);
              }
              attributeValue = "" + value;
              break;
            }
            case "hidden": {
              if (value === false) {
                return;
              }
              attributeValue = "";
              break;
            }
            case "src":
            case "href": {
              value = sanitizeURL(value);
              {
                checkAttributeStringCoercion(value, attributeName);
              }
              attributeValue = "" + value;
              break;
            }
            default: {
              if (
                // unrecognized event handlers are not SSR'd and we (apparently)
                // use on* as hueristic for these handler props
                name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")
              ) {
                return;
              }
              if (!isAttributeNameSafe(name)) {
                return;
              }
              {
                checkAttributeStringCoercion(value, attributeName);
              }
              attributeValue = "" + value;
            }
          }
          writeChunk(destination, arrayInterstitial);
          writeChunk(destination, stringToChunk(escapeTextForBrowser(JSON.stringify(attributeName))));
          writeChunk(destination, arrayInterstitial);
          writeChunk(destination, stringToChunk(escapeTextForBrowser(JSON.stringify(attributeValue))));
        }
        var PENDING$1 = 0;
        var PRELOADED = 1;
        var PREAMBLE = 2;
        var LATE = 3;
        function createHoistableState() {
          return {
            styles: /* @__PURE__ */ new Set(),
            stylesheets: /* @__PURE__ */ new Set()
          };
        }
        function getResourceKey(href) {
          return href;
        }
        function getImageResourceKey(href, imageSrcSet, imageSizes) {
          if (imageSrcSet) {
            return imageSrcSet + "\n" + (imageSizes || "");
          }
          return href;
        }
        function prefetchDNS(href) {
          var request = resolveRequest();
          if (!request) {
            return;
          }
          var resumableState = getResumableState(request);
          var renderState = getRenderState(request);
          if (typeof href === "string" && href) {
            var key = getResourceKey(href);
            if (!resumableState.dnsResources.hasOwnProperty(key)) {
              resumableState.dnsResources[key] = EXISTS;
              var headers = renderState.headers;
              var header;
              if (headers && headers.remainingCapacity > 0 && // Compute the header since we might be able to fit it in the max length
              (header = getPrefetchDNSAsHeader(href), // We always consume the header length since once we find one header that doesn't fit
              // we assume all the rest won't as well. This is to avoid getting into a situation
              // where we have a very small remaining capacity but no headers will ever fit and we end
              // up constantly trying to see if the next resource might make it. In the future we can
              // make this behavior different between render and prerender since in the latter case
              // we are less sensitive to the current requests runtime per and more sensitive to maximizing
              // headers.
              (headers.remainingCapacity -= header.length) >= 2)) {
                renderState.resets.dns[key] = EXISTS;
                if (headers.preconnects) {
                  headers.preconnects += ", ";
                }
                headers.preconnects += header;
              } else {
                var resource = [];
                pushLinkImpl(resource, {
                  href,
                  rel: "dns-prefetch"
                });
                renderState.preconnects.add(resource);
              }
            }
            flushResources(request);
          }
        }
        function preconnect(href, crossOrigin) {
          var request = resolveRequest();
          if (!request) {
            return;
          }
          var resumableState = getResumableState(request);
          var renderState = getRenderState(request);
          if (typeof href === "string" && href) {
            var bucket = crossOrigin === "use-credentials" ? "credentials" : typeof crossOrigin === "string" ? "anonymous" : "default";
            var key = getResourceKey(href);
            if (!resumableState.connectResources[bucket].hasOwnProperty(key)) {
              resumableState.connectResources[bucket][key] = EXISTS;
              var headers = renderState.headers;
              var header;
              if (headers && headers.remainingCapacity > 0 && // Compute the header since we might be able to fit it in the max length
              (header = getPreconnectAsHeader(href, crossOrigin), // We always consume the header length since once we find one header that doesn't fit
              // we assume all the rest won't as well. This is to avoid getting into a situation
              // where we have a very small remaining capacity but no headers will ever fit and we end
              // up constantly trying to see if the next resource might make it. In the future we can
              // make this behavior different between render and prerender since in the latter case
              // we are less sensitive to the current requests runtime per and more sensitive to maximizing
              // headers.
              (headers.remainingCapacity -= header.length) >= 2)) {
                renderState.resets.connect[bucket][key] = EXISTS;
                if (headers.preconnects) {
                  headers.preconnects += ", ";
                }
                headers.preconnects += header;
              } else {
                var resource = [];
                pushLinkImpl(resource, {
                  rel: "preconnect",
                  href,
                  crossOrigin
                });
                renderState.preconnects.add(resource);
              }
            }
            flushResources(request);
          }
        }
        function preload(href, as, options) {
          var request = resolveRequest();
          if (!request) {
            return;
          }
          var resumableState = getResumableState(request);
          var renderState = getRenderState(request);
          if (as && href) {
            switch (as) {
              case "image": {
                var imageSrcSet, imageSizes, fetchPriority;
                if (options) {
                  imageSrcSet = options.imageSrcSet;
                  imageSizes = options.imageSizes;
                  fetchPriority = options.fetchPriority;
                }
                var key = getImageResourceKey(href, imageSrcSet, imageSizes);
                if (resumableState.imageResources.hasOwnProperty(key)) {
                  return;
                }
                resumableState.imageResources[key] = PRELOAD_NO_CREDS;
                var headers = renderState.headers;
                var header;
                if (headers && headers.remainingCapacity > 0 && fetchPriority === "high" && // Compute the header since we might be able to fit it in the max length
                (header = getPreloadAsHeader(href, as, options), // We always consume the header length since once we find one header that doesn't fit
                // we assume all the rest won't as well. This is to avoid getting into a situation
                // where we have a very small remaining capacity but no headers will ever fit and we end
                // up constantly trying to see if the next resource might make it. In the future we can
                // make this behavior different between render and prerender since in the latter case
                // we are less sensitive to the current requests runtime per and more sensitive to maximizing
                // headers.
                (headers.remainingCapacity -= header.length) >= 2)) {
                  renderState.resets.image[key] = PRELOAD_NO_CREDS;
                  if (headers.highImagePreloads) {
                    headers.highImagePreloads += ", ";
                  }
                  headers.highImagePreloads += header;
                } else {
                  var resource = [];
                  pushLinkImpl(resource, assign({
                    rel: "preload",
                    // There is a bug in Safari where imageSrcSet is not respected on preload links
                    // so we omit the href here if we have imageSrcSet b/c safari will load the wrong image.
                    // This harms older browers that do not support imageSrcSet by making their preloads not work
                    // but this population is shrinking fast and is already small so we accept this tradeoff.
                    href: imageSrcSet ? void 0 : href,
                    as
                  }, options));
                  if (fetchPriority === "high") {
                    renderState.highImagePreloads.add(resource);
                  } else {
                    renderState.bulkPreloads.add(resource);
                    renderState.preloads.images.set(key, resource);
                  }
                }
                break;
              }
              case "style": {
                var _key = getResourceKey(href);
                if (resumableState.styleResources.hasOwnProperty(_key)) {
                  return;
                }
                var _resource2 = [];
                pushLinkImpl(_resource2, assign({
                  rel: "preload",
                  href,
                  as
                }, options));
                resumableState.styleResources[_key] = options && (typeof options.crossOrigin === "string" || typeof options.integrity === "string") ? [options.crossOrigin, options.integrity] : PRELOAD_NO_CREDS;
                renderState.preloads.stylesheets.set(_key, _resource2);
                renderState.bulkPreloads.add(_resource2);
                break;
              }
              case "script": {
                var _key2 = getResourceKey(href);
                if (resumableState.scriptResources.hasOwnProperty(_key2)) {
                  return;
                }
                var _resource3 = [];
                renderState.preloads.scripts.set(_key2, _resource3);
                renderState.bulkPreloads.add(_resource3);
                pushLinkImpl(_resource3, assign({
                  rel: "preload",
                  href,
                  as
                }, options));
                resumableState.scriptResources[_key2] = options && (typeof options.crossOrigin === "string" || typeof options.integrity === "string") ? [options.crossOrigin, options.integrity] : PRELOAD_NO_CREDS;
                break;
              }
              default: {
                var _key3 = getResourceKey(href);
                var hasAsType = resumableState.unknownResources.hasOwnProperty(as);
                var resources;
                if (hasAsType) {
                  resources = resumableState.unknownResources[as];
                  if (resources.hasOwnProperty(_key3)) {
                    return;
                  }
                } else {
                  resources = {};
                  resumableState.unknownResources[as] = resources;
                }
                resources[_key3] = PRELOAD_NO_CREDS;
                var _headers = renderState.headers;
                var _header;
                if (_headers && _headers.remainingCapacity > 0 && as === "font" && // We compute the header here because we might be able to fit it in the max length
                (_header = getPreloadAsHeader(href, as, options), // We always consume the header length since once we find one header that doesn't fit
                // we assume all the rest won't as well. This is to avoid getting into a situation
                // where we have a very small remaining capacity but no headers will ever fit and we end
                // up constantly trying to see if the next resource might make it. In the future we can
                // make this behavior different between render and prerender since in the latter case
                // we are less sensitive to the current requests runtime per and more sensitive to maximizing
                // headers.
                (_headers.remainingCapacity -= _header.length) >= 2)) {
                  renderState.resets.font[_key3] = PRELOAD_NO_CREDS;
                  if (_headers.fontPreloads) {
                    _headers.fontPreloads += ", ";
                  }
                  _headers.fontPreloads += _header;
                } else {
                  var _resource4 = [];
                  var props = assign({
                    rel: "preload",
                    href,
                    as
                  }, options);
                  pushLinkImpl(_resource4, props);
                  switch (as) {
                    case "font":
                      renderState.fontPreloads.add(_resource4);
                      break;
                    default:
                      renderState.bulkPreloads.add(_resource4);
                  }
                }
              }
            }
            flushResources(request);
          }
        }
        function preloadModule(href, options) {
          var request = resolveRequest();
          if (!request) {
            return;
          }
          var resumableState = getResumableState(request);
          var renderState = getRenderState(request);
          if (href) {
            var key = getResourceKey(href);
            var as = options && typeof options.as === "string" ? options.as : "script";
            var resource;
            switch (as) {
              case "script": {
                if (resumableState.moduleScriptResources.hasOwnProperty(key)) {
                  return;
                }
                resource = [];
                resumableState.moduleScriptResources[key] = options && (typeof options.crossOrigin === "string" || typeof options.integrity === "string") ? [options.crossOrigin, options.integrity] : PRELOAD_NO_CREDS;
                renderState.preloads.moduleScripts.set(key, resource);
                break;
              }
              default: {
                var hasAsType = resumableState.moduleUnknownResources.hasOwnProperty(as);
                var resources;
                if (hasAsType) {
                  resources = resumableState.unknownResources[as];
                  if (resources.hasOwnProperty(key)) {
                    return;
                  }
                } else {
                  resources = {};
                  resumableState.moduleUnknownResources[as] = resources;
                }
                resource = [];
                resources[key] = PRELOAD_NO_CREDS;
              }
            }
            pushLinkImpl(resource, assign({
              rel: "modulepreload",
              href
            }, options));
            renderState.bulkPreloads.add(resource);
            flushResources(request);
          }
        }
        function preinitStyle(href, precedence, options) {
          var request = resolveRequest();
          if (!request) {
            return;
          }
          var resumableState = getResumableState(request);
          var renderState = getRenderState(request);
          if (href) {
            precedence = precedence || "default";
            var key = getResourceKey(href);
            var styleQueue = renderState.styles.get(precedence);
            var hasKey = resumableState.styleResources.hasOwnProperty(key);
            var resourceState = hasKey ? resumableState.styleResources[key] : void 0;
            if (resourceState !== EXISTS) {
              resumableState.styleResources[key] = EXISTS;
              if (!styleQueue) {
                styleQueue = {
                  precedence: stringToChunk(escapeTextForBrowser(precedence)),
                  rules: [],
                  hrefs: [],
                  sheets: /* @__PURE__ */ new Map()
                };
                renderState.styles.set(precedence, styleQueue);
              }
              var resource = {
                state: PENDING$1,
                props: assign({
                  rel: "stylesheet",
                  href,
                  "data-precedence": precedence
                }, options)
              };
              if (resourceState) {
                var preloadState = resourceState;
                if (preloadState.length === 2) {
                  adoptPreloadCredentials(resource.props, preloadState);
                }
                var preloadResource = renderState.preloads.stylesheets.get(key);
                if (preloadResource && preloadResource.length > 0) {
                  preloadResource.length = 0;
                } else {
                  resource.state = PRELOADED;
                }
              }
              styleQueue.sheets.set(key, resource);
              flushResources(request);
            }
          }
        }
        function preinitScript(src, options) {
          var request = resolveRequest();
          if (!request) {
            return;
          }
          var resumableState = getResumableState(request);
          var renderState = getRenderState(request);
          if (src) {
            var key = getResourceKey(src);
            var hasKey = resumableState.scriptResources.hasOwnProperty(key);
            var resourceState = hasKey ? resumableState.scriptResources[key] : void 0;
            if (resourceState !== EXISTS) {
              resumableState.scriptResources[key] = EXISTS;
              var props = assign({
                src,
                async: true
              }, options);
              if (resourceState) {
                var preloadState = resourceState;
                if (preloadState.length === 2) {
                  adoptPreloadCredentials(props, preloadState);
                }
                var preloadResource = renderState.preloads.scripts.get(key);
                if (preloadResource) {
                  preloadResource.length = 0;
                }
              }
              var resource = [];
              renderState.scripts.add(resource);
              pushScriptImpl(resource, props);
              flushResources(request);
            }
            return;
          }
        }
        function preinitModuleScript(src, options) {
          var request = resolveRequest();
          if (!request) {
            return;
          }
          var resumableState = getResumableState(request);
          var renderState = getRenderState(request);
          if (src) {
            var key = getResourceKey(src);
            var hasKey = resumableState.moduleScriptResources.hasOwnProperty(key);
            var resourceState = hasKey ? resumableState.moduleScriptResources[key] : void 0;
            if (resourceState !== EXISTS) {
              resumableState.moduleScriptResources[key] = EXISTS;
              var props = assign({
                src,
                type: "module",
                async: true
              }, options);
              if (resourceState) {
                var preloadState = resourceState;
                if (preloadState.length === 2) {
                  adoptPreloadCredentials(props, preloadState);
                }
                var preloadResource = renderState.preloads.moduleScripts.get(key);
                if (preloadResource) {
                  preloadResource.length = 0;
                }
              }
              var resource = [];
              renderState.scripts.add(resource);
              pushScriptImpl(resource, props);
              flushResources(request);
            }
            return;
          }
        }
        function preloadBootstrapScriptOrModule(resumableState, renderState, href, props) {
          var key = getResourceKey(href);
          {
            if (resumableState.scriptResources.hasOwnProperty(key) || resumableState.moduleScriptResources.hasOwnProperty(key)) {
              error('Internal React Error: React expected bootstrap script or module with src "%s" to not have been preloaded already. please file an issue', href);
            }
          }
          resumableState.scriptResources[key] = EXISTS;
          resumableState.moduleScriptResources[key] = EXISTS;
          var resource = [];
          pushLinkImpl(resource, props);
          renderState.bootstrapScripts.add(resource);
        }
        function internalPreinitScript(resumableState, renderState, src, chunks) {
          var key = getResourceKey(src);
          if (!resumableState.scriptResources.hasOwnProperty(key)) {
            var resource = chunks;
            resumableState.scriptResources[key] = EXISTS;
            renderState.scripts.add(resource);
          }
          return;
        }
        function preloadAsStylePropsFromProps(href, props) {
          return {
            rel: "preload",
            as: "style",
            href,
            crossOrigin: props.crossOrigin,
            fetchPriority: props.fetchPriority,
            integrity: props.integrity,
            media: props.media,
            hrefLang: props.hrefLang,
            referrerPolicy: props.referrerPolicy
          };
        }
        function stylesheetPropsFromRawProps(rawProps) {
          return assign({}, rawProps, {
            "data-precedence": rawProps.precedence,
            precedence: null
          });
        }
        function adoptPreloadCredentials(target, preloadState) {
          if (target.crossOrigin == null) target.crossOrigin = preloadState[0];
          if (target.integrity == null) target.integrity = preloadState[1];
        }
        function getPrefetchDNSAsHeader(href) {
          var escapedHref = escapeHrefForLinkHeaderURLContext(href);
          return "<" + escapedHref + ">; rel=dns-prefetch";
        }
        function getPreconnectAsHeader(href, crossOrigin) {
          var escapedHref = escapeHrefForLinkHeaderURLContext(href);
          var value = "<" + escapedHref + ">; rel=preconnect";
          if (typeof crossOrigin === "string") {
            var escapedCrossOrigin = escapeStringForLinkHeaderQuotedParamValueContext(crossOrigin, "crossOrigin");
            value += '; crossorigin="' + escapedCrossOrigin + '"';
          }
          return value;
        }
        function getPreloadAsHeader(href, as, params) {
          var escapedHref = escapeHrefForLinkHeaderURLContext(href);
          var escapedAs = escapeStringForLinkHeaderQuotedParamValueContext(as, "as");
          var value = "<" + escapedHref + '>; rel=preload; as="' + escapedAs + '"';
          for (var paramName in params) {
            if (hasOwnProperty.call(params, paramName)) {
              var paramValue = params[paramName];
              if (typeof paramValue === "string") {
                value += "; " + paramName.toLowerCase() + '="' + escapeStringForLinkHeaderQuotedParamValueContext(paramValue, paramName) + '"';
              }
            }
          }
          return value;
        }
        function getStylesheetPreloadAsHeader(stylesheet) {
          var props = stylesheet.props;
          var preloadOptions = {
            crossOrigin: props.crossOrigin,
            integrity: props.integrity,
            nonce: props.nonce,
            type: props.type,
            fetchPriority: props.fetchPriority,
            referrerPolicy: props.referrerPolicy,
            media: props.media
          };
          return getPreloadAsHeader(props.href, "style", preloadOptions);
        }
        var regexForHrefInLinkHeaderURLContext = /[<>\r\n]/g;
        function escapeHrefForLinkHeaderURLContext(hrefInput) {
          {
            checkAttributeStringCoercion(hrefInput, "href");
          }
          var coercedHref = "" + hrefInput;
          return coercedHref.replace(regexForHrefInLinkHeaderURLContext, escapeHrefForLinkHeaderURLContextReplacer);
        }
        function escapeHrefForLinkHeaderURLContextReplacer(match) {
          switch (match) {
            case "<":
              return "%3C";
            case ">":
              return "%3E";
            case "\n":
              return "%0A";
            case "\r":
              return "%0D";
            default: {
              throw new Error("escapeLinkHrefForHeaderContextReplacer encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React");
            }
          }
        }
        var regexForLinkHeaderQuotedParamValueContext = /["';,\r\n]/g;
        function escapeStringForLinkHeaderQuotedParamValueContext(value, name) {
          {
            checkOptionStringCoercion(value, name);
          }
          var coerced = "" + value;
          return coerced.replace(regexForLinkHeaderQuotedParamValueContext, escapeStringForLinkHeaderQuotedParamValueContextReplacer);
        }
        function escapeStringForLinkHeaderQuotedParamValueContextReplacer(match) {
          switch (match) {
            case '"':
              return "%22";
            case "'":
              return "%27";
            case ";":
              return "%3B";
            case ",":
              return "%2C";
            case "\n":
              return "%0A";
            case "\r":
              return "%0D";
            default: {
              throw new Error("escapeStringForLinkHeaderQuotedParamValueContextReplacer encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React");
            }
          }
        }
        function hoistStyleQueueDependency(styleQueue) {
          this.styles.add(styleQueue);
        }
        function hoistStylesheetDependency(stylesheet) {
          this.stylesheets.add(stylesheet);
        }
        function hoistHoistables(parentState, childState) {
          childState.styles.forEach(hoistStyleQueueDependency, parentState);
          childState.stylesheets.forEach(hoistStylesheetDependency, parentState);
        }
        function emitEarlyPreloads(renderState, resumableState, shellComplete) {
          var onHeaders = renderState.onHeaders;
          if (onHeaders) {
            var headers = renderState.headers;
            if (headers) {
              renderState.headers = null;
              var linkHeader = headers.preconnects;
              if (headers.fontPreloads) {
                if (linkHeader) {
                  linkHeader += ", ";
                }
                linkHeader += headers.fontPreloads;
              }
              if (headers.highImagePreloads) {
                if (linkHeader) {
                  linkHeader += ", ";
                }
                linkHeader += headers.highImagePreloads;
              }
              if (!shellComplete) {
                var queueIter = renderState.styles.values();
                outer: for (var queueStep = queueIter.next(); headers.remainingCapacity > 0 && !queueStep.done; queueStep = queueIter.next()) {
                  var sheets = queueStep.value.sheets;
                  var sheetIter = sheets.values();
                  for (var sheetStep = sheetIter.next(); headers.remainingCapacity > 0 && !sheetStep.done; sheetStep = sheetIter.next()) {
                    var sheet = sheetStep.value;
                    var props = sheet.props;
                    var key = getResourceKey(props.href);
                    var header = getStylesheetPreloadAsHeader(sheet);
                    if ((headers.remainingCapacity -= header.length) >= 2) {
                      renderState.resets.style[key] = PRELOAD_NO_CREDS;
                      if (linkHeader) {
                        linkHeader += ", ";
                      }
                      linkHeader += header;
                      renderState.resets.style[key] = typeof props.crossOrigin === "string" || typeof props.integrity === "string" ? [props.crossOrigin, props.integrity] : PRELOAD_NO_CREDS;
                    } else {
                      break outer;
                    }
                  }
                }
              }
              if (linkHeader) {
                onHeaders({
                  Link: linkHeader
                });
              } else {
                onHeaders({});
              }
              return;
            }
          }
        }
        var NotPendingTransition = NotPending;
        function getWrappedName(outerType, innerType, wrapperName) {
          var displayName = outerType.displayName;
          if (displayName) {
            return displayName;
          }
          var functionName = innerType.displayName || innerType.name || "";
          return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        var REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference");
        function getComponentNameFromType(type) {
          if (type == null) {
            return null;
          }
          if (typeof type === "function") {
            if (type.$$typeof === REACT_CLIENT_REFERENCE) {
              return null;
            }
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
            case REACT_CACHE_TYPE: {
              return "Cache";
            }
          }
          if (typeof type === "object") {
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            switch (type.$$typeof) {
              case REACT_PROVIDER_TYPE: {
                var provider = type;
                return getContextName(provider._context) + ".Provider";
              }
              case REACT_CONTEXT_TYPE:
                var context = type;
                {
                  return getContextName(context) + ".Consumer";
                }
              case REACT_CONSUMER_TYPE: {
                return null;
              }
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) {
                  return outerName;
                }
                return getComponentNameFromType(type.type) || "Memo";
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return getComponentNameFromType(init(payload));
                } catch (x) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        var warnedAboutMissingGetChildContext;
        {
          warnedAboutMissingGetChildContext = {};
        }
        var emptyContextObject = {};
        {
          Object.freeze(emptyContextObject);
        }
        function getMaskedContext(type, unmaskedContext) {
          {
            var contextTypes = type.contextTypes;
            if (!contextTypes) {
              return emptyContextObject;
            }
            var context = {};
            for (var key in contextTypes) {
              context[key] = unmaskedContext[key];
            }
            return context;
          }
        }
        function processChildContext(instance, type, parentContext, childContextTypes) {
          {
            if (typeof instance.getChildContext !== "function") {
              {
                var componentName = getComponentNameFromType(type) || "Unknown";
                if (!warnedAboutMissingGetChildContext[componentName]) {
                  warnedAboutMissingGetChildContext[componentName] = true;
                  error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                }
              }
              return parentContext;
            }
            var childContext = instance.getChildContext();
            for (var contextKey in childContext) {
              if (!(contextKey in childContextTypes)) {
                throw new Error((getComponentNameFromType(type) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
              }
            }
            return assign({}, parentContext, childContext);
          }
        }
        var rendererSigil;
        {
          rendererSigil = {};
        }
        var rootContextSnapshot = null;
        var currentActiveSnapshot = null;
        function popNode(prev) {
          {
            prev.context._currentValue = prev.parentValue;
          }
        }
        function pushNode(next) {
          {
            next.context._currentValue = next.value;
          }
        }
        function popToNearestCommonAncestor(prev, next) {
          if (prev === next) ;
          else {
            popNode(prev);
            var parentPrev = prev.parent;
            var parentNext = next.parent;
            if (parentPrev === null) {
              if (parentNext !== null) {
                throw new Error("The stacks must reach the root at the same time. This is a bug in React.");
              }
            } else {
              if (parentNext === null) {
                throw new Error("The stacks must reach the root at the same time. This is a bug in React.");
              }
              popToNearestCommonAncestor(parentPrev, parentNext);
            }
            pushNode(next);
          }
        }
        function popAllPrevious(prev) {
          popNode(prev);
          var parentPrev = prev.parent;
          if (parentPrev !== null) {
            popAllPrevious(parentPrev);
          }
        }
        function pushAllNext(next) {
          var parentNext = next.parent;
          if (parentNext !== null) {
            pushAllNext(parentNext);
          }
          pushNode(next);
        }
        function popPreviousToCommonLevel(prev, next) {
          popNode(prev);
          var parentPrev = prev.parent;
          if (parentPrev === null) {
            throw new Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");
          }
          if (parentPrev.depth === next.depth) {
            popToNearestCommonAncestor(parentPrev, next);
          } else {
            popPreviousToCommonLevel(parentPrev, next);
          }
        }
        function popNextToCommonLevel(prev, next) {
          var parentNext = next.parent;
          if (parentNext === null) {
            throw new Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");
          }
          if (prev.depth === parentNext.depth) {
            popToNearestCommonAncestor(prev, parentNext);
          } else {
            popNextToCommonLevel(prev, parentNext);
          }
          pushNode(next);
        }
        function switchContext(newSnapshot) {
          var prev = currentActiveSnapshot;
          var next = newSnapshot;
          if (prev !== next) {
            if (prev === null) {
              pushAllNext(next);
            } else if (next === null) {
              popAllPrevious(prev);
            } else if (prev.depth === next.depth) {
              popToNearestCommonAncestor(prev, next);
            } else if (prev.depth > next.depth) {
              popPreviousToCommonLevel(prev, next);
            } else {
              popNextToCommonLevel(prev, next);
            }
            currentActiveSnapshot = next;
          }
        }
        function pushProvider(context, nextValue) {
          var prevValue;
          {
            prevValue = context._currentValue;
            context._currentValue = nextValue;
            {
              if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
              }
              context._currentRenderer = rendererSigil;
            }
          }
          var prevNode = currentActiveSnapshot;
          var newNode = {
            parent: prevNode,
            depth: prevNode === null ? 0 : prevNode.depth + 1,
            context,
            parentValue: prevValue,
            value: nextValue
          };
          currentActiveSnapshot = newNode;
          return newNode;
        }
        function popProvider(context) {
          var prevSnapshot = currentActiveSnapshot;
          if (prevSnapshot === null) {
            throw new Error("Tried to pop a Context at the root of the app. This is a bug in React.");
          }
          {
            if (prevSnapshot.context !== context) {
              error("The parent context is not the expected context. This is probably a bug in React.");
            }
          }
          {
            var value = prevSnapshot.parentValue;
            prevSnapshot.context._currentValue = value;
            {
              if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
              }
              context._currentRenderer = rendererSigil;
            }
          }
          return currentActiveSnapshot = prevSnapshot.parent;
        }
        function getActiveContext() {
          return currentActiveSnapshot;
        }
        function readContext$1(context) {
          var value = context._currentValue;
          return value;
        }
        function get(key) {
          return key._reactInternals;
        }
        function set(key, value) {
          key._reactInternals = value;
        }
        var didWarnAboutNoopUpdateForComponent = {};
        var didWarnAboutDeprecatedWillMount = {};
        var didWarnAboutUninitializedState;
        var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
        var didWarnAboutLegacyLifecyclesAndDerivedState;
        var didWarnAboutUndefinedDerivedState;
        var didWarnAboutDirectlyAssigningPropsToState;
        var didWarnAboutContextTypeAndContextTypes;
        var didWarnAboutInvalidateContextType;
        var didWarnOnInvalidCallback;
        {
          didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
          didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
          didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
          didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
          didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
          didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
          didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
          didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
        }
        function warnOnInvalidCallback(callback) {
          {
            if (callback === null || typeof callback === "function") {
              return;
            }
            var key = String(callback);
            if (!didWarnOnInvalidCallback.has(key)) {
              didWarnOnInvalidCallback.add(key);
              error("Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
            }
          }
        }
        function warnOnUndefinedDerivedState(type, partialState) {
          {
            if (partialState === void 0) {
              var componentName = getComponentNameFromType(type) || "Component";
              if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                didWarnAboutUndefinedDerivedState.add(componentName);
                error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
              }
            }
          }
        }
        function warnNoop(publicInstance, callerName) {
          {
            var _constructor = publicInstance.constructor;
            var componentName = _constructor && getComponentNameFromType(_constructor) || "ReactClass";
            var warningKey = componentName + "." + callerName;
            if (didWarnAboutNoopUpdateForComponent[warningKey]) {
              return;
            }
            error("Can only update a mounting component. This usually means you called %s() outside componentWillMount() on the server. This is a no-op.\n\nPlease check the code for the %s component.", callerName, componentName);
            didWarnAboutNoopUpdateForComponent[warningKey] = true;
          }
        }
        var classComponentUpdater = {
          isMounted: function(inst) {
            return false;
          },
          // $FlowFixMe[missing-local-annot]
          enqueueSetState: function(inst, payload, callback) {
            var internals = get(inst);
            if (internals.queue === null) {
              warnNoop(inst, "setState");
            } else {
              internals.queue.push(payload);
              {
                if (callback !== void 0 && callback !== null) {
                  warnOnInvalidCallback(callback);
                }
              }
            }
          },
          enqueueReplaceState: function(inst, payload, callback) {
            var internals = get(inst);
            internals.replace = true;
            internals.queue = [payload];
            {
              if (callback !== void 0 && callback !== null) {
                warnOnInvalidCallback(callback);
              }
            }
          },
          // $FlowFixMe[missing-local-annot]
          enqueueForceUpdate: function(inst, callback) {
            var internals = get(inst);
            if (internals.queue === null) {
              warnNoop(inst, "forceUpdate");
            } else {
              {
                if (callback !== void 0 && callback !== null) {
                  warnOnInvalidCallback(callback);
                }
              }
            }
          }
        };
        function applyDerivedStateFromProps(instance, ctor, getDerivedStateFromProps, prevState, nextProps) {
          var partialState = getDerivedStateFromProps(nextProps, prevState);
          {
            warnOnUndefinedDerivedState(ctor, partialState);
          }
          var newState = partialState === null || partialState === void 0 ? prevState : assign({}, prevState, partialState);
          return newState;
        }
        function constructClassInstance(ctor, props, maskedLegacyContext) {
          var context = emptyContextObject;
          var contextType = ctor.contextType;
          {
            if ("contextType" in ctor) {
              var isValid = (
                // Allow null for conditional declaration
                contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE
              );
              if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                didWarnAboutInvalidateContextType.add(ctor);
                var addendum = "";
                if (contextType === void 0) {
                  addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                } else if (typeof contextType !== "object") {
                  addendum = " However, it is set to a " + typeof contextType + ".";
                } else if (contextType.$$typeof === REACT_CONSUMER_TYPE) {
                  addendum = " Did you accidentally pass the Context.Consumer instead?";
                } else {
                  addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                }
                error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
              }
            }
          }
          if (typeof contextType === "object" && contextType !== null) {
            context = readContext$1(contextType);
          } else {
            context = maskedLegacyContext;
          }
          var instance = new ctor(props, context);
          {
            if (typeof ctor.getDerivedStateFromProps === "function" && (instance.state === null || instance.state === void 0)) {
              var componentName = getComponentNameFromType(ctor) || "Component";
              if (!didWarnAboutUninitializedState.has(componentName)) {
                didWarnAboutUninitializedState.add(componentName);
                error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
              }
            }
            if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
              var foundWillMountName = null;
              var foundWillReceivePropsName = null;
              var foundWillUpdateName = null;
              if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                foundWillMountName = "componentWillMount";
              } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                foundWillMountName = "UNSAFE_componentWillMount";
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                foundWillReceivePropsName = "componentWillReceiveProps";
              } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                foundWillUpdateName = "componentWillUpdate";
              } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                foundWillUpdateName = "UNSAFE_componentWillUpdate";
              }
              if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                var _componentName = getComponentNameFromType(ctor) || "Component";
                var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                  didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                  error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                }
              }
            }
          }
          return instance;
        }
        function checkClassInstance(instance, ctor, newProps) {
          {
            var name = getComponentNameFromType(ctor) || "Component";
            var renderPresent = instance.render;
            if (!renderPresent) {
              if (ctor.prototype && typeof ctor.prototype.render === "function") {
                error("No `render` method found on the %s instance: did you accidentally return an object from the constructor?", name);
              } else {
                error("No `render` method found on the %s instance: you may have forgotten to define `render`.", name);
              }
            }
            if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
              error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
            }
            if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
            }
            if (instance.propTypes) {
              error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
            }
            if (instance.contextType) {
              error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
            }
            {
              if (instance.contextTypes) {
                error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
              }
              if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                didWarnAboutContextTypeAndContextTypes.add(ctor);
                error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
              }
            }
            if (typeof instance.componentShouldUpdate === "function") {
              error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
              error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
            }
            if (typeof instance.componentDidUnmount === "function") {
              error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
            }
            if (typeof instance.componentDidReceiveProps === "function") {
              error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
            }
            if (typeof instance.componentWillRecieveProps === "function") {
              error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
            }
            if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
              error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
            }
            var hasMutatedProps = instance.props !== newProps;
            if (instance.props !== void 0 && hasMutatedProps) {
              error("When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name);
            }
            if (instance.defaultProps) {
              error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
              didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
              error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
            }
            if (typeof instance.getDerivedStateFromProps === "function") {
              error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
            }
            if (typeof instance.getDerivedStateFromError === "function") {
              error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
            }
            if (typeof ctor.getSnapshotBeforeUpdate === "function") {
              error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
            }
            var state = instance.state;
            if (state && (typeof state !== "object" || isArray(state))) {
              error("%s.state: must be set to an object or null", name);
            }
            if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
              error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
            }
          }
        }
        function callComponentWillMount(type, instance) {
          var oldState = instance.state;
          if (typeof instance.componentWillMount === "function") {
            {
              if (instance.componentWillMount.__suppressDeprecationWarning !== true) {
                var componentName = getComponentNameFromType(type) || "Unknown";
                if (!didWarnAboutDeprecatedWillMount[componentName]) {
                  warn(
                    // keep this warning in sync with ReactStrictModeWarning.js
                    "componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code from componentWillMount to componentDidMount (preferred in most cases) or the constructor.\n\nPlease update the following components: %s",
                    componentName
                  );
                  didWarnAboutDeprecatedWillMount[componentName] = true;
                }
              }
            }
            instance.componentWillMount();
          }
          if (typeof instance.UNSAFE_componentWillMount === "function") {
            instance.UNSAFE_componentWillMount();
          }
          if (oldState !== instance.state) {
            {
              error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromType(type) || "Component");
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function processUpdateQueue(internalInstance, inst, props, maskedLegacyContext) {
          if (internalInstance.queue !== null && internalInstance.queue.length > 0) {
            var oldQueue = internalInstance.queue;
            var oldReplace = internalInstance.replace;
            internalInstance.queue = null;
            internalInstance.replace = false;
            if (oldReplace && oldQueue.length === 1) {
              inst.state = oldQueue[0];
            } else {
              var nextState = oldReplace ? oldQueue[0] : inst.state;
              var dontMutate = true;
              for (var i = oldReplace ? 1 : 0; i < oldQueue.length; i++) {
                var partial = oldQueue[i];
                var partialState = typeof partial === "function" ? partial.call(inst, nextState, props, maskedLegacyContext) : partial;
                if (partialState != null) {
                  if (dontMutate) {
                    dontMutate = false;
                    nextState = assign({}, nextState, partialState);
                  } else {
                    assign(nextState, partialState);
                  }
                }
              }
              inst.state = nextState;
            }
          } else {
            internalInstance.queue = null;
          }
        }
        function mountClassInstance(instance, ctor, newProps, maskedLegacyContext) {
          {
            checkClassInstance(instance, ctor, newProps);
          }
          var initialState = instance.state !== void 0 ? instance.state : null;
          instance.updater = classComponentUpdater;
          instance.props = newProps;
          instance.state = initialState;
          var internalInstance = {
            queue: [],
            replace: false
          };
          set(instance, internalInstance);
          var contextType = ctor.contextType;
          if (typeof contextType === "object" && contextType !== null) {
            instance.context = readContext$1(contextType);
          } else {
            instance.context = maskedLegacyContext;
          }
          {
            if (instance.state === newProps) {
              var componentName = getComponentNameFromType(ctor) || "Component";
              if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
              }
            }
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          if (typeof getDerivedStateFromProps === "function") {
            instance.state = applyDerivedStateFromProps(instance, ctor, getDerivedStateFromProps, initialState, newProps);
          }
          if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
            callComponentWillMount(ctor, instance);
            processUpdateQueue(internalInstance, instance, newProps, maskedLegacyContext);
          }
        }
        var emptyTreeContext = {
          id: 1,
          overflow: ""
        };
        function getTreeId(context) {
          var overflow = context.overflow;
          var idWithLeadingBit = context.id;
          var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
          return id.toString(32) + overflow;
        }
        function pushTreeContext(baseContext, totalChildren, index) {
          var baseIdWithLeadingBit = baseContext.id;
          var baseOverflow = baseContext.overflow;
          var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
          var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
          var slot = index + 1;
          var length = getBitLength(totalChildren) + baseLength;
          if (length > 30) {
            var numberOfOverflowBits = baseLength - baseLength % 5;
            var newOverflowBits = (1 << numberOfOverflowBits) - 1;
            var newOverflow = (baseId & newOverflowBits).toString(32);
            var restOfBaseId = baseId >> numberOfOverflowBits;
            var restOfBaseLength = baseLength - numberOfOverflowBits;
            var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
            var restOfNewBits = slot << restOfBaseLength;
            var id = restOfNewBits | restOfBaseId;
            var overflow = newOverflow + baseOverflow;
            return {
              id: 1 << restOfLength | id,
              overflow
            };
          } else {
            var newBits = slot << baseLength;
            var _id = newBits | baseId;
            var _overflow = baseOverflow;
            return {
              id: 1 << length | _id,
              overflow: _overflow
            };
          }
        }
        function getBitLength(number) {
          return 32 - clz32(number);
        }
        function getLeadingBit(id) {
          return 1 << getBitLength(id) - 1;
        }
        var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
        var log = Math.log;
        var LN2 = Math.LN2;
        function clz32Fallback(x) {
          var asUint = x >>> 0;
          if (asUint === 0) {
            return 32;
          }
          return 31 - (log(asUint) / LN2 | 0) | 0;
        }
        var SuspenseException = new Error("Suspense Exception: This is not a real error! It's an implementation detail of `use` to interrupt the current render. You must either rethrow it immediately, or move the `use` call outside of the `try/catch` block. Capturing without rethrowing will lead to unexpected behavior.\n\nTo handle async errors, wrap your component in an error boundary, or call the promise's `.catch` method and pass the result to `use`");
        function createThenableState() {
          return [];
        }
        function noop$2() {
        }
        function trackUsedThenable(thenableState2, thenable, index) {
          var previous = thenableState2[index];
          if (previous === void 0) {
            thenableState2.push(thenable);
          } else {
            if (previous !== thenable) {
              thenable.then(noop$2, noop$2);
              thenable = previous;
            }
          }
          switch (thenable.status) {
            case "fulfilled": {
              var fulfilledValue = thenable.value;
              return fulfilledValue;
            }
            case "rejected": {
              var rejectedError = thenable.reason;
              throw rejectedError;
            }
            default: {
              if (typeof thenable.status === "string") ;
              else {
                var pendingThenable = thenable;
                pendingThenable.status = "pending";
                pendingThenable.then(function(fulfilledValue2) {
                  if (thenable.status === "pending") {
                    var fulfilledThenable2 = thenable;
                    fulfilledThenable2.status = "fulfilled";
                    fulfilledThenable2.value = fulfilledValue2;
                  }
                }, function(error2) {
                  if (thenable.status === "pending") {
                    var rejectedThenable2 = thenable;
                    rejectedThenable2.status = "rejected";
                    rejectedThenable2.reason = error2;
                  }
                });
                switch (thenable.status) {
                  case "fulfilled": {
                    var fulfilledThenable = thenable;
                    return fulfilledThenable.value;
                  }
                  case "rejected": {
                    var rejectedThenable = thenable;
                    throw rejectedThenable.reason;
                  }
                }
              }
              suspendedThenable = thenable;
              throw SuspenseException;
            }
          }
        }
        var suspendedThenable = null;
        function getSuspendedThenable() {
          if (suspendedThenable === null) {
            throw new Error("Expected a suspended thenable. This is a bug in React. Please file an issue.");
          }
          var thenable = suspendedThenable;
          suspendedThenable = null;
          return thenable;
        }
        function is(x, y) {
          return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
        }
        var objectIs = (
          // $FlowFixMe[method-unbinding]
          typeof Object.is === "function" ? Object.is : is
        );
        var currentlyRenderingComponent = null;
        var currentlyRenderingTask = null;
        var currentlyRenderingRequest = null;
        var currentlyRenderingKeyPath = null;
        var firstWorkInProgressHook = null;
        var workInProgressHook = null;
        var isReRender = false;
        var didScheduleRenderPhaseUpdate = false;
        var localIdCounter = 0;
        var formStateCounter = 0;
        var formStateMatchingIndex = -1;
        var thenableIndexCounter = 0;
        var thenableState = null;
        var renderPhaseUpdates = null;
        var numberOfReRenders = 0;
        var RE_RENDER_LIMIT = 25;
        var isInHookUserCodeInDev = false;
        var currentHookNameInDev;
        function resolveCurrentlyRenderingComponent() {
          if (currentlyRenderingComponent === null) {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
          {
            if (isInHookUserCodeInDev) {
              error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
            }
          }
          return currentlyRenderingComponent;
        }
        function areHookInputsEqual(nextDeps, prevDeps) {
          if (prevDeps === null) {
            {
              error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
            }
            return false;
          }
          {
            if (nextDeps.length !== prevDeps.length) {
              error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + nextDeps.join(", ") + "]", "[" + prevDeps.join(", ") + "]");
            }
          }
          for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
            if (objectIs(nextDeps[i], prevDeps[i])) {
              continue;
            }
            return false;
          }
          return true;
        }
        function createHook() {
          if (numberOfReRenders > 0) {
            throw new Error("Rendered more hooks than during the previous render");
          }
          return {
            memoizedState: null,
            queue: null,
            next: null
          };
        }
        function createWorkInProgressHook() {
          if (workInProgressHook === null) {
            if (firstWorkInProgressHook === null) {
              isReRender = false;
              firstWorkInProgressHook = workInProgressHook = createHook();
            } else {
              isReRender = true;
              workInProgressHook = firstWorkInProgressHook;
            }
          } else {
            if (workInProgressHook.next === null) {
              isReRender = false;
              workInProgressHook = workInProgressHook.next = createHook();
            } else {
              isReRender = true;
              workInProgressHook = workInProgressHook.next;
            }
          }
          return workInProgressHook;
        }
        function prepareToUseHooks(request, task, keyPath, componentIdentity, prevThenableState) {
          currentlyRenderingComponent = componentIdentity;
          currentlyRenderingTask = task;
          currentlyRenderingRequest = request;
          currentlyRenderingKeyPath = keyPath;
          {
            isInHookUserCodeInDev = false;
          }
          localIdCounter = 0;
          formStateCounter = 0;
          formStateMatchingIndex = -1;
          thenableIndexCounter = 0;
          thenableState = prevThenableState;
        }
        function finishHooks(Component, props, children, refOrContext) {
          while (didScheduleRenderPhaseUpdate) {
            didScheduleRenderPhaseUpdate = false;
            localIdCounter = 0;
            formStateCounter = 0;
            formStateMatchingIndex = -1;
            thenableIndexCounter = 0;
            numberOfReRenders += 1;
            workInProgressHook = null;
            children = Component(props, refOrContext);
          }
          resetHooksState();
          return children;
        }
        function getThenableStateAfterSuspending() {
          var state = thenableState;
          thenableState = null;
          return state;
        }
        function checkDidRenderIdHook() {
          var didRenderIdHook = localIdCounter !== 0;
          return didRenderIdHook;
        }
        function getFormStateCount() {
          return formStateCounter;
        }
        function getFormStateMatchingIndex() {
          return formStateMatchingIndex;
        }
        function resetHooksState() {
          {
            isInHookUserCodeInDev = false;
          }
          currentlyRenderingComponent = null;
          currentlyRenderingTask = null;
          currentlyRenderingRequest = null;
          currentlyRenderingKeyPath = null;
          didScheduleRenderPhaseUpdate = false;
          firstWorkInProgressHook = null;
          numberOfReRenders = 0;
          renderPhaseUpdates = null;
          workInProgressHook = null;
        }
        function readContext(context) {
          {
            if (isInHookUserCodeInDev) {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            }
          }
          return readContext$1(context);
        }
        function useContext(context) {
          {
            currentHookNameInDev = "useContext";
          }
          resolveCurrentlyRenderingComponent();
          return readContext$1(context);
        }
        function basicStateReducer(state, action) {
          return typeof action === "function" ? action(state) : action;
        }
        function useState(initialState) {
          {
            currentHookNameInDev = "useState";
          }
          return useReducer(
            basicStateReducer,
            // useReducer has a special case to support lazy useState initializers
            initialState
          );
        }
        function useReducer(reducer, initialArg, init) {
          {
            if (reducer !== basicStateReducer) {
              currentHookNameInDev = "useReducer";
            }
          }
          currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
          workInProgressHook = createWorkInProgressHook();
          if (isReRender) {
            var queue = workInProgressHook.queue;
            var dispatch = queue.dispatch;
            if (renderPhaseUpdates !== null) {
              var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
              if (firstRenderPhaseUpdate !== void 0) {
                renderPhaseUpdates.delete(queue);
                var newState = workInProgressHook.memoizedState;
                var update = firstRenderPhaseUpdate;
                do {
                  var action = update.action;
                  {
                    isInHookUserCodeInDev = true;
                  }
                  newState = reducer(newState, action);
                  {
                    isInHookUserCodeInDev = false;
                  }
                  update = update.next;
                } while (update !== null);
                workInProgressHook.memoizedState = newState;
                return [newState, dispatch];
              }
            }
            return [workInProgressHook.memoizedState, dispatch];
          } else {
            {
              isInHookUserCodeInDev = true;
            }
            var initialState;
            if (reducer === basicStateReducer) {
              initialState = typeof initialArg === "function" ? initialArg() : initialArg;
            } else {
              initialState = init !== void 0 ? init(initialArg) : initialArg;
            }
            {
              isInHookUserCodeInDev = false;
            }
            workInProgressHook.memoizedState = initialState;
            var _queue = workInProgressHook.queue = {
              last: null,
              dispatch: null
            };
            var _dispatch = _queue.dispatch = dispatchAction.bind(null, currentlyRenderingComponent, _queue);
            return [workInProgressHook.memoizedState, _dispatch];
          }
        }
        function useMemo(nextCreate, deps) {
          currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
          workInProgressHook = createWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          if (workInProgressHook !== null) {
            var prevState = workInProgressHook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
          }
          {
            isInHookUserCodeInDev = true;
          }
          var nextValue = nextCreate();
          {
            isInHookUserCodeInDev = false;
          }
          workInProgressHook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function useRef(initialValue) {
          currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
          workInProgressHook = createWorkInProgressHook();
          var previousRef = workInProgressHook.memoizedState;
          if (previousRef === null) {
            var ref = {
              current: initialValue
            };
            {
              Object.seal(ref);
            }
            workInProgressHook.memoizedState = ref;
            return ref;
          } else {
            return previousRef;
          }
        }
        function dispatchAction(componentIdentity, queue, action) {
          if (numberOfReRenders >= RE_RENDER_LIMIT) {
            throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
          }
          if (componentIdentity === currentlyRenderingComponent) {
            didScheduleRenderPhaseUpdate = true;
            var update = {
              action,
              next: null
            };
            if (renderPhaseUpdates === null) {
              renderPhaseUpdates = /* @__PURE__ */ new Map();
            }
            var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
            if (firstRenderPhaseUpdate === void 0) {
              renderPhaseUpdates.set(queue, update);
            } else {
              var lastRenderPhaseUpdate = firstRenderPhaseUpdate;
              while (lastRenderPhaseUpdate.next !== null) {
                lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              }
              lastRenderPhaseUpdate.next = update;
            }
          }
        }
        function useCallback(callback, deps) {
          return useMemo(function() {
            return callback;
          }, deps);
        }
        function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          if (getServerSnapshot === void 0) {
            throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
          }
          return getServerSnapshot();
        }
        function useDeferredValue(value, initialValue) {
          resolveCurrentlyRenderingComponent();
          {
            return value;
          }
        }
        function unsupportedStartTransition() {
          throw new Error("startTransition cannot be called during server rendering.");
        }
        function useTransition() {
          resolveCurrentlyRenderingComponent();
          return [false, unsupportedStartTransition];
        }
        function useHostTransitionStatus() {
          resolveCurrentlyRenderingComponent();
          return NotPendingTransition;
        }
        function unsupportedSetOptimisticState() {
          throw new Error("Cannot update optimistic state while rendering.");
        }
        function useOptimistic(passthrough, reducer) {
          resolveCurrentlyRenderingComponent();
          return [passthrough, unsupportedSetOptimisticState];
        }
        function createPostbackFormStateKey(permalink, componentKeyPath, hookIndex) {
          if (permalink !== void 0) {
            return "p" + permalink;
          } else {
            var keyPath = [componentKeyPath, null, hookIndex];
            var keyPathHash = createFastHashJS(JSON.stringify(keyPath));
            return "k" + keyPathHash;
          }
        }
        function useFormState(action, initialState, permalink) {
          resolveCurrentlyRenderingComponent();
          var formStateHookIndex = formStateCounter++;
          var request = currentlyRenderingRequest;
          var formAction = action.$$FORM_ACTION;
          if (typeof formAction === "function") {
            var nextPostbackStateKey = null;
            var state = initialState;
            var componentKeyPath = currentlyRenderingKeyPath;
            var postbackFormState = getFormState(request);
            var isSignatureEqual = action.$$IS_SIGNATURE_EQUAL;
            if (postbackFormState !== null && typeof isSignatureEqual === "function") {
              var postbackKey = postbackFormState[1];
              var postbackReferenceId = postbackFormState[2];
              var postbackBoundArity = postbackFormState[3];
              if (isSignatureEqual.call(action, postbackReferenceId, postbackBoundArity)) {
                nextPostbackStateKey = createPostbackFormStateKey(permalink, componentKeyPath, formStateHookIndex);
                if (postbackKey === nextPostbackStateKey) {
                  formStateMatchingIndex = formStateHookIndex;
                  state = postbackFormState[0];
                }
              }
            }
            var boundAction = action.bind(null, state);
            var dispatch = function(payload) {
              boundAction(payload);
            };
            if (typeof boundAction.$$FORM_ACTION === "function") {
              dispatch.$$FORM_ACTION = function(prefix2) {
                var metadata = boundAction.$$FORM_ACTION(prefix2);
                if (permalink !== void 0) {
                  {
                    checkAttributeStringCoercion(permalink, "target");
                  }
                  permalink += "";
                  metadata.action = permalink;
                }
                var formData = metadata.data;
                if (formData) {
                  if (nextPostbackStateKey === null) {
                    nextPostbackStateKey = createPostbackFormStateKey(permalink, componentKeyPath, formStateHookIndex);
                  }
                  formData.append("$ACTION_KEY", nextPostbackStateKey);
                }
                return metadata;
              };
            }
            return [state, dispatch];
          } else {
            var _boundAction = action.bind(null, initialState);
            var _dispatch2 = function(payload) {
              _boundAction(payload);
            };
            return [initialState, _dispatch2];
          }
        }
        function useId() {
          var task = currentlyRenderingTask;
          var treeId = getTreeId(task.treeContext);
          var resumableState = currentResumableState;
          if (resumableState === null) {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component.");
          }
          var localId = localIdCounter++;
          return makeId(resumableState, treeId, localId);
        }
        function use(usable) {
          if (usable !== null && typeof usable === "object") {
            if (typeof usable.then === "function") {
              var thenable = usable;
              return unwrapThenable(thenable);
            } else if (usable.$$typeof === REACT_CONTEXT_TYPE) {
              var context = usable;
              return readContext(context);
            }
          }
          throw new Error("An unsupported type was passed to use(): " + String(usable));
        }
        function unwrapThenable(thenable) {
          var index = thenableIndexCounter;
          thenableIndexCounter += 1;
          if (thenableState === null) {
            thenableState = createThenableState();
          }
          return trackUsedThenable(thenableState, thenable, index);
        }
        function unsupportedRefresh() {
          throw new Error("Cache cannot be refreshed during server rendering.");
        }
        function useCacheRefresh() {
          return unsupportedRefresh;
        }
        function noop$1() {
        }
        var HooksDispatcher = {
          readContext,
          use,
          useContext,
          useMemo,
          useReducer,
          useRef,
          useState,
          useInsertionEffect: noop$1,
          useLayoutEffect: noop$1,
          useCallback,
          // useImperativeHandle is not run in the server environment
          useImperativeHandle: noop$1,
          // Effects are not run in the server environment.
          useEffect: noop$1,
          // Debugging effect
          useDebugValue: noop$1,
          useDeferredValue,
          useTransition,
          useId,
          // Subscriptions are not setup in a server environment.
          useSyncExternalStore
        };
        {
          HooksDispatcher.useCacheRefresh = useCacheRefresh;
        }
        {
          HooksDispatcher.useHostTransitionStatus = useHostTransitionStatus;
        }
        {
          HooksDispatcher.useOptimistic = useOptimistic;
          HooksDispatcher.useFormState = useFormState;
        }
        var currentResumableState = null;
        function setCurrentResumableState(resumableState) {
          currentResumableState = resumableState;
        }
        function getCacheSignal() {
          throw new Error("Not implemented.");
        }
        function getCacheForType(resourceType) {
          throw new Error("Not implemented.");
        }
        var DefaultCacheDispatcher = {
          getCacheSignal,
          getCacheForType
        };
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: assign({}, props, {
                  value: prevLog
                }),
                info: assign({}, props, {
                  value: prevInfo
                }),
                warn: assign({}, props, {
                  value: prevWarn
                }),
                error: assign({}, props, {
                  value: prevError
                }),
                group: assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix;
        function describeBuiltInComponentFrame(name, ownerFn) {
          {
            if (prefix === void 0) {
              try {
                throw Error();
              } catch (x) {
                var match = x.stack.trim().match(/\n( *(at )?)/);
                prefix = match && match[1] || "";
              }
            }
            return "\n" + prefix + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) {
            return "";
          }
          {
            var frame = componentFrameCache.get(fn);
            if (frame !== void 0) {
              return frame;
            }
          }
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = null;
            disableLogs();
          }
          var RunInRootFrame = {
            DetermineComponentFrameRoot: function() {
              var control;
              try {
                if (construct) {
                  var Fake = function() {
                    throw Error();
                  };
                  Object.defineProperty(Fake.prototype, "props", {
                    set: function() {
                      throw Error();
                    }
                  });
                  if (typeof Reflect === "object" && Reflect.construct) {
                    try {
                      Reflect.construct(Fake, []);
                    } catch (x) {
                      control = x;
                    }
                    Reflect.construct(fn, [], Fake);
                  } else {
                    try {
                      Fake.call();
                    } catch (x) {
                      control = x;
                    }
                    fn.call(Fake.prototype);
                  }
                } else {
                  try {
                    throw Error();
                  } catch (x) {
                    control = x;
                  }
                  var maybePromise = fn();
                  if (maybePromise && typeof maybePromise.catch === "function") {
                    maybePromise.catch(function() {
                    });
                  }
                }
              } catch (sample) {
                if (sample && control && typeof sample.stack === "string") {
                  return [sample.stack, control.stack];
                }
              }
              return [null, null];
            }
          };
          RunInRootFrame.DetermineComponentFrameRoot.displayName = "DetermineComponentFrameRoot";
          var namePropDescriptor = Object.getOwnPropertyDescriptor(RunInRootFrame.DetermineComponentFrameRoot, "name");
          if (namePropDescriptor && namePropDescriptor.configurable) {
            Object.defineProperty(
              RunInRootFrame.DetermineComponentFrameRoot,
              // Configurable properties can be updated even if its writable descriptor
              // is set to `false`.
              // $FlowFixMe[cannot-write]
              "name",
              {
                value: "DetermineComponentFrameRoot"
              }
            );
          }
          try {
            var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(), sampleStack = _RunInRootFrame$Deter[0], controlStack = _RunInRootFrame$Deter[1];
            if (sampleStack && controlStack) {
              var sampleLines = sampleStack.split("\n");
              var controlLines = controlStack.split("\n");
              var s = 0;
              var c = 0;
              while (s < sampleLines.length && !sampleLines[s].includes("DetermineComponentFrameRoot")) {
                s++;
              }
              while (c < controlLines.length && !controlLines[c].includes("DetermineComponentFrameRoot")) {
                c++;
              }
              if (s === sampleLines.length || c === controlLines.length) {
                s = sampleLines.length - 1;
                c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
              }
              for (; s >= 1 && c >= 0; s--, c--) {
                if (sampleLines[s] !== controlLines[c]) {
                  if (s !== 1 || c !== 1) {
                    do {
                      s--;
                      c--;
                      if (c < 0 || sampleLines[s] !== controlLines[c]) {
                        var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                        if (fn.displayName && _frame.includes("<anonymous>")) {
                          _frame = _frame.replace("<anonymous>", fn.displayName);
                        }
                        if (true) {
                          if (typeof fn === "function") {
                            componentFrameCache.set(fn, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s >= 1 && c >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher$1.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn ? fn.displayName || fn.name : "";
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
          {
            if (typeof fn === "function") {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeClassComponentFrame(ctor, ownerFn) {
          {
            return describeNativeComponentFrame(ctor, true);
          }
        }
        function describeFunctionComponentFrame(fn, ownerFn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }
        function getStackByComponentStackNode(componentStack) {
          try {
            var info = "";
            var node = componentStack;
            do {
              switch (node.tag) {
                case 0:
                  info += describeBuiltInComponentFrame(node.type, null);
                  break;
                case 1:
                  info += describeFunctionComponentFrame(node.type, null);
                  break;
                case 2:
                  info += describeClassComponentFrame(node.type, null);
                  break;
              }
              node = node.parent;
            } while (node);
            return info;
          } catch (x) {
            return "\nError generating stack: " + x.message + "\n" + x.stack;
          }
        }
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
        var ReactCurrentCache = ReactSharedInternals.ReactCurrentCache;
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var CLIENT_RENDERED = 4;
        var PENDING = 0;
        var COMPLETED = 1;
        var FLUSHED = 2;
        var ABORTED = 3;
        var ERRORED = 4;
        var POSTPONED = 5;
        var OPEN = 0;
        var CLOSING = 1;
        var CLOSED = 2;
        var DEFAULT_PROGRESSIVE_CHUNK_SIZE = 12800;
        function defaultErrorHandler(error2) {
          console["error"](error2);
          return null;
        }
        function noop() {
        }
        function createRequest(children, resumableState, renderState, rootFormatContext, progressiveChunkSize, onError, onAllReady, onShellReady, onShellError, onFatalError, onPostpone, formState) {
          prepareHostDispatcher();
          var pingedTasks = [];
          var abortSet = /* @__PURE__ */ new Set();
          var request = {
            destination: null,
            flushScheduled: false,
            resumableState,
            renderState,
            rootFormatContext,
            progressiveChunkSize: progressiveChunkSize === void 0 ? DEFAULT_PROGRESSIVE_CHUNK_SIZE : progressiveChunkSize,
            status: OPEN,
            fatalError: null,
            nextSegmentId: 0,
            allPendingTasks: 0,
            pendingRootTasks: 0,
            completedRootSegment: null,
            abortableTasks: abortSet,
            pingedTasks,
            clientRenderedBoundaries: [],
            completedBoundaries: [],
            partialBoundaries: [],
            trackedPostpones: null,
            onError: onError === void 0 ? defaultErrorHandler : onError,
            onPostpone: onPostpone === void 0 ? noop : onPostpone,
            onAllReady: onAllReady === void 0 ? noop : onAllReady,
            onShellReady: onShellReady === void 0 ? noop : onShellReady,
            onShellError: onShellError === void 0 ? noop : onShellError,
            onFatalError: onFatalError === void 0 ? noop : onFatalError,
            formState: formState === void 0 ? null : formState
          };
          var rootSegment = createPendingSegment(
            request,
            0,
            null,
            rootFormatContext,
            // Root segments are never embedded in Text on either edge
            false,
            false
          );
          rootSegment.parentFlushed = true;
          var rootTask = createRenderTask(request, null, children, -1, null, rootSegment, null, abortSet, null, rootFormatContext, emptyContextObject, rootContextSnapshot, emptyTreeContext, null, false);
          pingedTasks.push(rootTask);
          return request;
        }
        var currentRequest = null;
        function resolveRequest() {
          if (currentRequest) return currentRequest;
          return null;
        }
        function pingTask(request, task) {
          var pingedTasks = request.pingedTasks;
          pingedTasks.push(task);
          if (request.pingedTasks.length === 1) {
            request.flushScheduled = request.destination !== null;
            scheduleWork(function() {
              return performWork(request);
            });
          }
        }
        function createSuspenseBoundary(request, fallbackAbortableTasks) {
          return {
            status: PENDING,
            rootSegmentID: -1,
            parentFlushed: false,
            pendingTasks: 0,
            completedSegments: [],
            byteSize: 0,
            fallbackAbortableTasks,
            errorDigest: null,
            contentState: createHoistableState(),
            fallbackState: createHoistableState(),
            trackedContentKeyPath: null,
            trackedFallbackNode: null
          };
        }
        function createRenderTask(request, thenableState2, node, childIndex, blockedBoundary, blockedSegment, hoistableState, abortSet, keyPath, formatContext, legacyContext, context, treeContext, componentStack, isFallback) {
          request.allPendingTasks++;
          if (blockedBoundary === null) {
            request.pendingRootTasks++;
          } else {
            blockedBoundary.pendingTasks++;
          }
          var task = {
            replay: null,
            node,
            childIndex,
            ping: function() {
              return pingTask(request, task);
            },
            blockedBoundary,
            blockedSegment,
            hoistableState,
            abortSet,
            keyPath,
            formatContext,
            legacyContext,
            context,
            treeContext,
            componentStack,
            thenableState: thenableState2,
            isFallback
          };
          abortSet.add(task);
          return task;
        }
        function createReplayTask(request, thenableState2, replay, node, childIndex, blockedBoundary, hoistableState, abortSet, keyPath, formatContext, legacyContext, context, treeContext, componentStack, isFallback) {
          request.allPendingTasks++;
          if (blockedBoundary === null) {
            request.pendingRootTasks++;
          } else {
            blockedBoundary.pendingTasks++;
          }
          replay.pendingTasks++;
          var task = {
            replay,
            node,
            childIndex,
            ping: function() {
              return pingTask(request, task);
            },
            blockedBoundary,
            blockedSegment: null,
            hoistableState,
            abortSet,
            keyPath,
            formatContext,
            legacyContext,
            context,
            treeContext,
            componentStack,
            thenableState: thenableState2,
            isFallback
          };
          abortSet.add(task);
          return task;
        }
        function createPendingSegment(request, index, boundary, parentFormatContext, lastPushedText, textEmbedded) {
          return {
            status: PENDING,
            id: -1,
            // lazily assigned later
            index,
            parentFlushed: false,
            chunks: [],
            children: [],
            parentFormatContext,
            boundary,
            lastPushedText,
            textEmbedded
          };
        }
        var currentTaskInDEV = null;
        function getCurrentStackInDEV() {
          {
            if (currentTaskInDEV === null || currentTaskInDEV.componentStack === null) {
              return "";
            }
            return getStackByComponentStackNode(currentTaskInDEV.componentStack);
          }
        }
        function getStackFromNode(stackNode) {
          return getStackByComponentStackNode(stackNode);
        }
        function createBuiltInComponentStack(task, type) {
          return {
            tag: 0,
            parent: task.componentStack,
            type
          };
        }
        function createFunctionComponentStack(task, type) {
          return {
            tag: 1,
            parent: task.componentStack,
            type
          };
        }
        function createClassComponentStack(task, type) {
          return {
            tag: 2,
            parent: task.componentStack,
            type
          };
        }
        function getThrownInfo(request, node) {
          if (node && // Always produce a stack in dev
          true) {
            return {
              componentStack: getStackFromNode(node)
            };
          } else {
            return {};
          }
        }
        function encodeErrorForBoundary(boundary, digest, error2, thrownInfo) {
          boundary.errorDigest = digest;
          {
            var message;
            if (error2 instanceof Error) {
              message = String(error2.message);
            } else if (typeof error2 === "object" && error2 !== null) {
              message = describeObjectForErrorMessage(error2);
            } else {
              message = String(error2);
            }
            boundary.errorMessage = message;
            boundary.errorComponentStack = thrownInfo.componentStack;
          }
        }
        function logRecoverableError(request, error$1, errorInfo) {
          var errorDigest = request.onError(error$1, errorInfo);
          if (errorDigest != null && typeof errorDigest !== "string") {
            {
              error('onError returned something with a type other than "string". onError should return a string and may return null or undefined but must not return anything else. It received something of type "%s" instead', typeof errorDigest);
            }
            return;
          }
          return errorDigest;
        }
        function fatalError(request, error2) {
          var onShellError = request.onShellError;
          onShellError(error2);
          var onFatalError = request.onFatalError;
          onFatalError(error2);
          if (request.destination !== null) {
            request.status = CLOSED;
            closeWithError(request.destination, error2);
          } else {
            request.status = CLOSING;
            request.fatalError = error2;
          }
        }
        function renderSuspenseBoundary(request, someTask, keyPath, props) {
          if (someTask.replay !== null) {
            var _prevKeyPath = someTask.keyPath;
            someTask.keyPath = keyPath;
            var _content = props.children;
            try {
              renderNode(request, someTask, _content, -1);
            } finally {
              someTask.keyPath = _prevKeyPath;
            }
            return;
          }
          var task = someTask;
          var previousComponentStack = task.componentStack;
          var suspenseComponentStack = task.componentStack = createBuiltInComponentStack(task, "Suspense");
          var prevKeyPath = task.keyPath;
          var parentBoundary = task.blockedBoundary;
          var parentHoistableState = task.hoistableState;
          var parentSegment = task.blockedSegment;
          var fallback = props.fallback;
          var content = props.children;
          var fallbackAbortSet = /* @__PURE__ */ new Set();
          var newBoundary = createSuspenseBoundary(request, fallbackAbortSet);
          if (request.trackedPostpones !== null) {
            newBoundary.trackedContentKeyPath = keyPath;
          }
          var insertionIndex = parentSegment.chunks.length;
          var boundarySegment = createPendingSegment(
            request,
            insertionIndex,
            newBoundary,
            task.formatContext,
            // boundaries never require text embedding at their edges because comment nodes bound them
            false,
            false
          );
          parentSegment.children.push(boundarySegment);
          parentSegment.lastPushedText = false;
          var contentRootSegment = createPendingSegment(
            request,
            0,
            null,
            task.formatContext,
            // boundaries never require text embedding at their edges because comment nodes bound them
            false,
            false
          );
          contentRootSegment.parentFlushed = true;
          task.blockedBoundary = newBoundary;
          task.hoistableState = newBoundary.contentState;
          task.blockedSegment = contentRootSegment;
          task.keyPath = keyPath;
          try {
            renderNode(request, task, content, -1);
            pushSegmentFinale(contentRootSegment.chunks, request.renderState, contentRootSegment.lastPushedText, contentRootSegment.textEmbedded);
            contentRootSegment.status = COMPLETED;
            queueCompletedSegment(newBoundary, contentRootSegment);
            if (newBoundary.pendingTasks === 0 && newBoundary.status === PENDING) {
              newBoundary.status = COMPLETED;
              task.componentStack = previousComponentStack;
              return;
            }
          } catch (error2) {
            contentRootSegment.status = ERRORED;
            newBoundary.status = CLIENT_RENDERED;
            var thrownInfo = getThrownInfo(request, task.componentStack);
            var errorDigest;
            {
              errorDigest = logRecoverableError(request, error2, thrownInfo);
            }
            encodeErrorForBoundary(newBoundary, errorDigest, error2, thrownInfo);
            untrackBoundary(request, newBoundary);
          } finally {
            task.blockedBoundary = parentBoundary;
            task.hoistableState = parentHoistableState;
            task.blockedSegment = parentSegment;
            task.keyPath = prevKeyPath;
            task.componentStack = previousComponentStack;
          }
          var fallbackKeyPath = [keyPath[0], "Suspense Fallback", keyPath[2]];
          var trackedPostpones = request.trackedPostpones;
          if (trackedPostpones !== null) {
            var fallbackReplayNode = [fallbackKeyPath[1], fallbackKeyPath[2], [], null];
            trackedPostpones.workingMap.set(fallbackKeyPath, fallbackReplayNode);
            if (newBoundary.status === POSTPONED) {
              var boundaryReplayNode = trackedPostpones.workingMap.get(keyPath);
              boundaryReplayNode[4] = fallbackReplayNode;
            } else {
              newBoundary.trackedFallbackNode = fallbackReplayNode;
            }
          }
          var suspendedFallbackTask = createRenderTask(
            request,
            null,
            fallback,
            -1,
            parentBoundary,
            boundarySegment,
            newBoundary.fallbackState,
            fallbackAbortSet,
            fallbackKeyPath,
            task.formatContext,
            task.legacyContext,
            task.context,
            task.treeContext,
            // This stack should be the Suspense boundary stack because while the fallback is actually a child segment
            // of the parent boundary from a component standpoint the fallback is a child of the Suspense boundary itself
            suspenseComponentStack,
            true
          );
          request.pingedTasks.push(suspendedFallbackTask);
        }
        function replaySuspenseBoundary(request, task, keyPath, props, id, childNodes, childSlots, fallbackNodes, fallbackSlots) {
          var previousComponentStack = task.componentStack;
          var suspenseComponentStack = task.componentStack = createBuiltInComponentStack(task, "Suspense");
          var prevKeyPath = task.keyPath;
          var previousReplaySet = task.replay;
          var parentBoundary = task.blockedBoundary;
          var parentHoistableState = task.hoistableState;
          var content = props.children;
          var fallback = props.fallback;
          var fallbackAbortSet = /* @__PURE__ */ new Set();
          var resumedBoundary = createSuspenseBoundary(request, fallbackAbortSet);
          resumedBoundary.parentFlushed = true;
          resumedBoundary.rootSegmentID = id;
          task.blockedBoundary = resumedBoundary;
          task.hoistableState = resumedBoundary.contentState;
          task.replay = {
            nodes: childNodes,
            slots: childSlots,
            pendingTasks: 1
          };
          try {
            renderNode(request, task, content, -1);
            if (task.replay.pendingTasks === 1 && task.replay.nodes.length > 0) {
              throw new Error("Couldn't find all resumable slots by key/index during replaying. The tree doesn't match so React will fallback to client rendering.");
            }
            task.replay.pendingTasks--;
            if (resumedBoundary.pendingTasks === 0 && resumedBoundary.status === PENDING) {
              resumedBoundary.status = COMPLETED;
              request.completedBoundaries.push(resumedBoundary);
              return;
            }
          } catch (error2) {
            resumedBoundary.status = CLIENT_RENDERED;
            var thrownInfo = getThrownInfo(request, task.componentStack);
            var errorDigest;
            {
              errorDigest = logRecoverableError(request, error2, thrownInfo);
            }
            encodeErrorForBoundary(resumedBoundary, errorDigest, error2, thrownInfo);
            task.replay.pendingTasks--;
            request.clientRenderedBoundaries.push(resumedBoundary);
          } finally {
            task.blockedBoundary = parentBoundary;
            task.hoistableState = parentHoistableState;
            task.replay = previousReplaySet;
            task.keyPath = prevKeyPath;
            task.componentStack = previousComponentStack;
          }
          var fallbackKeyPath = [keyPath[0], "Suspense Fallback", keyPath[2]];
          var fallbackReplay = {
            nodes: fallbackNodes,
            slots: fallbackSlots,
            pendingTasks: 0
          };
          var suspendedFallbackTask = createReplayTask(
            request,
            null,
            fallbackReplay,
            fallback,
            -1,
            parentBoundary,
            resumedBoundary.fallbackState,
            fallbackAbortSet,
            fallbackKeyPath,
            task.formatContext,
            task.legacyContext,
            task.context,
            task.treeContext,
            // This stack should be the Suspense boundary stack because while the fallback is actually a child segment
            // of the parent boundary from a component standpoint the fallback is a child of the Suspense boundary itself
            suspenseComponentStack,
            true
          );
          request.pingedTasks.push(suspendedFallbackTask);
        }
        function renderHostElement(request, task, keyPath, type, props) {
          var previousComponentStack = task.componentStack;
          task.componentStack = createBuiltInComponentStack(task, type);
          var segment = task.blockedSegment;
          if (segment === null) {
            var children = props.children;
            var prevContext = task.formatContext;
            var prevKeyPath = task.keyPath;
            task.formatContext = getChildFormatContext(prevContext, type, props);
            task.keyPath = keyPath;
            renderNode(request, task, children, -1);
            task.formatContext = prevContext;
            task.keyPath = prevKeyPath;
          } else {
            var _children = pushStartInstance(segment.chunks, type, props, request.resumableState, request.renderState, task.hoistableState, task.formatContext, segment.lastPushedText, task.isFallback);
            segment.lastPushedText = false;
            var _prevContext = task.formatContext;
            var _prevKeyPath2 = task.keyPath;
            task.formatContext = getChildFormatContext(_prevContext, type, props);
            task.keyPath = keyPath;
            renderNode(request, task, _children, -1);
            task.formatContext = _prevContext;
            task.keyPath = _prevKeyPath2;
            pushEndInstance(segment.chunks, type, props, request.resumableState, _prevContext);
            segment.lastPushedText = false;
          }
          task.componentStack = previousComponentStack;
        }
        function shouldConstruct(Component) {
          return Component.prototype && Component.prototype.isReactComponent;
        }
        function renderWithHooks(request, task, keyPath, Component, props, secondArg) {
          var prevThenableState = task.thenableState;
          task.thenableState = null;
          var componentIdentity = {};
          prepareToUseHooks(request, task, keyPath, componentIdentity, prevThenableState);
          var result = Component(props, secondArg);
          return finishHooks(Component, props, result, secondArg);
        }
        function finishClassComponent(request, task, keyPath, instance, Component, props) {
          var nextChildren = instance.render();
          {
            if (instance.props !== props) {
              if (!didWarnAboutReassigningProps) {
                error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromType(Component) || "a component");
              }
              didWarnAboutReassigningProps = true;
            }
          }
          {
            var childContextTypes = Component.childContextTypes;
            if (childContextTypes !== null && childContextTypes !== void 0) {
              var previousContext = task.legacyContext;
              var mergedContext = processChildContext(instance, Component, previousContext, childContextTypes);
              task.legacyContext = mergedContext;
              renderNodeDestructive(request, task, nextChildren, -1);
              task.legacyContext = previousContext;
              return;
            }
          }
          var prevKeyPath = task.keyPath;
          task.keyPath = keyPath;
          renderNodeDestructive(request, task, nextChildren, -1);
          task.keyPath = prevKeyPath;
        }
        function renderClassComponent(request, task, keyPath, Component, props) {
          var previousComponentStack = task.componentStack;
          task.componentStack = createClassComponentStack(task, Component);
          var maskedContext = getMaskedContext(Component, task.legacyContext);
          var instance = constructClassInstance(Component, props, maskedContext);
          mountClassInstance(instance, Component, props, maskedContext);
          finishClassComponent(request, task, keyPath, instance, Component, props);
          task.componentStack = previousComponentStack;
        }
        var didWarnAboutBadClass = {};
        var didWarnAboutModulePatternComponent = {};
        var didWarnAboutContextTypeOnFunctionComponent = {};
        var didWarnAboutGetDerivedStateOnFunctionComponent = {};
        var didWarnAboutReassigningProps = false;
        var didWarnAboutDefaultPropsOnFunctionComponent = {};
        var didWarnAboutGenerators = false;
        var didWarnAboutMaps = false;
        function renderIndeterminateComponent(request, task, keyPath, Component, props) {
          var legacyContext;
          {
            legacyContext = getMaskedContext(Component, task.legacyContext);
          }
          var previousComponentStack = task.componentStack;
          task.componentStack = createFunctionComponentStack(task, Component);
          {
            if (Component.prototype && typeof Component.prototype.render === "function") {
              var componentName = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutBadClass[componentName]) {
                error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                didWarnAboutBadClass[componentName] = true;
              }
            }
          }
          var value = renderWithHooks(request, task, keyPath, Component, props, legacyContext);
          var hasId = checkDidRenderIdHook();
          var formStateCount = getFormStateCount();
          var formStateMatchingIndex2 = getFormStateMatchingIndex();
          {
            if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
              var _componentName = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                didWarnAboutModulePatternComponent[_componentName] = true;
              }
            }
          }
          if (
            // Run these checks in production only if the flag is off.
            // Eventually we'll delete this branch altogether.
            typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0
          ) {
            {
              var _componentName2 = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName2]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                didWarnAboutModulePatternComponent[_componentName2] = true;
              }
            }
            mountClassInstance(value, Component, props, legacyContext);
            finishClassComponent(request, task, keyPath, value, Component, props);
          } else {
            {
              validateFunctionComponentInDev(Component);
            }
            finishFunctionComponent(request, task, keyPath, value, hasId, formStateCount, formStateMatchingIndex2);
          }
          task.componentStack = previousComponentStack;
        }
        function finishFunctionComponent(request, task, keyPath, children, hasId, formStateCount, formStateMatchingIndex2) {
          var didEmitFormStateMarkers = false;
          if (formStateCount !== 0 && request.formState !== null) {
            var segment = task.blockedSegment;
            if (segment === null) ;
            else {
              didEmitFormStateMarkers = true;
              var target = segment.chunks;
              for (var i = 0; i < formStateCount; i++) {
                if (i === formStateMatchingIndex2) {
                  pushFormStateMarkerIsMatching(target);
                } else {
                  pushFormStateMarkerIsNotMatching(target);
                }
              }
            }
          }
          var prevKeyPath = task.keyPath;
          task.keyPath = keyPath;
          if (hasId) {
            var prevTreeContext = task.treeContext;
            var totalChildren = 1;
            var index = 0;
            task.treeContext = pushTreeContext(prevTreeContext, totalChildren, index);
            renderNode(request, task, children, -1);
            task.treeContext = prevTreeContext;
          } else if (didEmitFormStateMarkers) {
            renderNode(request, task, children, -1);
          } else {
            renderNodeDestructive(request, task, children, -1);
          }
          task.keyPath = prevKeyPath;
        }
        function validateFunctionComponentInDev(Component) {
          {
            if (Component) {
              if (Component.childContextTypes) {
                error("childContextTypes cannot be defined on a function component.\n  %s.childContextTypes = ...", Component.displayName || Component.name || "Component");
              }
            }
            if (Component.defaultProps !== void 0) {
              var componentName = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
                error("%s: Support for defaultProps will be removed from function components in a future major release. Use JavaScript default parameters instead.", componentName);
                didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
              }
            }
            if (typeof Component.getDerivedStateFromProps === "function") {
              var _componentName3 = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
              }
            }
            if (typeof Component.contextType === "object" && Component.contextType !== null) {
              var _componentName4 = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                error("%s: Function components do not support contextType.", _componentName4);
                didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
              }
            }
          }
        }
        function resolveDefaultProps(Component, baseProps) {
          if (Component && Component.defaultProps) {
            var props = assign({}, baseProps);
            var defaultProps = Component.defaultProps;
            for (var propName in defaultProps) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps[propName];
              }
            }
            return props;
          }
          return baseProps;
        }
        function renderForwardRef(request, task, keyPath, type, props, ref) {
          var previousComponentStack = task.componentStack;
          task.componentStack = createFunctionComponentStack(task, type.render);
          var propsWithoutRef;
          {
            propsWithoutRef = props;
          }
          var children = renderWithHooks(request, task, keyPath, type.render, propsWithoutRef, ref);
          var hasId = checkDidRenderIdHook();
          var formStateCount = getFormStateCount();
          var formStateMatchingIndex2 = getFormStateMatchingIndex();
          finishFunctionComponent(request, task, keyPath, children, hasId, formStateCount, formStateMatchingIndex2);
          task.componentStack = previousComponentStack;
        }
        function renderMemo(request, task, keyPath, type, props, ref) {
          var innerType = type.type;
          var resolvedProps = resolveDefaultProps(innerType, props);
          renderElement(request, task, keyPath, innerType, resolvedProps, ref);
        }
        function renderContextConsumer(request, task, keyPath, context, props) {
          var render = props.children;
          {
            if (typeof render !== "function") {
              error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
            }
          }
          var newValue = readContext$1(context);
          var newChildren = render(newValue);
          var prevKeyPath = task.keyPath;
          task.keyPath = keyPath;
          renderNodeDestructive(request, task, newChildren, -1);
          task.keyPath = prevKeyPath;
        }
        function renderContextProvider(request, task, keyPath, context, props) {
          var value = props.value;
          var children = props.children;
          var prevSnapshot;
          {
            prevSnapshot = task.context;
          }
          var prevKeyPath = task.keyPath;
          task.context = pushProvider(context, value);
          task.keyPath = keyPath;
          renderNodeDestructive(request, task, children, -1);
          task.context = popProvider(context);
          task.keyPath = prevKeyPath;
          {
            if (prevSnapshot !== task.context) {
              error("Popping the context provider did not return back to the original snapshot. This is a bug in React.");
            }
          }
        }
        function renderLazyComponent(request, task, keyPath, lazyComponent, props, ref) {
          var previousComponentStack = task.componentStack;
          task.componentStack = createBuiltInComponentStack(task, "Lazy");
          var payload = lazyComponent._payload;
          var init = lazyComponent._init;
          var Component = init(payload);
          var resolvedProps = resolveDefaultProps(Component, props);
          renderElement(request, task, keyPath, Component, resolvedProps, ref);
          task.componentStack = previousComponentStack;
        }
        function renderOffscreen(request, task, keyPath, props) {
          var mode = props.mode;
          if (mode === "hidden") ;
          else {
            var prevKeyPath = task.keyPath;
            task.keyPath = keyPath;
            renderNodeDestructive(request, task, props.children, -1);
            task.keyPath = prevKeyPath;
          }
        }
        function renderElement(request, task, keyPath, type, props, ref) {
          if (typeof type === "function") {
            if (shouldConstruct(type)) {
              renderClassComponent(request, task, keyPath, type, props);
              return;
            } else {
              renderIndeterminateComponent(request, task, keyPath, type, props);
              return;
            }
          }
          if (typeof type === "string") {
            renderHostElement(request, task, keyPath, type, props);
            return;
          }
          switch (type) {
            case REACT_LEGACY_HIDDEN_TYPE:
            case REACT_DEBUG_TRACING_MODE_TYPE:
            case REACT_STRICT_MODE_TYPE:
            case REACT_PROFILER_TYPE:
            case REACT_FRAGMENT_TYPE: {
              var prevKeyPath = task.keyPath;
              task.keyPath = keyPath;
              renderNodeDestructive(request, task, props.children, -1);
              task.keyPath = prevKeyPath;
              return;
            }
            case REACT_OFFSCREEN_TYPE: {
              renderOffscreen(request, task, keyPath, props);
              return;
            }
            case REACT_SUSPENSE_LIST_TYPE: {
              var preiousComponentStack = task.componentStack;
              task.componentStack = createBuiltInComponentStack(task, "SuspenseList");
              var _prevKeyPath3 = task.keyPath;
              task.keyPath = keyPath;
              renderNodeDestructive(request, task, props.children, -1);
              task.keyPath = _prevKeyPath3;
              task.componentStack = preiousComponentStack;
              return;
            }
            case REACT_SCOPE_TYPE: {
              throw new Error("ReactDOMServer does not yet support scope components.");
            }
            case REACT_SUSPENSE_TYPE: {
              {
                renderSuspenseBoundary(request, task, keyPath, props);
              }
              return;
            }
          }
          if (typeof type === "object" && type !== null) {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE: {
                renderForwardRef(request, task, keyPath, type, props, ref);
                return;
              }
              case REACT_MEMO_TYPE: {
                renderMemo(request, task, keyPath, type, props, ref);
                return;
              }
              case REACT_PROVIDER_TYPE: {
                {
                  var context = type._context;
                  renderContextProvider(request, task, keyPath, context, props);
                  return;
                }
              }
              case REACT_CONTEXT_TYPE: {
                {
                  var _context2 = type;
                  {
                    if (_context2._context !== void 0) {
                      _context2 = _context2._context;
                    }
                  }
                  renderContextConsumer(request, task, keyPath, _context2, props);
                  return;
                }
              }
              case REACT_CONSUMER_TYPE:
              case REACT_LAZY_TYPE: {
                renderLazyComponent(request, task, keyPath, type, props);
                return;
              }
            }
          }
          var info = "";
          {
            if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
              info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            }
          }
          throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
        }
        function resumeNode(request, task, segmentId, node, childIndex) {
          var prevReplay = task.replay;
          var blockedBoundary = task.blockedBoundary;
          var resumedSegment = createPendingSegment(request, 0, null, task.formatContext, false, false);
          resumedSegment.id = segmentId;
          resumedSegment.parentFlushed = true;
          try {
            var renderTask = task;
            renderTask.replay = null;
            renderTask.blockedSegment = resumedSegment;
            renderNode(request, task, node, childIndex);
            resumedSegment.status = COMPLETED;
            if (blockedBoundary === null) {
              request.completedRootSegment = resumedSegment;
            } else {
              queueCompletedSegment(blockedBoundary, resumedSegment);
              if (blockedBoundary.parentFlushed) {
                request.partialBoundaries.push(blockedBoundary);
              }
            }
          } finally {
            task.replay = prevReplay;
            task.blockedSegment = null;
          }
        }
        function replayElement(request, task, keyPath, name, keyOrIndex, childIndex, type, props, ref, replay) {
          var replayNodes = replay.nodes;
          for (var i = 0; i < replayNodes.length; i++) {
            var node = replayNodes[i];
            if (keyOrIndex !== node[1]) {
              continue;
            }
            if (node.length === 4) {
              if (name !== null && name !== node[0]) {
                throw new Error("Expected the resume to render <" + node[0] + "> in this slot but instead it rendered <" + name + ">. The tree doesn't match so React will fallback to client rendering.");
              }
              var childNodes = node[2];
              var childSlots = node[3];
              var currentNode = task.node;
              task.replay = {
                nodes: childNodes,
                slots: childSlots,
                pendingTasks: 1
              };
              try {
                renderElement(request, task, keyPath, type, props, ref);
                if (task.replay.pendingTasks === 1 && task.replay.nodes.length > 0) {
                  throw new Error("Couldn't find all resumable slots by key/index during replaying. The tree doesn't match so React will fallback to client rendering.");
                }
                task.replay.pendingTasks--;
              } catch (x) {
                if (typeof x === "object" && x !== null && (x === SuspenseException || typeof x.then === "function")) {
                  if (task.node === currentNode) {
                    task.replay = replay;
                  }
                  throw x;
                }
                task.replay.pendingTasks--;
                var thrownInfo = getThrownInfo(request, task.componentStack);
                erroredReplay(request, task.blockedBoundary, x, thrownInfo, childNodes, childSlots);
              }
              task.replay = replay;
            } else {
              if (type !== REACT_SUSPENSE_TYPE) {
                var expectedType = "Suspense";
                throw new Error("Expected the resume to render <" + expectedType + "> in this slot but instead it rendered <" + (getComponentNameFromType(type) || "Unknown") + ">. The tree doesn't match so React will fallback to client rendering.");
              }
              replaySuspenseBoundary(request, task, keyPath, props, node[5], node[2], node[3], node[4] === null ? [] : node[4][2], node[4] === null ? null : node[4][3]);
            }
            replayNodes.splice(i, 1);
            return;
          }
        }
        function validateIterable(iterable, iteratorFn) {
          {
            if (typeof Symbol === "function" && iterable[Symbol.toStringTag] === "Generator") {
              if (!didWarnAboutGenerators) {
                error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
              }
              didWarnAboutGenerators = true;
            }
            if (iterable.entries === iteratorFn) {
              if (!didWarnAboutMaps) {
                error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
              }
              didWarnAboutMaps = true;
            }
          }
        }
        function warnOnFunctionType(invalidChild) {
          {
            var name = invalidChild.displayName || invalidChild.name || "Component";
            error("Functions are not valid as a React child. This may happen if you return %s instead of <%s /> from render. Or maybe you meant to call this function rather than return it.", name, name);
          }
        }
        function warnOnSymbolType(invalidChild) {
          {
            var name = String(invalidChild);
            error("Symbols are not valid as a React child.\n  %s", name);
          }
        }
        function renderNodeDestructive(request, task, node, childIndex) {
          if (task.replay !== null && typeof task.replay.slots === "number") {
            var resumeSegmentID = task.replay.slots;
            resumeNode(request, task, resumeSegmentID, node, childIndex);
            return;
          }
          task.node = node;
          task.childIndex = childIndex;
          if (node === null) {
            return;
          }
          if (typeof node === "object") {
            switch (node.$$typeof) {
              case REACT_ELEMENT_TYPE: {
                var element = node;
                var type = element.type;
                var key = element.key;
                var props = element.props;
                var ref;
                {
                  ref = element.ref;
                }
                var name = getComponentNameFromType(type);
                var keyOrIndex = key == null ? childIndex === -1 ? 0 : childIndex : key;
                var keyPath = [task.keyPath, name, keyOrIndex];
                if (task.replay !== null) {
                  replayElement(request, task, keyPath, name, keyOrIndex, childIndex, type, props, ref, task.replay);
                } else {
                  renderElement(request, task, keyPath, type, props, ref);
                }
                return;
              }
              case REACT_PORTAL_TYPE:
                throw new Error("Portals are not currently supported by the server renderer. Render them conditionally so that they only appear on the client render.");
              case REACT_LAZY_TYPE: {
                var previousComponentStack = task.componentStack;
                task.componentStack = createBuiltInComponentStack(task, "Lazy");
                var lazyNode = node;
                var payload = lazyNode._payload;
                var init = lazyNode._init;
                var resolvedNode = init(payload);
                task.componentStack = previousComponentStack;
                renderNodeDestructive(request, task, resolvedNode, childIndex);
                return;
              }
            }
            if (isArray(node)) {
              renderChildrenArray(request, task, node, childIndex);
              return;
            }
            var iteratorFn = getIteratorFn(node);
            if (iteratorFn) {
              {
                validateIterable(node, iteratorFn);
              }
              var iterator = iteratorFn.call(node);
              if (iterator) {
                var step = iterator.next();
                if (!step.done) {
                  var children = [];
                  do {
                    children.push(step.value);
                    step = iterator.next();
                  } while (!step.done);
                  renderChildrenArray(request, task, children, childIndex);
                  return;
                }
                return;
              }
            }
            var maybeUsable = node;
            if (typeof maybeUsable.then === "function") {
              task.thenableState = null;
              var thenable = maybeUsable;
              return renderNodeDestructive(request, task, unwrapThenable(thenable), childIndex);
            }
            if (maybeUsable.$$typeof === REACT_CONTEXT_TYPE) {
              var context = maybeUsable;
              return renderNodeDestructive(request, task, readContext$1(context), childIndex);
            }
            var childString = Object.prototype.toString.call(node);
            throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(node).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
          }
          if (typeof node === "string") {
            var segment = task.blockedSegment;
            if (segment === null) ;
            else {
              segment.lastPushedText = pushTextInstance(segment.chunks, node, request.renderState, segment.lastPushedText);
            }
            return;
          }
          if (typeof node === "number" || enableBigIntSupport) {
            var _segment = task.blockedSegment;
            if (_segment === null) ;
            else {
              _segment.lastPushedText = pushTextInstance(_segment.chunks, "" + node, request.renderState, _segment.lastPushedText);
            }
            return;
          }
          {
            if (typeof node === "function") {
              warnOnFunctionType(node);
            }
            if (typeof node === "symbol") {
              warnOnSymbolType(node);
            }
          }
        }
        function replayFragment(request, task, children, childIndex) {
          var replay = task.replay;
          var replayNodes = replay.nodes;
          for (var j = 0; j < replayNodes.length; j++) {
            var node = replayNodes[j];
            if (node[1] !== childIndex) {
              continue;
            }
            var childNodes = node[2];
            var childSlots = node[3];
            task.replay = {
              nodes: childNodes,
              slots: childSlots,
              pendingTasks: 1
            };
            try {
              renderChildrenArray(request, task, children, -1);
              if (task.replay.pendingTasks === 1 && task.replay.nodes.length > 0) {
                throw new Error("Couldn't find all resumable slots by key/index during replaying. The tree doesn't match so React will fallback to client rendering.");
              }
              task.replay.pendingTasks--;
            } catch (x) {
              if (typeof x === "object" && x !== null && (x === SuspenseException || typeof x.then === "function")) {
                throw x;
              }
              task.replay.pendingTasks--;
              var thrownInfo = getThrownInfo(request, task.componentStack);
              erroredReplay(request, task.blockedBoundary, x, thrownInfo, childNodes, childSlots);
            }
            task.replay = replay;
            replayNodes.splice(j, 1);
            break;
          }
        }
        function renderChildrenArray(request, task, children, childIndex) {
          var prevKeyPath = task.keyPath;
          if (childIndex !== -1) {
            task.keyPath = [task.keyPath, "Fragment", childIndex];
            if (task.replay !== null) {
              replayFragment(
                request,
                // $FlowFixMe: Refined.
                task,
                children,
                childIndex
              );
              task.keyPath = prevKeyPath;
              return;
            }
          }
          var prevTreeContext = task.treeContext;
          var totalChildren = children.length;
          if (task.replay !== null) {
            var resumeSlots = task.replay.slots;
            if (resumeSlots !== null && typeof resumeSlots === "object") {
              for (var i = 0; i < totalChildren; i++) {
                var node = children[i];
                task.treeContext = pushTreeContext(prevTreeContext, totalChildren, i);
                var resumeSegmentID = resumeSlots[i];
                if (typeof resumeSegmentID === "number") {
                  resumeNode(request, task, resumeSegmentID, node, i);
                  delete resumeSlots[i];
                } else {
                  renderNode(request, task, node, i);
                }
              }
              task.treeContext = prevTreeContext;
              task.keyPath = prevKeyPath;
              return;
            }
          }
          for (var _i = 0; _i < totalChildren; _i++) {
            var _node = children[_i];
            task.treeContext = pushTreeContext(prevTreeContext, totalChildren, _i);
            renderNode(request, task, _node, _i);
          }
          task.treeContext = prevTreeContext;
          task.keyPath = prevKeyPath;
        }
        function untrackBoundary(request, boundary) {
          var trackedPostpones = request.trackedPostpones;
          if (trackedPostpones === null) {
            return;
          }
          var boundaryKeyPath = boundary.trackedContentKeyPath;
          if (boundaryKeyPath === null) {
            return;
          }
          var boundaryNode = trackedPostpones.workingMap.get(boundaryKeyPath);
          if (boundaryNode === void 0) {
            return;
          }
          boundaryNode.length = 4;
          boundaryNode[2] = [];
          boundaryNode[3] = null;
        }
        function spawnNewSuspendedReplayTask(request, task, thenableState2, x) {
          var newTask = createReplayTask(
            request,
            thenableState2,
            task.replay,
            task.node,
            task.childIndex,
            task.blockedBoundary,
            task.hoistableState,
            task.abortSet,
            task.keyPath,
            task.formatContext,
            task.legacyContext,
            task.context,
            task.treeContext,
            // We pop one task off the stack because the node that suspended will be tried again,
            // which will add it back onto the stack.
            task.componentStack !== null ? task.componentStack.parent : null,
            task.isFallback
          );
          var ping = newTask.ping;
          x.then(ping, ping);
        }
        function spawnNewSuspendedRenderTask(request, task, thenableState2, x) {
          var segment = task.blockedSegment;
          var insertionIndex = segment.chunks.length;
          var newSegment = createPendingSegment(
            request,
            insertionIndex,
            null,
            task.formatContext,
            // Adopt the parent segment's leading text embed
            segment.lastPushedText,
            // Assume we are text embedded at the trailing edge
            true
          );
          segment.children.push(newSegment);
          segment.lastPushedText = false;
          var newTask = createRenderTask(
            request,
            thenableState2,
            task.node,
            task.childIndex,
            task.blockedBoundary,
            newSegment,
            task.hoistableState,
            task.abortSet,
            task.keyPath,
            task.formatContext,
            task.legacyContext,
            task.context,
            task.treeContext,
            // We pop one task off the stack because the node that suspended will be tried again,
            // which will add it back onto the stack.
            task.componentStack !== null ? task.componentStack.parent : null,
            task.isFallback
          );
          var ping = newTask.ping;
          x.then(ping, ping);
        }
        function renderNode(request, task, node, childIndex) {
          var previousFormatContext = task.formatContext;
          var previousLegacyContext = task.legacyContext;
          var previousContext = task.context;
          var previousKeyPath = task.keyPath;
          var previousTreeContext = task.treeContext;
          var previousComponentStack = task.componentStack;
          var x;
          var segment = task.blockedSegment;
          if (segment === null) {
            try {
              return renderNodeDestructive(request, task, node, childIndex);
            } catch (thrownValue) {
              resetHooksState();
              x = thrownValue === SuspenseException ? (
                // This is a special type of exception used for Suspense. For historical
                // reasons, the rest of the Suspense implementation expects the thrown
                // value to be a thenable, because before `use` existed that was the
                // (unstable) API for suspending. This implementation detail can change
                // later, once we deprecate the old API in favor of `use`.
                getSuspendedThenable()
              ) : thrownValue;
              if (typeof x === "object" && x !== null) {
                if (typeof x.then === "function") {
                  var wakeable = x;
                  var thenableState2 = getThenableStateAfterSuspending();
                  spawnNewSuspendedReplayTask(
                    request,
                    // $FlowFixMe: Refined.
                    task,
                    thenableState2,
                    wakeable
                  );
                  task.formatContext = previousFormatContext;
                  task.legacyContext = previousLegacyContext;
                  task.context = previousContext;
                  task.keyPath = previousKeyPath;
                  task.treeContext = previousTreeContext;
                  task.componentStack = previousComponentStack;
                  switchContext(previousContext);
                  return;
                }
              }
            }
          } else {
            var childrenLength = segment.children.length;
            var chunkLength = segment.chunks.length;
            try {
              return renderNodeDestructive(request, task, node, childIndex);
            } catch (thrownValue) {
              resetHooksState();
              segment.children.length = childrenLength;
              segment.chunks.length = chunkLength;
              x = thrownValue === SuspenseException ? (
                // This is a special type of exception used for Suspense. For historical
                // reasons, the rest of the Suspense implementation expects the thrown
                // value to be a thenable, because before `use` existed that was the
                // (unstable) API for suspending. This implementation detail can change
                // later, once we deprecate the old API in favor of `use`.
                getSuspendedThenable()
              ) : thrownValue;
              if (typeof x === "object" && x !== null) {
                if (typeof x.then === "function") {
                  var _wakeable = x;
                  var _thenableState = getThenableStateAfterSuspending();
                  spawnNewSuspendedRenderTask(
                    request,
                    // $FlowFixMe: Refined.
                    task,
                    _thenableState,
                    _wakeable
                  );
                  task.formatContext = previousFormatContext;
                  task.legacyContext = previousLegacyContext;
                  task.context = previousContext;
                  task.keyPath = previousKeyPath;
                  task.treeContext = previousTreeContext;
                  task.componentStack = previousComponentStack;
                  switchContext(previousContext);
                  return;
                }
              }
            }
          }
          task.formatContext = previousFormatContext;
          task.legacyContext = previousLegacyContext;
          task.context = previousContext;
          task.keyPath = previousKeyPath;
          task.treeContext = previousTreeContext;
          switchContext(previousContext);
          throw x;
        }
        function erroredReplay(request, boundary, error2, errorInfo, replayNodes, resumeSlots) {
          var errorDigest;
          {
            errorDigest = logRecoverableError(request, error2, errorInfo);
          }
          abortRemainingReplayNodes(request, boundary, replayNodes, resumeSlots, error2, errorDigest, errorInfo);
        }
        function erroredTask(request, boundary, error2, errorInfo) {
          var errorDigest;
          {
            errorDigest = logRecoverableError(request, error2, errorInfo);
          }
          if (boundary === null) {
            fatalError(request, error2);
          } else {
            boundary.pendingTasks--;
            if (boundary.status !== CLIENT_RENDERED) {
              boundary.status = CLIENT_RENDERED;
              encodeErrorForBoundary(boundary, errorDigest, error2, errorInfo);
              untrackBoundary(request, boundary);
              if (boundary.parentFlushed) {
                request.clientRenderedBoundaries.push(boundary);
              }
            }
          }
          request.allPendingTasks--;
          if (request.allPendingTasks === 0) {
            completeAll(request);
          }
        }
        function abortTaskSoft(task) {
          var request = this;
          var boundary = task.blockedBoundary;
          var segment = task.blockedSegment;
          if (segment !== null) {
            segment.status = ABORTED;
            finishedTask(request, boundary, segment);
          }
        }
        function abortRemainingSuspenseBoundary(request, rootSegmentID, error2, errorDigest, errorInfo) {
          var resumedBoundary = createSuspenseBoundary(request, /* @__PURE__ */ new Set());
          resumedBoundary.parentFlushed = true;
          resumedBoundary.rootSegmentID = rootSegmentID;
          resumedBoundary.status = CLIENT_RENDERED;
          var errorMessage = error2;
          {
            var errorPrefix = "The server did not finish this Suspense boundary: ";
            if (error2 && typeof error2.message === "string") {
              errorMessage = errorPrefix + error2.message;
            } else {
              errorMessage = errorPrefix + String(error2);
            }
          }
          encodeErrorForBoundary(resumedBoundary, errorDigest, errorMessage, errorInfo);
          if (resumedBoundary.parentFlushed) {
            request.clientRenderedBoundaries.push(resumedBoundary);
          }
        }
        function abortRemainingReplayNodes(request, boundary, nodes, slots, error2, errorDigest, errorInfo) {
          for (var i = 0; i < nodes.length; i++) {
            var node = nodes[i];
            if (node.length === 4) {
              abortRemainingReplayNodes(request, boundary, node[2], node[3], error2, errorDigest, errorInfo);
            } else {
              var boundaryNode = node;
              var rootSegmentID = boundaryNode[5];
              abortRemainingSuspenseBoundary(request, rootSegmentID, error2, errorDigest, errorInfo);
            }
          }
          nodes.length = 0;
          if (slots !== null) {
            if (boundary === null) {
              throw new Error("We should not have any resumable nodes in the shell. This is a bug in React.");
            } else if (boundary.status !== CLIENT_RENDERED) {
              boundary.status = CLIENT_RENDERED;
              encodeErrorForBoundary(boundary, errorDigest, error2, errorInfo);
              if (boundary.parentFlushed) {
                request.clientRenderedBoundaries.push(boundary);
              }
            }
            if (typeof slots === "object") {
              for (var index in slots) {
                delete slots[index];
              }
            }
          }
        }
        function abortTask(task, request, error2) {
          var boundary = task.blockedBoundary;
          var segment = task.blockedSegment;
          if (segment !== null) {
            segment.status = ABORTED;
          }
          if (boundary === null) {
            var errorInfo = {};
            if (request.status !== CLOSING && request.status !== CLOSED) {
              var replay = task.replay;
              if (replay === null) {
                {
                  logRecoverableError(request, error2, errorInfo);
                  fatalError(request, error2);
                }
                return;
              } else {
                replay.pendingTasks--;
                if (replay.pendingTasks === 0 && replay.nodes.length > 0) {
                  var errorDigest;
                  {
                    errorDigest = logRecoverableError(request, error2, errorInfo);
                  }
                  abortRemainingReplayNodes(request, null, replay.nodes, replay.slots, error2, errorDigest, errorInfo);
                }
                request.pendingRootTasks--;
                if (request.pendingRootTasks === 0) {
                  completeShell(request);
                }
              }
            }
          } else {
            boundary.pendingTasks--;
            if (boundary.status !== CLIENT_RENDERED) {
              boundary.status = CLIENT_RENDERED;
              var _errorInfo = getThrownInfo(request, task.componentStack);
              var _errorDigest;
              {
                _errorDigest = logRecoverableError(request, error2, _errorInfo);
              }
              var errorMessage = error2;
              {
                var errorPrefix = "The server did not finish this Suspense boundary: ";
                if (error2 && typeof error2.message === "string") {
                  errorMessage = errorPrefix + error2.message;
                } else {
                  errorMessage = errorPrefix + String(error2);
                }
              }
              encodeErrorForBoundary(boundary, _errorDigest, errorMessage, _errorInfo);
              untrackBoundary(request, boundary);
              if (boundary.parentFlushed) {
                request.clientRenderedBoundaries.push(boundary);
              }
            }
            boundary.fallbackAbortableTasks.forEach(function(fallbackTask) {
              return abortTask(fallbackTask, request, error2);
            });
            boundary.fallbackAbortableTasks.clear();
          }
          request.allPendingTasks--;
          if (request.allPendingTasks === 0) {
            completeAll(request);
          }
        }
        function safelyEmitEarlyPreloads(request, shellComplete) {
          try {
            emitEarlyPreloads(request.renderState, request.resumableState, shellComplete);
          } catch (error2) {
            var errorInfo = {};
            logRecoverableError(request, error2, errorInfo);
          }
        }
        function completeShell(request) {
          if (request.trackedPostpones === null) {
            var shellComplete = true;
            safelyEmitEarlyPreloads(request, shellComplete);
          }
          request.onShellError = noop;
          var onShellReady = request.onShellReady;
          onShellReady();
        }
        function completeAll(request) {
          var shellComplete = request.trackedPostpones === null ? (
            // Render, we assume it is completed
            true
          ) : (
            // Prerender Request, we use the state of the root segment
            request.completedRootSegment === null || request.completedRootSegment.status !== POSTPONED
          );
          safelyEmitEarlyPreloads(request, shellComplete);
          var onAllReady = request.onAllReady;
          onAllReady();
        }
        function queueCompletedSegment(boundary, segment) {
          if (segment.chunks.length === 0 && segment.children.length === 1 && segment.children[0].boundary === null && segment.children[0].id === -1) {
            var childSegment = segment.children[0];
            childSegment.id = segment.id;
            childSegment.parentFlushed = true;
            if (childSegment.status === COMPLETED) {
              queueCompletedSegment(boundary, childSegment);
            }
          } else {
            var completedSegments = boundary.completedSegments;
            completedSegments.push(segment);
          }
        }
        function finishedTask(request, boundary, segment) {
          if (boundary === null) {
            if (segment !== null && segment.parentFlushed) {
              if (request.completedRootSegment !== null) {
                throw new Error("There can only be one root segment. This is a bug in React.");
              }
              request.completedRootSegment = segment;
            }
            request.pendingRootTasks--;
            if (request.pendingRootTasks === 0) {
              completeShell(request);
            }
          } else {
            boundary.pendingTasks--;
            if (boundary.status === CLIENT_RENDERED) ;
            else if (boundary.pendingTasks === 0) {
              if (boundary.status === PENDING) {
                boundary.status = COMPLETED;
              }
              if (segment !== null && segment.parentFlushed) {
                if (segment.status === COMPLETED) {
                  queueCompletedSegment(boundary, segment);
                }
              }
              if (boundary.parentFlushed) {
                request.completedBoundaries.push(boundary);
              }
              if (boundary.status === COMPLETED) {
                boundary.fallbackAbortableTasks.forEach(abortTaskSoft, request);
                boundary.fallbackAbortableTasks.clear();
              }
            } else {
              if (segment !== null && segment.parentFlushed) {
                if (segment.status === COMPLETED) {
                  queueCompletedSegment(boundary, segment);
                  var completedSegments = boundary.completedSegments;
                  if (completedSegments.length === 1) {
                    if (boundary.parentFlushed) {
                      request.partialBoundaries.push(boundary);
                    }
                  }
                }
              }
            }
          }
          request.allPendingTasks--;
          if (request.allPendingTasks === 0) {
            completeAll(request);
          }
        }
        function retryTask(request, task) {
          var segment = task.blockedSegment;
          if (segment === null) {
            retryReplayTask(
              request,
              // $FlowFixMe: Refined.
              task
            );
          } else {
            retryRenderTask(
              request,
              // $FlowFixMe: Refined.
              task,
              segment
            );
          }
        }
        function retryRenderTask(request, task, segment) {
          if (segment.status !== PENDING) {
            return;
          }
          switchContext(task.context);
          var prevTaskInDEV = null;
          {
            prevTaskInDEV = currentTaskInDEV;
            currentTaskInDEV = task;
          }
          var childrenLength = segment.children.length;
          var chunkLength = segment.chunks.length;
          try {
            renderNodeDestructive(request, task, task.node, task.childIndex);
            pushSegmentFinale(segment.chunks, request.renderState, segment.lastPushedText, segment.textEmbedded);
            task.abortSet.delete(task);
            segment.status = COMPLETED;
            finishedTask(request, task.blockedBoundary, segment);
          } catch (thrownValue) {
            resetHooksState();
            segment.children.length = childrenLength;
            segment.chunks.length = chunkLength;
            var x = thrownValue === SuspenseException ? (
              // This is a special type of exception used for Suspense. For historical
              // reasons, the rest of the Suspense implementation expects the thrown
              // value to be a thenable, because before `use` existed that was the
              // (unstable) API for suspending. This implementation detail can change
              // later, once we deprecate the old API in favor of `use`.
              getSuspendedThenable()
            ) : thrownValue;
            if (typeof x === "object" && x !== null) {
              if (typeof x.then === "function") {
                var ping = task.ping;
                x.then(ping, ping);
                task.thenableState = getThenableStateAfterSuspending();
                return;
              }
            }
            var errorInfo = getThrownInfo(request, task.componentStack);
            task.abortSet.delete(task);
            segment.status = ERRORED;
            erroredTask(request, task.blockedBoundary, x, errorInfo);
            return;
          } finally {
            {
              currentTaskInDEV = prevTaskInDEV;
            }
          }
        }
        function retryReplayTask(request, task) {
          if (task.replay.pendingTasks === 0) {
            return;
          }
          switchContext(task.context);
          var prevTaskInDEV = null;
          {
            prevTaskInDEV = currentTaskInDEV;
            currentTaskInDEV = task;
          }
          try {
            renderNodeDestructive(request, task, task.node, task.childIndex);
            if (task.replay.pendingTasks === 1 && task.replay.nodes.length > 0) {
              throw new Error("Couldn't find all resumable slots by key/index during replaying. The tree doesn't match so React will fallback to client rendering.");
            }
            task.replay.pendingTasks--;
            task.abortSet.delete(task);
            finishedTask(request, task.blockedBoundary, null);
          } catch (thrownValue) {
            resetHooksState();
            var x = thrownValue === SuspenseException ? (
              // This is a special type of exception used for Suspense. For historical
              // reasons, the rest of the Suspense implementation expects the thrown
              // value to be a thenable, because before `use` existed that was the
              // (unstable) API for suspending. This implementation detail can change
              // later, once we deprecate the old API in favor of `use`.
              getSuspendedThenable()
            ) : thrownValue;
            if (typeof x === "object" && x !== null) {
              if (typeof x.then === "function") {
                var ping = task.ping;
                x.then(ping, ping);
                task.thenableState = getThenableStateAfterSuspending();
                return;
              }
            }
            task.replay.pendingTasks--;
            task.abortSet.delete(task);
            var errorInfo = getThrownInfo(request, task.componentStack);
            erroredReplay(request, task.blockedBoundary, x, errorInfo, task.replay.nodes, task.replay.slots);
            request.pendingRootTasks--;
            if (request.pendingRootTasks === 0) {
              completeShell(request);
            }
            request.allPendingTasks--;
            if (request.allPendingTasks === 0) {
              completeAll(request);
            }
            return;
          } finally {
            {
              currentTaskInDEV = prevTaskInDEV;
            }
          }
        }
        function performWork(request) {
          if (request.status === CLOSED) {
            return;
          }
          var prevContext = getActiveContext();
          var prevDispatcher = ReactCurrentDispatcher.current;
          ReactCurrentDispatcher.current = HooksDispatcher;
          var prevCacheDispatcher;
          {
            prevCacheDispatcher = ReactCurrentCache.current;
            ReactCurrentCache.current = DefaultCacheDispatcher;
          }
          var prevRequest = currentRequest;
          currentRequest = request;
          var prevGetCurrentStackImpl;
          {
            prevGetCurrentStackImpl = ReactDebugCurrentFrame.getCurrentStack;
            ReactDebugCurrentFrame.getCurrentStack = getCurrentStackInDEV;
          }
          var prevResumableState = currentResumableState;
          setCurrentResumableState(request.resumableState);
          try {
            var pingedTasks = request.pingedTasks;
            var i;
            for (i = 0; i < pingedTasks.length; i++) {
              var task = pingedTasks[i];
              retryTask(request, task);
            }
            pingedTasks.splice(0, i);
            if (request.destination !== null) {
              flushCompletedQueues(request, request.destination);
            }
          } catch (error2) {
            var errorInfo = {};
            logRecoverableError(request, error2, errorInfo);
            fatalError(request, error2);
          } finally {
            setCurrentResumableState(prevResumableState);
            ReactCurrentDispatcher.current = prevDispatcher;
            {
              ReactCurrentCache.current = prevCacheDispatcher;
            }
            {
              ReactDebugCurrentFrame.getCurrentStack = prevGetCurrentStackImpl;
            }
            if (prevDispatcher === HooksDispatcher) {
              switchContext(prevContext);
            }
            currentRequest = prevRequest;
          }
        }
        function flushPreamble(request, destination, rootSegment) {
          var willFlushAllSegments = request.allPendingTasks === 0 && request.trackedPostpones === null;
          writePreamble(destination, request.resumableState, request.renderState, willFlushAllSegments);
        }
        function flushSubtree(request, destination, segment, hoistableState) {
          segment.parentFlushed = true;
          switch (segment.status) {
            case PENDING: {
              segment.id = request.nextSegmentId++;
            }
            case POSTPONED: {
              var segmentID = segment.id;
              segment.lastPushedText = false;
              segment.textEmbedded = false;
              return writePlaceholder(destination, request.renderState, segmentID);
            }
            case COMPLETED: {
              segment.status = FLUSHED;
              var r = true;
              var chunks = segment.chunks;
              var chunkIdx = 0;
              var children = segment.children;
              for (var childIdx = 0; childIdx < children.length; childIdx++) {
                var nextChild = children[childIdx];
                for (; chunkIdx < nextChild.index; chunkIdx++) {
                  writeChunk(destination, chunks[chunkIdx]);
                }
                r = flushSegment(request, destination, nextChild, hoistableState);
              }
              for (; chunkIdx < chunks.length - 1; chunkIdx++) {
                writeChunk(destination, chunks[chunkIdx]);
              }
              if (chunkIdx < chunks.length) {
                r = writeChunkAndReturn(destination, chunks[chunkIdx]);
              }
              return r;
            }
            default: {
              throw new Error("Aborted, errored or already flushed boundaries should not be flushed again. This is a bug in React.");
            }
          }
        }
        function flushSegment(request, destination, segment, hoistableState) {
          var boundary = segment.boundary;
          if (boundary === null) {
            return flushSubtree(request, destination, segment, hoistableState);
          }
          boundary.parentFlushed = true;
          if (boundary.status === CLIENT_RENDERED) {
            writeStartClientRenderedSuspenseBoundary(destination, request.renderState, boundary.errorDigest, boundary.errorMessage, boundary.errorComponentStack);
            flushSubtree(request, destination, segment, hoistableState);
            return writeEndClientRenderedSuspenseBoundary(destination);
          } else if (boundary.status !== COMPLETED) {
            if (boundary.status === PENDING) {
              boundary.rootSegmentID = request.nextSegmentId++;
            }
            if (boundary.completedSegments.length > 0) {
              request.partialBoundaries.push(boundary);
            }
            var id = boundary.rootSegmentID;
            writeStartPendingSuspenseBoundary(destination, request.renderState, id);
            {
              if (hoistableState) {
                hoistHoistables(hoistableState, boundary.fallbackState);
              }
            }
            flushSubtree(request, destination, segment, hoistableState);
            return writeEndPendingSuspenseBoundary(destination);
          } else if (boundary.byteSize > request.progressiveChunkSize) {
            boundary.rootSegmentID = request.nextSegmentId++;
            request.completedBoundaries.push(boundary);
            writeStartPendingSuspenseBoundary(destination, request.renderState, boundary.rootSegmentID);
            flushSubtree(request, destination, segment, hoistableState);
            return writeEndPendingSuspenseBoundary(destination);
          } else {
            {
              if (hoistableState) {
                hoistHoistables(hoistableState, boundary.contentState);
              }
            }
            writeStartCompletedSuspenseBoundary(destination);
            var completedSegments = boundary.completedSegments;
            if (completedSegments.length !== 1) {
              throw new Error("A previously unvisited boundary must have exactly one root segment. This is a bug in React.");
            }
            var contentSegment = completedSegments[0];
            flushSegment(request, destination, contentSegment, hoistableState);
            return writeEndCompletedSuspenseBoundary(destination);
          }
        }
        function flushClientRenderedBoundary(request, destination, boundary) {
          return writeClientRenderBoundaryInstruction(destination, request.resumableState, request.renderState, boundary.rootSegmentID, boundary.errorDigest, boundary.errorMessage, boundary.errorComponentStack);
        }
        function flushSegmentContainer(request, destination, segment, hoistableState) {
          writeStartSegment(destination, request.renderState, segment.parentFormatContext, segment.id);
          flushSegment(request, destination, segment, hoistableState);
          return writeEndSegment(destination, segment.parentFormatContext);
        }
        function flushCompletedBoundary(request, destination, boundary) {
          var completedSegments = boundary.completedSegments;
          var i = 0;
          for (; i < completedSegments.length; i++) {
            var segment = completedSegments[i];
            flushPartiallyCompletedSegment(request, destination, boundary, segment);
          }
          completedSegments.length = 0;
          {
            writeHoistablesForBoundary(destination, boundary.contentState, request.renderState);
          }
          return writeCompletedBoundaryInstruction(destination, request.resumableState, request.renderState, boundary.rootSegmentID, boundary.contentState);
        }
        function flushPartialBoundary(request, destination, boundary) {
          var completedSegments = boundary.completedSegments;
          var i = 0;
          for (; i < completedSegments.length; i++) {
            var segment = completedSegments[i];
            if (!flushPartiallyCompletedSegment(request, destination, boundary, segment)) {
              i++;
              completedSegments.splice(0, i);
              return false;
            }
          }
          completedSegments.splice(0, i);
          {
            return writeHoistablesForBoundary(destination, boundary.contentState, request.renderState);
          }
        }
        function flushPartiallyCompletedSegment(request, destination, boundary, segment) {
          if (segment.status === FLUSHED) {
            return true;
          }
          var hoistableState = boundary.contentState;
          var segmentID = segment.id;
          if (segmentID === -1) {
            var rootSegmentID = segment.id = boundary.rootSegmentID;
            if (rootSegmentID === -1) {
              throw new Error("A root segment ID must have been assigned by now. This is a bug in React.");
            }
            return flushSegmentContainer(request, destination, segment, hoistableState);
          } else if (segmentID === boundary.rootSegmentID) {
            return flushSegmentContainer(request, destination, segment, hoistableState);
          } else {
            flushSegmentContainer(request, destination, segment, hoistableState);
            return writeCompletedSegmentInstruction(destination, request.resumableState, request.renderState, segmentID);
          }
        }
        function flushCompletedQueues(request, destination) {
          beginWriting();
          try {
            var i;
            var completedRootSegment = request.completedRootSegment;
            if (completedRootSegment !== null) {
              if (completedRootSegment.status === POSTPONED) {
                return;
              } else if (request.pendingRootTasks === 0) {
                if (enableFloat) {
                  flushPreamble(request, destination, completedRootSegment);
                }
                flushSegment(request, destination, completedRootSegment, null);
                request.completedRootSegment = null;
                writeCompletedRoot(destination, request.renderState);
              } else {
                return;
              }
            }
            if (enableFloat) {
              writeHoistables(destination, request.resumableState, request.renderState);
            }
            var clientRenderedBoundaries = request.clientRenderedBoundaries;
            for (i = 0; i < clientRenderedBoundaries.length; i++) {
              var boundary = clientRenderedBoundaries[i];
              if (!flushClientRenderedBoundary(request, destination, boundary)) {
                request.destination = null;
                i++;
                clientRenderedBoundaries.splice(0, i);
                return;
              }
            }
            clientRenderedBoundaries.splice(0, i);
            var completedBoundaries = request.completedBoundaries;
            for (i = 0; i < completedBoundaries.length; i++) {
              var _boundary = completedBoundaries[i];
              if (!flushCompletedBoundary(request, destination, _boundary)) {
                request.destination = null;
                i++;
                completedBoundaries.splice(0, i);
                return;
              }
            }
            completedBoundaries.splice(0, i);
            completeWriting(destination);
            beginWriting(destination);
            var partialBoundaries = request.partialBoundaries;
            for (i = 0; i < partialBoundaries.length; i++) {
              var _boundary2 = partialBoundaries[i];
              if (!flushPartialBoundary(request, destination, _boundary2)) {
                request.destination = null;
                i++;
                partialBoundaries.splice(0, i);
                return;
              }
            }
            partialBoundaries.splice(0, i);
            var largeBoundaries = request.completedBoundaries;
            for (i = 0; i < largeBoundaries.length; i++) {
              var _boundary3 = largeBoundaries[i];
              if (!flushCompletedBoundary(request, destination, _boundary3)) {
                request.destination = null;
                i++;
                largeBoundaries.splice(0, i);
                return;
              }
            }
            largeBoundaries.splice(0, i);
          } finally {
            if (request.allPendingTasks === 0 && request.pingedTasks.length === 0 && request.clientRenderedBoundaries.length === 0 && request.completedBoundaries.length === 0) {
              request.flushScheduled = false;
              {
                {
                  writePostamble(destination, request.resumableState);
                }
              }
              completeWriting(destination);
              {
                if (request.abortableTasks.size !== 0) {
                  error("There was still abortable task at the root when we closed. This is a bug in React.");
                }
              }
              close(destination);
              stopFlowing(request);
            } else {
              completeWriting(destination);
            }
          }
        }
        function startWork(request) {
          request.flushScheduled = request.destination !== null;
          {
            scheduleWork(function() {
              return performWork(request);
            });
          }
          if (request.trackedPostpones === null) {
            {
              scheduleWork(function() {
                return enqueueEarlyPreloadsAfterInitialWork(request);
              });
            }
          }
        }
        function enqueueEarlyPreloadsAfterInitialWork(request) {
          var shellComplete = request.pendingRootTasks === 0;
          safelyEmitEarlyPreloads(request, shellComplete);
        }
        function enqueueFlush(request) {
          if (request.flushScheduled === false && // If there are pinged tasks we are going to flush anyway after work completes
          request.pingedTasks.length === 0 && // If there is no destination there is nothing we can flush to. A flush will
          // happen when we start flowing again
          request.destination !== null) {
            request.flushScheduled = true;
            scheduleWork(function() {
              var destination = request.destination;
              if (destination) {
                flushCompletedQueues(request, destination);
              } else {
                request.flushScheduled = false;
              }
            });
          }
        }
        function startFlowing(request, destination) {
          if (request.status === CLOSING) {
            request.status = CLOSED;
            closeWithError(destination, request.fatalError);
            return;
          }
          if (request.status === CLOSED) {
            return;
          }
          if (request.destination !== null) {
            return;
          }
          request.destination = destination;
          try {
            flushCompletedQueues(request, destination);
          } catch (error2) {
            var errorInfo = {};
            logRecoverableError(request, error2, errorInfo);
            fatalError(request, error2);
          }
        }
        function stopFlowing(request) {
          request.destination = null;
        }
        function abort(request, reason) {
          try {
            var abortableTasks = request.abortableTasks;
            if (abortableTasks.size > 0) {
              var error2 = reason === void 0 ? new Error("The render was aborted by the server without a reason.") : reason;
              abortableTasks.forEach(function(task) {
                return abortTask(task, request, error2);
              });
              abortableTasks.clear();
            }
            if (request.destination !== null) {
              flushCompletedQueues(request, request.destination);
            }
          } catch (error3) {
            var errorInfo = {};
            logRecoverableError(request, error3, errorInfo);
            fatalError(request, error3);
          }
        }
        function flushResources(request) {
          enqueueFlush(request);
        }
        function getFormState(request) {
          return request.formState;
        }
        function getResumableState(request) {
          return request.resumableState;
        }
        function getRenderState(request) {
          return request.renderState;
        }
        function renderToReadableStream(children, options) {
          return new Promise(function(resolve, reject) {
            var onFatalError;
            var onAllReady;
            var allReady = new Promise(function(res, rej) {
              onAllReady = res;
              onFatalError = rej;
            });
            function onShellReady() {
              var stream = new ReadableStream(
                {
                  type: "bytes",
                  pull: function(controller) {
                    startFlowing(request, controller);
                  },
                  cancel: function(reason) {
                    stopFlowing(request);
                    abort(request, reason);
                  }
                },
                // $FlowFixMe[prop-missing] size() methods are not allowed on byte streams.
                {
                  highWaterMark: 0
                }
              );
              stream.allReady = allReady;
              resolve(stream);
            }
            function onShellError(error2) {
              allReady.catch(function() {
              });
              reject(error2);
            }
            var onHeaders = options ? options.onHeaders : void 0;
            var onHeadersImpl;
            if (onHeaders) {
              onHeadersImpl = function(headersDescriptor) {
                onHeaders(new Headers(headersDescriptor));
              };
            }
            var resumableState = createResumableState(options ? options.identifierPrefix : void 0, options ? options.unstable_externalRuntimeSrc : void 0, options ? options.bootstrapScriptContent : void 0, options ? options.bootstrapScripts : void 0, options ? options.bootstrapModules : void 0);
            var request = createRequest(children, resumableState, createRenderState(resumableState, options ? options.nonce : void 0, options ? options.unstable_externalRuntimeSrc : void 0, options ? options.importMap : void 0, onHeadersImpl, options ? options.maxHeadersLength : void 0), createRootFormatContext(options ? options.namespaceURI : void 0), options ? options.progressiveChunkSize : void 0, options ? options.onError : void 0, onAllReady, onShellReady, onShellError, onFatalError, options ? options.onPostpone : void 0, options ? options.formState : void 0);
            if (options && options.signal) {
              var signal = options.signal;
              if (signal.aborted) {
                abort(request, signal.reason);
              } else {
                var listener = function() {
                  abort(request, signal.reason);
                  signal.removeEventListener("abort", listener);
                };
                signal.addEventListener("abort", listener);
              }
            }
            startWork(request);
          });
        }
        exports.renderToReadableStream = renderToReadableStream;
        exports.version = ReactVersion;
      })();
    }
  }
});

// node_modules/react-dom/server.browser.js
var require_server_browser = __commonJS({
  "node_modules/react-dom/server.browser.js"(exports) {
    var l;
    var s;
    if (false) {
      l = null;
      s = null;
    } else {
      l = require_react_dom_server_legacy_browser_development();
      s = require_react_dom_server_browser_development();
    }
    exports.version = l.version;
    exports.renderToString = l.renderToString;
    exports.renderToStaticMarkup = l.renderToStaticMarkup;
    exports.renderToNodeStream = l.renderToNodeStream;
    exports.renderToStaticNodeStream = l.renderToStaticNodeStream;
    exports.renderToReadableStream = s.renderToReadableStream;
    if (s.resume) {
      exports.resume = s.resume;
    }
  }
});
export default require_server_browser();
/*! Bundled license information:

react-dom/cjs/react-dom-server-legacy.browser.development.js:
  (**
   * @license React
   * react-dom-server-legacy.browser.development.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
  (**
   * @license
   *
   * JS Implementation of MurmurHash3 (r136) (as of May 20, 2011)
   *
   * Copyright (c) 2011 Gary Court
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   * SOFTWARE.
   *)

react-dom/cjs/react-dom-server.browser.development.js:
  (**
   * @license React
   * react-dom-server.browser.development.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
  (**
   * @license
   *
   * JS Implementation of MurmurHash3 (r136) (as of May 20, 2011)
   *
   * Copyright (c) 2011 Gary Court
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   * SOFTWARE.
   *)
*/
//# sourceMappingURL=react-dom_server.js.map
