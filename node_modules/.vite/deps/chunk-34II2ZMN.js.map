{
  "version": 3,
  "sources": ["../../@remix-run/router/history.ts", "../../@remix-run/router/utils.ts", "../../@remix-run/router/router.ts"],
  "sourcesContent": ["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n// TODO: (v7) Change the Location generic default from `any` to `unknown` and\n// remove Remix `useLocation` wrapper.\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location<State = any> extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: State;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n\n  /**\n   * The delta between this location and the former location in the history stack\n   */\n  delta: number | null;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. This may be either a URL or the pieces\n * of a URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Returns a URL for the given `to` value\n   *\n   * @param to - The destination URL\n   */\n  createURL(to: To): URL;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLACE navigations for data routers\n   * behave the same as POP\n   *\n   * @param to Unencoded path\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n  idx: number;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  function createHref(to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to: To) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\",\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 1 });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 0 });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({ action, location: nextLocation, delta });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n\n    // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nexport function warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location, index: number): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  let index = getIndex()!;\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, \"\");\n  }\n\n  function getIndex(): number {\n    let state = globalHistory.state || { idx: null };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({ action, location: history.location, delta });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 1 });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 0 });\n    }\n  }\n\n  function createURL(to: To): URL {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base =\n      window.location.origin !== \"null\"\n        ? window.location.origin\n        : window.location.href;\n\n    let href = typeof to === \"string\" ? to : createPath(to);\n    // Treating this as a full URL will strip any trailing spaces so we need to\n    // pre-encode them since they might be part of a matching splat param from\n    // an ancestor route\n    href = href.replace(/ $/, \"%20\");\n    invariant(\n      base,\n      `No window.location.(origin|href) available to create URL for href: ${href}`\n    );\n    return new URL(href, base);\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n", "import type { Location, Path, To } from \"./history\";\nimport { invariant, parsePath, warning } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: unknown;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  // We keep the raw Response for redirects so we can return it verbatim\n  response: Response;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: unknown;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\ntype LowerCaseFormMethod = \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\ntype UpperCaseFormMethod = Uppercase<LowerCaseFormMethod>;\n\n/**\n * Users can specify either lowercase or uppercase form methods on `<Form>`,\n * useSubmit(), `<fetcher.Form>`, etc.\n */\nexport type HTMLFormMethod = LowerCaseFormMethod | UpperCaseFormMethod;\n\n/**\n * Active navigation/fetcher form methods are exposed in lowercase on the\n * RouterState\n */\nexport type FormMethod = LowerCaseFormMethod;\nexport type MutationFormMethod = Exclude<FormMethod, \"get\">;\n\n/**\n * In v7, active navigation/fetcher form methods are exposed in uppercase on the\n * RouterState.  This is to align with the normalization done via fetch().\n */\nexport type V7_FormMethod = UpperCaseFormMethod;\nexport type V7_MutationFormMethod = Exclude<V7_FormMethod, \"GET\">;\n\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\"\n  | \"application/json\"\n  | \"text/plain\";\n\n// Thanks https://github.com/sindresorhus/type-fest!\ntype JsonObject = { [Key in string]: JsonValue } & {\n  [Key in string]?: JsonValue | undefined;\n};\ntype JsonArray = JsonValue[] | readonly JsonValue[];\ntype JsonPrimitive = string | number | boolean | null;\ntype JsonValue = JsonPrimitive | JsonObject | JsonArray;\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport type Submission =\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: FormData;\n      json: undefined;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: JsonValue;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: undefined;\n      text: string;\n    };\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs<Context> {\n  request: Request;\n  params: Params;\n  context?: Context;\n}\n\n// TODO: (v7) Change the defaults from any to unknown in and remove Remix wrappers:\n//   ActionFunction, ActionFunctionArgs, LoaderFunction, LoaderFunctionArgs\n//   Also, make them a type alias instead of an interface\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {}\n\n/**\n * Loaders and actions can return anything except `undefined` (`null` is a\n * valid return value if there is no data to return).  Responses are preferred\n * and will ease any future migration to Remix\n */\ntype DataFunctionValue = Response | NonNullable<unknown> | null;\n\ntype DataFunctionReturnValue = Promise<DataFunctionValue> | DataFunctionValue;\n\n/**\n * Route loader function signature\n */\nexport type LoaderFunction<Context = any> = {\n  (\n    args: LoaderFunctionArgs<Context>,\n    handlerCtx?: unknown\n  ): DataFunctionReturnValue;\n} & { hydrate?: boolean };\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction<Context = any> {\n  (\n    args: ActionFunctionArgs<Context>,\n    handlerCtx?: unknown\n  ): DataFunctionReturnValue;\n}\n\n/**\n * Arguments passed to shouldRevalidate function\n */\nexport interface ShouldRevalidateFunctionArgs {\n  currentUrl: URL;\n  currentParams: AgnosticDataRouteMatch[\"params\"];\n  nextUrl: URL;\n  nextParams: AgnosticDataRouteMatch[\"params\"];\n  formMethod?: Submission[\"formMethod\"];\n  formAction?: Submission[\"formAction\"];\n  formEncType?: Submission[\"formEncType\"];\n  text?: Submission[\"text\"];\n  formData?: Submission[\"formData\"];\n  json?: Submission[\"json\"];\n  actionStatus?: number;\n  actionResult?: any;\n  defaultShouldRevalidate: boolean;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: ShouldRevalidateFunctionArgs): boolean;\n}\n\n/**\n * Function provided by the framework-aware layers to set `hasErrorBoundary`\n * from the framework-aware `errorElement` prop\n *\n * @deprecated Use `mapRouteProperties` instead\n */\nexport interface DetectErrorBoundaryFunction {\n  (route: AgnosticRouteObject): boolean;\n}\n\nexport interface DataStrategyMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {\n  shouldLoad: boolean;\n  resolve: (\n    handlerOverride?: (\n      handler: (ctx?: unknown) => DataFunctionReturnValue\n    ) => DataFunctionReturnValue\n  ) => Promise<DataStrategyResult>;\n}\n\nexport interface DataStrategyFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {\n  matches: DataStrategyMatch[];\n  fetcherKey: string | null;\n}\n\n/**\n * Result from a loader or action called via dataStrategy\n */\nexport interface DataStrategyResult {\n  type: \"data\" | \"error\";\n  result: unknown; // data, Error, Response, DeferredData, DataWithResponseInit\n}\n\nexport interface DataStrategyFunction {\n  (args: DataStrategyFunctionArgs): Promise<Record<string, DataStrategyResult>>;\n}\n\nexport interface AgnosticPatchRoutesOnNavigationFunction<\n  M extends AgnosticRouteMatch = AgnosticRouteMatch\n> {\n  (opts: {\n    path: string;\n    matches: M[];\n    patch: (routeId: string | null, children: AgnosticRouteObject[]) => void;\n  }): void | Promise<void>;\n}\n\n/**\n * Function provided by the framework-aware layers to set any framework-specific\n * properties from framework-agnostic properties\n */\nexport interface MapRoutePropertiesFunction {\n  (route: AgnosticRouteObject): {\n    hasErrorBoundary: boolean;\n  } & Record<string, any>;\n}\n\n/**\n * Keys we cannot change from within a lazy() function. We spread all other keys\n * onto the route. Either they're meaningful to the router, or they'll get\n * ignored.\n */\nexport type ImmutableRouteKey =\n  | \"lazy\"\n  | \"caseSensitive\"\n  | \"path\"\n  | \"id\"\n  | \"index\"\n  | \"children\";\n\nexport const immutableRouteKeys = new Set<ImmutableRouteKey>([\n  \"lazy\",\n  \"caseSensitive\",\n  \"path\",\n  \"id\",\n  \"index\",\n  \"children\",\n]);\n\ntype RequireOne<T, Key = keyof T> = Exclude<\n  {\n    [K in keyof T]: K extends Key ? Omit<T, K> & Required<Pick<T, K>> : never;\n  }[keyof T],\n  undefined\n>;\n\n/**\n * lazy() function to load a route definition, which can add non-matching\n * related properties to a route\n */\nexport interface LazyRouteFunction<R extends AgnosticRouteObject> {\n  (): Promise<RequireOne<Omit<R, ImmutableRouteKey>>>;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction | boolean;\n  action?: ActionFunction | boolean;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n  lazy?: LazyRouteFunction<AgnosticBaseRouteObject>;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\nexport type RouteManifest = Record<string, AgnosticDataRouteObject | undefined>;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `:${infer Param}`\n    ? Param extends `${infer Optional}?`\n      ? Optional\n      : Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\nexport type PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\" | \"/*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise, return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if you could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  mapRouteProperties: MapRoutePropertiesFunction,\n  parentPath: string[] = [],\n  manifest: RouteManifest = {}\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, String(index)];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !manifest[id],\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n      };\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n        children: undefined,\n      };\n      manifest[id] = pathOrLayoutRoute;\n\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(\n          route.children,\n          mapRouteProperties,\n          treePath,\n          manifest\n        );\n      }\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  return matchRoutesImpl(routes, locationArg, basename, false);\n}\n\nexport function matchRoutesImpl<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename: string,\n  allowPartial: boolean\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    let decoded = decodePath(pathname);\n    matches = matchRouteBranch<string, RouteObjectType>(\n      branches[i],\n      decoded,\n      allowPartial\n    );\n  }\n\n  return matches;\n}\n\nexport interface UIMatch<Data = unknown, Handle = unknown> {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: Data;\n  handle: Handle;\n}\n\nexport function convertRouteMatchToUiMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UIMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle,\n  };\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  let flattenRoute = (\n    route: RouteObjectType,\n    index: number,\n    relativePath?: string\n  ) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath:\n        relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta,\n    });\n  };\n  routes.forEach((route, index) => {\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !route.path?.includes(\"?\")) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n\n  return branches;\n}\n\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path: string): string[] {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  let [first, ...rest] = segments;\n\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n\n  let result: string[] = [];\n\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(\n    ...restExploded.map((subpath) =>\n      subpath === \"\" ? required : [required, subpath].join(\"/\")\n    )\n  );\n\n  // Then, if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map((exploded) =>\n    path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded\n  );\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:[\\w-]+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string,\n  allowPartial = false\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    let route = meta.route;\n\n    if (\n      !match &&\n      end &&\n      allowPartial &&\n      !routesMeta[routesMeta.length - 1].route.index\n    ) {\n      match = matchPath(\n        {\n          path: meta.relativePath,\n          caseSensitive: meta.caseSensitive,\n          end: false,\n        },\n        remainingPathname\n      );\n    }\n\n    if (!match) {\n      return null;\n    }\n\n    Object.assign(matchedParams, match.params);\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  originalPath: Path,\n  params: {\n    [key in PathParam<Path>]: string | null;\n  } = {} as any\n): string {\n  let path: string = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(\n      false,\n      `Route path \"${path}\" will be treated as if it were ` +\n        `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n        `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n        `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n    );\n    path = path.replace(/\\*$/, \"/*\") as Path;\n  }\n\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n\n  const stringify = (p: any) =>\n    p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n\n  const segments = path\n    .split(/\\/+/)\n    .map((segment, index, array) => {\n      const isLastSegment = index === array.length - 1;\n\n      // only apply the splat if it's the last segment\n      if (isLastSegment && segment === \"*\") {\n        const star = \"*\" as PathParam<Path>;\n        // Apply the splat\n        return stringify(params[star]);\n      }\n\n      const keyMatch = segment.match(/^:([\\w-]+)(\\??)$/);\n      if (keyMatch) {\n        const [, key, optional] = keyMatch;\n        let param = params[key as PathParam<Path>];\n        invariant(optional === \"?\" || param != null, `Missing \":${key}\" param`);\n        return stringify(param);\n      }\n\n      // Remove any optional markers from optional static segments\n      return segment.replace(/\\?$/g, \"\");\n    })\n    // Remove empty segments\n    .filter((segment) => !!segment);\n\n  return prefix + segments.join(\"/\");\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, compiledParams] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = compiledParams.reduce<Mutable<Params>>(\n    (memo, { paramName, isOptional }, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      const value = captureGroups[index];\n      if (isOptional && !value) {\n        memo[paramName] = undefined;\n      } else {\n        memo[paramName] = (value || \"\").replace(/%2F/g, \"/\");\n      }\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\ntype CompiledPathParam = { paramName: string; isOptional?: boolean };\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, CompiledPathParam[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let params: CompiledPathParam[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^${}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(\n        /\\/:([\\w-]+)(\\?)?/g,\n        (_: string, paramName: string, isOptional) => {\n          params.push({ paramName, isOptional: isOptional != null });\n          return isOptional ? \"/?([^\\\\/]+)?\" : \"/([^\\\\/]+)\";\n        }\n      );\n\n  if (path.endsWith(\"*\")) {\n    params.push({ paramName: \"*\" });\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, params];\n}\n\nexport function decodePath(value: string) {\n  try {\n    return value\n      .split(\"/\")\n      .map((v) => decodeURIComponent(v).replace(/\\//g, \"%2F\"))\n      .join(\"/\");\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n// Return the array of pathnames for the current route matches - used to\n// generate the routePathnames input for resolveTo()\nexport function getResolveToMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[], v7_relativeSplatPath: boolean) {\n  let pathMatches = getPathContributingMatches(matches);\n\n  // When v7_relativeSplatPath is enabled, use the full pathname for the leaf\n  // match so we include splat values for \".\" links.  See:\n  // https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329\n  if (v7_relativeSplatPath) {\n    return pathMatches.map((match, idx) =>\n      idx === pathMatches.length - 1 ? match.pathname : match.pathnameBase\n    );\n  }\n\n  return pathMatches.map((match) => match.pathnameBase);\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    // With relative=\"route\" (the default), each leading .. segment means\n    // \"go up one route\" instead of \"go up one URL segment\".  This is a key\n    // difference from how <a href> works and a major reason we call this a\n    // \"to\" value instead of a \"href\".\n    if (!isPathRelative && toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport class DataWithResponseInit<D> {\n  type: string = \"DataWithResponseInit\";\n  data: D;\n  init: ResponseInit | null;\n\n  constructor(data: D, init?: ResponseInit) {\n    this.data = data;\n    this.init = init || null;\n  }\n}\n\n/**\n * Create \"responses\" that contain `status`/`headers` without forcing\n * serialization into an actual `Response` - used by Remix single fetch\n */\nexport function data<D>(data: D, init?: number | ResponseInit) {\n  return new DataWithResponseInit(\n    data,\n    typeof init === \"number\" ? { status: init } : init\n  );\n}\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeysSet: Set<string> = new Set<string>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscribers: Set<(aborted: boolean, settledKey?: string) => void> =\n    new Set();\n  data: Record<string, unknown>;\n  init?: ResponseInit;\n  deferredKeys: string[] = [];\n\n  constructor(data: Record<string, unknown>, responseInit?: ResponseInit) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  private trackPromise(\n    key: string,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, undefined, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    // If the promise was resolved/rejected with undefined, we'll throw an error as you\n    // should always resolve with a value or null\n    if (error === undefined && data === undefined) {\n      let undefinedError = new Error(\n        `Deferred data for key \"${key}\" resolved/rejected with \\`undefined\\`, ` +\n          `you must resolve/reject with a value or \\`null\\`.`\n      );\n      Object.defineProperty(promise, \"_error\", { get: () => undefinedError });\n      this.emit(false, key);\n      return Promise.reject(undefinedError);\n    }\n\n    if (data === undefined) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    this.emit(false, key);\n    return data;\n  }\n\n  private emit(aborted: boolean, settledKey?: string) {\n    this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn: (aborted: boolean, settledKey?: string) => void) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport type DeferFunction = (\n  data: Record<string, unknown>,\n  init?: number | ResponseInit\n) => DeferredData;\n\nexport const defer: DeferFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  return new DeferredData(data, responseInit);\n};\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirectDocument: RedirectFunction = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n\n/**\n * A redirect response that will perform a `history.replaceState` instead of a\n * `history.pushState` for client-side navigation redirects.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const replace: RedirectFunction = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Replace\", \"true\");\n  return response;\n};\n\nexport type ErrorResponse = {\n  status: number;\n  statusText: string;\n  data: any;\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n *\n * We don't export the class for public use since it's an implementation\n * detail, but we export the interface above so folks can build their own\n * abstractions around instances via isRouteErrorResponse()\n */\nexport class ErrorResponseImpl implements ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n  private error?: Error;\n  private internal: boolean;\n\n  constructor(\n    status: number,\n    statusText: string | undefined,\n    data: any,\n    internal = false\n  ) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nexport function isRouteErrorResponse(error: any): error is ErrorResponse {\n  return (\n    error != null &&\n    typeof error.status === \"number\" &&\n    typeof error.statusText === \"string\" &&\n    typeof error.internal === \"boolean\" &&\n    \"data\" in error\n  );\n}\n", "import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  invariant,\n  parsePath,\n  warning,\n} from \"./history\";\nimport type {\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DataStrategyMatch,\n  AgnosticRouteObject,\n  DataResult,\n  DataStrategyFunction,\n  DataStrategyFunctionArgs,\n  DeferredData,\n  DeferredResult,\n  DetectErrorBoundaryFunction,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  HTMLFormMethod,\n  DataStrategyResult,\n  ImmutableRouteKey,\n  MapRoutePropertiesFunction,\n  MutationFormMethod,\n  RedirectResult,\n  RouteData,\n  RouteManifest,\n  ShouldRevalidateFunctionArgs,\n  Submission,\n  SuccessResult,\n  UIMatch,\n  V7_FormMethod,\n  V7_MutationFormMethod,\n  AgnosticPatchRoutesOnNavigationFunction,\n  DataWithResponseInit,\n} from \"./utils\";\nimport {\n  ErrorResponseImpl,\n  ResultType,\n  convertRouteMatchToUiMatch,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  getResolveToMatches,\n  immutableRouteKeys,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  matchRoutesImpl,\n  resolveTo,\n  stripBasename,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the future config for the router\n   */\n  get future(): FutureConfig;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the window associated with the router\n   */\n  get window(): RouterInit[\"window\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): Promise<void>;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To | null, opts?: RouterNavigateOptions): Promise<void>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to URL encode a destination path according to the internal\n   * history implementation\n   * @param to\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get a navigation blocker\n   * @param key The identifier for the blocker\n   * @param fn The blocker function implementation\n   */\n  getBlocker(key: string, fn: BlockerFunction): Blocker;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete a navigation blocker\n   * @param key The identifier for the blocker\n   */\n  deleteBlocker(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE DO NOT USE\n   *\n   * Patch additional children routes into an existing parent route\n   * @param routeId The parent route id or a callback function accepting `patch`\n   *                to perform batch patching\n   * @param children The additional children routes\n   */\n  patchRoutes(routeId: string | null, children: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * HMR needs to pass in-flight route updates to React Router\n   * TODO: Replace this with granular route update APIs (addRoute, updateRoute, deleteRoute)\n   */\n  _internalSetRoutes(routes: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n\n  /**\n   * Map of current blockers\n   */\n  blockers: Map<string, Blocker>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface FutureConfig {\n  v7_fetcherPersist: boolean;\n  v7_normalizeFormMethod: boolean;\n  v7_partialHydration: boolean;\n  v7_prependBasename: boolean;\n  v7_relativeSplatPath: boolean;\n  v7_skipActionErrorRevalidation: boolean;\n}\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  routes: AgnosticRouteObject[];\n  history: History;\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<FutureConfig>;\n  hydrationData?: HydrationState;\n  window?: Window;\n  unstable_patchRoutesOnNavigation?: AgnosticPatchRoutesOnNavigationFunction;\n  unstable_dataStrategy?: DataStrategyFunction;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  basename: Router[\"basename\"];\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  activeDeferreds: Record<string, DeferredData> | null;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(\n    request: Request,\n    opts?: {\n      requestContext?: unknown;\n      skipLoaderErrorBubbling?: boolean;\n      unstable_dataStrategy?: DataStrategyFunction;\n    }\n  ): Promise<StaticHandlerContext | Response>;\n  queryRoute(\n    request: Request,\n    opts?: {\n      routeId?: string;\n      requestContext?: unknown;\n      unstable_dataStrategy?: DataStrategyFunction;\n    }\n  ): Promise<any>;\n}\n\ntype ViewTransitionOpts = {\n  currentLocation: Location;\n  nextLocation: Location;\n};\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (\n    state: RouterState,\n    opts: {\n      deletedFetchers: string[];\n      unstable_viewTransitionOpts?: ViewTransitionOpts;\n      unstable_flushSync: boolean;\n    }\n  ): void;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UIMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\nexport type RelativeRoutingType = \"route\" | \"path\";\n\n// Allowed for any navigation or fetch\ntype BaseNavigateOrFetchOptions = {\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n  unstable_flushSync?: boolean;\n};\n\n// Only allowed for navigations\ntype BaseNavigateOptions = BaseNavigateOrFetchOptions & {\n  replace?: boolean;\n  state?: any;\n  fromRouteId?: string;\n  unstable_viewTransition?: boolean;\n};\n\n// Only allowed for submission navigations\ntype BaseSubmissionOptions = {\n  formMethod?: HTMLFormMethod;\n  formEncType?: FormEncType;\n} & (\n  | { formData: FormData; body?: undefined }\n  | { formData?: undefined; body: any }\n);\n\n/**\n * Options for a navigate() call for a normal (non-submission) navigation\n */\ntype LinkNavigateOptions = BaseNavigateOptions;\n\n/**\n * Options for a navigate() call for a submission navigation\n */\ntype SubmissionNavigateOptions = BaseNavigateOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to navigate() for a navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options for a fetch() load\n */\ntype LoadFetchOptions = BaseNavigateOrFetchOptions;\n\n/**\n * Options for a fetch() submission\n */\ntype SubmitFetchOptions = BaseNavigateOrFetchOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions = LoadFetchOptions | SubmitFetchOptions;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    json: undefined;\n    text: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    text: Submission[\"text\"];\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    text: undefined;\n    formData: undefined;\n    json: undefined;\n    data: TData | undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    data: TData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    text: Submission[\"text\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    data: TData | undefined;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface BlockerBlocked {\n  state: \"blocked\";\n  reset(): void;\n  proceed(): void;\n  location: Location;\n}\n\ninterface BlockerUnblocked {\n  state: \"unblocked\";\n  reset: undefined;\n  proceed: undefined;\n  location: undefined;\n}\n\ninterface BlockerProceeding {\n  state: \"proceeding\";\n  reset: undefined;\n  proceed: undefined;\n  location: Location;\n}\n\nexport type Blocker = BlockerUnblocked | BlockerBlocked | BlockerProceeding;\n\nexport type BlockerFunction = (args: {\n  currentLocation: Location;\n  nextLocation: Location;\n  historyAction: HistoryAction;\n}) => boolean;\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ntype PendingActionResult = [string, SuccessResult | ErrorResult];\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Route matches which may have been updated from fog of war discovery\n   */\n  matches?: RouterState[\"matches\"];\n  /**\n   * Tuple for the returned or thrown value from the current action.  The routeId\n   * is the action route for success and the bubbled boundary route for errors.\n   */\n  pendingActionResult?: PendingActionResult;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * Route matches which may have been updated from fog of war discovery\n   */\n  matches?: RouterState[\"matches\"];\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Cached info for active fetcher.load() instances so they can participate\n * in revalidation\n */\ninterface FetchLoadMatch {\n  routeId: string;\n  path: string;\n}\n\n/**\n * Identified fetcher.load() calls that need to be revalidated\n */\ninterface RevalidatingFetcher extends FetchLoadMatch {\n  key: string;\n  match: AgnosticDataRouteMatch | null;\n  matches: AgnosticDataRouteMatch[] | null;\n  controller: AbortController | null;\n}\n\nconst validMutationMethodsArr: MutationFormMethod[] = [\n  \"post\",\n  \"put\",\n  \"patch\",\n  \"delete\",\n];\nconst validMutationMethods = new Set<MutationFormMethod>(\n  validMutationMethodsArr\n);\n\nconst validRequestMethodsArr: FormMethod[] = [\n  \"get\",\n  ...validMutationMethodsArr,\n];\nconst validRequestMethods = new Set<FormMethod>(validRequestMethodsArr);\n\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_BLOCKER: BlockerUnblocked = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined,\n};\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\nconst defaultMapRouteProperties: MapRoutePropertiesFunction = (route) => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary),\n});\n\nconst TRANSITIONS_STORAGE_KEY = \"remix-router-transitions\";\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  const routerWindow = init.window\n    ? init.window\n    : typeof window !== \"undefined\"\n    ? window\n    : undefined;\n  const isBrowser =\n    typeof routerWindow !== \"undefined\" &&\n    typeof routerWindow.document !== \"undefined\" &&\n    typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n\n  // Routes keyed by ID\n  let manifest: RouteManifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(\n    init.routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n  let inFlightDataRoutes: AgnosticDataRouteObject[] | undefined;\n  let basename = init.basename || \"/\";\n  let dataStrategyImpl = init.unstable_dataStrategy || defaultDataStrategy;\n  let patchRoutesOnNavigationImpl = init.unstable_patchRoutesOnNavigation;\n\n  // Config driven behavior flags\n  let future: FutureConfig = {\n    v7_fetcherPersist: false,\n    v7_normalizeFormMethod: false,\n    v7_partialHydration: false,\n    v7_prependBasename: false,\n    v7_relativeSplatPath: false,\n    v7_skipActionErrorRevalidation: false,\n    ...init.future,\n  };\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // FIFO queue of previously discovered routes to prevent re-calling on\n  // subsequent navigations to the same path\n  let discoveredRoutesMaxSize = 1000;\n  let discoveredRoutes = new Set<string>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null && !patchRoutesOnNavigationImpl) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname,\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  // In SPA apps, if the user provided a patchRoutesOnNavigation implementation and\n  // our initial match is a splat route, clear them out so we run through lazy\n  // discovery on hydration in case there's a more accurate lazy route match.\n  // In SSR apps (with `hydrationData`), we expect that the server will send\n  // up the proper matched routes so we don't want to run lazy discovery on\n  // initial hydration and want to hydrate into the splat route.\n  if (initialMatches && !init.hydrationData) {\n    let fogOfWar = checkFogOfWar(\n      initialMatches,\n      dataRoutes,\n      init.history.location.pathname\n    );\n    if (fogOfWar.active) {\n      initialMatches = null;\n    }\n  }\n\n  let initialized: boolean;\n  if (!initialMatches) {\n    initialized = false;\n    initialMatches = [];\n\n    // If partial hydration and fog of war is enabled, we will be running\n    // `patchRoutesOnNavigation` during hydration so include any partial matches as\n    // the initial matches so we can properly render `HydrateFallback`'s\n    if (future.v7_partialHydration) {\n      let fogOfWar = checkFogOfWar(\n        null,\n        dataRoutes,\n        init.history.location.pathname\n      );\n      if (fogOfWar.active && fogOfWar.matches) {\n        initialMatches = fogOfWar.matches;\n      }\n    }\n  } else if (initialMatches.some((m) => m.route.lazy)) {\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    initialized = false;\n  } else if (!initialMatches.some((m) => m.route.loader)) {\n    // If we've got no loaders to run, then we're good to go\n    initialized = true;\n  } else if (future.v7_partialHydration) {\n    // If partial hydration is enabled, we're initialized so long as we were\n    // provided with hydrationData for every route with a loader, and no loaders\n    // were marked for explicit hydration\n    let loaderData = init.hydrationData ? init.hydrationData.loaderData : null;\n    let errors = init.hydrationData ? init.hydrationData.errors : null;\n    let isRouteInitialized = (m: AgnosticDataRouteMatch) => {\n      // No loader, nothing to initialize\n      if (!m.route.loader) {\n        return true;\n      }\n      // Explicitly opting-in to running on hydration\n      if (\n        typeof m.route.loader === \"function\" &&\n        m.route.loader.hydrate === true\n      ) {\n        return false;\n      }\n      // Otherwise, initialized if hydrated with data or an error\n      return (\n        (loaderData && loaderData[m.route.id] !== undefined) ||\n        (errors && errors[m.route.id] !== undefined)\n      );\n    };\n\n    // If errors exist, don't consider routes below the boundary\n    if (errors) {\n      let idx = initialMatches.findIndex(\n        (m) => errors![m.route.id] !== undefined\n      );\n      initialized = initialMatches.slice(0, idx + 1).every(isRouteInitialized);\n    } else {\n      initialized = initialMatches.every(isRouteInitialized);\n    }\n  } else {\n    // Without partial hydration - we're initialized if we were provided any\n    // hydrationData - which is expected to be complete\n    initialized = init.hydrationData != null;\n  }\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n\n  // Should the current navigation enable document.startViewTransition?\n  let pendingViewTransitionEnabled = false;\n\n  // Store applied view transitions so we can apply them on POP\n  let appliedViewTransitions: Map<string, Set<string>> = new Map<\n    string,\n    Set<string>\n  >();\n\n  // Cleanup function for persisting applied transitions to sessionStorage\n  let removePageHideEventListener: (() => void) | null = null;\n\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: Set<string> = new Set();\n\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set<string>();\n\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n\n  // Ref-count mounted fetchers so we know when it's ok to clean them up\n  let activeFetchers = new Map<string, number>();\n\n  // Fetchers that have requested a delete when using v7_fetcherPersist,\n  // they'll be officially removed after they return to idle\n  let deletedFetchers = new Set<string>();\n\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map<string, BlockerFunction>();\n\n  // Map of pending patchRoutesOnNavigation() promises (keyed by path/matches) so\n  // that we only kick them off once for a given combo\n  let pendingPatchRoutes = new Map<\n    string,\n    ReturnType<AgnosticPatchRoutesOnNavigationFunction>\n  >();\n\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let unblockBlockerHistoryUpdate: (() => void) | undefined = undefined;\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location, delta }) => {\n        // Ignore this event if it was just us resetting the URL from a\n        // blocked POP navigation\n        if (unblockBlockerHistoryUpdate) {\n          unblockBlockerHistoryUpdate();\n          unblockBlockerHistoryUpdate = undefined;\n          return;\n        }\n\n        warning(\n          blockerFunctions.size === 0 || delta != null,\n          \"You are trying to use a blocker on a POP navigation to a location \" +\n            \"that was not created by @remix-run/router. This will fail silently in \" +\n            \"production. This can happen if you are navigating outside the router \" +\n            \"via `window.history.pushState`/`window.location.hash` instead of using \" +\n            \"router navigation APIs.  This can also happen if you are using \" +\n            \"createHashRouter and the user manually changes the URL.\"\n        );\n\n        let blockerKey = shouldBlockNavigation({\n          currentLocation: state.location,\n          nextLocation: location,\n          historyAction,\n        });\n\n        if (blockerKey && delta != null) {\n          // Restore the URL to match the current UI, but don't update router state\n          let nextHistoryUpdatePromise = new Promise<void>((resolve) => {\n            unblockBlockerHistoryUpdate = resolve;\n          });\n          init.history.go(delta * -1);\n\n          // Put the blocker into a blocked state\n          updateBlocker(blockerKey, {\n            state: \"blocked\",\n            location,\n            proceed() {\n              updateBlocker(blockerKey!, {\n                state: \"proceeding\",\n                proceed: undefined,\n                reset: undefined,\n                location,\n              });\n              // Re-do the same POP navigation we just blocked, after the url\n              // restoration is also complete.  See:\n              // https://github.com/remix-run/react-router/issues/11613\n              nextHistoryUpdatePromise.then(() => init.history.go(delta));\n            },\n            reset() {\n              let blockers = new Map(state.blockers);\n              blockers.set(blockerKey!, IDLE_BLOCKER);\n              updateState({ blockers });\n            },\n          });\n          return;\n        }\n\n        return startNavigation(historyAction, location);\n      }\n    );\n\n    if (isBrowser) {\n      // FIXME: This feels gross.  How can we cleanup the lines between\n      // scrollRestoration/appliedTransitions persistance?\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n      let _saveAppliedTransitions = () =>\n        persistAppliedTransitions(routerWindow, appliedViewTransitions);\n      routerWindow.addEventListener(\"pagehide\", _saveAppliedTransitions);\n      removePageHideEventListener = () =>\n        routerWindow.removeEventListener(\"pagehide\", _saveAppliedTransitions);\n    }\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location, {\n        initialHydration: true,\n      });\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(\n    newState: Partial<RouterState>,\n    opts: {\n      flushSync?: boolean;\n      viewTransitionOpts?: ViewTransitionOpts;\n    } = {}\n  ): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n\n    // Prep fetcher cleanup so we can tell the UI which fetcher data entries\n    // can be removed\n    let completedFetchers: string[] = [];\n    let deletedFetchersKeys: string[] = [];\n\n    if (future.v7_fetcherPersist) {\n      state.fetchers.forEach((fetcher, key) => {\n        if (fetcher.state === \"idle\") {\n          if (deletedFetchers.has(key)) {\n            // Unmounted from the UI and can be totally removed\n            deletedFetchersKeys.push(key);\n          } else {\n            // Returned to idle but still mounted in the UI, so semi-remains for\n            // revalidations and such\n            completedFetchers.push(key);\n          }\n        }\n      });\n    }\n\n    // Iterate over a local copy so that if flushSync is used and we end up\n    // removing and adding a new subscriber due to the useCallback dependencies,\n    // we don't get ourselves into a loop calling the new subscriber immediately\n    [...subscribers].forEach((subscriber) =>\n      subscriber(state, {\n        deletedFetchers: deletedFetchersKeys,\n        unstable_viewTransitionOpts: opts.viewTransitionOpts,\n        unstable_flushSync: opts.flushSync === true,\n      })\n    );\n\n    // Remove idle fetchers from state since we only care about in-flight fetchers.\n    if (future.v7_fetcherPersist) {\n      completedFetchers.forEach((key) => state.fetchers.delete(key));\n      deletedFetchersKeys.forEach((key) => deleteFetcher(key));\n    }\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>,\n    { flushSync }: { flushSync?: boolean } = {}\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      isMutationMethod(state.navigation.formMethod) &&\n      state.navigation.state === \"loading\" &&\n      location.state?._isRedirect !== true;\n\n    let actionData: RouteData | null;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData\n      ? mergeLoaderData(\n          state.loaderData,\n          newState.loaderData,\n          newState.matches || [],\n          newState.errors\n        )\n      : state.loaderData;\n\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    let blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    }\n\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset =\n      pendingPreventScrollReset === true ||\n      (state.navigation.formMethod != null &&\n        isMutationMethod(state.navigation.formMethod) &&\n        location.state?._isRedirect !== true);\n\n    // Commit any in-flight routes at the end of the HMR revalidation \"navigation\"\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    let viewTransitionOpts: ViewTransitionOpts | undefined;\n\n    // On POP, enable transitions if they were enabled on the original navigation\n    if (pendingAction === HistoryAction.Pop) {\n      // Forward takes precedence so they behave like the original navigation\n      let priorPaths = appliedViewTransitions.get(state.location.pathname);\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location,\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        // If we don't have a previous forward nav, assume we're popping back to\n        // the new location and enable if that location previously enabled\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location,\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      // Store the applied transition on PUSH/REPLACE\n      let toPaths = appliedViewTransitions.get(state.location.pathname);\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = new Set<string>([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location,\n      };\n    }\n\n    updateState(\n      {\n        ...newState, // matches, errors, fetchers go through as-is\n        actionData,\n        loaderData,\n        historyAction: pendingAction,\n        location,\n        initialized: true,\n        navigation: IDLE_NAVIGATION,\n        revalidation: \"idle\",\n        restoreScrollPosition: getSavedScrollPosition(\n          location,\n          newState.matches || state.matches\n        ),\n        preventScrollReset,\n        blockers,\n      },\n      {\n        viewTransitionOpts,\n        flushSync: flushSync === true,\n      }\n    );\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To | null,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      to,\n      future.v7_relativeSplatPath,\n      opts?.fromRouteId,\n      opts?.relative\n    );\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      false,\n      normalizedPath,\n      opts\n    );\n\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = {\n      ...nextLocation,\n      ...init.history.encodeLocation(nextLocation),\n    };\n\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n\n    let historyAction = HistoryAction.Push;\n\n    if (userReplace === true) {\n      historyAction = HistoryAction.Replace;\n    } else if (userReplace === false) {\n      // no-op\n    } else if (\n      submission != null &&\n      isMutationMethod(submission.formMethod) &&\n      submission.formAction === state.location.pathname + state.location.search\n    ) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = HistoryAction.Replace;\n    }\n\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction,\n    });\n\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey!, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation,\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey!, IDLE_BLOCKER);\n          updateState({ blockers });\n        },\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n      enableViewTransition: opts && opts.unstable_viewTransition,\n      flushSync,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      {\n        overrideNavigation: state.navigation,\n        // Proxy through any rending view transition\n        enableViewTransition: pendingViewTransitionEnabled === true,\n      }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      initialHydration?: boolean;\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponseImpl;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n      enableViewTransition?: boolean;\n      flushSync?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n    let flushSync = (opts && opts.flushSync) === true;\n\n    let fogOfWar = checkFogOfWar(matches, routesToUse, location.pathname);\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    }\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let { error, notFoundMatches, route } = handleNavigational404(\n        location.pathname\n      );\n      completeNavigation(\n        location,\n        {\n          matches: notFoundMatches,\n          loaderData: {},\n          errors: {\n            [route.id]: error,\n          },\n        },\n        { flushSync }\n      );\n      return;\n    }\n\n    // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial load will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n    if (\n      state.initialized &&\n      !isRevalidationRequired &&\n      isHashChangeOnly(state.location, location) &&\n      !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))\n    ) {\n      completeNavigation(location, { matches }, { flushSync });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(\n      init.history,\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionResult: PendingActionResult | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingActionResult = [\n        findNearestBoundary(matches).route.id,\n        { type: ResultType.error, error: opts.pendingError },\n      ];\n    } else if (\n      opts &&\n      opts.submission &&\n      isMutationMethod(opts.submission.formMethod)\n    ) {\n      // Call action if we received an action submission\n      let actionResult = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        fogOfWar.active,\n        { replace: opts.replace, flushSync }\n      );\n\n      if (actionResult.shortCircuited) {\n        return;\n      }\n\n      // If we received a 404 from handleAction, it's because we couldn't lazily\n      // discover the destination route so we don't want to call loaders\n      if (actionResult.pendingActionResult) {\n        let [routeId, result] = actionResult.pendingActionResult;\n        if (\n          isErrorResult(result) &&\n          isRouteErrorResponse(result.error) &&\n          result.error.status === 404\n        ) {\n          pendingNavigationController = null;\n\n          completeNavigation(location, {\n            matches: actionResult.matches,\n            loaderData: {},\n            errors: {\n              [routeId]: result.error,\n            },\n          });\n          return;\n        }\n      }\n\n      matches = actionResult.matches || matches;\n      pendingActionResult = actionResult.pendingActionResult;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n      flushSync = false;\n      // No need to do fog of war matching again on loader execution\n      fogOfWar.active = false;\n\n      // Create a GET request for the loaders\n      request = createClientSideRequest(\n        init.history,\n        request.url,\n        request.signal\n      );\n    }\n\n    // Call loaders\n    let {\n      shortCircuited,\n      matches: updatedMatches,\n      loaderData,\n      errors,\n    } = await handleLoaders(\n      request,\n      location,\n      matches,\n      fogOfWar.active,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.fetcherSubmission,\n      opts && opts.replace,\n      opts && opts.initialHydration === true,\n      flushSync,\n      pendingActionResult\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches: updatedMatches || matches,\n      ...getActionDataForCommit(pendingActionResult),\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    opts: { replace?: boolean; flushSync?: boolean } = {}\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({ navigation }, { flushSync: opts.flushSync === true });\n\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(\n        matches,\n        location.pathname,\n        request.signal\n      );\n      if (discoverResult.type === \"aborted\") {\n        return { shortCircuited: true };\n      } else if (discoverResult.type === \"error\") {\n        let { boundaryId, error } = handleDiscoverRouteError(\n          location.pathname,\n          discoverResult\n        );\n        return {\n          matches: discoverResult.partialMatches,\n          pendingActionResult: [\n            boundaryId,\n            {\n              type: ResultType.error,\n              error,\n            },\n          ],\n        };\n      } else if (!discoverResult.matches) {\n        let { notFoundMatches, error, route } = handleNavigational404(\n          location.pathname\n        );\n        return {\n          matches: notFoundMatches,\n          pendingActionResult: [\n            route.id,\n            {\n              type: ResultType.error,\n              error,\n            },\n          ],\n        };\n      } else {\n        matches = discoverResult.matches;\n      }\n    }\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id,\n        }),\n      };\n    } else {\n      let results = await callDataStrategy(\n        \"action\",\n        state,\n        request,\n        [actionMatch],\n        matches,\n        null\n      );\n      result = results[actionMatch.route.id];\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace: boolean;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        let location = normalizeRedirectLocation(\n          result.response.headers.get(\"Location\")!,\n          new URL(request.url),\n          basename\n        );\n        replace = location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(request, result, true, {\n        submission,\n        replace,\n      });\n      return { shortCircuited: true };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions to the current location are REPLACE\n      // navigations, but if the action threw an error that'll be rendered in\n      // an errorElement, we fall back to PUSH so that the user can use the\n      // back button to get back to the pre-submission form location to try\n      // again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        matches,\n        pendingActionResult: [boundaryMatch.route.id, result],\n      };\n    }\n\n    return {\n      matches,\n      pendingActionResult: [actionMatch.route.id, result],\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    fetcherSubmission?: Submission,\n    replace?: boolean,\n    initialHydration?: boolean,\n    flushSync?: boolean,\n    pendingActionResult?: PendingActionResult\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation =\n      overrideNavigation || getLoadingNavigation(location, submission);\n\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission =\n      submission ||\n      fetcherSubmission ||\n      getSubmissionFromNavigation(loadingNavigation);\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    // If we have partialHydration enabled, then don't update the state for the\n    // initial data load since it's not a \"navigation\"\n    let shouldUpdateNavigationState =\n      !isUninterruptedRevalidation &&\n      (!future.v7_partialHydration || !initialHydration);\n\n    // When fog of war is enabled, we enter our `loading` state earlier so we\n    // can discover new routes during the `loading` state.  We skip this if\n    // we've already run actions since we would have done our matching already.\n    // If the children() function threw then, we want to proceed with the\n    // partial matches it discovered.\n    if (isFogOfWar) {\n      if (shouldUpdateNavigationState) {\n        let actionData = getUpdatedActionData(pendingActionResult);\n        updateState(\n          {\n            navigation: loadingNavigation,\n            ...(actionData !== undefined ? { actionData } : {}),\n          },\n          {\n            flushSync,\n          }\n        );\n      }\n\n      let discoverResult = await discoverRoutes(\n        matches,\n        location.pathname,\n        request.signal\n      );\n\n      if (discoverResult.type === \"aborted\") {\n        return { shortCircuited: true };\n      } else if (discoverResult.type === \"error\") {\n        let { boundaryId, error } = handleDiscoverRouteError(\n          location.pathname,\n          discoverResult\n        );\n        return {\n          matches: discoverResult.partialMatches,\n          loaderData: {},\n          errors: {\n            [boundaryId]: error,\n          },\n        };\n      } else if (!discoverResult.matches) {\n        let { error, notFoundMatches, route } = handleNavigational404(\n          location.pathname\n        );\n        return {\n          matches: notFoundMatches,\n          loaderData: {},\n          errors: {\n            [route.id]: error,\n          },\n        };\n      } else {\n        matches = discoverResult.matches;\n      }\n    }\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      activeSubmission,\n      location,\n      future.v7_partialHydration && initialHydration === true,\n      future.v7_skipActionErrorRevalidation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      deletedFetchers,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      pendingActionResult\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(\n        location,\n        {\n          matches,\n          loaderData: {},\n          // Commit pending error if we're short circuiting\n          errors:\n            pendingActionResult && isErrorResult(pendingActionResult[1])\n              ? { [pendingActionResult[0]]: pendingActionResult[1].error }\n              : null,\n          ...getActionDataForCommit(pendingActionResult),\n          ...(updatedFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n        },\n        { flushSync }\n      );\n      return { shortCircuited: true };\n    }\n\n    if (shouldUpdateNavigationState) {\n      let updates: Partial<RouterState> = {};\n      if (!isFogOfWar) {\n        // Only update navigation/actionNData if we didn't already do it above\n        updates.navigation = loadingNavigation;\n        let actionData = getUpdatedActionData(pendingActionResult);\n        if (actionData !== undefined) {\n          updates.actionData = actionData;\n        }\n      }\n      if (revalidatingFetchers.length > 0) {\n        updates.fetchers = getUpdatedRevalidatingFetchers(revalidatingFetchers);\n      }\n      updateState(updates, { flushSync });\n    }\n\n    revalidatingFetchers.forEach((rf) => {\n      if (fetchControllers.has(rf.key)) {\n        abortFetcher(rf.key);\n      }\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((f) => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n\n    let { loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n    revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(loaderResults);\n    if (redirect) {\n      await startRedirectNavigation(request, redirect.result, true, {\n        replace,\n      });\n      return { shortCircuited: true };\n    }\n\n    redirect = findRedirect(fetcherResults);\n    if (redirect) {\n      // If this redirect came from a fetcher make sure we mark it in\n      // fetchRedirectIds so it doesn't get revalidated on the next set of\n      // loader executions\n      fetchRedirectIds.add(redirect.key);\n      await startRedirectNavigation(request, redirect.result, true, {\n        replace,\n      });\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingActionResult,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    // During partial hydration, preserve SSR errors for routes that don't re-run\n    if (future.v7_partialHydration && initialHydration && state.errors) {\n      Object.entries(state.errors)\n        .filter(([id]) => !matchesToLoad.some((m) => m.route.id === id))\n        .forEach(([routeId, error]) => {\n          errors = Object.assign(errors || {}, { [routeId]: error });\n        });\n    }\n\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers =\n      updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n\n    return {\n      matches,\n      loaderData,\n      errors,\n      ...(shouldUpdateFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n    };\n  }\n\n  function getUpdatedActionData(\n    pendingActionResult: PendingActionResult | undefined\n  ): Record<string, RouteData> | null | undefined {\n    if (pendingActionResult && !isErrorResult(pendingActionResult[1])) {\n      // This is cast to `any` currently because `RouteData`uses any and it\n      // would be a breaking change to use any.\n      // TODO: v7 - change `RouteData` to use `unknown` instead of `any`\n      return {\n        [pendingActionResult[0]]: pendingActionResult[1].data as any,\n      };\n    } else if (state.actionData) {\n      if (Object.keys(state.actionData).length === 0) {\n        return null;\n      } else {\n        return state.actionData;\n      }\n    }\n  }\n\n  function getUpdatedRevalidatingFetchers(\n    revalidatingFetchers: RevalidatingFetcher[]\n  ) {\n    revalidatingFetchers.forEach((rf) => {\n      let fetcher = state.fetchers.get(rf.key);\n      let revalidatingFetcher = getLoadingFetcher(\n        undefined,\n        fetcher ? fetcher.data : undefined\n      );\n      state.fetchers.set(rf.key, revalidatingFetcher);\n    });\n    return new Map(state.fetchers);\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      href,\n      future.v7_relativeSplatPath,\n      routeId,\n      opts?.relative\n    );\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n\n    let fogOfWar = checkFogOfWar(matches, routesToUse, normalizedPath);\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    }\n\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: normalizedPath }),\n        { flushSync }\n      );\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      true,\n      normalizedPath,\n      opts\n    );\n\n    if (error) {\n      setFetcherError(key, routeId, error, { flushSync });\n      return;\n    }\n\n    let match = getTargetMatch(matches, path);\n\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(\n        key,\n        routeId,\n        path,\n        match,\n        matches,\n        fogOfWar.active,\n        flushSync,\n        submission\n      );\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, { routeId, path });\n    handleFetcherLoader(\n      key,\n      routeId,\n      path,\n      match,\n      matches,\n      fogOfWar.active,\n      flushSync,\n      submission\n    );\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    flushSync: boolean,\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    function detectAndHandle405Error(m: AgnosticDataRouteMatch) {\n      if (!m.route.action && !m.route.lazy) {\n        let error = getInternalRouterError(405, {\n          method: submission.formMethod,\n          pathname: path,\n          routeId: routeId,\n        });\n        setFetcherError(key, routeId, error, { flushSync });\n        return true;\n      }\n      return false;\n    }\n\n    if (!isFogOfWar && detectAndHandle405Error(match)) {\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {\n      flushSync,\n    });\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal,\n      submission\n    );\n\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(\n        requestMatches,\n        path,\n        fetchRequest.signal\n      );\n\n      if (discoverResult.type === \"aborted\") {\n        return;\n      } else if (discoverResult.type === \"error\") {\n        let { error } = handleDiscoverRouteError(path, discoverResult);\n        setFetcherError(key, routeId, error, { flushSync });\n        return;\n      } else if (!discoverResult.matches) {\n        setFetcherError(\n          key,\n          routeId,\n          getInternalRouterError(404, { pathname: path }),\n          { flushSync }\n        );\n        return;\n      } else {\n        requestMatches = discoverResult.matches;\n        match = getTargetMatch(requestMatches, path);\n\n        if (detectAndHandle405Error(match)) {\n          return;\n        }\n      }\n    }\n\n    // Call the action for the fetcher\n    fetchControllers.set(key, abortController);\n\n    let originatingLoadId = incrementingLoadId;\n    let actionResults = await callDataStrategy(\n      \"action\",\n      state,\n      fetchRequest,\n      [match],\n      requestMatches,\n      key\n    );\n    let actionResult = actionResults[match.route.id];\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    // When using v7_fetcherPersist, we don't want errors bubbling up to the UI\n    // or redirects processed for unmounted fetchers so we just revert them to\n    // idle\n    if (future.v7_fetcherPersist && deletedFetchers.has(key)) {\n      if (isRedirectResult(actionResult) || isErrorResult(actionResult)) {\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      }\n      // Let SuccessResult's fall through for revalidation\n    } else {\n      if (isRedirectResult(actionResult)) {\n        fetchControllers.delete(key);\n        if (pendingNavigationLoadId > originatingLoadId) {\n          // A new navigation was kicked off after our action started, so that\n          // should take precedence over this redirect navigation.  We already\n          // set isRevalidationRequired so all loaders for the new route should\n          // fire unless opted out via shouldRevalidate\n          updateFetcherState(key, getDoneFetcher(undefined));\n          return;\n        } else {\n          fetchRedirectIds.add(key);\n          updateFetcherState(key, getLoadingFetcher(submission));\n          return startRedirectNavigation(fetchRequest, actionResult, false, {\n            fetcherSubmission: submission,\n          });\n        }\n      }\n\n      // Process any non-redirect errors thrown\n      if (isErrorResult(actionResult)) {\n        setFetcherError(key, routeId, actionResult.error);\n        return;\n      }\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(\n      init.history,\n      nextLocation,\n      abortController.signal\n    );\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(routesToUse, state.navigation.location, basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      submission,\n      nextLocation,\n      false,\n      future.v7_skipActionErrorRevalidation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      deletedFetchers,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      [match.route.id, actionResult]\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter((rf) => rf.key !== key)\n      .forEach((rf) => {\n        let staleKey = rf.key;\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher = getLoadingFetcher(\n          undefined,\n          existingFetcher ? existingFetcher.data : undefined\n        );\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        if (fetchControllers.has(staleKey)) {\n          abortFetcher(staleKey);\n        }\n        if (rf.controller) {\n          fetchControllers.set(staleKey, rf.controller);\n        }\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((rf) => abortFetcher(rf.key));\n\n    abortController.signal.addEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    let { loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    abortController.signal.removeEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach((r) => fetchControllers.delete(r.key));\n\n    let redirect = findRedirect(loaderResults);\n    if (redirect) {\n      return startRedirectNavigation(\n        revalidationRequest,\n        redirect.result,\n        false\n      );\n    }\n\n    redirect = findRedirect(fetcherResults);\n    if (redirect) {\n      // If this redirect came from a fetcher make sure we mark it in\n      // fetchRedirectIds so it doesn't get revalidated on the next set of\n      // loader executions\n      fetchRedirectIds.add(redirect.key);\n      return startRedirectNavigation(\n        revalidationRequest,\n        redirect.result,\n        false\n      );\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n\n    abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(\n          state.loaderData,\n          loaderData,\n          matches,\n          errors\n        ),\n        fetchers: new Map(state.fetchers),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    flushSync: boolean,\n    submission?: Submission\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(\n      key,\n      getLoadingFetcher(\n        submission,\n        existingFetcher ? existingFetcher.data : undefined\n      ),\n      { flushSync }\n    );\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal\n    );\n\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(\n        matches,\n        path,\n        fetchRequest.signal\n      );\n\n      if (discoverResult.type === \"aborted\") {\n        return;\n      } else if (discoverResult.type === \"error\") {\n        let { error } = handleDiscoverRouteError(path, discoverResult);\n        setFetcherError(key, routeId, error, { flushSync });\n        return;\n      } else if (!discoverResult.matches) {\n        setFetcherError(\n          key,\n          routeId,\n          getInternalRouterError(404, { pathname: path }),\n          { flushSync }\n        );\n        return;\n      } else {\n        matches = discoverResult.matches;\n        match = getTargetMatch(matches, path);\n      }\n    }\n\n    // Call the loader for this fetcher route match\n    fetchControllers.set(key, abortController);\n\n    let originatingLoadId = incrementingLoadId;\n    let results = await callDataStrategy(\n      \"loader\",\n      state,\n      fetchRequest,\n      [match],\n      matches,\n      key\n    );\n    let result = results[match.route.id];\n\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // We don't want errors bubbling up or redirects followed for unmounted\n    // fetchers, so short circuit here if it was removed from the UI\n    if (deletedFetchers.has(key)) {\n      updateFetcherState(key, getDoneFetcher(undefined));\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our loader started, so that\n        // should take precedence over this redirect navigation\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(fetchRequest, result, false);\n        return;\n      }\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      setFetcherError(key, routeId, result.error);\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    updateFetcherState(key, getDoneFetcher(result.data));\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    request: Request,\n    redirect: RedirectResult,\n    isNavigation: boolean,\n    {\n      submission,\n      fetcherSubmission,\n      replace,\n    }: {\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      replace?: boolean;\n    } = {}\n  ) {\n    if (redirect.response.headers.has(\"X-Remix-Revalidate\")) {\n      isRevalidationRequired = true;\n    }\n\n    let location = redirect.response.headers.get(\"Location\");\n    invariant(location, \"Expected a Location header on the redirect Response\");\n    location = normalizeRedirectLocation(\n      location,\n      new URL(request.url),\n      basename\n    );\n    let redirectLocation = createLocation(state.location, location, {\n      _isRedirect: true,\n    });\n\n    if (isBrowser) {\n      let isDocumentReload = false;\n\n      if (redirect.response.headers.has(\"X-Remix-Reload-Document\")) {\n        // Hard reload if the response contained X-Remix-Reload-Document\n        isDocumentReload = true;\n      } else if (ABSOLUTE_URL_REGEX.test(location)) {\n        const url = init.history.createURL(location);\n        isDocumentReload =\n          // Hard reload if it's an absolute URL to a new origin\n          url.origin !== routerWindow.location.origin ||\n          // Hard reload if it's an absolute URL that does not match our basename\n          stripBasename(url.pathname, basename) == null;\n      }\n\n      if (isDocumentReload) {\n        if (replace) {\n          routerWindow.location.replace(location);\n        } else {\n          routerWindow.location.assign(location);\n        }\n        return;\n      }\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true || redirect.response.headers.has(\"X-Remix-Replace\")\n        ? HistoryAction.Replace\n        : HistoryAction.Push;\n\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let { formMethod, formAction, formEncType } = state.navigation;\n    if (\n      !submission &&\n      !fetcherSubmission &&\n      formMethod &&\n      formAction &&\n      formEncType\n    ) {\n      submission = getSubmissionFromNavigation(state.navigation);\n    }\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    let activeSubmission = submission || fetcherSubmission;\n    if (\n      redirectPreserveMethodStatusCodes.has(redirect.response.status) &&\n      activeSubmission &&\n      isMutationMethod(activeSubmission.formMethod)\n    ) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          ...activeSubmission,\n          formAction: location,\n        },\n        // Preserve these flags across redirects\n        preventScrollReset: pendingPreventScrollReset,\n        enableViewTransition: isNavigation\n          ? pendingViewTransitionEnabled\n          : undefined,\n      });\n    } else {\n      // If we have a navigation submission, we will preserve it through the\n      // redirect navigation\n      let overrideNavigation = getLoadingNavigation(\n        redirectLocation,\n        submission\n      );\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Send fetcher submissions through for shouldRevalidate\n        fetcherSubmission,\n        // Preserve these flags across redirects\n        preventScrollReset: pendingPreventScrollReset,\n        enableViewTransition: isNavigation\n          ? pendingViewTransitionEnabled\n          : undefined,\n      });\n    }\n  }\n\n  // Utility wrapper for calling dataStrategy client-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(\n    type: \"loader\" | \"action\",\n    state: RouterState,\n    request: Request,\n    matchesToLoad: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    fetcherKey: string | null\n  ): Promise<Record<string, DataResult>> {\n    let results: Record<string, DataStrategyResult>;\n    let dataResults: Record<string, DataResult> = {};\n    try {\n      results = await callDataStrategyImpl(\n        dataStrategyImpl,\n        type,\n        state,\n        request,\n        matchesToLoad,\n        matches,\n        fetcherKey,\n        manifest,\n        mapRouteProperties\n      );\n    } catch (e) {\n      // If the outer dataStrategy method throws, just return the error for all\n      // matches - and it'll naturally bubble to the root\n      matchesToLoad.forEach((m) => {\n        dataResults[m.route.id] = {\n          type: ResultType.error,\n          error: e,\n        };\n      });\n      return dataResults;\n    }\n\n    for (let [routeId, result] of Object.entries(results)) {\n      if (isRedirectDataStrategyResultResult(result)) {\n        let response = result.result as Response;\n        dataResults[routeId] = {\n          type: ResultType.redirect,\n          response: normalizeRelativeRoutingRedirectResponse(\n            response,\n            request,\n            routeId,\n            matches,\n            basename,\n            future.v7_relativeSplatPath\n          ),\n        };\n      } else {\n        dataResults[routeId] = await convertDataStrategyResultToDataResult(\n          result\n        );\n      }\n    }\n\n    return dataResults;\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    state: RouterState,\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    let currentMatches = state.matches;\n\n    // Kick off loaders and fetchers in parallel\n    let loaderResultsPromise = callDataStrategy(\n      \"loader\",\n      state,\n      request,\n      matchesToLoad,\n      matches,\n      null\n    );\n\n    let fetcherResultsPromise = Promise.all(\n      fetchersToLoad.map(async (f) => {\n        if (f.matches && f.match && f.controller) {\n          let results = await callDataStrategy(\n            \"loader\",\n            state,\n            createClientSideRequest(init.history, f.path, f.controller.signal),\n            [f.match],\n            f.matches,\n            f.key\n          );\n          let result = results[f.match.route.id];\n          // Fetcher results are keyed by fetcher key from here on out, not routeId\n          return { [f.key]: result };\n        } else {\n          return Promise.resolve({\n            [f.key]: {\n              type: ResultType.error,\n              error: getInternalRouterError(404, {\n                pathname: f.path,\n              }),\n            } as ErrorResult,\n          });\n        }\n      })\n    );\n\n    let loaderResults = await loaderResultsPromise;\n    let fetcherResults = (await fetcherResultsPromise).reduce(\n      (acc, r) => Object.assign(acc, r),\n      {}\n    );\n\n    await Promise.all([\n      resolveNavigationDeferredResults(\n        matches,\n        loaderResults,\n        request.signal,\n        currentMatches,\n        state.loaderData\n      ),\n      resolveFetcherDeferredResults(matches, fetcherResults, fetchersToLoad),\n    ]);\n\n    return {\n      loaderResults,\n      fetcherResults,\n    };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.add(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function updateFetcherState(\n    key: string,\n    fetcher: Fetcher,\n    opts: { flushSync?: boolean } = {}\n  ) {\n    state.fetchers.set(key, fetcher);\n    updateState(\n      { fetchers: new Map(state.fetchers) },\n      { flushSync: (opts && opts.flushSync) === true }\n    );\n  }\n\n  function setFetcherError(\n    key: string,\n    routeId: string,\n    error: any,\n    opts: { flushSync?: boolean } = {}\n  ) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState(\n      {\n        errors: {\n          [boundaryMatch.route.id]: error,\n        },\n        fetchers: new Map(state.fetchers),\n      },\n      { flushSync: (opts && opts.flushSync) === true }\n    );\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    if (future.v7_fetcherPersist) {\n      activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);\n      // If this fetcher was previously marked for deletion, unmark it since we\n      // have a new instance\n      if (deletedFetchers.has(key)) {\n        deletedFetchers.delete(key);\n      }\n    }\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  function deleteFetcher(key: string): void {\n    let fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (\n      fetchControllers.has(key) &&\n      !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))\n    ) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    deletedFetchers.delete(key);\n    cancelledFetcherLoads.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function deleteFetcherAndUpdateState(key: string): void {\n    if (future.v7_fetcherPersist) {\n      let count = (activeFetchers.get(key) || 0) - 1;\n      if (count <= 0) {\n        activeFetchers.delete(key);\n        deletedFetchers.add(key);\n      } else {\n        activeFetchers.set(key, count);\n      }\n    } else {\n      deleteFetcher(key);\n    }\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): boolean {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key: string, fn: BlockerFunction) {\n    let blocker: Blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key: string) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key: string, newBlocker: Blocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(\n      (blocker.state === \"unblocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"proceeding\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"unblocked\") ||\n        (blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\"),\n      `Invalid blocker state transition: ${blocker.state} -> ${newBlocker.state}`\n    );\n\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({ blockers });\n  }\n\n  function shouldBlockNavigation({\n    currentLocation,\n    nextLocation,\n    historyAction,\n  }: {\n    currentLocation: Location;\n    nextLocation: Location;\n    historyAction: HistoryAction;\n  }): string | undefined {\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({ currentLocation, nextLocation, historyAction })) {\n      return blockerKey;\n    }\n  }\n\n  function handleNavigational404(pathname: string) {\n    let error = getInternalRouterError(404, { pathname });\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let { matches, route } = getShortCircuitMatches(routesToUse);\n\n    // Cancel all pending deferred on 404s since we don't keep any routes\n    cancelActiveDeferreds();\n\n    return { notFoundMatches: matches, route, error };\n  }\n\n  function handleDiscoverRouteError(\n    pathname: string,\n    discoverResult: DiscoverRoutesErrorResult\n  ) {\n    return {\n      boundaryId: findNearestBoundary(discoverResult.partialMatches).route.id,\n      error: getInternalRouterError(400, {\n        type: \"route-discovery\",\n        pathname,\n        message:\n          discoverResult.error != null && \"message\" in discoverResult.error\n            ? discoverResult.error\n            : String(discoverResult.error),\n      }),\n    };\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function getScrollKey(location: Location, matches: AgnosticDataRouteMatch[]) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(\n        location,\n        matches.map((m) => convertRouteMatchToUiMatch(m, state.loaderData))\n      );\n      return key || location.key;\n    }\n    return location.key;\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  function checkFogOfWar(\n    matches: AgnosticDataRouteMatch[] | null,\n    routesToUse: AgnosticDataRouteObject[],\n    pathname: string\n  ): { active: boolean; matches: AgnosticDataRouteMatch[] | null } {\n    if (patchRoutesOnNavigationImpl) {\n      // Don't bother re-calling patchRouteOnMiss for a path we've already\n      // processed.  the last execution would have patched the route tree\n      // accordingly so `matches` here are already accurate.\n      if (discoveredRoutes.has(pathname)) {\n        return { active: false, matches };\n      }\n\n      if (!matches) {\n        let fogMatches = matchRoutesImpl<AgnosticDataRouteObject>(\n          routesToUse,\n          pathname,\n          basename,\n          true\n        );\n\n        return { active: true, matches: fogMatches || [] };\n      } else {\n        if (Object.keys(matches[0].params).length > 0) {\n          // If we matched a dynamic param or a splat, it might only be because\n          // we haven't yet discovered other routes that would match with a\n          // higher score.  Call patchRoutesOnNavigation just to be sure\n          let partialMatches = matchRoutesImpl<AgnosticDataRouteObject>(\n            routesToUse,\n            pathname,\n            basename,\n            true\n          );\n          return { active: true, matches: partialMatches };\n        }\n      }\n    }\n\n    return { active: false, matches: null };\n  }\n\n  type DiscoverRoutesSuccessResult = {\n    type: \"success\";\n    matches: AgnosticDataRouteMatch[] | null;\n  };\n  type DiscoverRoutesErrorResult = {\n    type: \"error\";\n    error: any;\n    partialMatches: AgnosticDataRouteMatch[];\n  };\n  type DiscoverRoutesAbortedResult = { type: \"aborted\" };\n  type DiscoverRoutesResult =\n    | DiscoverRoutesSuccessResult\n    | DiscoverRoutesErrorResult\n    | DiscoverRoutesAbortedResult;\n\n  async function discoverRoutes(\n    matches: AgnosticDataRouteMatch[],\n    pathname: string,\n    signal: AbortSignal\n  ): Promise<DiscoverRoutesResult> {\n    let partialMatches: AgnosticDataRouteMatch[] | null = matches;\n    while (true) {\n      let isNonHMR = inFlightDataRoutes == null;\n      let routesToUse = inFlightDataRoutes || dataRoutes;\n      try {\n        await loadLazyRouteChildren(\n          patchRoutesOnNavigationImpl!,\n          pathname,\n          partialMatches,\n          routesToUse,\n          manifest,\n          mapRouteProperties,\n          pendingPatchRoutes,\n          signal\n        );\n      } catch (e) {\n        return { type: \"error\", error: e, partialMatches };\n      } finally {\n        // If we are not in the middle of an HMR revalidation and we changed the\n        // routes, provide a new identity so when we `updateState` at the end of\n        // this navigation/fetch `router.routes` will be a new identity and\n        // trigger a re-run of memoized `router.routes` dependencies.\n        // HMR will already update the identity and reflow when it lands\n        // `inFlightDataRoutes` in `completeNavigation`\n        if (isNonHMR) {\n          dataRoutes = [...dataRoutes];\n        }\n      }\n\n      if (signal.aborted) {\n        return { type: \"aborted\" };\n      }\n\n      let newMatches = matchRoutes(routesToUse, pathname, basename);\n      if (newMatches) {\n        addToFifoQueue(pathname, discoveredRoutes);\n        return { type: \"success\", matches: newMatches };\n      }\n\n      let newPartialMatches = matchRoutesImpl<AgnosticDataRouteObject>(\n        routesToUse,\n        pathname,\n        basename,\n        true\n      );\n\n      // Avoid loops if the second pass results in the same partial matches\n      if (\n        !newPartialMatches ||\n        (partialMatches.length === newPartialMatches.length &&\n          partialMatches.every(\n            (m, i) => m.route.id === newPartialMatches![i].route.id\n          ))\n      ) {\n        addToFifoQueue(pathname, discoveredRoutes);\n        return { type: \"success\", matches: null };\n      }\n\n      partialMatches = newPartialMatches;\n    }\n  }\n\n  function addToFifoQueue(path: string, queue: Set<string>) {\n    if (queue.size >= discoveredRoutesMaxSize) {\n      let first = queue.values().next().value;\n      queue.delete(first);\n    }\n    queue.add(path);\n  }\n\n  function _internalSetRoutes(newRoutes: AgnosticDataRouteObject[]) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(\n      newRoutes,\n      mapRouteProperties,\n      undefined,\n      manifest\n    );\n  }\n\n  function patchRoutes(\n    routeId: string | null,\n    children: AgnosticRouteObject[]\n  ): void {\n    let isNonHMR = inFlightDataRoutes == null;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    patchRoutesImpl(\n      routeId,\n      children,\n      routesToUse,\n      manifest,\n      mapRouteProperties\n    );\n\n    // If we are not in the middle of an HMR revalidation and we changed the\n    // routes, provide a new identity and trigger a reflow via `updateState`\n    // to re-run memoized `router.routes` dependencies.\n    // HMR will already update the identity and reflow when it lands\n    // `inFlightDataRoutes` in `completeNavigation`\n    if (isNonHMR) {\n      dataRoutes = [...dataRoutes];\n      updateState({});\n    }\n  }\n\n  router = {\n    get basename() {\n      return basename;\n    },\n    get future() {\n      return future;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    get window() {\n      return routerWindow;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    encodeLocation: (to: To) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher: deleteFetcherAndUpdateState,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    patchRoutes,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport const UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface StaticHandlerFutureConfig {\n  v7_relativeSplatPath: boolean;\n  v7_throwAbortReason: boolean;\n}\n\nexport interface CreateStaticHandlerOptions {\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<StaticHandlerFutureConfig>;\n}\n\nexport function createStaticHandler(\n  routes: AgnosticRouteObject[],\n  opts?: CreateStaticHandlerOptions\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to createStaticHandler\"\n  );\n\n  let manifest: RouteManifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (opts?.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts?.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Config driven behavior flags\n  let future: StaticHandlerFutureConfig = {\n    v7_relativeSplatPath: false,\n    v7_throwAbortReason: false,\n    ...(opts ? opts.future : null),\n  };\n\n  let dataRoutes = convertRoutesToDataRoutes(\n    routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   *\n   * - `opts.requestContext` is an optional server context that will be passed\n   *   to actions/loaders in the `context` parameter\n   * - `opts.skipLoaderErrorBubbling` is an optional parameter that will prevent\n   *   the bubbling of errors which allows single-fetch-type implementations\n   *   where the client will handle the bubbling and we may need to return data\n   *   for the handling route\n   */\n  async function query(\n    request: Request,\n    {\n      requestContext,\n      skipLoaderErrorBubbling,\n      unstable_dataStrategy,\n    }: {\n      requestContext?: unknown;\n      skipLoaderErrorBubbling?: boolean;\n      unstable_dataStrategy?: DataStrategyFunction;\n    } = {}\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      unstable_dataStrategy || null,\n      skipLoaderErrorBubbling === true,\n      null\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, basename, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   *\n   * - `opts.routeId` allows you to specify the specific route handler to call.\n   *   If not provided the handler will determine the proper route by matching\n   *   against `request.url`\n   * - `opts.requestContext` is an optional server context that will be passed\n   *    to actions/loaders in the `context` parameter\n   */\n  async function queryRoute(\n    request: Request,\n    {\n      routeId,\n      requestContext,\n      unstable_dataStrategy,\n    }: {\n      requestContext?: unknown;\n      routeId?: string;\n      unstable_dataStrategy?: DataStrategyFunction;\n    } = {}\n  ): Promise<any> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId,\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      unstable_dataStrategy || null,\n      false,\n      match\n    );\n\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      let data = Object.values(result.loaderData)[0];\n      if (result.activeDeferreds?.[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    routeMatch: AgnosticDataRouteMatch | null\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          requestContext,\n          unstable_dataStrategy,\n          skipLoaderErrorBubbling,\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        unstable_dataStrategy,\n        skipLoaderErrorBubbling,\n        routeMatch\n      );\n      return isResponse(result)\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction for a\n      // `queryRoute` call, we throw the `DataStrategyResult` to bail out early\n      // and then return or throw the raw Response here accordingly\n      if (isDataStrategyResult(e) && isResponse(e.result)) {\n        if (e.type === ResultType.error) {\n          throw e.result;\n        }\n        return e.result;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    let result: DataResult;\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id,\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    } else {\n      let results = await callDataStrategy(\n        \"action\",\n        request,\n        [actionMatch],\n        matches,\n        isRouteRequest,\n        requestContext,\n        unstable_dataStrategy\n      );\n      result = results[actionMatch.route.id];\n\n      if (request.signal.aborted) {\n        throwStaticHandlerAbortedError(request, isRouteRequest, future);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.response.status,\n        headers: {\n          Location: result.response.headers.get(\"Location\")!,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, { type: \"defer-action\" });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal,\n    });\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = skipLoaderErrorBubbling\n        ? actionMatch\n        : findNearestBoundary(matches, actionMatch.route.id);\n\n      let context = await loadRouteData(\n        loaderRequest,\n        matches,\n        requestContext,\n        unstable_dataStrategy,\n        skipLoaderErrorBubbling,\n        null,\n        [boundaryMatch.route.id, result]\n      );\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : result.statusCode != null\n          ? result.statusCode\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    let context = await loadRouteData(\n      loaderRequest,\n      matches,\n      requestContext,\n      unstable_dataStrategy,\n      skipLoaderErrorBubbling,\n      null\n    );\n\n    return {\n      ...context,\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionHeaders: result.headers\n        ? { [actionMatch.route.id]: result.headers }\n        : {},\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    routeMatch: AgnosticDataRouteMatch | null,\n    pendingActionResult?: PendingActionResult\n  ): Promise<\n    | Omit<\n        StaticHandlerContext,\n        \"location\" | \"basename\" | \"actionData\" | \"actionHeaders\"\n      >\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (\n      isRouteRequest &&\n      !routeMatch?.route.loader &&\n      !routeMatch?.route.lazy\n    ) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch?.route.id,\n      });\n    }\n\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : pendingActionResult && isErrorResult(pendingActionResult[1])\n      ? getLoaderMatchesUntilBoundary(matches, pendingActionResult[0])\n      : matches;\n    let matchesToLoad = requestMatches.filter(\n      (m) => m.route.loader || m.route.lazy\n    );\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce(\n          (acc, m) => Object.assign(acc, { [m.route.id]: null }),\n          {}\n        ),\n        errors:\n          pendingActionResult && isErrorResult(pendingActionResult[1])\n            ? {\n                [pendingActionResult[0]]: pendingActionResult[1].error,\n              }\n            : null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let results = await callDataStrategy(\n      \"loader\",\n      request,\n      matchesToLoad,\n      matches,\n      isRouteRequest,\n      requestContext,\n      unstable_dataStrategy\n    );\n\n    if (request.signal.aborted) {\n      throwStaticHandlerAbortedError(request, isRouteRequest, future);\n    }\n\n    // Process and commit output from loaders\n    let activeDeferreds = new Map<string, DeferredData>();\n    let context = processRouteLoaderData(\n      matches,\n      results,\n      pendingActionResult,\n      activeDeferreds,\n      skipLoaderErrorBubbling\n    );\n\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set<string>(\n      matchesToLoad.map((match) => match.route.id)\n    );\n    matches.forEach((match) => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n\n    return {\n      ...context,\n      matches,\n      activeDeferreds:\n        activeDeferreds.size > 0\n          ? Object.fromEntries(activeDeferreds.entries())\n          : null,\n    };\n  }\n\n  // Utility wrapper for calling dataStrategy server-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(\n    type: \"loader\" | \"action\",\n    request: Request,\n    matchesToLoad: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    isRouteRequest: boolean,\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null\n  ): Promise<Record<string, DataResult>> {\n    let results = await callDataStrategyImpl(\n      unstable_dataStrategy || defaultDataStrategy,\n      type,\n      null,\n      request,\n      matchesToLoad,\n      matches,\n      null,\n      manifest,\n      mapRouteProperties,\n      requestContext\n    );\n\n    let dataResults: Record<string, DataResult> = {};\n    await Promise.all(\n      matches.map(async (match) => {\n        if (!(match.route.id in results)) {\n          return;\n        }\n        let result = results[match.route.id];\n        if (isRedirectDataStrategyResultResult(result)) {\n          let response = result.result as Response;\n          // Throw redirects and let the server handle them with an HTTP redirect\n          throw normalizeRelativeRoutingRedirectResponse(\n            response,\n            request,\n            match.route.id,\n            matches,\n            basename,\n            future.v7_relativeSplatPath\n          );\n        }\n        if (isResponse(result.result) && isRouteRequest) {\n          // For SSR single-route requests, we want to hand Responses back\n          // directly without unwrapping\n          throw result;\n        }\n\n        dataResults[match.route.id] =\n          await convertDataStrategyResultToDataResult(result);\n      })\n    );\n    return dataResults;\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: isRouteErrorResponse(error) ? error.status : 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\nfunction throwStaticHandlerAbortedError(\n  request: Request,\n  isRouteRequest: boolean,\n  future: StaticHandlerFutureConfig\n) {\n  if (future.v7_throwAbortReason && request.signal.reason !== undefined) {\n    throw request.signal.reason;\n  }\n\n  let method = isRouteRequest ? \"queryRoute\" : \"query\";\n  throw new Error(`${method}() call aborted: ${request.method} ${request.url}`);\n}\n\nfunction isSubmissionNavigation(\n  opts: BaseNavigateOrFetchOptions\n): opts is SubmissionNavigateOptions {\n  return (\n    opts != null &&\n    ((\"formData\" in opts && opts.formData != null) ||\n      (\"body\" in opts && opts.body !== undefined))\n  );\n}\n\nfunction normalizeTo(\n  location: Path,\n  matches: AgnosticDataRouteMatch[],\n  basename: string,\n  prependBasename: boolean,\n  to: To | null,\n  v7_relativeSplatPath: boolean,\n  fromRouteId?: string,\n  relative?: RelativeRoutingType\n) {\n  let contextualMatches: AgnosticDataRouteMatch[];\n  let activeRouteMatch: AgnosticDataRouteMatch | undefined;\n  if (fromRouteId) {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n\n  // Resolve the relative path\n  let path = resolveTo(\n    to ? to : \".\",\n    getResolveToMatches(contextualMatches, v7_relativeSplatPath),\n    stripBasename(location.pathname, basename) || location.pathname,\n    relative === \"path\"\n  );\n\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n\n  // Add an ?index param for matched index routes if we don't already have one\n  if (\n    (to == null || to === \"\" || to === \".\") &&\n    activeRouteMatch &&\n    activeRouteMatch.route.index &&\n    !hasNakedIndexQuery(path.search)\n  ) {\n    path.search = path.search\n      ? path.search.replace(/^\\?/, \"?index&\")\n      : \"?index\";\n  }\n\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname =\n      path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  normalizeFormMethod: boolean,\n  isFetcher: boolean,\n  path: string,\n  opts?: BaseNavigateOrFetchOptions\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponseImpl;\n} {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod }),\n    };\n  }\n\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, { type: \"invalid-body\" }),\n  });\n\n  // Create a Submission on non-GET navigations\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod\n    ? (rawFormMethod.toUpperCase() as V7_FormMethod)\n    : (rawFormMethod.toLowerCase() as FormMethod);\n  let formAction = stripHashFromPath(path);\n\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      let text =\n        typeof opts.body === \"string\"\n          ? opts.body\n          : opts.body instanceof FormData ||\n            opts.body instanceof URLSearchParams\n          ? // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n            Array.from(opts.body.entries()).reduce(\n              (acc, [name, value]) => `${acc}${name}=${value}\\n`,\n              \"\"\n            )\n          : String(opts.body);\n\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text,\n        },\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      try {\n        let json =\n          typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined,\n          },\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n\n  invariant(\n    typeof FormData === \"function\",\n    \"FormData is not available in this environment\"\n  );\n\n  let searchParams: URLSearchParams;\n  let formData: FormData;\n\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n\n  let submission: Submission = {\n    formMethod,\n    formAction,\n    formEncType:\n      (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined,\n  };\n\n  if (isMutationMethod(submission.formMethod)) {\n    return { path, submission };\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = `?${searchParams}`;\n\n  return { path: createPath(parsedPath), submission };\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  history: History,\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isInitialLoad: boolean,\n  skipActionErrorRevalidation: boolean,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: Set<string>,\n  deletedFetchers: Set<string>,\n  fetchLoadMatches: Map<string, FetchLoadMatch>,\n  fetchRedirectIds: Set<string>,\n  routesToUse: AgnosticDataRouteObject[],\n  basename: string | undefined,\n  pendingActionResult?: PendingActionResult\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingActionResult\n    ? isErrorResult(pendingActionResult[1])\n      ? pendingActionResult[1].error\n      : pendingActionResult[1].data\n    : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId =\n    pendingActionResult && isErrorResult(pendingActionResult[1])\n      ? pendingActionResult[0]\n      : undefined;\n  let boundaryMatches = boundaryId\n    ? getLoaderMatchesUntilBoundary(matches, boundaryId)\n    : matches;\n\n  // Don't revalidate loaders by default after action 4xx/5xx responses\n  // when the flag is enabled.  They can still opt-into revalidation via\n  // `shouldRevalidate` via `actionResult`\n  let actionStatus = pendingActionResult\n    ? pendingActionResult[1].statusCode\n    : undefined;\n  let shouldSkipRevalidation =\n    skipActionErrorRevalidation && actionStatus && actionStatus >= 400;\n\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    let { route } = match;\n    if (route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n\n    if (route.loader == null) {\n      return false;\n    }\n\n    if (isInitialLoad) {\n      if (typeof route.loader !== \"function\" || route.loader.hydrate) {\n        return true;\n      }\n      return (\n        state.loaderData[route.id] === undefined &&\n        // Don't re-run if the loader ran and threw an error\n        (!state.errors || state.errors[route.id] === undefined)\n      );\n    }\n\n    // Always call the loader on new route instances and pending defer cancellations\n    if (\n      isNewLoader(state.loaderData, state.matches[index], match) ||\n      cancelledDeferredRoutes.some((id) => id === match.route.id)\n    ) {\n      return true;\n    }\n\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n\n    return shouldRevalidateLoader(match, {\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params,\n      ...submission,\n      actionResult,\n      actionStatus,\n      defaultShouldRevalidate: shouldSkipRevalidation\n        ? false\n        : // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n          isRevalidationRequired ||\n          currentUrl.pathname + currentUrl.search ===\n            nextUrl.pathname + nextUrl.search ||\n          // Search params affect all loaders\n          currentUrl.search !== nextUrl.search ||\n          isNewRouteInstance(currentRouteMatch, nextRouteMatch),\n    });\n  });\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate:\n    //  - on initial load (shouldn't be any fetchers then anyway)\n    //  - if fetcher won't be present in the subsequent render\n    //    - no longer matches the URL (v7_fetcherPersist=false)\n    //    - was unmounted but persisted due to v7_fetcherPersist=true\n    if (\n      isInitialLoad ||\n      !matches.some((m) => m.route.id === f.routeId) ||\n      deletedFetchers.has(key)\n    ) {\n      return;\n    }\n\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null,\n      });\n      return;\n    }\n\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n\n    let shouldRevalidate = false;\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.has(key)) {\n      // Always mark for revalidation if the fetcher was cancelled\n      cancelledFetcherLoads.delete(key);\n      shouldRevalidate = true;\n    } else if (\n      fetcher &&\n      fetcher.state !== \"idle\" &&\n      fetcher.data === undefined\n    ) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, {\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params,\n        ...submission,\n        actionResult,\n        actionStatus,\n        defaultShouldRevalidate: shouldSkipRevalidation\n          ? false\n          : isRevalidationRequired,\n      });\n    }\n\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController(),\n      });\n    }\n  });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath != null &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  loaderMatch: AgnosticDataRouteMatch,\n  arg: ShouldRevalidateFunctionArgs\n) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n\n/**\n * Idempotent utility to execute patchRoutesOnNavigation() to lazily load route\n * definitions and update the routes/routeManifest\n */\nasync function loadLazyRouteChildren(\n  patchRoutesOnNavigationImpl: AgnosticPatchRoutesOnNavigationFunction,\n  path: string,\n  matches: AgnosticDataRouteMatch[],\n  routes: AgnosticDataRouteObject[],\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  pendingRouteChildren: Map<\n    string,\n    ReturnType<typeof patchRoutesOnNavigationImpl>\n  >,\n  signal: AbortSignal\n) {\n  let key = [path, ...matches.map((m) => m.route.id)].join(\"-\");\n  try {\n    let pending = pendingRouteChildren.get(key);\n    if (!pending) {\n      pending = patchRoutesOnNavigationImpl({\n        path,\n        matches,\n        patch: (routeId, children) => {\n          if (!signal.aborted) {\n            patchRoutesImpl(\n              routeId,\n              children,\n              routes,\n              manifest,\n              mapRouteProperties\n            );\n          }\n        },\n      });\n      pendingRouteChildren.set(key, pending);\n    }\n\n    if (pending && isPromise<AgnosticRouteObject[]>(pending)) {\n      await pending;\n    }\n  } finally {\n    pendingRouteChildren.delete(key);\n  }\n}\n\nfunction patchRoutesImpl(\n  routeId: string | null,\n  children: AgnosticRouteObject[],\n  routesToUse: AgnosticDataRouteObject[],\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction\n) {\n  if (routeId) {\n    let route = manifest[routeId];\n    invariant(\n      route,\n      `No route found to patch children into: routeId = ${routeId}`\n    );\n    let dataChildren = convertRoutesToDataRoutes(\n      children,\n      mapRouteProperties,\n      [routeId, \"patch\", String(route.children?.length || \"0\")],\n      manifest\n    );\n    if (route.children) {\n      route.children.push(...dataChildren);\n    } else {\n      route.children = dataChildren;\n    }\n  } else {\n    let dataChildren = convertRoutesToDataRoutes(\n      children,\n      mapRouteProperties,\n      [\"patch\", String(routesToUse.length || \"0\")],\n      manifest\n    );\n    routesToUse.push(...dataChildren);\n  }\n}\n\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(\n  route: AgnosticDataRouteObject,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  manifest: RouteManifest\n) {\n  if (!route.lazy) {\n    return;\n  }\n\n  let lazyRoute = await route.lazy();\n\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates: Record<string, any> = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue =\n      routeToUpdate[lazyRouteProperty as keyof typeof routeToUpdate];\n\n    let isPropertyStaticallyDefined =\n      staticRouteValue !== undefined &&\n      // This property isn't static since it should always be updated based\n      // on the route updates\n      lazyRouteProperty !== \"hasErrorBoundary\";\n\n    warning(\n      !isPropertyStaticallyDefined,\n      `Route \"${routeToUpdate.id}\" has a static property \"${lazyRouteProperty}\" ` +\n        `defined but its lazy function is also returning a value for this property. ` +\n        `The lazy route property \"${lazyRouteProperty}\" will be ignored.`\n    );\n\n    if (\n      !isPropertyStaticallyDefined &&\n      !immutableRouteKeys.has(lazyRouteProperty as ImmutableRouteKey)\n    ) {\n      routeUpdates[lazyRouteProperty] =\n        lazyRoute[lazyRouteProperty as keyof typeof lazyRoute];\n    }\n  }\n\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, {\n    // To keep things framework agnostic, we use the provided\n    // `mapRouteProperties` (or wrapped `detectErrorBoundary`) function to\n    // set the framework-aware properties (`element`/`hasErrorBoundary`) since\n    // the logic will differ between frameworks.\n    ...mapRouteProperties(routeToUpdate),\n    lazy: undefined,\n  });\n}\n\n// Default implementation of `dataStrategy` which fetches all loaders in parallel\nasync function defaultDataStrategy({\n  matches,\n}: DataStrategyFunctionArgs): ReturnType<DataStrategyFunction> {\n  let matchesToLoad = matches.filter((m) => m.shouldLoad);\n  let results = await Promise.all(matchesToLoad.map((m) => m.resolve()));\n  return results.reduce(\n    (acc, result, i) =>\n      Object.assign(acc, { [matchesToLoad[i].route.id]: result }),\n    {}\n  );\n}\n\nasync function callDataStrategyImpl(\n  dataStrategyImpl: DataStrategyFunction,\n  type: \"loader\" | \"action\",\n  state: RouterState | null,\n  request: Request,\n  matchesToLoad: AgnosticDataRouteMatch[],\n  matches: AgnosticDataRouteMatch[],\n  fetcherKey: string | null,\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  requestContext?: unknown\n): Promise<Record<string, DataStrategyResult>> {\n  let loadRouteDefinitionsPromises = matches.map((m) =>\n    m.route.lazy\n      ? loadLazyRouteModule(m.route, mapRouteProperties, manifest)\n      : undefined\n  );\n\n  let dsMatches = matches.map((match, i) => {\n    let loadRoutePromise = loadRouteDefinitionsPromises[i];\n    let shouldLoad = matchesToLoad.some((m) => m.route.id === match.route.id);\n    // `resolve` encapsulates route.lazy(), executing the loader/action,\n    // and mapping return values/thrown errors to a `DataStrategyResult`.  Users\n    // can pass a callback to take fine-grained control over the execution\n    // of the loader/action\n    let resolve: DataStrategyMatch[\"resolve\"] = async (handlerOverride) => {\n      if (\n        handlerOverride &&\n        request.method === \"GET\" &&\n        (match.route.lazy || match.route.loader)\n      ) {\n        shouldLoad = true;\n      }\n      return shouldLoad\n        ? callLoaderOrAction(\n            type,\n            request,\n            match,\n            loadRoutePromise,\n            handlerOverride,\n            requestContext\n          )\n        : Promise.resolve({ type: ResultType.data, result: undefined });\n    };\n\n    return {\n      ...match,\n      shouldLoad,\n      resolve,\n    };\n  });\n\n  // Send all matches here to allow for a middleware-type implementation.\n  // handler will be a no-op for unneeded routes and we filter those results\n  // back out below.\n  let results = await dataStrategyImpl({\n    matches: dsMatches,\n    request,\n    params: matches[0].params,\n    fetcherKey,\n    context: requestContext,\n  });\n\n  // Wait for all routes to load here but 'swallow the error since we want\n  // it to bubble up from the `await loadRoutePromise` in `callLoaderOrAction` -\n  // called from `match.resolve()`\n  try {\n    await Promise.all(loadRouteDefinitionsPromises);\n  } catch (e) {\n    // No-op\n  }\n\n  return results;\n}\n\n// Default logic for calling a loader/action is the user has no specified a dataStrategy\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  loadRoutePromise: Promise<void> | undefined,\n  handlerOverride: Parameters<DataStrategyMatch[\"resolve\"]>[0],\n  staticContext?: unknown\n): Promise<DataStrategyResult> {\n  let result: DataStrategyResult;\n  let onReject: (() => void) | undefined;\n\n  let runHandler = (\n    handler: AgnosticRouteObject[\"loader\"] | AgnosticRouteObject[\"action\"]\n  ): Promise<DataStrategyResult> => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject: () => void;\n    // This will never resolve so safe to type it as Promise<DataStrategyResult> to\n    // satisfy the function return value\n    let abortPromise = new Promise<DataStrategyResult>((_, r) => (reject = r));\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n\n    let actualHandler = (ctx?: unknown) => {\n      if (typeof handler !== \"function\") {\n        return Promise.reject(\n          new Error(\n            `You cannot call the handler for a route which defines a boolean ` +\n              `\"${type}\" [routeId: ${match.route.id}]`\n          )\n        );\n      }\n      return handler(\n        {\n          request,\n          params: match.params,\n          context: staticContext,\n        },\n        ...(ctx !== undefined ? [ctx] : [])\n      );\n    };\n\n    let handlerPromise: Promise<DataStrategyResult> = (async () => {\n      try {\n        let val = await (handlerOverride\n          ? handlerOverride((ctx: unknown) => actualHandler(ctx))\n          : actualHandler());\n        return { type: \"data\", result: val };\n      } catch (e) {\n        return { type: \"error\", result: e };\n      }\n    })();\n\n    return Promise.race([handlerPromise, abortPromise]);\n  };\n\n  try {\n    let handler = match.route[type];\n\n    // If we have a route.lazy promise, await that first\n    if (loadRoutePromise) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let handlerError;\n        let [value] = await Promise.all([\n          // If the handler throws, don't let it immediately bubble out,\n          // since we need to let the lazy() execution finish so we know if this\n          // route has a boundary that can handle the error\n          runHandler(handler).catch((e) => {\n            handlerError = e;\n          }),\n          loadRoutePromise,\n        ]);\n        if (handlerError !== undefined) {\n          throw handlerError;\n        }\n        result = value!;\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadRoutePromise;\n\n        handler = match.route[type];\n        if (handler) {\n          // Handler still runs even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id,\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return { type: ResultType.data, result: undefined };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname,\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n\n    invariant(\n      result.result !== undefined,\n      `You defined ${type === \"action\" ? \"an action\" : \"a loader\"} for route ` +\n        `\"${match.route.id}\" but didn't return anything from your \\`${type}\\` ` +\n        `function. Please return a value or \\`null\\`.`\n    );\n  } catch (e) {\n    // We should already be catching and converting normal handler executions to\n    // DataStrategyResults and returning them, so anything that throws here is an\n    // unexpected error we still need to wrap\n    return { type: ResultType.error, result: e };\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n\n  return result;\n}\n\nasync function convertDataStrategyResultToDataResult(\n  dataStrategyResult: DataStrategyResult\n): Promise<DataResult> {\n  let { result, type } = dataStrategyResult;\n\n  if (isResponse(result)) {\n    let data: any;\n\n    try {\n      let contentType = result.headers.get(\"Content-Type\");\n      // Check between word boundaries instead of startsWith() due to the last\n      // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n      if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n        if (result.body == null) {\n          data = null;\n        } else {\n          data = await result.json();\n        }\n      } else {\n        data = await result.text();\n      }\n    } catch (e) {\n      return { type: ResultType.error, error: e };\n    }\n\n    if (type === ResultType.error) {\n      return {\n        type: ResultType.error,\n        error: new ErrorResponseImpl(result.status, result.statusText, data),\n        statusCode: result.status,\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (type === ResultType.error) {\n    if (isDataWithResponseInit(result)) {\n      if (result.data instanceof Error) {\n        return {\n          type: ResultType.error,\n          error: result.data,\n          statusCode: result.init?.status,\n        };\n      }\n\n      // Convert thrown unstable_data() to ErrorResponse instances\n      result = new ErrorResponseImpl(\n        result.init?.status || 500,\n        undefined,\n        result.data\n      );\n    }\n    return {\n      type: ResultType.error,\n      error: result,\n      statusCode: isRouteErrorResponse(result) ? result.status : undefined,\n    };\n  }\n\n  if (isDeferredData(result)) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: result.init?.status,\n      headers: result.init?.headers && new Headers(result.init.headers),\n    };\n  }\n\n  if (isDataWithResponseInit(result)) {\n    return {\n      type: ResultType.data,\n      data: result.data,\n      statusCode: result.init?.status,\n      headers: result.init?.headers\n        ? new Headers(result.init.headers)\n        : undefined,\n    };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\n// Support relative routing in internal redirects\nfunction normalizeRelativeRoutingRedirectResponse(\n  response: Response,\n  request: Request,\n  routeId: string,\n  matches: AgnosticDataRouteMatch[],\n  basename: string,\n  v7_relativeSplatPath: boolean\n) {\n  let location = response.headers.get(\"Location\");\n  invariant(\n    location,\n    \"Redirects returned/thrown from loaders/actions must have a Location header\"\n  );\n\n  if (!ABSOLUTE_URL_REGEX.test(location)) {\n    let trimmedMatches = matches.slice(\n      0,\n      matches.findIndex((m) => m.route.id === routeId) + 1\n    );\n    location = normalizeTo(\n      new URL(request.url),\n      trimmedMatches,\n      basename,\n      true,\n      location,\n      v7_relativeSplatPath\n    );\n    response.headers.set(\"Location\", location);\n  }\n\n  return response;\n}\n\nfunction normalizeRedirectLocation(\n  location: string,\n  currentUrl: URL,\n  basename: string\n): string {\n  if (ABSOLUTE_URL_REGEX.test(location)) {\n    // Strip off the protocol+origin for same-origin + same-basename absolute redirects\n    let normalizedLocation = location;\n    let url = normalizedLocation.startsWith(\"//\")\n      ? new URL(currentUrl.protocol + normalizedLocation)\n      : new URL(normalizedLocation);\n    let isSameBasename = stripBasename(url.pathname, basename) != null;\n    if (url.origin === currentUrl.origin && isSameBasename) {\n      return url.pathname + url.search + url.hash;\n    }\n  }\n  return location;\n}\n\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(\n  history: History,\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let { formMethod, formEncType } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({ \"Content-Type\": formEncType });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (\n      formEncType === \"application/x-www-form-urlencoded\" &&\n      submission.formData\n    ) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n\n  return searchParams;\n}\n\nfunction convertSearchParamsToFormData(\n  searchParams: URLSearchParams\n): FormData {\n  let formData = new FormData();\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n  return formData;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  results: Record<string, DataResult>,\n  pendingActionResult: PendingActionResult | undefined,\n  activeDeferreds: Map<string, DeferredData>,\n  skipLoaderErrorBubbling: boolean\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n  let pendingError =\n    pendingActionResult && isErrorResult(pendingActionResult[1])\n      ? pendingActionResult[1].error\n      : undefined;\n\n  // Process loader results into state.loaderData/state.errors\n  matches.forEach((match) => {\n    if (!(match.route.id in results)) {\n      return;\n    }\n    let id = match.route.id;\n    let result = results[id];\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError !== undefined) {\n        error = pendingError;\n        pendingError = undefined;\n      }\n\n      errors = errors || {};\n\n      if (skipLoaderErrorBubbling) {\n        errors[id] = error;\n      } else {\n        // Look upwards from the matched route for the closest ancestor error\n        // boundary, defaulting to the root match.  Prefer higher error values\n        // if lower errors bubble to the same boundary\n        let boundaryMatch = findNearestBoundary(matches, id);\n        if (errors[boundaryMatch.route.id] == null) {\n          errors[boundaryMatch.route.id] = error;\n        }\n      }\n\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (\n          result.statusCode != null &&\n          result.statusCode !== 200 &&\n          !foundError\n        ) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      } else {\n        loaderData[id] = result.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (result.statusCode && result.statusCode !== 200 && !foundError) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError !== undefined && pendingActionResult) {\n    errors = { [pendingActionResult[0]]: pendingError };\n    loaderData[pendingActionResult[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: Record<string, DataResult>,\n  pendingActionResult: PendingActionResult | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: Record<string, DataResult>,\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    results,\n    pendingActionResult,\n    activeDeferreds,\n    false // This method is only called client side so we always want to bubble\n  );\n\n  // Process results from our revalidating fetchers\n  revalidatingFetchers.forEach((rf) => {\n    let { key, match, controller } = rf;\n    let result = fetcherResults[key];\n    invariant(result, \"Did not find corresponding fetcher result\");\n\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      return;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match?.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  });\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[],\n  errors: RouteData | null | undefined\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      } else {\n        // No-op - this is so we ignore existing data if we have a key in the\n        // incoming object with an undefined value, which is how we unset a prior\n        // loaderData if we encounter a loader error\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n\nfunction getActionDataForCommit(\n  pendingActionResult: PendingActionResult | undefined\n) {\n  if (!pendingActionResult) {\n    return {};\n  }\n  return isErrorResult(pendingActionResult[1])\n    ? {\n        // Clear out prior actionData on errors\n        actionData: {},\n      }\n    : {\n        actionData: {\n          [pendingActionResult[0]]: pendingActionResult[1].data,\n        },\n      };\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route =\n    routes.length === 1\n      ? routes[0]\n      : routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n          id: `__shim-error-route__`,\n        };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n  };\n}\n\nfunction getInternalRouterError(\n  status: number,\n  {\n    pathname,\n    routeId,\n    method,\n    type,\n    message,\n  }: {\n    pathname?: string;\n    routeId?: string;\n    method?: string;\n    type?: \"defer-action\" | \"invalid-body\" | \"route-discovery\";\n    message?: string;\n  } = {}\n) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (type === \"route-discovery\") {\n      errorMessage =\n        `Unable to match URL \"${pathname}\" - the \\`unstable_patchRoutesOnNavigation()\\` ` +\n        `function threw the following error:\\n${message}`;\n    } else if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method} request to \"${pathname}\" but ` +\n        `did not provide a \\`loader\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method.toUpperCase()} request to \"${pathname}\" but ` +\n        `did not provide an \\`action\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n\n  return new ErrorResponseImpl(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(\n  results: Record<string, DataResult>\n): { key: string; result: RedirectResult } | undefined {\n  let entries = Object.entries(results);\n  for (let i = entries.length - 1; i >= 0; i--) {\n    let [key, result] = entries[i];\n    if (isRedirectResult(result)) {\n      return { key, result };\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\n\nfunction isPromise<T = unknown>(val: unknown): val is Promise<T> {\n  return typeof val === \"object\" && val != null && \"then\" in val;\n}\n\nfunction isDataStrategyResult(result: unknown): result is DataStrategyResult {\n  return (\n    result != null &&\n    typeof result === \"object\" &&\n    \"type\" in result &&\n    \"result\" in result &&\n    (result.type === ResultType.data || result.type === ResultType.error)\n  );\n}\n\nfunction isRedirectDataStrategyResultResult(result: DataStrategyResult) {\n  return (\n    isResponse(result.result) && redirectStatusCodes.has(result.result.status)\n  );\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nexport function isDataWithResponseInit(\n  value: any\n): value is DataWithResponseInit<unknown> {\n  return (\n    typeof value === \"object\" &&\n    value != null &&\n    \"type\" in value &&\n    \"data\" in value &&\n    \"init\" in value &&\n    value.type === \"DataWithResponseInit\"\n  );\n}\n\nexport function isDeferredData(value: any): value is DeferredData {\n  let deferred: DeferredData = value;\n  return (\n    deferred &&\n    typeof deferred === \"object\" &&\n    typeof deferred.data === \"object\" &&\n    typeof deferred.subscribe === \"function\" &&\n    typeof deferred.cancel === \"function\" &&\n    typeof deferred.resolveData === \"function\"\n  );\n}\n\nfunction isResponse(value: any): value is Response {\n  return (\n    value != null &&\n    typeof value.status === \"number\" &&\n    typeof value.statusText === \"string\" &&\n    typeof value.headers === \"object\" &&\n    typeof value.body !== \"undefined\"\n  );\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isValidMethod(method: string): method is FormMethod | V7_FormMethod {\n  return validRequestMethods.has(method.toLowerCase() as FormMethod);\n}\n\nfunction isMutationMethod(\n  method: string\n): method is MutationFormMethod | V7_MutationFormMethod {\n  return validMutationMethods.has(method.toLowerCase() as MutationFormMethod);\n}\n\nasync function resolveNavigationDeferredResults(\n  matches: (AgnosticDataRouteMatch | null)[],\n  results: Record<string, DataResult>,\n  signal: AbortSignal,\n  currentMatches: AgnosticDataRouteMatch[],\n  currentLoaderData: RouteData\n) {\n  let entries = Object.entries(results);\n  for (let index = 0; index < entries.length; index++) {\n    let [routeId, result] = entries[index];\n    let match = matches.find((m) => m?.route.id === routeId);\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match!.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && isRevalidatingLoader) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, false).then((result) => {\n        if (result) {\n          results[routeId] = result;\n        }\n      });\n    }\n  }\n}\n\nasync function resolveFetcherDeferredResults(\n  matches: (AgnosticDataRouteMatch | null)[],\n  results: Record<string, DataResult>,\n  revalidatingFetchers: RevalidatingFetcher[]\n) {\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let { key, routeId, controller } = revalidatingFetchers[index];\n    let result = results[key];\n    let match = matches.find((m) => m?.route.id === routeId);\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n\n    if (isDeferredResult(result)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      invariant(\n        controller,\n        \"Expected an AbortController for revalidating fetcher deferred result\"\n      );\n      await resolveDeferredData(result, controller.signal, true).then(\n        (result) => {\n          if (result) {\n            results[key] = result;\n          }\n        }\n      );\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n\nfunction getSubmissionFromNavigation(\n  navigation: Navigation\n): Submission | undefined {\n  let { formMethod, formAction, formEncType, text, formData, json } =\n    navigation;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text,\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined,\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined,\n    };\n  }\n}\n\nfunction getLoadingNavigation(\n  location: Location,\n  submission?: Submission\n): NavigationStates[\"Loading\"] {\n  if (submission) {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n    };\n    return navigation;\n  } else {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n    };\n    return navigation;\n  }\n}\n\nfunction getSubmittingNavigation(\n  location: Location,\n  submission: Submission\n): NavigationStates[\"Submitting\"] {\n  let navigation: NavigationStates[\"Submitting\"] = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n  };\n  return navigation;\n}\n\nfunction getLoadingFetcher(\n  submission?: Submission,\n  data?: Fetcher[\"data\"]\n): FetcherStates[\"Loading\"] {\n  if (submission) {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data,\n    };\n    return fetcher;\n  } else {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data,\n    };\n    return fetcher;\n  }\n}\n\nfunction getSubmittingFetcher(\n  submission: Submission,\n  existingFetcher?: Fetcher\n): FetcherStates[\"Submitting\"] {\n  let fetcher: FetcherStates[\"Submitting\"] = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined,\n  };\n  return fetcher;\n}\n\nfunction getDoneFetcher(data: Fetcher[\"data\"]): FetcherStates[\"Idle\"] {\n  let fetcher: FetcherStates[\"Idle\"] = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data,\n  };\n  return fetcher;\n}\n\nfunction restoreAppliedTransitions(\n  _window: Window,\n  transitions: Map<string, Set<string>>\n) {\n  try {\n    let sessionPositions = _window.sessionStorage.getItem(\n      TRANSITIONS_STORAGE_KEY\n    );\n    if (sessionPositions) {\n      let json = JSON.parse(sessionPositions);\n      for (let [k, v] of Object.entries(json || {})) {\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {\n    // no-op, use default empty object\n  }\n}\n\nfunction persistAppliedTransitions(\n  _window: Window,\n  transitions: Map<string, Set<string>>\n) {\n  if (transitions.size > 0) {\n    let json: Record<string, string[]> = {};\n    for (let [k, v] of transitions) {\n      json[k] = [...v];\n    }\n    try {\n      _window.sessionStorage.setItem(\n        TRANSITIONS_STORAGE_KEY,\n        JSON.stringify(json)\n      );\n    } catch (error) {\n      warning(\n        false,\n        `Failed to save applied view transitions in sessionStorage (${error}).`\n      );\n    }\n  }\n}\n//#endregion\n"],
  "mappings": "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",
  "names": ["createMemoryHistory", "options", "initialEntries", "initialIndex", "v5Compat", "entries", "map", "entry", "index", "createMemoryLocation", "state", "undefined", "clampIndex", "length", "action", "Action", "Pop", "listener", "n", "Math", "min", "max", "getCurrentLocation", "to", "key", "location", "createLocation", "pathname", "warning", "charAt", "JSON", "stringify", "createHref", "createPath", "history", "createURL", "URL", "encodeLocation", "path", "parsePath", "search", "hash", "push", "Push", "nextLocation", "splice", "delta", "replace", "Replace", "go", "nextIndex", "listen", "fn", "createBrowserHistory", "createBrowserLocation", "window", "globalHistory", "usr", "createBrowserHref", "getUrlBasedHistory", "createHashHistory", "createHashLocation", "substr", "startsWith", "createHashHref", "base", "document", "querySelector", "href", "getAttribute", "url", "hashIndex", "indexOf", "slice", "validateHashLocation", "invariant", "value", "message", "Error", "cond", "console", "warn", "e", "createKey", "random", "toString", "getHistoryState", "idx", "current", "_extends", "_ref", "parsedPath", "searchIndex", "getLocation", "validateLocation", "defaultView", "getIndex", "replaceState", "handlePop", "historyState", "pushState", "error", "DOMException", "name", "assign", "origin", "addEventListener", "PopStateEventType", "removeEventListener", "isIndexRoute", "route", "convertRoutesToDataRoutes", "routes", "mapRouteProperties", "parentPath", "manifest", "treePath", "String", "id", "join", "children", "indexRoute", "pathOrLayoutRoute", "matchRoutes", "locationArg", "basename", "matchRoutesImpl", "allowPartial", "stripBasename", "branches", "flattenRoutes", "rankRouteBranches", "matches", "i", "decoded", "decodePath", "matchRouteBranch", "convertRouteMatchToUiMatch", "match", "loaderData", "params", "data", "handle", "parentsMeta", "flattenRoute", "relativePath", "meta", "caseSensitive", "childrenIndex", "joinPaths", "routesMeta", "concat", "score", "computeScore", "forEach", "_route$path", "includes", "exploded", "explodeOptionalSegments", "segments", "split", "first", "rest", "isOptional", "endsWith", "required", "restExploded", "result", "subpath", "sort", "a", "b", "compareIndexes", "initialScore", "some", "isSplat", "splatPenalty", "indexRouteValue", "filter", "s", "reduce", "segment", "paramRe", "test", "dynamicSegmentValue", "emptySegmentValue", "staticSegmentValue", "siblings", "every", "branch", "matchedParams", "matchedPathname", "end", "remainingPathname", "matchPath", "Object", "pathnameBase", "normalizePathname", "generatePath", "originalPath", "prefix", "p", "array", "isLastSegment", "star", "keyMatch", "optional", "param", "pattern", "matcher", "compiledParams", "compilePath", "captureGroups", "memo", "paramName", "splatValue", "regexpSource", "_", "RegExp", "v", "decodeURIComponent", "toLowerCase", "startIndex", "nextChar", "resolvePath", "fromPathname", "toPathname", "resolvePathname", "normalizeSearch", "normalizeHash", "relativeSegments", "pop", "getInvalidPathError", "char", "field", "dest", "getPathContributingMatches", "getResolveToMatches", "v7_relativeSplatPath", "pathMatches", "resolveTo", "toArg", "routePathnames", "locationPathname", "isPathRelative", "isEmptyPath", "from", "routePathnameIndex", "toSegments", "shift", "hasExplicitTrailingSlash", "hasCurrentTrailingSlash", "init", "DataWithResponseInit", "status", "isTrackedPromise", "Promise", "_tracked", "unwrapTrackedPromise", "_error", "_data", "isRouteErrorResponse", "statusText", "internal", "createRouter", "routerWindow", "isBrowser", "createElement", "isServer", "detectErrorBoundary", "hasErrorBoundary", "defaultMapRouteProperties", "dataRoutes", "inFlightDataRoutes", "dataStrategyImpl", "unstable_dataStrategy", "defaultDataStrategy", "patchRoutesOnNavigationImpl", "unstable_patchRoutesOnNavigation", "future", "v7_fetcherPersist", "v7_normalizeFormMethod", "v7_partialHydration", "v7_prependBasename", "v7_skipActionErrorRevalidation", "unlistenHistory", "subscribers", "Set", "discoveredRoutesMaxSize", "discoveredRoutes", "savedScrollPositions", "getScrollRestorationKey", "getScrollPosition", "initialScrollRestored", "hydrationData", "initialMatches", "initialErrors", "getInternalRouterError", "getShortCircuitMatches", "fogOfWar", "checkFogOfWar", "active", "initialized", "m", "lazy", "loader", "errors", "isRouteInitialized", "hydrate", "findIndex", "router", "historyAction", "navigation", "IDLE_NAVIGATION", "restoreScrollPosition", "preventScrollReset", "revalidation", "actionData", "fetchers", "Map", "blockers", "pendingAction", "HistoryAction", "pendingPreventScrollReset", "pendingNavigationController", "pendingViewTransitionEnabled", "appliedViewTransitions", "removePageHideEventListener", "isUninterruptedRevalidation", "isRevalidationRequired", "cancelledDeferredRoutes", "cancelledFetcherLoads", "fetchControllers", "incrementingLoadId", "pendingNavigationLoadId", "fetchReloadIds", "fetchRedirectIds", "fetchLoadMatches", "activeFetchers", "deletedFetchers", "activeDeferreds", "blockerFunctions", "pendingPatchRoutes", "unblockBlockerHistoryUpdate", "initialize", "size", "blockerKey", "shouldBlockNavigation", "currentLocation", "nextHistoryUpdatePromise", "resolve", "updateBlocker", "proceed", "reset", "then", "set", "IDLE_BLOCKER", "updateState", "startNavigation", "restoreAppliedTransitions", "_saveAppliedTransitions", "persistAppliedTransitions", "initialHydration", "dispose", "clear", "abort", "deleteFetcher", "deleteBlocker", "subscribe", "add", "delete", "newState", "opts", "completedFetchers", "deletedFetchersKeys", "fetcher", "has", "subscriber", "unstable_viewTransitionOpts", "viewTransitionOpts", "unstable_flushSync", "flushSync", "completeNavigation", "_temp", "_location$state", "_location$state2", "isActionReload", "formMethod", "isMutationMethod", "_isRedirect", "keys", "mergeLoaderData", "k", "priorPaths", "get", "toPaths", "getSavedScrollPosition", "navigate", "normalizedPath", "normalizeTo", "fromRouteId", "relative", "submission", "normalizeNavigateOptions", "userReplace", "formAction", "pendingError", "enableViewTransition", "unstable_viewTransition", "revalidate", "interruptActiveLoads", "startUninterruptedRevalidation", "overrideNavigation", "saveScrollPosition", "routesToUse", "loadingNavigation", "notFoundMatches", "handleNavigational404", "isHashChangeOnly", "AbortController", "request", "createClientSideRequest", "signal", "pendingActionResult", "findNearestBoundary", "type", "ResultType", "actionResult", "handleAction", "shortCircuited", "routeId", "isErrorResult", "getLoadingNavigation", "updatedMatches", "handleLoaders", "fetcherSubmission", "getActionDataForCommit", "isFogOfWar", "getSubmittingNavigation", "discoverResult", "discoverRoutes", "boundaryId", "handleDiscoverRouteError", "partialMatches", "actionMatch", "getTargetMatch", "method", "results", "callDataStrategy", "aborted", "isRedirectResult", "normalizeRedirectLocation", "response", "headers", "startRedirectNavigation", "isDeferredResult", "boundaryMatch", "activeSubmission", "getSubmissionFromNavigation", "shouldUpdateNavigationState", "getUpdatedActionData", "matchesToLoad", "revalidatingFetchers", "getMatchesToLoad", "cancelActiveDeferreds", "updatedFetchers", "markFetchRedirectsDone", "updates", "getUpdatedRevalidatingFetchers", "rf", "abortFetcher", "controller", "abortPendingFetchRevalidations", "f", "loaderResults", "fetcherResults", "callLoadersAndMaybeResolveData", "redirect", "findRedirect", "processLoaderData", "deferredData", "done", "_ref2", "_ref3", "didAbortFetchLoads", "abortStaleFetchLoads", "shouldUpdateFetchers", "revalidatingFetcher", "getLoadingFetcher", "fetch", "setFetcherError", "handleFetcherAction", "handleFetcherLoader", "requestMatches", "detectAndHandle405Error", "existingFetcher", "updateFetcherState", "getSubmittingFetcher", "abortController", "fetchRequest", "originatingLoadId", "actionResults", "getDoneFetcher", "revalidationRequest", "loadId", "loadFetcher", "staleKey", "r", "doneFetcher", "resolveDeferredData", "isNavigation", "_temp2", "redirectLocation", "isDocumentReload", "ABSOLUTE_URL_REGEX", "redirectHistoryAction", "formEncType", "redirectPreserveMethodStatusCodes", "fetcherKey", "dataResults", "callDataStrategyImpl", "isRedirectDataStrategyResultResult", "normalizeRelativeRoutingRedirectResponse", "convertDataStrategyResultToDataResult", "fetchersToLoad", "currentMatches", "loaderResultsPromise", "fetcherResultsPromise", "all", "acc", "resolveNavigationDeferredResults", "resolveFetcherDeferredResults", "getFetcher", "IDLE_FETCHER", "deleteFetcherAndUpdateState", "count", "markFetchersDone", "doneKeys", "landedId", "yeetedKeys", "getBlocker", "blocker", "newBlocker", "_ref4", "Array", "blockerFunction", "predicate", "cancelledRouteIds", "dfd", "cancel", "enableScrollRestoration", "positions", "getPosition", "getKey", "y", "getScrollKey", "fogMatches", "isNonHMR", "loadLazyRouteChildren", "newMatches", "addToFifoQueue", "newPartialMatches", "queue", "values", "next", "_internalSetRoutes", "newRoutes", "patchRoutes", "patchRoutesImpl", "_internalFetchControllers", "_internalActiveDeferreds", "createStaticHandler", "v7_throwAbortReason", "query", "_temp3", "requestContext", "skipLoaderErrorBubbling", "isValidMethod", "methodNotAllowedMatches", "statusCode", "loaderHeaders", "actionHeaders", "queryImpl", "isResponse", "queryRoute", "_temp4", "find", "_result$activeDeferre", "UNSAFE_DEFERRED_SYMBOL", "routeMatch", "submit", "loadRouteData", "isDataStrategyResult", "isRedirectResponse", "isRouteRequest", "throwStaticHandlerAbortedError", "Response", "Location", "loaderRequest", "Request", "context", "getLoaderMatchesUntilBoundary", "processRouteLoaderData", "executedLoaders", "fromEntries", "getStaticContextFromError", "newContext", "_deepestRenderedBoundaryId", "reason", "isSubmissionNavigation", "formData", "body", "prependBasename", "contextualMatches", "activeRouteMatch", "hasNakedIndexQuery", "normalizeFormMethod", "isFetcher", "getInvalidBodyError", "rawFormMethod", "toUpperCase", "stripHashFromPath", "text", "FormData", "URLSearchParams", "_ref5", "json", "parse", "searchParams", "convertFormDataToSearchParams", "convertSearchParamsToFormData", "append", "boundaryMatches", "isInitialLoad", "skipActionErrorRevalidation", "currentUrl", "nextUrl", "actionStatus", "shouldSkipRevalidation", "navigationMatches", "isNewLoader", "currentRouteMatch", "nextRouteMatch", "shouldRevalidateLoader", "currentParams", "nextParams", "defaultShouldRevalidate", "isNewRouteInstance", "fetcherMatches", "fetcherMatch", "shouldRevalidate", "currentLoaderData", "currentMatch", "isNew", "isMissingData", "currentPath", "loaderMatch", "arg", "routeChoice", "pendingRouteChildren", "pending", "patch", "isPromise", "_route$children", "dataChildren", "loadLazyRouteModule", "lazyRoute", "routeToUpdate", "routeUpdates", "lazyRouteProperty", "staticRouteValue", "isPropertyStaticallyDefined", "immutableRouteKeys", "_ref6", "shouldLoad", "loadRouteDefinitionsPromises", "dsMatches", "loadRoutePromise", "handlerOverride", "callLoaderOrAction", "staticContext", "onReject", "runHandler", "handler", "reject", "abortPromise", "actualHandler", "ctx", "handlerPromise", "val", "race", "handlerError", "catch", "dataStrategyResult", "contentType", "ErrorResponseImpl", "isDataWithResponseInit", "_result$init2", "_result$init", "isDeferredData", "_result$init3", "_result$init4", "deferred", "Headers", "_result$init5", "_result$init6", "trimmedMatches", "normalizedLocation", "protocol", "isSameBasename", "foundError", "newLoaderData", "mergedLoaderData", "hasOwnProperty", "eligibleMatches", "reverse", "_temp5", "errorMessage", "redirectStatusCodes", "resolveData", "validRequestMethods", "validMutationMethods", "isRevalidatingLoader", "unwrap", "unwrappedData", "getAll", "_window", "transitions", "sessionPositions", "sessionStorage", "getItem", "TRANSITIONS_STORAGE_KEY", "isArray", "setItem", "AbortedDeferredError", "DeferredData", "defer", "redirectDocument", "validMutationMethodsArr", "validRequestMethodsArr", "paths", "responseInit", "constructor", "pendingKeysSet", "deferredKeys", "onAbort", "unlistenAbortSignal", "trackPromise", "promise", "onSettle", "defineProperty", "undefinedError", "emit", "settledKey", "pendingKeys", "Boolean", "Symbol"]
}
