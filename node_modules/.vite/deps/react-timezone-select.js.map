{
  "version": 3,
  "sources": ["../../react-timezone-select/dist/index.js", "../../spacetime/src/timezone/summerTime.js", "../../spacetime/src/timezone/quick.js", "../../spacetime/zonefile/_build.js", "../../spacetime/zonefile/_prefixes.js", "../../spacetime/zonefile/unpack.js", "../../spacetime/src/timezone/guessTz.js", "../../spacetime/src/timezone/parseOffset.js", "../../spacetime/src/timezone/find.js", "../../spacetime/src/fns.js", "../../spacetime/src/input/helpers.js", "../../spacetime/src/input/named-dates.js", "../../spacetime/src/input/normalize.js", "../../spacetime/src/data/milliseconds.js", "../../spacetime/src/methods/set/walk.js", "../../spacetime/src/data/monthLengths.js", "../../spacetime/src/data/months.js", "../../spacetime/src/input/formats/parseOffset.js", "../../spacetime/src/input/formats/parseTime.js", "../../spacetime/src/input/formats/_parsers.js", "../../spacetime/src/input/formats/01-ymd.js", "../../spacetime/src/input/formats/02-mdy.js", "../../spacetime/src/input/formats/03-dmy.js", "../../spacetime/src/input/formats/04-misc.js", "../../spacetime/src/input/formats/index.js", "../../spacetime/src/input/parse.js", "../../spacetime/src/input/index.js", "../../spacetime/src/data/days.js", "../../spacetime/src/data/caseFormat.js", "../../spacetime/src/methods/format/_offset.js", "../../spacetime/src/methods/format/index.js", "../../spacetime/src/methods/format/unixFmt.js", "../../spacetime/src/methods/progress.js", "../../spacetime/src/methods/nearest.js", "../../spacetime/src/methods/diff/one.js", "../../spacetime/src/methods/diff/waterfall.js", "../../spacetime/src/methods/diff/index.js", "../../spacetime/src/methods/since/_iso.js", "../../spacetime/src/methods/since/getDiff.js", "../../spacetime/src/data/units.js", "../../spacetime/src/data/distance.js", "../../spacetime/src/methods/since/soften.js", "../../spacetime/src/methods/since/index.js", "../../spacetime/src/data/seasons.js", "../../spacetime/src/data/quarters.js", "../../spacetime/src/methods/startOf.js", "../../spacetime/src/methods/every.js", "../../spacetime/src/timezone/index.js", "../../spacetime/src/methods.js", "../../spacetime/src/methods/set/set.js", "../../spacetime/src/data/ampm.js", "../../spacetime/src/methods/query/01-time.js", "../../spacetime/src/methods/query/02-date.js", "../../spacetime/src/methods/query/03-year.js", "../../spacetime/src/methods/query/index.js", "../../spacetime/src/methods/set/_model.js", "../../spacetime/src/methods/add.js", "../../spacetime/src/methods/same.js", "../../spacetime/src/methods/compare.js", "../../spacetime/src/methods/i18n.js", "../../spacetime/src/spacetime.js", "../../spacetime/src/whereIts.js", "../../spacetime/src/_version.js", "../../spacetime/src/index.js", "../../timezone-soft/builds/timezone-soft.mjs"],
  "sourcesContent": ["\"use client\"\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source)\n    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)\n      target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(source)) {\n      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))\n        target[prop] = source[prop];\n    }\n  return target;\n};\n\n// src/index.tsx\nimport { useMemo } from \"react\";\nimport Select from \"react-select\";\nimport spacetime from \"spacetime\";\nimport soft from \"timezone-soft\";\n\n// src/timezone-list.ts\nvar allTimezones = {\n  \"Pacific/Midway\": \"Midway Island, Samoa\",\n  \"Pacific/Honolulu\": \"Hawaii\",\n  \"America/Juneau\": \"Alaska\",\n  \"America/Boise\": \"Mountain Time\",\n  \"America/Dawson\": \"Dawson, Yukon\",\n  \"America/Chihuahua\": \"Chihuahua, La Paz, Mazatlan\",\n  \"America/Phoenix\": \"Arizona\",\n  \"America/Chicago\": \"Central Time\",\n  \"America/Regina\": \"Saskatchewan\",\n  \"America/Mexico_City\": \"Guadalajara, Mexico City, Monterrey\",\n  \"America/Belize\": \"Central America\",\n  \"America/Detroit\": \"Eastern Time\",\n  \"America/Bogota\": \"Bogota, Lima, Quito\",\n  \"America/Caracas\": \"Caracas, La Paz\",\n  \"America/Santiago\": \"Santiago\",\n  \"America/St_Johns\": \"Newfoundland and Labrador\",\n  \"America/Sao_Paulo\": \"Brasilia\",\n  \"America/Tijuana\": \"Tijuana\",\n  \"America/Montevideo\": \"Montevideo\",\n  \"America/Argentina/Buenos_Aires\": \"Buenos Aires, Georgetown\",\n  \"America/Godthab\": \"Greenland\",\n  \"America/Los_Angeles\": \"Pacific Time\",\n  \"Atlantic/Azores\": \"Azores\",\n  \"Atlantic/Cape_Verde\": \"Cape Verde Islands\",\n  GMT: \"UTC\",\n  \"Europe/London\": \"Edinburgh, London\",\n  \"Europe/Dublin\": \"Dublin\",\n  \"Europe/Lisbon\": \"Lisbon\",\n  \"Africa/Casablanca\": \"Casablanca, Monrovia\",\n  \"Atlantic/Canary\": \"Canary Islands\",\n  \"Europe/Belgrade\": \"Belgrade, Bratislava, Budapest, Ljubljana, Prague\",\n  \"Europe/Sarajevo\": \"Sarajevo, Skopje, Warsaw, Zagreb\",\n  \"Europe/Brussels\": \"Brussels, Copenhagen, Madrid, Paris\",\n  \"Europe/Amsterdam\": \"Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna\",\n  \"Africa/Algiers\": \"West Central Africa\",\n  \"Europe/Bucharest\": \"Bucharest\",\n  \"Africa/Cairo\": \"Cairo\",\n  \"Europe/Helsinki\": \"Helsinki, Kyiv, Riga, Sofia, Tallinn, Vilnius\",\n  \"Europe/Athens\": \"Athens\",\n  \"Asia/Jerusalem\": \"Jerusalem\",\n  \"Africa/Harare\": \"Harare, Pretoria\",\n  \"Europe/Moscow\": \"Istanbul, Minsk, Moscow, St. Petersburg, Volgograd\",\n  \"Asia/Kuwait\": \"Kuwait, Riyadh\",\n  \"Africa/Nairobi\": \"Nairobi\",\n  \"Asia/Baghdad\": \"Baghdad\",\n  \"Asia/Tehran\": \"Tehran\",\n  \"Asia/Dubai\": \"Abu Dhabi, Muscat\",\n  \"Asia/Baku\": \"Baku, Tbilisi, Yerevan\",\n  \"Asia/Kabul\": \"Kabul\",\n  \"Asia/Yekaterinburg\": \"Ekaterinburg\",\n  \"Asia/Karachi\": \"Islamabad, Karachi, Tashkent\",\n  \"Asia/Kolkata\": \"Chennai, Kolkata, Mumbai, New Delhi\",\n  \"Asia/Kathmandu\": \"Kathmandu\",\n  \"Asia/Dhaka\": \"Astana, Dhaka\",\n  \"Asia/Colombo\": \"Sri Jayawardenepura\",\n  \"Asia/Almaty\": \"Almaty, Novosibirsk\",\n  \"Asia/Rangoon\": \"Yangon Rangoon\",\n  \"Asia/Bangkok\": \"Bangkok, Hanoi, Jakarta\",\n  \"Asia/Krasnoyarsk\": \"Krasnoyarsk\",\n  \"Asia/Shanghai\": \"Beijing, Chongqing, Hong Kong SAR, Urumqi\",\n  \"Asia/Kuala_Lumpur\": \"Kuala Lumpur, Singapore\",\n  \"Asia/Taipei\": \"Taipei\",\n  \"Australia/Perth\": \"Perth\",\n  \"Asia/Irkutsk\": \"Irkutsk, Ulaanbaatar\",\n  \"Asia/Seoul\": \"Seoul\",\n  \"Asia/Tokyo\": \"Osaka, Sapporo, Tokyo\",\n  \"Asia/Yakutsk\": \"Yakutsk\",\n  \"Australia/Darwin\": \"Darwin\",\n  \"Australia/Adelaide\": \"Adelaide\",\n  \"Australia/Sydney\": \"Canberra, Melbourne, Sydney\",\n  \"Australia/Brisbane\": \"Brisbane\",\n  \"Australia/Hobart\": \"Hobart\",\n  \"Asia/Vladivostok\": \"Vladivostok\",\n  \"Pacific/Guam\": \"Guam, Port Moresby\",\n  \"Asia/Magadan\": \"Magadan, Solomon Islands, New Caledonia\",\n  \"Asia/Kamchatka\": \"Kamchatka, Marshall Islands\",\n  \"Pacific/Fiji\": \"Fiji Islands\",\n  \"Pacific/Auckland\": \"Auckland, Wellington\",\n  \"Pacific/Tongatapu\": \"Nuku'alofa\"\n};\nvar timezone_list_default = allTimezones;\n\n// src/index.tsx\nimport { jsx } from \"react/jsx-runtime\";\nfunction useTimezoneSelect({\n  timezones = timezone_list_default,\n  labelStyle = \"original\",\n  displayValue = \"GMT\",\n  currentDatetime\n}) {\n  const options = useMemo(() => {\n    return Object.entries(timezones).map((zone) => {\n      var _a, _b, _c, _d;\n      try {\n        const now = (currentDatetime ? spacetime(currentDatetime) : spacetime.now()).goto(zone[0]);\n        const isDstString = now.isDST() ? \"daylight\" : \"standard\";\n        const tz = now.timezone();\n        const tzStrings = soft(zone[0]);\n        const abbr = (_b = (_a = tzStrings == null ? void 0 : tzStrings[0]) == null ? void 0 : _a[isDstString]) == null ? void 0 : _b.abbr;\n        const altName = (_d = (_c = tzStrings == null ? void 0 : tzStrings[0]) == null ? void 0 : _c[isDstString]) == null ? void 0 : _d.name;\n        const min = tz.current.offset * 60;\n        const hr = `${min / 60 ^ 0}:${min % 60 === 0 ? \"00\" : Math.abs(min % 60)}`;\n        const prefix = `(${displayValue}${hr.includes(\"-\") ? hr : `+${hr}`}) ${zone[1]}`;\n        let label = \"\";\n        switch (labelStyle) {\n          case \"original\":\n            label = prefix;\n            break;\n          case \"altName\":\n            label = `${prefix} ${altName ? `(${altName})` : \"\"}`;\n            break;\n          case \"abbrev\":\n            label = `${prefix} ${abbr ? `(${abbr})` : \"\"}`;\n            break;\n          case \"offsetHidden\":\n            label = `${prefix.replace(/^\\(.*?\\)\\s*/, \"\")}`;\n            break;\n          default:\n            label = `${prefix}`;\n        }\n        return {\n          value: tz.name,\n          label,\n          offset: tz.current.offset,\n          abbrev: abbr,\n          altName\n        };\n      } catch (e) {\n        return null;\n      }\n    }).filter(Boolean).sort((a, b) => a.offset - b.offset);\n  }, [labelStyle, timezones, currentDatetime]);\n  const findFuzzyTz = (zone) => {\n    var _a, _b;\n    let currentTime;\n    try {\n      currentTime = (currentDatetime ? spacetime(currentDatetime) : spacetime.now()).goto(zone);\n    } catch (err) {\n      currentTime = (currentDatetime ? spacetime(currentDatetime) : spacetime.now()).goto(\"GMT\");\n    }\n    return (_b = (_a = options.filter((tz) => tz.offset === currentTime.timezone().current.offset).map((tz) => {\n      let score = 0;\n      if (currentTime.timezones[tz.value.toLowerCase()] && !!currentTime.timezones[tz.value.toLowerCase()].dst === currentTime.timezone().hasDst) {\n        if (tz.value.toLowerCase().indexOf(currentTime.tz.substring(currentTime.tz.indexOf(\"/\") + 1)) !== -1) {\n          score += 8;\n        }\n        if (tz.label.toLowerCase().indexOf(currentTime.tz.substring(currentTime.tz.indexOf(\"/\") + 1)) !== -1) {\n          score += 4;\n        }\n        if (tz.value.toLowerCase().indexOf(currentTime.tz.substring(0, currentTime.tz.indexOf(\"/\"))) !== -1) {\n          score += 2;\n        }\n        score += 1;\n      } else if (tz.value === \"GMT\") {\n        score += 1;\n      }\n      return { tz, score };\n    }).sort((a, b) => b.score - a.score)) == null ? void 0 : _a[0]) == null ? void 0 : _b.tz;\n  };\n  function isObject(item) {\n    return typeof item === \"object\" && !Array.isArray(item) && item !== null;\n  }\n  const parseTimezone = (zone) => {\n    if (typeof zone === \"string\") {\n      return options.find((tz) => tz.value === zone) || zone.indexOf(\"/\") !== -1 && findFuzzyTz(zone);\n    } else if (isObject(zone) && !zone.label) {\n      return options.find((tz) => tz.value === zone.value);\n    } else {\n      return zone;\n    }\n  };\n  return { options, parseTimezone };\n}\nvar TimezoneSelect = (_a) => {\n  var _b = _a, {\n    value,\n    onBlur,\n    onChange,\n    labelStyle,\n    displayValue,\n    timezones,\n    currentDatetime\n  } = _b, props = __objRest(_b, [\n    \"value\",\n    \"onBlur\",\n    \"onChange\",\n    \"labelStyle\",\n    \"displayValue\",\n    \"timezones\",\n    \"currentDatetime\"\n  ]);\n  const { options, parseTimezone } = useTimezoneSelect({\n    timezones,\n    labelStyle,\n    displayValue,\n    currentDatetime\n  });\n  const handleChange = (tz) => {\n    onChange && onChange(tz);\n  };\n  return /* @__PURE__ */ jsx(\n    Select,\n    __spreadValues({\n      value: parseTimezone(value),\n      onChange: handleChange,\n      options,\n      onBlur\n    }, props)\n  );\n};\nexport {\n  timezone_list_default as allTimezones,\n  TimezoneSelect as default,\n  useTimezoneSelect\n};\n", "const MSEC_IN_HOUR = 60 * 60 * 1000\n\n//convert our local date syntax a javascript UTC date\nconst toUtc = (dstChange, offset, year) => {\n  const [month, rest] = dstChange.split('/')\n  const [day, hour] = rest.split(':')\n  return Date.UTC(year, month - 1, day, hour) - (offset * MSEC_IN_HOUR)\n}\n\n// compare epoch with dst change events (in utc)\nconst inSummerTime = (epoch, start, end, summerOffset, winterOffset) => {\n  const year = new Date(epoch).getUTCFullYear()\n  const startUtc = toUtc(start, winterOffset, year)\n  const endUtc = toUtc(end, summerOffset, year)\n  // simple number comparison now\n  return epoch >= startUtc && epoch < endUtc\n}\n\nexport default inSummerTime\n", "/* eslint-disable no-console */\nimport isSummer from './summerTime.js'\n\n// this method avoids having to do a full dst-calculation on every operation\n// it reproduces some things in ./index.js, but speeds up spacetime considerably\nconst quickOffset = s => {\n  let zones = s.timezones\n  let obj = zones[s.tz]\n  if (obj === undefined) {\n    console.warn(\"Warning: couldn't find timezone \" + s.tz)\n    return 0\n  }\n  if (obj.dst === undefined) {\n    return obj.offset\n  }\n\n  //get our two possible offsets\n  let jul = obj.offset\n  let dec = obj.offset + 1 // assume it's the same for now\n  if (obj.hem === 'n') {\n    dec = jul - 1\n  }\n  let split = obj.dst.split('->')\n  let inSummer = isSummer(s.epoch, split[0], split[1], jul, dec)\n  if (inSummer === true) {\n    return jul\n  }\n  return dec\n}\nexport default quickOffset\n", "export default {\n  \"9|s\": \"2/dili,2/jayapura\",\n  \"9|n\": \"2/chita,2/khandyga,2/pyongyang,2/seoul,2/tokyo,2/yakutsk,11/palau,japan,rok\",\n  \"9.5|s|04/07:03->10/06:04\": \"4/adelaide,4/broken_hill,4/south,4/yancowinna\",\n  \"9.5|s\": \"4/darwin,4/north\",\n  \"8|s|03/13:01->10/02:00\": \"12/casey\",\n  \"8|s\": \"2/kuala_lumpur,2/makassar,2/singapore,4/perth,2/ujung_pandang,4/west,singapore\",\n  \"8|n\": \"2/brunei,2/choibalsan,2/hong_kong,2/irkutsk,2/kuching,2/macau,2/manila,2/shanghai,2/taipei,2/ulaanbaatar,2/chongqing,2/chungking,2/harbin,2/macao,2/ulan_bator,hongkong,prc,roc\",\n  \"8.75|s\": \"4/eucla\",\n  \"7|s\": \"12/davis,2/jakarta,9/christmas\",\n  \"7|n\": \"2/bangkok,2/barnaul,2/hovd,2/krasnoyarsk,2/novokuznetsk,2/novosibirsk,2/phnom_penh,2/pontianak,2/ho_chi_minh,2/tomsk,2/vientiane,2/saigon\",\n  \"6|s\": \"12/vostok\",\n  \"6|n\": \"2/almaty,2/bishkek,2/dhaka,2/omsk,2/qyzylorda,2/qostanay,2/thimphu,2/urumqi,9/chagos,2/dacca,2/kashgar,2/thimbu\",\n  \"6.5|n\": \"2/yangon,9/cocos,2/rangoon\",\n  \"5|s\": \"12/mawson,9/kerguelen\",\n  \"5|n\": \"2/aqtau,2/aqtobe,2/ashgabat,2/atyrau,2/dushanbe,2/karachi,2/oral,2/samarkand,2/tashkent,2/yekaterinburg,9/maldives,2/ashkhabad\",\n  \"5.75|n\": \"2/kathmandu,2/katmandu\",\n  \"5.5|n\": \"2/kolkata,2/colombo,2/calcutta\",\n  \"4|s\": \"9/reunion\",\n  \"4|n\": \"2/baku,2/dubai,2/muscat,2/tbilisi,2/yerevan,8/astrakhan,8/samara,8/saratov,8/ulyanovsk,8/volgograd,9/mahe,9/mauritius,2/volgograd\",\n  \"4.5|n\": \"2/kabul\",\n  \"3|s\": \"12/syowa,9/antananarivo\",\n  \"3|n|04/26:02->10/31:24\": \"0/cairo,egypt\",\n  \"3|n|04/20:04->10/26:02\": \"2/gaza,2/hebron\",\n  \"3|n|03/31:05->10/27:04\": \"2/famagusta,2/nicosia,8/athens,8/bucharest,8/helsinki,8/kyiv,8/mariehamn,8/riga,8/sofia,8/tallinn,8/uzhgorod,8/vilnius,8/zaporozhye,8/nicosia,8/kiev,eet\",\n  \"3|n|03/31:04->10/27:03\": \"8/chisinau,8/tiraspol\",\n  \"3|n|03/31:02->10/26:24\": \"2/beirut\",\n  \"3|n|03/29:04->10/27:02\": \"2/jerusalem,2/tel_aviv,israel\",\n  \"3|n\": \"0/addis_ababa,0/asmara,0/asmera,0/dar_es_salaam,0/djibouti,0/juba,0/kampala,0/mogadishu,0/nairobi,2/aden,2/amman,2/baghdad,2/bahrain,2/damascus,2/kuwait,2/qatar,2/riyadh,8/istanbul,8/kirov,8/minsk,8/moscow,8/simferopol,9/comoro,9/mayotte,2/istanbul,turkey,w-su\",\n  \"3.5|n\": \"2/tehran,iran\",\n  \"2|s|03/31:04->10/27:02\": \"12/troll\",\n  \"2|s\": \"0/gaborone,0/harare,0/johannesburg,0/lubumbashi,0/lusaka,0/maputo,0/maseru,0/mbabane\",\n  \"2|n|03/31:04->10/27:03\": \"0/ceuta,arctic/longyearbyen,8/amsterdam,8/andorra,8/belgrade,8/berlin,8/bratislava,8/brussels,8/budapest,8/busingen,8/copenhagen,8/gibraltar,8/ljubljana,8/luxembourg,8/madrid,8/malta,8/monaco,8/oslo,8/paris,8/podgorica,8/prague,8/rome,8/san_marino,8/sarajevo,8/skopje,8/stockholm,8/tirane,8/vaduz,8/vatican,8/vienna,8/warsaw,8/zagreb,8/zurich,3/jan_mayen,poland,cet,met\",\n  \"2|n\": \"0/blantyre,0/bujumbura,0/khartoum,0/kigali,0/tripoli,8/kaliningrad,libya\",\n  \"1|s\": \"0/brazzaville,0/kinshasa,0/luanda,0/windhoek\",\n  \"1|n|03/31:03->10/27:02\": \"3/canary,3/faroe,3/madeira,8/dublin,8/guernsey,8/isle_of_man,8/jersey,8/lisbon,8/london,3/faeroe,eire,8/belfast,gb-eire,gb,portugal,wet\",\n  \"1|n\": \"0/algiers,0/bangui,0/douala,0/lagos,0/libreville,0/malabo,0/ndjamena,0/niamey,0/porto-novo,0/tunis\",\n  \"14|n\": \"11/kiritimati\",\n  \"13|s\": \"11/apia,11/tongatapu\",\n  \"13|n\": \"11/enderbury,11/kanton,11/fakaofo\",\n  \"12|s|04/07:03->09/29:04\": \"12/mcmurdo,11/auckland,12/south_pole,nz\",\n  \"12|s\": \"11/fiji\",\n  \"12|n\": \"2/anadyr,2/kamchatka,2/srednekolymsk,11/funafuti,11/kwajalein,11/majuro,11/nauru,11/tarawa,11/wake,11/wallis,kwajalein\",\n  \"12.75|s|04/07:03->04/07:02\": \"11/chatham,nz-chat\",\n  \"11|s|04/07:03->10/06:04\": \"12/macquarie\",\n  \"11|s\": \"11/bougainville\",\n  \"11|n\": \"2/magadan,2/sakhalin,11/efate,11/guadalcanal,11/kosrae,11/noumea,11/pohnpei,11/ponape\",\n  \"11.5|n|04/07:03->10/06:04\": \"11/norfolk\",\n  \"10|s|04/07:03->10/06:04\": \"4/currie,4/hobart,4/melbourne,4/sydney,4/act,4/canberra,4/nsw,4/tasmania,4/victoria\",\n  \"10|s\": \"12/dumontdurville,4/brisbane,4/lindeman,11/port_moresby,4/queensland\",\n  \"10|n\": \"2/ust-nera,2/vladivostok,11/guam,11/saipan,11/chuuk,11/truk,11/yap\",\n  \"10.5|s|04/07:01->10/06:02\": \"4/lord_howe,4/lhi\",\n  \"0|s|03/10:03->04/14:04\": \"0/casablanca,0/el_aaiun\",\n  \"0|n|03/31:02->10/27:01\": \"3/azores\",\n  \"0|n|03/31:01->10/26:24\": \"1/scoresbysund\",\n  \"0|n\": \"0/abidjan,0/accra,0/bamako,0/banjul,0/bissau,0/conakry,0/dakar,0/freetown,0/lome,0/monrovia,0/nouakchott,0/ouagadougou,0/sao_tome,1/danmarkshavn,3/reykjavik,3/st_helena,13/gmt,13/utc,0/timbuktu,13/greenwich,13/uct,13/universal,13/zulu,gmt-0,gmt+0,gmt0,greenwich,iceland,uct,universal,utc,zulu,13/unknown,factory\",\n  \"-9|n|03/10:04->11/03:02\": \"1/adak,1/atka,us/aleutian\",\n  \"-9|n\": \"11/gambier\",\n  \"-9.5|n\": \"11/marquesas\",\n  \"-8|n|03/10:04->11/03:02\": \"1/anchorage,1/juneau,1/metlakatla,1/nome,1/sitka,1/yakutat,us/alaska\",\n  \"-8|n\": \"11/pitcairn\",\n  \"-7|n|03/10:04->11/03:02\": \"1/los_angeles,1/santa_isabel,1/tijuana,1/vancouver,1/ensenada,6/pacific,10/bajanorte,us/pacific-new,us/pacific\",\n  \"-7|n\": \"1/creston,1/dawson,1/dawson_creek,1/fort_nelson,1/hermosillo,1/mazatlan,1/phoenix,1/whitehorse,6/yukon,10/bajasur,us/arizona,mst\",\n  \"-6|s|04/06:22->09/07:24\": \"11/easter,7/easterisland\",\n  \"-6|n|04/07:02->10/27:02\": \"1/merida\",\n  \"-6|n|03/10:04->11/03:02\": \"1/boise,1/cambridge_bay,1/denver,1/edmonton,1/inuvik,1/north_dakota,1/ojinaga,1/ciudad_juarez,1/yellowknife,1/shiprock,6/mountain,navajo,us/mountain\",\n  \"-6|n\": \"1/bahia_banderas,1/belize,1/chihuahua,1/costa_rica,1/el_salvador,1/guatemala,1/managua,1/mexico_city,1/monterrey,1/regina,1/swift_current,1/tegucigalpa,11/galapagos,6/east-saskatchewan,6/saskatchewan,10/general\",\n  \"-5|s\": \"1/lima,1/rio_branco,1/porto_acre,5/acre\",\n  \"-5|n|03/10:04->11/03:02\": \"1/chicago,1/matamoros,1/menominee,1/rainy_river,1/rankin_inlet,1/resolute,1/winnipeg,1/indiana/knox,1/indiana/tell_city,1/north_dakota/beulah,1/north_dakota/center,1/north_dakota/new_salem,1/knox_in,6/central,us/central,us/indiana-starke\",\n  \"-5|n\": \"1/bogota,1/cancun,1/cayman,1/coral_harbour,1/eirunepe,1/guayaquil,1/jamaica,1/panama,1/atikokan,jamaica,est\",\n  \"-4|s|04/06:24->09/08:02\": \"1/santiago,7/continental\",\n  \"-4|s|03/23:24->10/06:02\": \"1/asuncion\",\n  \"-4|s\": \"1/campo_grande,1/cuiaba,1/la_paz,1/manaus,5/west\",\n  \"-4|n|03/10:04->11/03:02\": \"1/detroit,1/grand_turk,1/indiana,1/indianapolis,1/iqaluit,1/kentucky,1/louisville,1/montreal,1/nassau,1/new_york,1/nipigon,1/pangnirtung,1/port-au-prince,1/thunder_bay,1/toronto,1/indiana/marengo,1/indiana/petersburg,1/indiana/vevay,1/indiana/vincennes,1/indiana/winamac,1/kentucky/monticello,1/fort_wayne,1/indiana/indianapolis,1/kentucky/louisville,6/eastern,us/east-indiana,us/eastern,us/michigan\",\n  \"-4|n|03/10:02->11/03:01\": \"1/havana,cuba\",\n  \"-4|n\": \"1/anguilla,1/antigua,1/aruba,1/barbados,1/blanc-sablon,1/boa_vista,1/caracas,1/curacao,1/dominica,1/grenada,1/guadeloupe,1/guyana,1/kralendijk,1/lower_princes,1/marigot,1/martinique,1/montserrat,1/port_of_spain,1/porto_velho,1/puerto_rico,1/santo_domingo,1/st_barthelemy,1/st_kitts,1/st_lucia,1/st_thomas,1/st_vincent,1/tortola,1/virgin\",\n  \"-3|s\": \"1/argentina,1/buenos_aires,1/catamarca,1/cordoba,1/fortaleza,1/jujuy,1/mendoza,1/montevideo,1/punta_arenas,1/sao_paulo,12/palmer,12/rothera,3/stanley,1/argentina/la_rioja,1/argentina/rio_gallegos,1/argentina/salta,1/argentina/san_juan,1/argentina/san_luis,1/argentina/tucuman,1/argentina/ushuaia,1/argentina/comodrivadavia,1/argentina/buenos_aires,1/argentina/catamarca,1/argentina/cordoba,1/argentina/jujuy,1/argentina/mendoza,1/argentina/rosario,1/rosario,5/east\",\n  \"-3|n|03/10:04->11/03:02\": \"1/glace_bay,1/goose_bay,1/halifax,1/moncton,1/thule,3/bermuda,6/atlantic\",\n  \"-3|n\": \"1/araguaina,1/bahia,1/belem,1/cayenne,1/maceio,1/paramaribo,1/recife,1/santarem\",\n  \"-2|n|03/31:01->10/26:24\": \"1/nuuk,1/godthab\",\n  \"-2|n|03/10:04->11/03:02\": \"1/miquelon\",\n  \"-2|n\": \"1/noronha,3/south_georgia,5/denoronha\",\n  \"-2.5|n|03/10:04->11/03:02\": \"1/st_johns,6/newfoundland\",\n  \"-1|n\": \"3/cape_verde\",\n  \"-11|n\": \"11/midway,11/niue,11/pago_pago,11/samoa,us/samoa\",\n  \"-10|n\": \"11/honolulu,11/johnston,11/rarotonga,11/tahiti,us/hawaii,hst\"\n}", "//prefixes for iana names..\nexport default [\n  'africa',\n  'america',\n  'asia',\n  'atlantic',\n  'australia',\n  'brazil',\n  'canada',\n  'chile',\n  'europe',\n  'indian',\n  'mexico',\n  'pacific',\n  'antarctica',\n  'etc'\n]\n", "import data from './_build.js'\nimport prefixes from './_prefixes.js'\n\nlet all = {}\nObject.keys(data).forEach((k) => {\n  let split = k.split('|')\n  let obj = {\n    offset: Number(split[0]),\n    hem: split[1]\n  }\n  if (split[2]) {\n    obj.dst = split[2]\n  }\n  let names = data[k].split(',')\n  names.forEach((str) => {\n    str = str.replace(/(^[0-9]+)\\//, (before, num) => {\n      num = Number(num)\n      return prefixes[num] + '/'\n    })\n    all[str] = obj\n  })\n})\n\nall.utc = {\n  offset: 0,\n  hem: 'n' //default to northern hemisphere - (sorry!)\n}\n\n//add etc/gmt+n\nfor (let i = -14; i <= 14; i += 0.5) {\n  let num = i\n  if (num > 0) {\n    num = '+' + num\n  }\n  let name = 'etc/gmt' + num\n  all[name] = {\n    offset: i * -1, //they're negative!\n    hem: 'n' //(sorry)\n  }\n  name = 'utc/gmt' + num //this one too, why not.\n  all[name] = {\n    offset: i * -1,\n    hem: 'n'\n  }\n}\n\nexport default all\n", "//find the implicit iana code for this machine.\n//safely query the Intl object\n//based on - https://bitbucket.org/pellepim/jstimezonedetect/src\nconst fallbackTZ = 'utc' //\n\n//this Intl object is not supported often, yet\nconst safeIntl = () => {\n  if (typeof Intl === 'undefined' || typeof Intl.DateTimeFormat === 'undefined') {\n    return null\n  }\n  let format = Intl.DateTimeFormat()\n  if (typeof format === 'undefined' || typeof format.resolvedOptions === 'undefined') {\n    return null\n  }\n  let timezone = format.resolvedOptions().timeZone\n  if (!timezone) {\n    return null\n  }\n  return timezone.toLowerCase()\n}\n\nconst guessTz = () => {\n  let timezone = safeIntl()\n  if (timezone === null) {\n    return fallbackTZ\n  }\n  return timezone\n}\n//do it once per computer\nexport default guessTz\n", "const isOffset = /(-?[0-9]+)h(rs)?/i\nconst isNumber = /(-?[0-9]+)/\nconst utcOffset = /utc([\\-+]?[0-9]+)/i\nconst gmtOffset = /gmt([\\-+]?[0-9]+)/i\n\nconst toIana = function (num) {\n  num = Number(num)\n  if (num >= -13 && num <= 13) {\n    num = num * -1 //it's opposite!\n    num = (num > 0 ? '+' : '') + num //add plus sign\n    return 'etc/gmt' + num\n  }\n  return null\n}\n\nconst parseOffset = function (tz) {\n  // '+5hrs'\n  let m = tz.match(isOffset)\n  if (m !== null) {\n    return toIana(m[1])\n  }\n  // 'utc+5'\n  m = tz.match(utcOffset)\n  if (m !== null) {\n    return toIana(m[1])\n  }\n  // 'GMT-5' (not opposite)\n  m = tz.match(gmtOffset)\n  if (m !== null) {\n    let num = Number(m[1]) * -1\n    return toIana(num)\n  }\n  // '+5'\n  m = tz.match(isNumber)\n  if (m !== null) {\n    return toIana(m[1])\n  }\n  return null\n}\nexport default parseOffset\n", "/* eslint-disable no-console */\n\nimport tzs from '../../zonefile/unpack.js'\nimport guessTz from './guessTz.js'\nimport parseOffset from './parseOffset.js'\n\nlet local = guessTz()\n\n//add all the city names by themselves\nconst cities = Object.keys(tzs).reduce((h, k) => {\n  let city = k.split('/')[1] || ''\n  city = city.replace(/_/g, ' ')\n  h[city] = k\n  return h\n}, {})\n\n//try to match these against iana form\nconst normalize = (tz) => {\n  tz = tz.replace(/ time/g, '')\n  tz = tz.replace(/ (standard|daylight|summer)/g, '')\n  tz = tz.replace(/\\b(east|west|north|south)ern/g, '$1')\n  tz = tz.replace(/\\b(africa|america|australia)n/g, '$1')\n  tz = tz.replace(/\\beuropean/g, 'europe')\n  tz = tz.replace(/islands/g, 'island')\n  return tz\n}\n\n// try our best to reconcile the timzone to this given string\nconst lookupTz = (str, zones) => {\n  if (!str) {\n    // guard if Intl response is unsupported (#397)\n    if (!zones.hasOwnProperty(local)) {\n      console.warn(`Unrecognized IANA id '${local}'. Setting fallback tz to UTC.`)\n      local = 'utc'\n    }\n    return local\n  }\n  if (typeof str !== 'string') {\n    console.error(\"Timezone must be a string - recieved: '\", str, \"'\\n\")\n  }\n  let tz = str.trim()\n  // let split = str.split('/')\n  //support long timezones like 'America/Argentina/Rio_Gallegos'\n  // if (split.length > 2 && zones.hasOwnProperty(tz) === false) {\n  //   tz = split[0] + '/' + split[1]\n  // }\n  tz = tz.toLowerCase()\n  if (zones.hasOwnProperty(tz) === true) {\n    return tz\n  }\n  //lookup more loosely..\n  tz = normalize(tz)\n  if (zones.hasOwnProperty(tz) === true) {\n    return tz\n  }\n  //try city-names\n  if (cities.hasOwnProperty(tz) === true) {\n    return cities[tz]\n  }\n  // //try to parse '-5h'\n  if (/[0-9]/.test(tz) === true) {\n    let id = parseOffset(tz)\n    if (id) {\n      return id\n    }\n  }\n\n  throw new Error(\n    \"Spacetime: Cannot find timezone named: '\" + str + \"'. Please enter an IANA timezone id.\"\n  )\n}\nexport default lookupTz\n", "//git:blame @JuliasCaesar https://www.timeanddate.com/date/leapyear.html\nexport function isLeapYear(year) { return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0 }\n// unsurprisingly-nasty `typeof date` call\nexport function isDate(d) { return Object.prototype.toString.call(d) === '[object Date]' && !isNaN(d.valueOf()) }\nexport function isArray(input) { return Object.prototype.toString.call(input) === '[object Array]' }\nexport function isObject(input) { return Object.prototype.toString.call(input) === '[object Object]' }\nexport function isBoolean(input) { return Object.prototype.toString.call(input) === '[object Boolean]' }\n\nexport function zeroPad(str, len = 2) {\n  let pad = '0'\n  str = str + ''\n  return str.length >= len ? str : new Array(len - str.length + 1).join(pad) + str\n}\n\nexport function titleCase(str) {\n  if (!str) {\n    return ''\n  }\n  return str[0].toUpperCase() + str.substr(1)\n}\n\nexport function ordinal(i) {\n  let j = i % 10\n  let k = i % 100\n  if (j === 1 && k !== 11) {\n    return i + 'st'\n  }\n  if (j === 2 && k !== 12) {\n    return i + 'nd'\n  }\n  if (j === 3 && k !== 13) {\n    return i + 'rd'\n  }\n  return i + 'th'\n}\n\n//strip 'st' off '1st'..\nexport function toCardinal(str) {\n  str = String(str)\n  str = str.replace(/([0-9])(st|nd|rd|th)$/i, '$1')\n  return parseInt(str, 10)\n}\n\n//used mostly for cleanup of unit names, like 'months'\nexport function normalize(str = '') {\n  str = str.toLowerCase().trim()\n  str = str.replace(/ies$/, 'y') //'centuries'\n  str = str.replace(/s$/, '')\n  str = str.replace(/-/g, '')\n  if (str === 'day' || str === 'days') {\n    return 'date'\n  }\n  if (str === 'min' || str === 'mins') {\n    return 'minute'\n  }\n  return str\n}\n\nexport function getEpoch(tmp) {\n  //support epoch\n  if (typeof tmp === 'number') {\n    return tmp\n  }\n  //suport date objects\n  if (isDate(tmp)) {\n    return tmp.getTime()\n  }\n  // support spacetime objects\n  if (tmp.epoch || tmp.epoch === 0) {\n    return tmp.epoch\n  }\n  return null\n}\n\n//make sure this input is a spacetime obj\nexport function beADate(d, s) {\n  if (isObject(d) === false) {\n    return s.clone().set(d)\n  }\n  return d\n}\n\nexport function formatTimezone(offset, delimiter = '') {\n  const sign = offset > 0 ? '+' : '-'\n  const absOffset = Math.abs(offset)\n  const hours = zeroPad(parseInt('' + absOffset, 10))\n  const minutes = zeroPad((absOffset % 1) * 60)\n  return `${sign}${hours}${delimiter}${minutes}`\n}\n", "/* eslint-disable no-console */\nconst defaults = {\n  year: new Date().getFullYear(),\n  month: 0,\n  date: 1\n}\n\n//support [2016, 03, 01] format\nconst parseArray = (s, arr, today) => {\n  if (arr.length === 0) {\n    return s\n  }\n  let order = ['year', 'month', 'date', 'hour', 'minute', 'second', 'millisecond']\n  for (let i = 0; i < order.length; i++) {\n    let num = arr[i] || today[order[i]] || defaults[order[i]] || 0\n    s = s[order[i]](num)\n  }\n  return s\n}\n\n//support {year:2016, month:3} format\nconst parseObject = (s, obj, today) => {\n  // if obj is empty, do nothing\n  if (Object.keys(obj).length === 0) {\n    return s\n  }\n  obj = Object.assign({}, defaults, today, obj)\n  let keys = Object.keys(obj)\n  for (let i = 0; i < keys.length; i++) {\n    let unit = keys[i]\n    //make sure we have this method\n    if (s[unit] === undefined || typeof s[unit] !== 'function') {\n      continue\n    }\n    //make sure the value is a number\n    if (obj[unit] === null || obj[unit] === undefined || obj[unit] === '') {\n      continue\n    }\n    let num = obj[unit] || today[unit] || defaults[unit] || 0\n    s = s[unit](num)\n  }\n  return s\n}\n\n// this may seem like an arbitrary number, but it's 'within jan 1970'\n// this is only really ambiguous until 2054 or so\nconst parseNumber = function (s, input) {\n  const minimumEpoch = 2500000000\n  // if the given epoch is really small, they've probably given seconds and not milliseconds\n  // anything below this number is likely (but not necessarily) a mistaken input.\n  if (input > 0 && input < minimumEpoch && s.silent === false) {\n    console.warn('  - Warning: You are setting the date to January 1970.')\n    console.warn('       -   did input seconds instead of milliseconds?')\n  }\n  s.epoch = input\n  return s\n}\n\nexport default {\n  parseArray,\n  parseObject,\n  parseNumber\n}\n", "// pull in 'today' data for the baseline moment\nconst getNow = function (s) {\n  s.epoch = Date.now()\n  Object.keys(s._today || {}).forEach((k) => {\n    if (typeof s[k] === 'function') {\n      s = s[k](s._today[k])\n    }\n  })\n  return s\n}\n\nconst dates = {\n  now: (s) => {\n    return getNow(s)\n  },\n  today: (s) => {\n    return getNow(s)\n  },\n  tonight: (s) => {\n    s = getNow(s)\n    s = s.hour(18) //6pm\n    return s\n  },\n  tomorrow: (s) => {\n    s = getNow(s)\n    s = s.add(1, 'day')\n    s = s.startOf('day')\n    return s\n  },\n  yesterday: (s) => {\n    s = getNow(s)\n    s = s.subtract(1, 'day')\n    s = s.startOf('day')\n    return s\n  },\n  christmas: (s) => {\n    let year = getNow(s).year()\n    s = s.set([year, 11, 25, 18, 0, 0]) // Dec 25\n    return s\n  },\n  'new years': (s) => {\n    let year = getNow(s).year()\n    s = s.set([year, 11, 31, 18, 0, 0]) // Dec 31\n    return s\n  }\n}\ndates['new years eve'] = dates['new years']\nexport default dates\n", "//little cleanup..\nconst normalize = function (str) {\n  // remove all day-names\n  str = str.replace(/\\b(mon|tues?|wed|wednes|thur?s?|fri|sat|satur|sun)(day)?\\b/i, '')\n  //remove ordinal ending\n  str = str.replace(/([0-9])(th|rd|st|nd)/, '$1')\n  str = str.replace(/,/g, '')\n  str = str.replace(/ +/g, ' ').trim()\n  return str\n}\n\nexport default normalize\n", "let o = {\n  millisecond: 1\n}\no.second = 1000\no.minute = 60000\no.hour = 3.6e6 // dst is supported post-hoc\no.day = 8.64e7 //\no.date = o.day\no.month = 8.64e7 * 29.5 //(average)\no.week = 6.048e8\no.year = 3.154e10 // leap-years are supported post-hoc\n//add plurals\nObject.keys(o).forEach(k => {\n  o[k + 's'] = o[k]\n})\nexport default o\n", "/* eslint-disable no-console */\nimport ms from '../../data/milliseconds.js'\n\n//basically, step-forward/backward until js Date object says we're there.\nconst walk = (s, n, fn, unit, previous) => {\n  let current = s.d[fn]()\n  if (current === n) {\n    return //already there\n  }\n  let startUnit = previous === null ? null : s.d[previous]()\n  let original = s.epoch\n  //try to get it as close as we can\n  let diff = n - current\n  s.epoch += ms[unit] * diff\n  //DST edge-case: if we are going many days, be a little conservative\n  // console.log(unit, diff)\n  if (unit === 'day') {\n    // s.epoch -= ms.minute\n    //but don't push it over a month\n    if (Math.abs(diff) > 28 && n < 28) {\n      s.epoch += ms.hour\n    }\n  }\n  // 1st time: oops, did we change previous unit? revert it.\n  if (previous !== null && startUnit !== s.d[previous]()) {\n    // console.warn('spacetime warning: missed setting ' + unit)\n    s.epoch = original\n    // s.epoch += ms[unit] * diff * 0.89 // maybe try and make it close...?\n  }\n  //repair it if we've gone too far or something\n  //(go by half-steps, just in case)\n  const halfStep = ms[unit] / 2\n  while (s.d[fn]() < n) {\n    s.epoch += halfStep\n  }\n\n  while (s.d[fn]() > n) {\n    s.epoch -= halfStep\n  }\n  // 2nd time: did we change previous unit? revert it.\n  if (previous !== null && startUnit !== s.d[previous]()) {\n    // console.warn('spacetime warning: missed setting ' + unit)\n    s.epoch = original\n  }\n}\n//find the desired date by a increment/check while loop\nconst units = {\n  year: {\n    valid: (n) => n > -4000 && n < 4000,\n    walkTo: (s, n) => walk(s, n, 'getFullYear', 'year', null)\n  },\n  month: {\n    valid: (n) => n >= 0 && n <= 11,\n    walkTo: (s, n) => {\n      let d = s.d\n      let current = d.getMonth()\n      let original = s.epoch\n      let startUnit = d.getFullYear()\n      if (current === n) {\n        return\n      }\n      //try to get it as close as we can..\n      let diff = n - current\n      s.epoch += ms.day * (diff * 28) //special case\n      //oops, did we change the year? revert it.\n      if (startUnit !== s.d.getFullYear()) {\n        s.epoch = original\n      }\n      //increment by day\n      while (s.d.getMonth() < n) {\n        s.epoch += ms.day\n      }\n      while (s.d.getMonth() > n) {\n        s.epoch -= ms.day\n      }\n    }\n  },\n  date: {\n    valid: (n) => n > 0 && n <= 31,\n    walkTo: (s, n) => walk(s, n, 'getDate', 'day', 'getMonth')\n  },\n  hour: {\n    valid: (n) => n >= 0 && n < 24,\n    walkTo: (s, n) => walk(s, n, 'getHours', 'hour', 'getDate')\n  },\n  minute: {\n    valid: (n) => n >= 0 && n < 60,\n    walkTo: (s, n) => walk(s, n, 'getMinutes', 'minute', 'getHours')\n  },\n  second: {\n    valid: (n) => n >= 0 && n < 60,\n    walkTo: (s, n) => {\n      //do this one directly\n      s.epoch = s.seconds(n).epoch\n    }\n  },\n  millisecond: {\n    valid: (n) => n >= 0 && n < 1000,\n    walkTo: (s, n) => {\n      //do this one directly\n      s.epoch = s.milliseconds(n).epoch\n    }\n  }\n}\n\nconst walkTo = (s, wants) => {\n  let keys = Object.keys(units)\n  let old = s.clone()\n  for (let i = 0; i < keys.length; i++) {\n    let k = keys[i]\n    let n = wants[k]\n    if (n === undefined) {\n      n = old[k]()\n    }\n    if (typeof n === 'string') {\n      n = parseInt(n, 10)\n    }\n    //make-sure it's valid\n    if (!units[k].valid(n)) {\n      s.epoch = null\n      if (s.silent === false) {\n        console.warn('invalid ' + k + ': ' + n)\n      }\n      return\n    }\n    units[k].walkTo(s, n)\n  }\n  return\n}\n\nexport default walkTo\n", "const monthLengths = [\n  31, // January - 31 days\n  28, // February - 28 days in a common year and 29 days in leap years\n  31, // March - 31 days\n  30, // April - 30 days\n  31, // May - 31 days\n  30, // June - 30 days\n  31, // July - 31 days\n  31, // August - 31 days\n  30, // September - 30 days\n  31, // October - 31 days\n  30, // November - 30 days\n  31 // December - 31 days\n]\nexport default monthLengths\n\n// 28 - feb\n// 30 - april, june, sept, nov\n// 31 - jan, march, may, july, aug, oct, dec\n", "let shortMonths = [\n  'jan',\n  'feb',\n  'mar',\n  'apr',\n  'may',\n  'jun',\n  'jul',\n  'aug',\n  'sep',\n  'oct',\n  'nov',\n  'dec'\n]\nlet longMonths = [\n  'january',\n  'february',\n  'march',\n  'april',\n  'may',\n  'june',\n  'july',\n  'august',\n  'september',\n  'october',\n  'november',\n  'december'\n]\n\nfunction buildMapping() {\n  const obj = {\n    sep: 8 //support this format\n  }\n  for (let i = 0; i < shortMonths.length; i++) {\n    obj[shortMonths[i]] = i\n  }\n  for (let i = 0; i < longMonths.length; i++) {\n    obj[longMonths[i]] = i\n  }\n  return obj\n}\n\nexport function short() { return shortMonths }\nexport function long() { return longMonths }\nexport function mapping() { return buildMapping() }\nexport function set(i18n) {\n  shortMonths = i18n.short || shortMonths\n  longMonths = i18n.long || longMonths\n}\n", "//pull-apart ISO offsets, like \"+0100\"\nconst parseOffset = (s, offset) => {\n  if (!offset) {\n    return s\n  }\n  offset = offset.trim().toLowerCase()\n  // according to ISO8601, tz could be hh:mm, hhmm or hh\n  // so need few more steps before the calculation.\n  let num = 0\n\n  // for (+-)hh:mm\n  if (/^[+-]?[0-9]{2}:[0-9]{2}$/.test(offset)) {\n    //support \"+01:00\"\n    if (/:00/.test(offset) === true) {\n      offset = offset.replace(/:00/, '')\n    }\n    //support \"+01:30\"\n    if (/:30/.test(offset) === true) {\n      offset = offset.replace(/:30/, '.5')\n    }\n  }\n\n  // for (+-)hhmm\n  if (/^[+-]?[0-9]{4}$/.test(offset)) {\n    offset = offset.replace(/30$/, '.5')\n  }\n  num = parseFloat(offset)\n\n  //divide by 100 or 10 - , \"+0100\", \"+01\"\n  if (Math.abs(num) > 100) {\n    num = num / 100\n  }\n  //this is a fancy-move\n  if (num === 0 || offset === 'Z' || offset === 'z') {\n    s.tz = 'etc/gmt'\n    return s\n  }\n  //okay, try to match it to a utc timezone\n  //remember - this is opposite! a -5 offset maps to Etc/GMT+5  ¯\\_(:/)_/¯\n  //https://askubuntu.com/questions/519550/why-is-the-8-timezone-called-gmt-8-in-the-filesystem\n  num *= -1\n\n  if (num >= 0) {\n    num = '+' + num\n  }\n  let tz = 'etc/gmt' + num\n  let zones = s.timezones\n\n  if (zones[tz]) {\n    // log a warning if we're over-writing a given timezone?\n    // console.log('changing timezone to: ' + tz)\n    s.tz = tz\n  }\n  return s\n}\nexport default parseOffset\n", "// truncate any sub-millisecond values\nconst parseMs = function (str = '') {\n  str = String(str)\n  //js does not support sub-millisecond values\n  // so truncate these - 2021-11-02T19:55:30.087772\n  if (str.length > 3) {\n    str = str.substring(0, 3)\n  } else if (str.length === 1) {\n    // assume ms are zero-padded on the left\n    // but maybe not on the right.\n    // turn '.10' into '.100'\n    str = str + '00'\n  } else if (str.length === 2) {\n    str = str + '0'\n  }\n  return Number(str) || 0\n}\n\nconst parseTime = (s, str = '') => {\n  // remove all whitespace\n  str = str.replace(/^\\s+/, '').toLowerCase()\n  //formal time format - 04:30.23\n  let arr = str.match(/([0-9]{1,2}):([0-9]{1,2}):?([0-9]{1,2})?[:.]?([0-9]{1,4})?/)\n  if (arr !== null) {\n    let [, h, m, sec, ms] = arr\n    //validate it a little\n    h = Number(h)\n    if (h < 0 || h > 24) {\n      return s.startOf('day')\n    }\n    m = Number(m) //don't accept '5:3pm'\n    if (arr[2].length < 2 || m < 0 || m > 59) {\n      return s.startOf('day')\n    }\n    s = s.hour(h)\n    s = s.minute(m)\n    s = s.seconds(sec || 0)\n    s = s.millisecond(parseMs(ms))\n    //parse-out am/pm\n    let ampm = str.match(/[0-9] ?(am|pm)\\b/)\n    if (ampm !== null && ampm[1]) {\n      s = s.ampm(ampm[1])\n    }\n    return s\n  }\n\n  //try an informal form - 5pm (no minutes)\n  arr = str.match(/([0-9]+) ?(am|pm)/)\n  if (arr !== null && arr[1]) {\n    let h = Number(arr[1])\n    //validate it a little..\n    if (h > 12 || h < 1) {\n      return s.startOf('day')\n    }\n    s = s.hour(arr[1] || 0)\n    s = s.ampm(arr[2])\n    s = s.startOf('hour')\n    return s\n  }\n\n  //no time info found, use start-of-day\n  s = s.startOf('day')\n  return s\n}\nexport default parseTime\n", "import monthLengths from '../../data/monthLengths.js'\nimport { isLeapYear } from '../../fns.js'\nimport { mapping } from '../../data/months.js'\nlet months = mapping()\n\nimport parseOffset from './parseOffset.js'\nimport parseTime from './parseTime.js'\n\n//given a month, return whether day number exists in it\nconst validate = (obj) => {\n  //invalid values\n  if (monthLengths.hasOwnProperty(obj.month) !== true) {\n    return false\n  }\n  //support leap-year in february\n  if (obj.month === 1) {\n    if (isLeapYear(obj.year) && obj.date <= 29) {\n      return true\n    } else {\n      return obj.date <= 28\n    }\n  }\n  //is this date too-big for this month?\n  let max = monthLengths[obj.month] || 0\n  if (obj.date <= max) {\n    return true\n  }\n  return false\n}\n\nconst parseYear = (str = '', today) => {\n  str = str.trim()\n  // parse '86 shorthand\n  if (/^'[0-9][0-9]$/.test(str) === true) {\n    let num = Number(str.replace(/'/, ''))\n    if (num > 50) {\n      return 1900 + num\n    }\n    return 2000 + num\n  }\n  let year = parseInt(str, 10)\n  // use a given year from options.today\n  if (!year && today) {\n    year = today.year\n  }\n  // fallback to this year\n  year = year || new Date().getFullYear()\n  return year\n}\n\nconst parseMonth = function (str) {\n  str = str.toLowerCase().trim()\n  if (str === 'sept') {\n    return months.sep\n  }\n  return months[str]\n}\n\nexport {\n  parseOffset,\n  parseTime,\n  parseYear,\n  parseMonth,\n  validate\n}", "import walkTo from '../../methods/set/walk.js'\nimport { toCardinal } from '../../fns.js'\nimport { validate, parseTime, parseYear, parseMonth, parseOffset } from './_parsers.js'\n\nexport default [\n  // =====\n  //  y-m-d\n  // =====\n  //iso-this 1998-05-30T22:00:00:000Z, iso-that 2017-04-03T08:00:00-0700\n  {\n    reg: /^(-?0{0,2}[0-9]{3,4})-([0-9]{1,2})-([0-9]{1,2})[T| ]([0-9.:]+)(Z|[0-9-+:]+)?$/i,\n    parse: (s, m) => {\n      let obj = {\n        year: m[1],\n        month: parseInt(m[2], 10) - 1,\n        date: m[3]\n      }\n      if (validate(obj) === false) {\n        s.epoch = null\n        return s\n      }\n      parseOffset(s, m[5])\n      walkTo(s, obj)\n      s = parseTime(s, m[4])\n      return s\n    }\n  },\n  //short-iso \"2015-03-25\" or \"2015/03/25\" or \"2015/03/25 12:26:14 PM\"\n  {\n    reg: /^([0-9]{4})[\\-/. ]([0-9]{1,2})[\\-/. ]([0-9]{1,2})( [0-9]{1,2}(:[0-9]{0,2})?(:[0-9]{0,3})? ?(am|pm)?)?$/i,\n    parse: (s, m) => {\n      let obj = {\n        year: m[1],\n        month: parseInt(m[2], 10) - 1,\n        date: parseInt(m[3], 10)\n      }\n      if (obj.month >= 12) {\n        //support yyyy/dd/mm (weird, but ok)\n        obj.date = parseInt(m[2], 10)\n        obj.month = parseInt(m[3], 10) - 1\n      }\n      if (validate(obj) === false) {\n        s.epoch = null\n        return s\n      }\n      walkTo(s, obj)\n      s = parseTime(s, m[4])\n      return s\n    }\n  },\n\n  //text-month \"2015-feb-25\"\n  {\n    reg: /^([0-9]{4})[\\-/. ]([a-z]+)[\\-/. ]([0-9]{1,2})( [0-9]{1,2}(:[0-9]{0,2})?(:[0-9]{0,3})? ?(am|pm)?)?$/i,\n    parse: (s, m) => {\n      let obj = {\n        year: parseYear(m[1], s._today),\n        month: parseMonth(m[2]),\n        date: toCardinal(m[3] || '')\n      }\n      if (validate(obj) === false) {\n        s.epoch = null\n        return s\n      }\n      walkTo(s, obj)\n      s = parseTime(s, m[4])\n      return s\n    }\n  }\n]\n", "import walkTo from '../../methods/set/walk.js'\nimport { toCardinal } from '../../fns.js'\nimport { validate, parseTime, parseYear, parseMonth, parseOffset } from './_parsers.js'\n\nexport default [\n  // =====\n  //  m-d-y\n  // =====\n  //mm/dd/yyyy - uk/canada \"6/28/2019, 12:26:14 PM\"\n  {\n    reg: /^([0-9]{1,2})[-/.]([0-9]{1,2})[\\-/.]?([0-9]{4})?( [0-9]{1,2}:[0-9]{2}:?[0-9]{0,2} ?(am|pm|gmt))?$/i,\n    parse: (s, arr) => {\n      let month = parseInt(arr[1], 10) - 1\n      let date = parseInt(arr[2], 10)\n      //support dd/mm/yyy\n      if (s.british || month >= 12) {\n        date = parseInt(arr[1], 10)\n        month = parseInt(arr[2], 10) - 1\n      }\n      let obj = {\n        date,\n        month,\n        year: parseYear(arr[3], s._today) || new Date().getFullYear()\n      }\n      if (validate(obj) === false) {\n        s.epoch = null\n        return s\n      }\n      walkTo(s, obj)\n      s = parseTime(s, arr[4])\n      return s\n    }\n  },\n  //alt short format - \"feb-25-2015\"\n  {\n    reg: /^([a-z]+)[\\-/. ]([0-9]{1,2})[\\-/. ]?([0-9]{4}|'[0-9]{2})?( [0-9]{1,2}(:[0-9]{0,2})?(:[0-9]{0,3})? ?(am|pm)?)?$/i,\n    parse: (s, arr) => {\n      let obj = {\n        year: parseYear(arr[3], s._today),\n        month: parseMonth(arr[1]),\n        date: toCardinal(arr[2] || '')\n      }\n      if (validate(obj) === false) {\n        s.epoch = null\n        return s\n      }\n      walkTo(s, obj)\n      s = parseTime(s, arr[4])\n      return s\n    }\n  },\n\n  //Long \"Mar 25 2015\"\n  //February 22, 2017 15:30:00\n  {\n    reg: /^([a-z]+) ([0-9]{1,2})( [0-9]{4})?( ([0-9:]+( ?am| ?pm| ?gmt)?))?$/i,\n    parse: (s, arr) => {\n      let obj = {\n        year: parseYear(arr[3], s._today),\n        month: parseMonth(arr[1]),\n        date: toCardinal(arr[2] || '')\n      }\n      if (validate(obj) === false) {\n        s.epoch = null\n        return s\n      }\n      walkTo(s, obj)\n      s = parseTime(s, arr[4])\n      return s\n    }\n  },\n  // 'Sun Mar 14 15:09:48 +0000 2021'\n  {\n    reg: /^([a-z]+) ([0-9]{1,2}) ([0-9]{1,2}:[0-9]{2}:?[0-9]{0,2})( \\+[0-9]{4})?( [0-9]{4})?$/i,\n    parse: (s, arr) => {\n      let [, month, date, time, tz, year] = arr\n      let obj = {\n        year: parseYear(year, s._today),\n        month: parseMonth(month),\n        date: toCardinal(date || '')\n      }\n      if (validate(obj) === false) {\n        s.epoch = null\n        return s\n      }\n      walkTo(s, obj)\n      s = parseOffset(s, tz)\n      s = parseTime(s, time)\n      return s\n    }\n  }\n]\n", "import walkTo from '../../methods/set/walk.js'\nimport { toCardinal } from '../../fns.js'\nimport { validate, parseTime, parseYear, parseMonth } from './_parsers.js'\n\nexport default [\n  // =====\n  //  d-m-y\n  // =====\n  //common british format - \"25-feb-2015\"\n  {\n    reg: /^([0-9]{1,2})[-/]([a-z]+)[\\-/]?([0-9]{4})?$/i,\n    parse: (s, m) => {\n      let obj = {\n        year: parseYear(m[3], s._today),\n        month: parseMonth(m[2]),\n        date: toCardinal(m[1] || '')\n      }\n      if (validate(obj) === false) {\n        s.epoch = null\n        return s\n      }\n      walkTo(s, obj)\n      s = parseTime(s, m[4])\n      return s\n    }\n  },\n  // \"25 Mar 2015\"\n  {\n    reg: /^([0-9]{1,2})( [a-z]+)( [0-9]{4}| '[0-9]{2})? ?([0-9]{1,2}:[0-9]{2}:?[0-9]{0,2} ?(am|pm|gmt))?$/i,\n    parse: (s, m) => {\n      let obj = {\n        year: parseYear(m[3], s._today),\n        month: parseMonth(m[2]),\n        date: toCardinal(m[1])\n      }\n      if (!obj.month || validate(obj) === false) {\n        s.epoch = null\n        return s\n      }\n      walkTo(s, obj)\n      s = parseTime(s, m[4])\n      return s\n    }\n  },\n  // 01-jan-2020\n  {\n    reg: /^([0-9]{1,2})[. \\-/]([a-z]+)[. \\-/]([0-9]{4})?( [0-9]{1,2}(:[0-9]{0,2})?(:[0-9]{0,3})? ?(am|pm)?)?$/i,\n    parse: (s, m) => {\n      let obj = {\n        date: Number(m[1]),\n        month: parseMonth(m[2]),\n        year: Number(m[3])\n      }\n      if (validate(obj) === false) {\n        s.epoch = null\n        return s\n      }\n      walkTo(s, obj)\n      s = s.startOf('day')\n      s = parseTime(s, m[4])\n      return s\n    }\n  }\n]\n", "import walkTo from '../../methods/set/walk.js'\nimport { validate, parseTime, parseYear, parseMonth } from './_parsers.js'\n\nexport default [\n  // =====\n  // no dates\n  // =====\n\n  // '2012-06' month-only\n  {\n    reg: /^([0-9]{4})[\\-/]([0-9]{2})$/,\n    parse: (s, m) => {\n      let obj = {\n        year: m[1],\n        month: parseInt(m[2], 10) - 1,\n        date: 1\n      }\n      if (validate(obj) === false) {\n        s.epoch = null\n        return s\n      }\n      walkTo(s, obj)\n      s = parseTime(s, m[4])\n      return s\n    }\n  },\n\n  //February 2017 (implied date)\n  {\n    reg: /^([a-z]+) ([0-9]{4})$/i,\n    parse: (s, arr) => {\n      let obj = {\n        year: parseYear(arr[2], s._today),\n        month: parseMonth(arr[1]),\n        date: s._today.date || 1\n      }\n      if (validate(obj) === false) {\n        s.epoch = null\n        return s\n      }\n      walkTo(s, obj)\n      s = parseTime(s, arr[4])\n      return s\n    }\n  },\n\n  {\n    // 'q2 2002'\n    reg: /^(q[0-9])( of)?( [0-9]{4})?/i,\n    parse: (s, arr) => {\n      let quarter = arr[1] || ''\n      s = s.quarter(quarter)\n      let year = arr[3] || ''\n      if (year) {\n        year = year.trim()\n        s = s.year(year)\n      }\n      return s\n    }\n  },\n  {\n    // 'summer 2002'\n    reg: /^(spring|summer|winter|fall|autumn)( of)?( [0-9]{4})?/i,\n    parse: (s, arr) => {\n      let season = arr[1] || ''\n      s = s.season(season)\n      let year = arr[3] || ''\n      if (year) {\n        year = year.trim()\n        s = s.year(year)\n      }\n      return s\n    }\n  },\n  {\n    // '200bc'\n    reg: /^[0-9,]+ ?b\\.?c\\.?$/i,\n    parse: (s, arr) => {\n      let str = arr[0] || ''\n      //make year-negative\n      str = str.replace(/^([0-9,]+) ?b\\.?c\\.?$/i, '-$1')\n      let d = new Date()\n      let obj = {\n        year: parseInt(str.trim(), 10),\n        month: d.getMonth(),\n        date: d.getDate()\n      }\n      if (validate(obj) === false) {\n        s.epoch = null\n        return s\n      }\n      walkTo(s, obj)\n      s = parseTime(s)\n      return s\n    }\n  },\n  {\n    // '200ad'\n    reg: /^[0-9,]+ ?(a\\.?d\\.?|c\\.?e\\.?)$/i,\n    parse: (s, arr) => {\n      let str = arr[0] || ''\n      //remove commas\n      str = str.replace(/,/g, '')\n      let d = new Date()\n      let obj = {\n        year: parseInt(str.trim(), 10),\n        month: d.getMonth(),\n        date: d.getDate()\n      }\n      if (validate(obj) === false) {\n        s.epoch = null\n        return s\n      }\n      walkTo(s, obj)\n      s = parseTime(s)\n      return s\n    }\n  },\n  {\n    // '1992'\n    reg: /^[0-9]{4}( ?a\\.?d\\.?)?$/i,\n    parse: (s, arr) => {\n      let today = s._today\n      // using today's date, but a new month is awkward.\n      if (today.month && !today.date) {\n        today.date = 1\n      }\n      let d = new Date()\n      let obj = {\n        year: parseYear(arr[0], today),\n        month: today.month || d.getMonth(),\n        date: today.date || d.getDate()\n      }\n      if (validate(obj) === false) {\n        s.epoch = null\n        return s\n      }\n      walkTo(s, obj)\n      s = parseTime(s)\n      return s\n    }\n  }\n]\n", "import ymd from './01-ymd.js'\nimport mdy from './02-mdy.js'\nimport dmy from './03-dmy.js'\nimport misc from './04-misc.js'\n\nexport default [].concat(ymd, mdy, dmy, misc)\n", "/* eslint-disable no-console */\nimport parsers from './formats/index.js'\n\nconst parseString = function (s, input, givenTz) {\n  // let parsers = s.parsers || []\n  //try each text-parse template, use the first good result\n  for (let i = 0; i < parsers.length; i++) {\n    let m = input.match(parsers[i].reg)\n    if (m) {\n      let res = parsers[i].parse(s, m, givenTz)\n      if (res !== null && res.isValid()) {\n        return res\n      }\n    }\n  }\n  if (s.silent === false) {\n    console.warn(\"Warning: couldn't parse date-string: '\" + input + \"'\")\n  }\n  s.epoch = null\n  return s\n}\nexport default parseString\n", "import { isObject, isDate, isArray } from '../fns.js'\nimport fns from './helpers.js'\nconst { parseArray, parseObject, parseNumber } = fns\nimport namedDates from './named-dates.js'\nimport normalize from './normalize.js'\nimport parseString from './parse.js'\n//we have to actually parse these inputs ourselves\n//  -  can't use built-in js parser ;(\n//=========================================\n// ISO Date\t  \"2015-03-25\"\n// Short Date\t\"03/25/2015\" or \"2015/03/25\"\n// Long Date\t\"Mar 25 2015\" or \"25 Mar 2015\"\n// Full Date\t\"Wednesday March 25 2015\"\n//=========================================\n\nconst defaults = {\n  year: new Date().getFullYear(),\n  month: 0,\n  date: 1\n}\n\n//find the epoch from different input styles\nconst parseInput = (s, input) => {\n  let today = s._today || defaults\n  //if we've been given a epoch number, it's easy\n  if (typeof input === 'number') {\n    return parseNumber(s, input)\n  }\n  //set tmp time\n  s.epoch = Date.now()\n  // overwrite tmp time with 'today' value, if exists\n  if (s._today && isObject(s._today) && Object.keys(s._today).length > 0) {\n    let res = parseObject(s, today, defaults)\n    if (res.isValid()) {\n      s.epoch = res.epoch\n    }\n  }\n  // null input means 'now'\n  if (input === null || input === undefined || input === '') {\n    return s //k, we're good.\n  }\n  //support input of Date() object\n  if (isDate(input) === true) {\n    s.epoch = input.getTime()\n    return s\n  }\n  //support [2016, 03, 01] format\n  if (isArray(input) === true) {\n    s = parseArray(s, input, today)\n    return s\n  }\n  //support {year:2016, month:3} format\n  if (isObject(input) === true) {\n    //support spacetime object as input\n    if (input.epoch) {\n      s.epoch = input.epoch\n      s.tz = input.tz\n      return s\n    }\n    s = parseObject(s, input, today)\n    return s\n  }\n  //input as a string..\n  if (typeof input !== 'string') {\n    return s\n  }\n  //little cleanup..\n  input = normalize(input)\n  //try some known-words, like 'now'\n  if (namedDates.hasOwnProperty(input) === true) {\n    s = namedDates[input](s)\n    return s\n  }\n  //try each text-parse template, use the first good result\n  return parseString(s, input)\n}\nexport default parseInput\n", "let shortDays = ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat']\nlet longDays = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday']\n\nexport function short() { return shortDays }\nexport function long() { return longDays }\nexport function set(i18n) {\n  shortDays = i18n.short || shortDays\n  longDays = i18n.long || longDays\n}\nexport const aliases = {\n  mo: 1,\n  tu: 2,\n  we: 3,\n  th: 4,\n  fr: 5,\n  sa: 6,\n  su: 7,\n  tues: 2,\n  weds: 3,\n  wedn: 3,\n  thur: 4,\n  thurs: 4\n}\n", "let titleCaseEnabled = true\n\nexport function useTitleCase() {\n  return titleCaseEnabled\n}\n\nexport function set(val) {\n  titleCaseEnabled = val\n}\n", "import { formatTimezone } from '../../fns.js'\n\n// create the timezone offset part of an iso timestamp\n// it's kind of nuts how involved this is\n// \"+01:00\", \"+0100\", or simply \"+01\"\nconst isoOffset = s => {\n  let offset = s.timezone().current.offset\n  return !offset ? 'Z' : formatTimezone(offset, ':')\n}\n\nexport default isoOffset\n", "import { titleCase, zeroPad, ordinal } from '../../fns.js'\nimport { short } from '../../data/months.js'\nimport { short as _short } from '../../data/days.js'\nimport { useTitleCase } from '../../data/caseFormat.js'\nimport isoOffset from './_offset.js'\n\nconst applyCaseFormat = (str) => {\n  if (useTitleCase()) {\n    return titleCase(str)\n  }\n  return str\n}\n\n// iso-year padding\nconst padYear = (num) => {\n  if (num >= 0) {\n    return zeroPad(num, 4)\n  } else {\n    num = Math.abs(num)\n    return '-' + zeroPad(num, 4)\n  }\n}\n\nconst format = {\n  day: (s) => applyCaseFormat(s.dayName()),\n  'day-short': (s) => applyCaseFormat(_short()[s.day()]),\n  'day-number': (s) => s.day(),\n  'day-ordinal': (s) => ordinal(s.day()),\n  'day-pad': (s) => zeroPad(s.day()),\n\n  date: (s) => s.date(),\n  'date-ordinal': (s) => ordinal(s.date()),\n  'date-pad': (s) => zeroPad(s.date()),\n\n  month: (s) => applyCaseFormat(s.monthName()),\n  'month-short': (s) => applyCaseFormat(short()[s.month()]),\n  'month-number': (s) => s.month(),\n  'month-ordinal': (s) => ordinal(s.month()),\n  'month-pad': (s) => zeroPad(s.month()),\n  'iso-month': (s) => zeroPad(s.month() + 1), //1-based months\n\n  year: (s) => {\n    let year = s.year()\n    if (year > 0) {\n      return year\n    }\n    year = Math.abs(year)\n    return year + ' BC'\n  },\n  'year-short': (s) => {\n    let year = s.year()\n    if (year > 0) {\n      return `'${String(s.year()).substr(2, 4)}`\n    }\n    year = Math.abs(year)\n    return year + ' BC'\n  },\n  'iso-year': (s) => {\n    let year = s.year()\n    let isNegative = year < 0\n    let str = zeroPad(Math.abs(year), 4) //0-padded\n    if (isNegative) {\n      //negative years are for some reason 6-digits ('-00008')\n      str = zeroPad(str, 6)\n      str = '-' + str\n    }\n    return str\n  },\n\n  time: (s) => s.time(),\n  'time-24': (s) => `${s.hour24()}:${zeroPad(s.minute())}`,\n\n  hour: (s) => s.hour12(),\n  'hour-pad': (s) => zeroPad(s.hour12()),\n  'hour-24': (s) => s.hour24(),\n  'hour-24-pad': (s) => zeroPad(s.hour24()),\n\n  minute: (s) => s.minute(),\n  'minute-pad': (s) => zeroPad(s.minute()),\n  second: (s) => s.second(),\n  'second-pad': (s) => zeroPad(s.second()),\n  millisecond: (s) => s.millisecond(),\n  'millisecond-pad': (s) => zeroPad(s.millisecond(), 3),\n\n  ampm: (s) => s.ampm(),\n  AMPM: (s) => s.ampm().toUpperCase(),\n  quarter: (s) => 'Q' + s.quarter(),\n  season: (s) => s.season(),\n  era: (s) => s.era(),\n  json: (s) => s.json(),\n  timezone: (s) => s.timezone().name,\n  offset: (s) => isoOffset(s),\n\n  numeric: (s) => `${s.year()}/${zeroPad(s.month() + 1)}/${zeroPad(s.date())}`, // yyyy/mm/dd\n  'numeric-us': (s) => `${zeroPad(s.month() + 1)}/${zeroPad(s.date())}/${s.year()}`, // mm/dd/yyyy\n  'numeric-uk': (s) => `${zeroPad(s.date())}/${zeroPad(s.month() + 1)}/${s.year()}`, //dd/mm/yyyy\n  'mm/dd': (s) => `${zeroPad(s.month() + 1)}/${zeroPad(s.date())}`, //mm/dd\n\n  // ... https://en.wikipedia.org/wiki/ISO_8601 ;(((\n  iso: (s) => {\n    let year = s.format('iso-year')\n    let month = zeroPad(s.month() + 1) //1-based months\n    let date = zeroPad(s.date())\n    let hour = zeroPad(s.h24())\n    let minute = zeroPad(s.minute())\n    let second = zeroPad(s.second())\n    let ms = zeroPad(s.millisecond(), 3)\n    let offset = isoOffset(s)\n    return `${year}-${month}-${date}T${hour}:${minute}:${second}.${ms}${offset}` //2018-03-09T08:50:00.000-05:00\n  },\n  'iso-short': (s) => {\n    let month = zeroPad(s.month() + 1) //1-based months\n    let date = zeroPad(s.date())\n    let year = padYear(s.year())\n    return `${year}-${month}-${date}` //2017-02-15\n  },\n  'iso-utc': (s) => {\n    return new Date(s.epoch).toISOString() //2017-03-08T19:45:28.367Z\n  },\n\n  //i made these up\n  nice: (s) => `${short()[s.month()]} ${ordinal(s.date())}, ${s.time()}`,\n  'nice-24': (s) =>\n    `${short()[s.month()]} ${ordinal(s.date())}, ${s.hour24()}:${zeroPad(\n      s.minute()\n    )}`,\n  'nice-year': (s) => `${short()[s.month()]} ${ordinal(s.date())}, ${s.year()}`,\n  'nice-day': (s) =>\n    `${_short()[s.day()]} ${applyCaseFormat(short()[s.month()])} ${ordinal(\n      s.date()\n    )}`,\n  'nice-full': (s) =>\n    `${s.dayName()} ${applyCaseFormat(s.monthName())} ${ordinal(s.date())}, ${s.time()}`,\n  'nice-full-24': (s) =>\n    `${s.dayName()} ${applyCaseFormat(s.monthName())} ${ordinal(\n      s.date()\n    )}, ${s.hour24()}:${zeroPad(s.minute())}`\n}\n//aliases\nconst aliases = {\n  'day-name': 'day',\n  'month-name': 'month',\n  'iso 8601': 'iso',\n  'time-h24': 'time-24',\n  'time-12': 'time',\n  'time-h12': 'time',\n  tz: 'timezone',\n  'day-num': 'day-number',\n  'month-num': 'month-number',\n  'month-iso': 'iso-month',\n  'year-iso': 'iso-year',\n  'nice-short': 'nice',\n  'nice-short-24': 'nice-24',\n  mdy: 'numeric-us',\n  dmy: 'numeric-uk',\n  ymd: 'numeric',\n  'yyyy/mm/dd': 'numeric',\n  'mm/dd/yyyy': 'numeric-us',\n  'dd/mm/yyyy': 'numeric-us',\n  'little-endian': 'numeric-uk',\n  'big-endian': 'numeric',\n  'day-nice': 'nice-day'\n}\nObject.keys(aliases).forEach((k) => (format[k] = format[aliases[k]]))\n\nconst printFormat = (s, str = '') => {\n  //don't print anything if it's an invalid date\n  if (s.isValid() !== true) {\n    return ''\n  }\n  //support .format('month')\n  if (format.hasOwnProperty(str)) {\n    let out = format[str](s) || ''\n    if (str !== 'json') {\n      out = String(out)\n      if (str.toLowerCase() !== 'ampm') {\n        out = applyCaseFormat(out)\n      }\n    }\n    return out\n  }\n  //support '{hour}:{minute}' notation\n  if (str.indexOf('{') !== -1) {\n    let sections = /\\{(.+?)\\}/g\n    str = str.replace(sections, (_, fmt) => {\n      fmt = fmt.trim()\n      if (fmt !== 'AMPM') {\n        fmt = fmt.toLowerCase()\n      }\n      if (format.hasOwnProperty(fmt)) {\n        let out = String(format[fmt](s))\n        if (fmt.toLowerCase() !== 'ampm') {\n          return applyCaseFormat(out)\n        }\n        return out\n      }\n      return ''\n    })\n    return str\n  }\n\n  return s.format('iso-short')\n}\nexport default printFormat\n", "import { formatTimezone, zeroPad as pad } from '../../fns.js'\n//parse this insane unix-time-templating thing, from the 19th century\n//http://unicode.org/reports/tr35/tr35-25.html#Date_Format_Patterns\n\n//time-symbols we support\nconst mapping = {\n  G: (s) => s.era(),\n  GG: (s) => s.era(),\n  GGG: (s) => s.era(),\n  GGGG: (s) => (s.era() === 'AD' ? 'Anno Domini' : 'Before Christ'),\n  //year\n  y: (s) => s.year(),\n  yy: (s) => {\n    //last two chars\n    return pad(Number(String(s.year()).substr(2, 4)))\n  },\n  yyy: (s) => s.year(),\n  yyyy: (s) => s.year(),\n  yyyyy: (s) => '0' + s.year(),\n  // u: (s) => {},//extended non-gregorian years\n\n  //quarter\n  Q: (s) => s.quarter(),\n  QQ: (s) => s.quarter(),\n  QQQ: (s) => s.quarter(),\n  QQQQ: (s) => s.quarter(),\n\n  //month\n  M: (s) => s.month() + 1,\n  MM: (s) => pad(s.month() + 1),\n  MMM: (s) => s.format('month-short'),\n  MMMM: (s) => s.format('month'),\n\n  //week\n  w: (s) => s.week(),\n  ww: (s) => pad(s.week()),\n  //week of month\n  // W: (s) => s.week(),\n\n  //date of month\n  d: (s) => s.date(),\n  dd: (s) => pad(s.date()),\n  //date of year\n  D: (s) => s.dayOfYear(),\n  DD: (s) => pad(s.dayOfYear()),\n  DDD: (s) => pad(s.dayOfYear(), 3),\n\n  // F: (s) => {},//date of week in month\n  // g: (s) => {},//modified julian day\n\n  //day\n  E: (s) => s.format('day-short'),\n  EE: (s) => s.format('day-short'),\n  EEE: (s) => s.format('day-short'),\n  EEEE: (s) => s.format('day'),\n  EEEEE: (s) => s.format('day')[0],\n  e: (s) => s.day(),\n  ee: (s) => s.day(),\n  eee: (s) => s.format('day-short'),\n  eeee: (s) => s.format('day'),\n  eeeee: (s) => s.format('day')[0],\n\n  //am/pm\n  a: (s) => s.ampm().toUpperCase(),\n  aa: (s) => s.ampm().toUpperCase(),\n  aaa: (s) => s.ampm().toUpperCase(),\n  aaaa: (s) => s.ampm().toUpperCase(),\n\n  //hour\n  h: (s) => s.h12(),\n  hh: (s) => pad(s.h12()),\n  H: (s) => s.hour(),\n  HH: (s) => pad(s.hour()),\n  // j: (s) => {},//weird hour format\n\n  m: (s) => s.minute(),\n  mm: (s) => pad(s.minute()),\n  s: (s) => s.second(),\n  ss: (s) => pad(s.second()),\n\n  //milliseconds\n  SSS: (s) => pad(s.millisecond(), 3),\n  //milliseconds in the day\n  A: (s) => s.epoch - s.startOf('day').epoch,\n  //timezone\n  z: (s) => s.timezone().name,\n  zz: (s) => s.timezone().name,\n  zzz: (s) => s.timezone().name,\n  zzzz: (s) => s.timezone().name,\n  Z: (s) => formatTimezone(s.timezone().current.offset),\n  ZZ: (s) => formatTimezone(s.timezone().current.offset),\n  ZZZ: (s) => formatTimezone(s.timezone().current.offset),\n  ZZZZ: (s) => formatTimezone(s.timezone().current.offset, ':')\n}\n\nconst addAlias = (char, to, n) => {\n  let name = char\n  let toName = to\n  for (let i = 0; i < n; i += 1) {\n    mapping[name] = mapping[toName]\n    name += char\n    toName += to\n  }\n}\naddAlias('q', 'Q', 4)\naddAlias('L', 'M', 4)\naddAlias('Y', 'y', 4)\naddAlias('c', 'e', 4)\naddAlias('k', 'H', 2)\naddAlias('K', 'h', 2)\naddAlias('S', 's', 2)\naddAlias('v', 'z', 4)\naddAlias('V', 'Z', 4)\n\n// support unix-style escaping with ' character\nconst escapeChars = function (arr) {\n  for (let i = 0; i < arr.length; i += 1) {\n    if (arr[i] === `'`) {\n      // greedy-search for next apostrophe\n      for (let o = i + 1; o < arr.length; o += 1) {\n        if (arr[o]) {\n          arr[i] += arr[o]\n        }\n        if (arr[o] === `'`) {\n          arr[o] = null\n          break\n        }\n        arr[o] = null\n      }\n    }\n  }\n  return arr.filter((ch) => ch)\n}\n\n//combine consecutive chars, like 'yyyy' as one.\nconst combineRepeated = function (arr) {\n  for (let i = 0; i < arr.length; i += 1) {\n    let c = arr[i]\n    // greedy-forward\n    for (let o = i + 1; o < arr.length; o += 1) {\n      if (arr[o] === c) {\n        arr[i] += arr[o]\n        arr[o] = null\n      } else {\n        break\n      }\n    }\n  }\n  // '' means one apostrophe\n  arr = arr.filter((ch) => ch)\n  arr = arr.map((str) => {\n    if (str === `''`) {\n      str = `'`\n    }\n    return str\n  })\n  return arr\n}\n\nconst unixFmt = (s, str) => {\n  let arr = str.split('')\n  // support character escaping\n  arr = escapeChars(arr)\n  //combine 'yyyy' as string.\n  arr = combineRepeated(arr)\n  return arr.reduce((txt, c) => {\n    if (mapping[c] !== undefined) {\n      txt += mapping[c](s) || ''\n    } else {\n      // 'unescape'\n      if (/^'.+'$/.test(c)) {\n        c = c.replace(/'/g, '')\n      }\n      txt += c\n    }\n    return txt\n  }, '')\n}\nexport default unixFmt\n", "import { normalize } from '../fns.js'\nconst units = ['year', 'season', 'quarter', 'month', 'week', 'day', 'quarterHour', 'hour', 'minute']\n\nconst doUnit = function (s, k) {\n  let start = s.clone().startOf(k)\n  let end = s.clone().endOf(k)\n  let duration = end.epoch - start.epoch\n  let percent = (s.epoch - start.epoch) / duration\n  return parseFloat(percent.toFixed(2))\n}\n\n//how far it is along, from 0-1\nconst progress = (s, unit) => {\n  if (unit) {\n    unit = normalize(unit)\n    return doUnit(s, unit)\n  }\n  let obj = {}\n  units.forEach(k => {\n    obj[k] = doUnit(s, k)\n  })\n  return obj\n}\n\nexport default progress\n", "/* eslint-disable no-console */\nimport { normalize } from '../fns.js'\n\n//round to either current, or +1 of this unit\nconst nearest = (s, unit) => {\n  //how far have we gone?\n  let prog = s.progress()\n  unit = normalize(unit)\n  //fix camel-case for this one\n  if (unit === 'quarterhour') {\n    unit = 'quarterHour'\n  }\n  if (prog[unit] !== undefined) {\n    // go forward one?\n    if (prog[unit] > 0.5) {\n      s = s.add(1, unit)\n    }\n    // go to start\n    s = s.startOf(unit)\n  } else if (s.silent === false) {\n    console.warn(\"no known unit '\" + unit + \"'\")\n  }\n  return s\n}\nexport default nearest\n", "//increment until dates are the same\nconst climb = (a, b, unit) => {\n  let i = 0\n  a = a.clone()\n  while (a.isBefore(b)) {\n    //do proper, expensive increment to catch all-the-tricks\n    a = a.add(1, unit)\n    i += 1\n  }\n  //oops, we went too-far..\n  if (a.isAfter(b, unit)) {\n    i -= 1\n  }\n  return i\n}\n\n// do a thurough +=1 on the unit, until they match\n// for speed-reasons, only used on day, month, week.\nconst diffOne = (a, b, unit) => {\n  if (a.isBefore(b)) {\n    return climb(a, b, unit)\n  } else {\n    return climb(b, a, unit) * -1 //reverse it\n  }\n}\n\nexport default diffOne\n", "import diffOne from './one.js'\n\n// don't do anything too fancy here.\n// 2020 - 2019 may be 1 year, or 0 years\n// - '1 year difference' means 366 days during a leap year\nconst fastYear = (a, b) => {\n  let years = b.year() - a.year()\n  // should we decrement it by 1?\n  a = a.year(b.year())\n  if (a.isAfter(b)) {\n    years -= 1\n  }\n  return years\n}\n\n// use a waterfall-method for computing a diff of any 'pre-knowable' units\n// compute years, then compute months, etc..\n// ... then ms-math for any very-small units\nconst diff = function (a, b) {\n  // an hour is always the same # of milliseconds\n  // so these units can be 'pre-calculated'\n  let msDiff = b.epoch - a.epoch\n  let obj = {\n    milliseconds: msDiff,\n    seconds: parseInt(msDiff / 1000, 10)\n  }\n  obj.minutes = parseInt(obj.seconds / 60, 10)\n  obj.hours = parseInt(obj.minutes / 60, 10)\n\n  //do the year\n  let tmp = a.clone()\n  obj.years = fastYear(tmp, b)\n  tmp = a.add(obj.years, 'year')\n\n  //there's always 12 months in a year...\n  obj.months = obj.years * 12\n  tmp = a.add(obj.months, 'month')\n  obj.months += diffOne(tmp, b, 'month')\n\n  // there's always 4 quarters in a year...\n  obj.quarters = obj.years * 4\n  obj.quarters += parseInt((obj.months % 12) / 3, 10)\n\n  // there's always atleast 52 weeks in a year..\n  // (month * 4) isn't as close\n  obj.weeks = obj.years * 52\n  tmp = a.add(obj.weeks, 'week')\n  obj.weeks += diffOne(tmp, b, 'week')\n\n  // there's always atleast 7 days in a week\n  obj.days = obj.weeks * 7\n  tmp = a.add(obj.days, 'day')\n  obj.days += diffOne(tmp, b, 'day')\n\n  return obj\n}\nexport default diff\n", "import { beADate, normalize } from '../../fns.js'\nimport waterfall from './waterfall.js'\n\nconst reverseDiff = function (obj) {\n  Object.keys(obj).forEach((k) => {\n    obj[k] *= -1\n  })\n  return obj\n}\n\n// this method counts a total # of each unit, between a, b.\n// '1 month' means 28 days in february\n// '1 year' means 366 days in a leap year\nconst main = function (a, b, unit) {\n  b = beADate(b, a)\n  //reverse values, if necessary\n  let reversed = false\n  if (a.isAfter(b)) {\n    let tmp = a\n    a = b\n    b = tmp\n    reversed = true\n  }\n  //compute them all (i know!)\n  let obj = waterfall(a, b)\n  if (reversed) {\n    obj = reverseDiff(obj)\n  }\n  //return just the requested unit\n  if (unit) {\n    //make sure it's plural-form\n    unit = normalize(unit)\n    if (/s$/.test(unit) !== true) {\n      unit += 's'\n    }\n    if (unit === 'dates') {\n      unit = 'days'\n    }\n    return obj[unit]\n  }\n  return obj\n}\n\nexport default main\n", "/*\nISO 8601 duration format\n// https://en.wikipedia.org/wiki/ISO_8601#Durations\n\"P3Y6M4DT12H30M5S\"\nP the start of the duration representation.\nY the number of years.\nM the number of months.\nW the number of weeks.\nD the number of days.\nT of the representation.\nH the number of hours.\nM the number of minutes.\nS the number of seconds.\n*/\n\nconst fmt = (n) => Math.abs(n) || 0\n\nconst toISO = function (diff) {\n  let iso = 'P'\n  iso += fmt(diff.years) + 'Y'\n  iso += fmt(diff.months) + 'M'\n  iso += fmt(diff.days) + 'DT'\n  iso += fmt(diff.hours) + 'H'\n  iso += fmt(diff.minutes) + 'M'\n  iso += fmt(diff.seconds) + 'S'\n  return iso\n}\nexport default toISO", "\n//get number of hours/minutes... between the two dates\nfunction getDiff(a, b) {\n  const isBefore = a.isBefore(b)\n  const later = isBefore ? b : a\n  let earlier = isBefore ? a : b\n  earlier = earlier.clone()\n  const diff = {\n    years: 0,\n    months: 0,\n    days: 0,\n    hours: 0,\n    minutes: 0,\n    seconds: 0\n  }\n  Object.keys(diff).forEach((unit) => {\n    if (earlier.isSame(later, unit)) {\n      return\n    }\n    let max = earlier.diff(later, unit)\n    earlier = earlier.add(max, unit)\n    diff[unit] = max\n  })\n  //reverse it, if necessary\n  if (isBefore) {\n    Object.keys(diff).forEach((u) => {\n      if (diff[u] !== 0) {\n        diff[u] *= -1\n      }\n    })\n  }\n  return diff\n}\nexport default getDiff", "let units = {\n    second: 'second',\n    seconds: 'seconds',\n    minute: 'minute',\n    minutes: 'minutes',\n    hour: 'hour',\n    hours: 'hours',\n    day: 'day',\n    days: 'days',\n    month: 'month',\n    months: 'months',\n    year: 'year',\n    years: 'years',\n};\n\nexport function unitsString(unit) {\n    return units[unit] || '';\n}\n\nexport function set(i18n = {}) {\n    units = {\n        second: i18n.second || units.second,\n        seconds: i18n.seconds || units.seconds,\n        minute: i18n.minute || units.minute,\n        minutes: i18n.minutes || units.minutes,\n        hour: i18n.hour || units.hour,\n        hours: i18n.hours || units.hours,\n        day: i18n.day || units.day,\n        days: i18n.days || units.days,\n        month: i18n.month || units.month,\n        months: i18n.months || units.months,\n        year: i18n.year || units.year,\n        years: i18n.years || units.years,\n    };\n}", "let past = 'past'\nlet future = 'future'\nlet present = 'present'\nlet now = 'now'\nlet almost = 'almost'\nlet over = 'over'\nlet pastDistance = (value) => `${value} ago`\nlet futureDistance = (value) => `in ${value}`\n\nexport function pastDistanceString(value) { return pastDistance(value) }\nexport function futureDistanceString(value) { return futureDistance(value) }\nexport function pastString() { return past }\nexport function futureString() { return future }\nexport function presentString() { return present }\nexport function nowString() { return now }\nexport function almostString() { return almost }\nexport function overString() { return over }\n\nexport function set(i18n) {\n    pastDistance = i18n.pastDistance || pastDistance\n    futureDistance = i18n.futureDistance || futureDistance\n    past = i18n.past || past\n    future = i18n.future || future\n    present = i18n.present || present\n    now = i18n.now || now\n    almost = i18n.almost || almost\n    over = i18n.over || over\n}", "//our conceptual 'break-points' for each unit\nimport { unitsString } from \"../../data/units.js\";\nimport { almostString, overString } from \"../../data/distance.js\";\n\nconst qualifiers = {\n  months: {\n    almost: 10,\n    over: 4\n  },\n  days: {\n    almost: 25,\n    over: 10\n  },\n  hours: {\n    almost: 20,\n    over: 8\n  },\n  minutes: {\n    almost: 50,\n    over: 20\n  },\n  seconds: {\n    almost: 50,\n    over: 20\n  }\n}\n\n// Expects a plural unit arg\nfunction pluralize(value, unit) {\n  if (value === 1) {\n    return value + ' ' + unitsString(unit.slice(0, -1))\n  }\n  return value + ' ' + unitsString(unit)\n}\n\nconst toSoft = function (diff) {\n  let rounded = null\n  let qualified = null\n  let abbreviated = []\n  let englishValues = []\n  //go through each value and create its text-representation\n  Object.keys(diff).forEach((unit, i, units) => {\n    const value = Math.abs(diff[unit])\n    if (value === 0) {\n      return\n    }\n    abbreviated.push(value + unit[0])\n    const englishValue = pluralize(value, unit)\n    englishValues.push(englishValue)\n    if (!rounded) {\n      rounded = englishValue\n      qualified = englishValue\n      if (i > 4) {\n        return\n      }\n      //is it a 'almost' something, etc?\n      const nextUnit = units[i + 1]\n      const nextValue = Math.abs(diff[nextUnit])\n      if (nextValue > qualifiers[nextUnit].almost) {\n        rounded = pluralize(value + 1, unit)\n        qualified = almostString() + ' ' + rounded\n      } else if (nextValue > qualifiers[nextUnit].over) {\n        qualified = overString() + ' ' + englishValue\n      }\n    }\n  })\n\n  return { qualified, rounded, abbreviated, englishValues }\n}\nexport default toSoft\n", "import { beADate } from '../../fns.js'\nimport toISO from './_iso.js'\nimport getDiff from './getDiff.js'\nimport soften from './soften.js'\nimport {\n  pastString,\n  futureString,\n  nowString,\n  presentString,\n  pastDistanceString,\n  futureDistanceString\n} from \"../../data/distance.js\";\n//by spencermountain + Shaun Grady\n\n//create the human-readable diff between the two dates\nconst since = (start, end) => {\n  end = beADate(end, start)\n  const diff = getDiff(start, end)\n  const isNow = Object.keys(diff).every((u) => !diff[u])\n  if (isNow === true) {\n    return {\n      diff,\n      rounded: nowString(),\n      qualified: nowString(),\n      precise: nowString(),\n      abbreviated: [],\n      iso: 'P0Y0M0DT0H0M0S',\n      direction: presentString(),\n    }\n  }\n  let precise\n  let direction = futureString()\n\n  let { rounded, qualified, englishValues, abbreviated } = soften(diff)\n\n  //make them into a string\n  precise = englishValues.splice(0, 2).join(', ')\n  //handle before/after logic\n  if (start.isAfter(end) === true) {\n    rounded = pastDistanceString(rounded)\n    qualified = pastDistanceString(qualified)\n    precise = pastDistanceString(precise)\n    direction = pastString()\n  } else {\n    rounded = futureDistanceString(rounded)\n    qualified = futureDistanceString(qualified)\n    precise = futureDistanceString(precise)\n  }\n  // https://en.wikipedia.org/wiki/ISO_8601#Durations\n  // P[n]Y[n]M[n]DT[n]H[n]M[n]S \n  let iso = toISO(diff)\n  return {\n    diff,\n    rounded,\n    qualified,\n    precise,\n    abbreviated,\n    iso,\n    direction,\n  }\n}\n\nexport default since\n", "//https://www.timeanddate.com/calendar/aboutseasons.html\n// Spring - from March 1 to May 31;\n// Summer - from June 1 to August 31;\n// Fall (autumn) - from September 1 to November 30; and,\n// Winter - from December 1 to February 28 (February 29 in a leap year).\nconst north = [\n  ['spring', 2, 1],\n  ['summer', 5, 1],\n  ['fall', 8, 1],\n  ['autumn', 8, 1],\n  ['winter', 11, 1] //dec 1\n];\nconst south = [\n  ['fall', 2, 1],\n  ['autumn', 2, 1],\n  ['winter', 5, 1],\n  ['spring', 8, 1],\n  ['summer', 11, 1] //dec 1\n];\n\nexport default { north, south }", "export default [\n  null,\n  [0, 1], //jan 1\n  [3, 1], //apr 1\n  [6, 1], //july 1\n  [9, 1] //oct 1\n]\n", "import seasons from '../data/seasons.js'\nimport quarters from '../data/quarters.js'\nimport walkTo from './set/walk.js'\nimport { normalize } from '../fns.js'\n\nconst units = {\n  second: (s) => {\n    walkTo(s, {\n      millisecond: 0\n    })\n    return s\n  },\n  minute: (s) => {\n    walkTo(s, {\n      second: 0,\n      millisecond: 0\n    })\n    return s\n  },\n  quarterhour: (s) => {\n    let minute = s.minutes()\n    if (minute >= 45) {\n      s = s.minutes(45)\n    } else if (minute >= 30) {\n      s = s.minutes(30)\n    } else if (minute >= 15) {\n      s = s.minutes(15)\n    } else {\n      s = s.minutes(0)\n    }\n    walkTo(s, {\n      second: 0,\n      millisecond: 0\n    })\n    return s\n  },\n  hour: (s) => {\n    walkTo(s, {\n      minute: 0,\n      second: 0,\n      millisecond: 0\n    })\n    return s\n  },\n  day: (s) => {\n    walkTo(s, {\n      hour: 0,\n      minute: 0,\n      second: 0,\n      millisecond: 0\n    })\n    return s\n  },\n  week: (s) => {\n    let original = s.clone()\n    s = s.day(s._weekStart) //monday\n    if (s.isAfter(original)) {\n      s = s.subtract(1, 'week')\n    }\n    walkTo(s, {\n      hour: 0,\n      minute: 0,\n      second: 0,\n      millisecond: 0\n    })\n    return s\n  },\n  month: (s) => {\n    walkTo(s, {\n      date: 1,\n      hour: 0,\n      minute: 0,\n      second: 0,\n      millisecond: 0\n    })\n    return s\n  },\n  quarter: (s) => {\n    let q = s.quarter()\n    if (quarters[q]) {\n      walkTo(s, {\n        month: quarters[q][0],\n        date: quarters[q][1],\n        hour: 0,\n        minute: 0,\n        second: 0,\n        millisecond: 0\n      })\n    }\n    return s\n  },\n  season: (s) => {\n    let current = s.season()\n    let hem = 'north'\n    if (s.hemisphere() === 'South') {\n      hem = 'south'\n    }\n    for (let i = 0; i < seasons[hem].length; i++) {\n      if (seasons[hem][i][0] === current) {\n        //winter goes between years\n        let year = s.year()\n        if (current === 'winter' && s.month() < 3) {\n          year -= 1\n        }\n        walkTo(s, {\n          year,\n          month: seasons[hem][i][1],\n          date: seasons[hem][i][2],\n          hour: 0,\n          minute: 0,\n          second: 0,\n          millisecond: 0\n        })\n        return s\n      }\n    }\n    return s\n  },\n  year: (s) => {\n    walkTo(s, {\n      month: 0,\n      date: 1,\n      hour: 0,\n      minute: 0,\n      second: 0,\n      millisecond: 0\n    })\n    return s\n  },\n  decade: (s) => {\n    s = s.startOf('year')\n    let year = s.year()\n    let decade = parseInt(year / 10, 10) * 10\n    s = s.year(decade)\n    return s\n  },\n  century: (s) => {\n    s = s.startOf('year')\n    let year = s.year()\n    // near 0AD goes '-1 | +1'\n    let decade = parseInt(year / 100, 10) * 100\n    s = s.year(decade)\n    return s\n  }\n}\nunits.date = units.day\n\nconst startOf = (a, unit) => {\n  let s = a.clone()\n  unit = normalize(unit)\n  if (units[unit]) {\n    return units[unit](s)\n  }\n  if (unit === 'summer' || unit === 'winter') {\n    s = s.season(unit)\n    return units.season(s)\n  }\n  return s\n}\n\n//piggy-backs off startOf\nconst endOf = (a, unit) => {\n  let s = a.clone()\n  unit = normalize(unit)\n  if (units[unit]) {\n    // go to beginning, go to next one, step back 1ms\n    s = units[unit](s) // startof\n    s = s.add(1, unit)\n    s = s.subtract(1, 'millisecond')\n    return s\n  }\n  return s\n}\nexport {\n  startOf,\n  endOf\n}\n", "import { normalize } from '../fns.js'\nimport { short, long } from '../data/days.js'\n\n//is it 'wednesday'?\nconst isDay = function (unit) {\n  if (short().find((s) => s === unit)) {\n    return true\n  }\n  if (long().find((s) => s === unit)) {\n    return true\n  }\n  return false\n}\n\n// return a list of the weeks/months/days between a -> b\n// returns spacetime objects in the timezone of the input\nconst every = function (start, unit, end, stepCount = 1) {\n  if (!unit || !end) {\n    return []\n  }\n  //cleanup unit param\n  unit = normalize(unit)\n  //cleanup to param\n  end = start.clone().set(end)\n  //swap them, if they're backwards\n  if (start.isAfter(end)) {\n    let tmp = start\n    start = end\n    end = tmp\n  }\n  //prevent going beyond end if unit/stepCount > than the range\n  if (start.diff(end, unit) < stepCount) {\n    return []\n  }\n  //support 'every wednesday'\n  let d = start.clone()\n  if (isDay(unit)) {\n    d = d.next(unit)\n    unit = 'week'\n  } else {\n    let first = d.startOf(unit)\n    if (first.isBefore(start)) {\n      d = d.next(unit)\n    }\n  }\n  //okay, actually start doing it\n  let result = []\n  while (d.isBefore(end)) {\n    result.push(d)\n    d = d.add(stepCount, unit)\n  }\n  return result\n}\nexport default every\n", "/* eslint-disable no-console */\nimport findTz from './find.js'\nimport inSummerTime from './summerTime.js'\n\nconst parseDst = dst => {\n  if (!dst) {\n    return []\n  }\n  return dst.split('->')\n}\n\n//iana codes are case-sensitive, technically\nconst titleCase = str => {\n  str = str[0].toUpperCase() + str.substr(1)\n  str = str.replace(/[/_-]([a-z])/gi, s => {\n    return s.toUpperCase()\n  })\n  str = str.replace(/_(of|es)_/i, (s) => s.toLowerCase())\n  str = str.replace(/\\/gmt/i, '/GMT')\n  str = str.replace(/\\/Dumontdurville$/i, '/DumontDUrville')\n  str = str.replace(/\\/Mcmurdo$/i, '/McMurdo')\n  str = str.replace(/\\/Port-au-prince$/i, '/Port-au-Prince')\n  return str\n}\n\n//get metadata about this timezone\nconst timezone = s => {\n  let zones = s.timezones\n  let tz = s.tz\n  if (zones.hasOwnProperty(tz) === false) {\n    tz = findTz(s.tz, zones)\n  }\n  if (tz === null) {\n    if (s.silent === false) {\n      console.warn(\"Warn: could not find given or local timezone - '\" + s.tz + \"'\")\n    }\n    return {\n      current: {\n        epochShift: 0\n      }\n    }\n  }\n  let found = zones[tz]\n  let result = {\n    name: titleCase(tz),\n    hasDst: Boolean(found.dst),\n    default_offset: found.offset,\n    //do north-hemisphere version as default (sorry!)\n    hemisphere: found.hem === 's' ? 'South' : 'North',\n    current: {}\n  }\n\n  if (result.hasDst) {\n    let arr = parseDst(found.dst)\n    result.change = {\n      start: arr[0],\n      back: arr[1]\n    }\n  }\n  //find the offsets for summer/winter times\n  //(these variable names are north-centric)\n  let summer = found.offset // (july)\n  let winter = summer // (january) assume it's the same for now\n  if (result.hasDst === true) {\n    if (result.hemisphere === 'North') {\n      winter = summer - 1\n    } else {\n      //southern hemisphere\n      winter = found.offset + 1\n    }\n  }\n\n  //find out which offset to use right now\n  //use 'summer' time july-time\n  if (result.hasDst === false) {\n    result.current.offset = summer\n    result.current.isDST = false\n  } else if (inSummerTime(s.epoch, result.change.start, result.change.back, summer, winter) === true) {\n    result.current.offset = summer\n    result.current.isDST = result.hemisphere === 'North' //dst 'on' in winter in north\n  } else {\n    //use 'winter' january-time\n    result.current.offset = winter\n    result.current.isDST = result.hemisphere === 'South' //dst 'on' in summer in south\n  }\n  return result\n}\nexport default timezone\n", "/* eslint-disable no-console */\nimport format from './methods/format/index.js'\nimport unixFmt from './methods/format/unixFmt.js'\nimport progress from './methods/progress.js'\nimport nearest from './methods/nearest.js'\nimport diff from './methods/diff/index.js'\nimport since from './methods/since/index.js'\nimport { startOf as _startOf, endOf as _endOf } from './methods/startOf.js'\nimport every from './methods/every.js'\nimport timezone from './timezone/index.js'\nimport findTz from './timezone/find.js'\nimport handleInput from './input/index.js'\nimport { isLeapYear } from './fns.js'\nimport { short, long } from './data/days.js'\nconst units = [\n  'century',\n  'decade',\n  'year',\n  'month',\n  'date',\n  'day',\n  'hour',\n  'minute',\n  'second',\n  'millisecond'\n]\n\n//the spacetime instance methods (also, the API)\nconst methods = {\n  set: function (input, tz) {\n    let s = this.clone()\n    s = handleInput(s, input, null)\n    if (tz) {\n      this.tz = findTz(tz)\n    }\n    return s\n  },\n  timezone: function () {\n    return timezone(this)\n  },\n  isDST: function () {\n    return timezone(this).current.isDST\n  },\n  hasDST: function () {\n    return timezone(this).hasDst\n  },\n  offset: function () {\n    return timezone(this).current.offset * 60\n  },\n  hemisphere: function () {\n    return timezone(this).hemisphere\n  },\n  format: function (fmt) {\n    return format(this, fmt)\n  },\n  unixFmt: function (fmt) {\n    return unixFmt(this, fmt)\n  },\n  startOf: function (unit) {\n    return _startOf(this, unit)\n  },\n  endOf: function (unit) {\n    return _endOf(this, unit)\n  },\n  leapYear: function () {\n    let year = this.year()\n    return isLeapYear(year)\n  },\n  progress: function (unit) {\n    return progress(this, unit)\n  },\n  nearest: function (unit) {\n    return nearest(this, unit)\n  },\n  diff: function (d, unit) {\n    return diff(this, d, unit)\n  },\n  since: function (d) {\n    if (!d) {\n      d = this.clone().set()\n    }\n    return since(this, d)\n  },\n  next: function (unit) {\n    let s = this.add(1, unit)\n    return s.startOf(unit)\n  },\n  //the start of the previous year/week/century\n  last: function (unit) {\n    let s = this.subtract(1, unit)\n    return s.startOf(unit)\n  },\n  isValid: function () {\n    //null/undefined epochs\n    if (!this.epoch && this.epoch !== 0) {\n      return false\n    }\n    return !isNaN(this.d.getTime())\n  },\n  //travel to this timezone\n  goto: function (tz) {\n    let s = this.clone()\n    s.tz = findTz(tz, s.timezones) //science!\n    return s\n  },\n  //get each week/month/day between a -> b\n  every: function (unit, to, stepCount) {\n    // allow swapping these params:\n    if (typeof unit === 'object' && typeof to === 'string') {\n      let tmp = to\n      to = unit\n      unit = tmp\n    }\n    return every(this, unit, to, stepCount)\n  },\n  isAwake: function () {\n    let hour = this.hour()\n    //10pm -> 8am\n    if (hour < 8 || hour > 22) {\n      return false\n    }\n    return true\n  },\n  isAsleep: function () {\n    return !this.isAwake()\n  },\n  daysInMonth: function () {\n    switch (this.month()) {\n      case 0:\n        return 31\n      case 1:\n        return this.leapYear() ? 29 : 28\n      case 2:\n        return 31\n      case 3:\n        return 30\n      case 4:\n        return 31\n      case 5:\n        return 30\n      case 6:\n        return 31\n      case 7:\n        return 31\n      case 8:\n        return 30\n      case 9:\n        return 31\n      case 10:\n        return 30\n      case 11:\n        return 31\n      default:\n        throw new Error('Invalid Month state.')\n    }\n  },\n  //pretty-printing\n  log: function () {\n    console.log('')\n    console.log(format(this, 'nice-short'))\n    return this\n  },\n  logYear: function () {\n    console.log('')\n    console.log(format(this, 'full-short'))\n    return this\n  },\n  json: function () {\n    return units.reduce((h, unit) => {\n      h[unit] = this[unit]()\n      return h\n    }, {})\n  },\n  debug: function () {\n    let tz = this.timezone()\n    let date = this.format('MM') + ' ' + this.format('date-ordinal') + ' ' + this.year()\n    date += '\\n     - ' + this.format('time')\n    console.log('\\n\\n', date + '\\n     - ' + tz.name + ' (' + tz.current.offset + ')')\n    return this\n  },\n  //alias of 'since' but opposite - like moment.js\n  from: function (d) {\n    d = this.clone().set(d)\n    return d.since(this)\n  },\n  fromNow: function () {\n    let d = this.clone().set(Date.now())\n    return d.since(this)\n  },\n  weekStart: function (input) {\n    //accept a number directly\n    if (typeof input === 'number') {\n      this._weekStart = input\n      return this\n    }\n    if (typeof input === 'string') {\n      // accept 'wednesday'\n      input = input.toLowerCase().trim()\n      let num = short().indexOf(input)\n      if (num === -1) {\n        num = long().indexOf(input)\n      }\n      if (num === -1) {\n        num = 1 //go back to default\n      }\n      this._weekStart = num\n    } else {\n      console.warn('Spacetime Error: Cannot understand .weekStart() input:', input)\n    }\n    return this\n  }\n}\n// aliases\nmethods.inDST = methods.isDST\nmethods.round = methods.nearest\nmethods.each = methods.every\nexport default methods\n", "// javascript setX methods like setDate() can't be used because of the local bias\n//these methods wrap around them.\nimport ms from '../../data/milliseconds.js'\nimport { mapping } from '../../data/months.js'\nimport monthLength from '../../data/monthLengths.js'\nimport walkTo from './walk.js'\nimport { isLeapYear } from '../../fns.js'\n\nconst validate = (n) => {\n  //handle number as a string\n  if (typeof n === 'string') {\n    n = parseInt(n, 10)\n  }\n  return n\n}\n\nconst order = ['year', 'month', 'date', 'hour', 'minute', 'second', 'millisecond']\n\n//reduce hostile micro-changes when moving dates by millisecond\nconst confirm = (s, tmp, unit) => {\n  let n = order.indexOf(unit)\n  let arr = order.slice(n, order.length)\n  for (let i = 0; i < arr.length; i++) {\n    let want = tmp[arr[i]]()\n    s[arr[i]](want)\n  }\n  return s\n}\n\n// allow specifying setter direction\nconst fwdBkwd = function (s, old, goFwd, unit) {\n  if (goFwd === true && s.isBefore(old)) {\n    s = s.add(1, unit)\n  } else if (goFwd === false && s.isAfter(old)) {\n    s = s.minus(1, unit)\n  }\n  return s\n}\n\nconst milliseconds = function (s, n) {\n  n = validate(n)\n  let current = s.millisecond()\n  let diff = current - n //milliseconds to shift by\n  return s.epoch - diff\n}\n\nconst seconds = function (s, n, goFwd) {\n  n = validate(n)\n  let old = s.clone()\n  let diff = s.second() - n\n  let shift = diff * ms.second\n  s.epoch = s.epoch - shift\n  s = fwdBkwd(s, old, goFwd, 'minute') // specify direction\n  return s.epoch\n}\n\nconst minutes = function (s, n, goFwd) {\n  n = validate(n)\n  let old = s.clone()\n  let diff = s.minute() - n\n  let shift = diff * ms.minute\n  s.epoch -= shift\n  confirm(s, old, 'second')\n  s = fwdBkwd(s, old, goFwd, 'hour') // specify direction\n  return s.epoch\n}\n\nconst hours = function (s, n, goFwd) {\n  n = validate(n)\n  if (n >= 24) {\n    n = 24\n  } else if (n < 0) {\n    n = 0\n  }\n  let old = s.clone()\n  let diff = s.hour() - n\n  let shift = diff * ms.hour\n  s.epoch -= shift\n  // oops, did we change the day?\n  if (s.date() !== old.date()) {\n    s = old.clone()\n    if (diff > 1) {\n      diff -= 1\n    }\n    if (diff < 1) {\n      diff += 1\n    }\n    shift = diff * ms.hour\n    s.epoch -= shift\n  }\n  walkTo(s, {\n    hour: n\n  })\n  confirm(s, old, 'minute')\n  s = fwdBkwd(s, old, goFwd, 'day') // specify direction\n  return s.epoch\n}\n\nconst time = function (s, str, goFwd) {\n  let m = str.match(/([0-9]{1,2})[:h]([0-9]{1,2})(:[0-9]{1,2})? ?(am|pm)?/)\n  if (!m) {\n    //fallback to support just '2am'\n    m = str.match(/([0-9]{1,2}) ?(am|pm)/)\n    if (!m) {\n      return s.epoch\n    }\n    m.splice(2, 0, '0') //add implicit 0 minutes\n    m.splice(3, 0, '') //add implicit seconds\n  }\n  let h24 = false\n  let hour = parseInt(m[1], 10)\n  let minute = parseInt(m[2], 10)\n  if (minute >= 60) {\n    minute = 59\n  }\n  if (hour > 12) {\n    h24 = true\n  }\n  //make the hour into proper 24h time\n  if (h24 === false) {\n    if (m[4] === 'am' && hour === 12) {\n      //12am is midnight\n      hour = 0\n    }\n    if (m[4] === 'pm' && hour < 12) {\n      //12pm is noon\n      hour += 12\n    }\n  }\n  // handle seconds\n  m[3] = m[3] || ''\n  m[3] = m[3].replace(/:/, '')\n  let sec = parseInt(m[3], 10) || 0\n  let old = s.clone()\n  s = s.hour(hour)\n  s = s.minute(minute)\n  s = s.second(sec)\n  s = s.millisecond(0)\n  s = fwdBkwd(s, old, goFwd, 'day') // specify direction\n  return s.epoch\n}\n\nconst date = function (s, n, goFwd) {\n  n = validate(n)\n  //avoid setting february 31st\n  if (n > 28) {\n    let month = s.month()\n    let max = monthLength[month]\n    // support leap day in february\n    if (month === 1 && n === 29 && isLeapYear(s.year())) {\n      max = 29\n    }\n    if (n > max) {\n      n = max\n    }\n  }\n  //avoid setting < 0\n  if (n <= 0) {\n    n = 1\n  }\n  let old = s.clone()\n  walkTo(s, {\n    date: n\n  })\n  s = fwdBkwd(s, old, goFwd, 'month') // specify direction\n  return s.epoch\n}\n\nconst month = function (s, n, goFwd) {\n  if (typeof n === 'string') {\n    if (n === 'sept') {\n      n = 'sep'\n    }\n    n = mapping()[n.toLowerCase()]\n  }\n  n = validate(n)\n  //don't go past december\n  if (n >= 12) {\n    n = 11\n  }\n  if (n <= 0) {\n    n = 0\n  }\n\n  let d = s.date()\n  //there's no 30th of february, etc.\n  if (d > monthLength[n]) {\n    //make it as close as we can..\n    d = monthLength[n]\n  }\n  let old = s.clone()\n  walkTo(s, {\n    month: n,\n    d\n  })\n  s = fwdBkwd(s, old, goFwd, 'year') // specify direction\n  return s.epoch\n}\n\nconst year = function (s, n) {\n  // support '97\n  if (typeof n === 'string' && /^'[0-9]{2}$/.test(n)) {\n    n = n.replace(/'/, '').trim()\n    n = Number(n)\n    // '89 is 1989\n    if (n > 30) {\n      //change this in 10y\n      n = 1900 + n\n    } else {\n      // '12 is 2012\n      n = 2000 + n\n    }\n  }\n  n = validate(n)\n  walkTo(s, {\n    year: n\n  })\n  return s.epoch\n}\n\nconst week = function (s, n, goFwd) {\n  let old = s.clone()\n  n = validate(n)\n  s = s.month(0)\n  s = s.date(1)\n  s = s.day('monday')\n  //first week starts first Thurs in Jan\n  // so mon dec 28th is 1st week\n  // so mon dec 29th is not the week\n  if (s.monthName() === 'december' && s.date() >= 28) {\n    s = s.add(1, 'week')\n  }\n  n -= 1 //1-based\n  s = s.add(n, 'weeks')\n  s = fwdBkwd(s, old, goFwd, 'year') // specify direction\n  return s.epoch\n}\n\nconst dayOfYear = function (s, n, goFwd) {\n  n = validate(n)\n  let old = s.clone()\n  n -= 1 //days are 1-based\n  if (n <= 0) {\n    n = 0\n  } else if (n >= 365) {\n    if (isLeapYear(s.year())) {\n      n = 365\n    } else {\n      n = 364\n    }\n  }\n  s = s.startOf('year')\n  s = s.add(n, 'day')\n  confirm(s, old, 'hour')\n  s = fwdBkwd(s, old, goFwd, 'year') // specify direction\n  return s.epoch\n}\n\nexport {\n  milliseconds,\n  seconds,\n  minutes,\n  hours,\n  time,\n  date,\n  month,\n  year,\n  week,\n  dayOfYear,\n}\n", "let morning = 'am'\nlet evening = 'pm'\n\nexport function am() { return morning }\nexport function pm() { return evening }\nexport function set(i18n) {\n    morning = i18n.am || morning\n    evening = i18n.pm || evening\n}", "import { milliseconds, seconds, minutes, hours, time as _time } from '../set/set.js'\nimport { am, pm } from '../../data/ampm.js'\nimport { zeroPad } from '../../fns.js'\n\nconst methods = {\n  millisecond: function (num) {\n    if (num !== undefined) {\n      let s = this.clone()\n      s.epoch = milliseconds(s, num)\n      return s\n    }\n    return this.d.getMilliseconds()\n  },\n  second: function (num, goFwd) {\n    if (num !== undefined) {\n      let s = this.clone()\n      s.epoch = seconds(s, num, goFwd)\n      return s\n    }\n    return this.d.getSeconds()\n  },\n  minute: function (num, goFwd) {\n    if (num !== undefined) {\n      let s = this.clone()\n      s.epoch = minutes(s, num, goFwd)\n      return s\n    }\n    return this.d.getMinutes()\n  },\n  hour: function (num, goFwd) {\n    let d = this.d\n    if (num !== undefined) {\n      let s = this.clone()\n      s.epoch = hours(s, num, goFwd)\n      return s\n    }\n    return d.getHours()\n  },\n\n  //'3:30' is 3.5\n  hourFloat: function (num, goFwd) {\n    if (num !== undefined) {\n      let s = this.clone()\n      let minute = num % 1\n      minute = minute * 60\n      let hour = parseInt(num, 10)\n      s.epoch = hours(s, hour, goFwd)\n      s.epoch = minutes(s, minute, goFwd)\n      return s\n    }\n    let d = this.d\n    let hour = d.getHours()\n    let minute = d.getMinutes()\n    minute = minute / 60\n    return hour + minute\n  },\n\n  // hour in 12h format\n  hour12: function (str, goFwd) {\n    let d = this.d\n    if (str !== undefined) {\n      let s = this.clone()\n      str = '' + str\n      let m = str.match(/^([0-9]+)(am|pm)$/)\n      if (m) {\n        let hour = parseInt(m[1], 10)\n        if (m[2] === 'pm') {\n          hour += 12\n        }\n        s.epoch = hours(s, hour, goFwd)\n      }\n      return s\n    }\n    //get the hour\n    let hour12 = d.getHours()\n    if (hour12 > 12) {\n      hour12 = hour12 - 12\n    }\n    if (hour12 === 0) {\n      hour12 = 12\n    }\n    return hour12\n  },\n\n  //some ambiguity here with 12/24h\n  time: function (str, goFwd) {\n    if (str !== undefined) {\n      let s = this.clone()\n      str = str.toLowerCase().trim()\n      s.epoch = _time(s, str, goFwd)\n      return s\n    }\n    return `${this.h12()}:${zeroPad(this.minute())}${this.ampm()}`\n  },\n\n  // either 'am' or 'pm'\n  ampm: function (input, goFwd) {\n    // let which = 'am'\n    let which = am()\n    let hour = this.hour()\n    if (hour >= 12) {\n      // which = 'pm'\n      which = pm()\n    }\n    if (typeof input !== 'string') {\n      return which\n    }\n    //okay, we're doing a setter\n    let s = this.clone()\n    input = input.toLowerCase().trim()\n    //ampm should never change the day\n    // - so use `.hour(n)` instead of `.minus(12,'hour')`\n    if (hour >= 12 && input === 'am') {\n      //noon is 12pm\n      hour -= 12\n      return s.hour(hour, goFwd)\n    }\n    if (hour < 12 && input === 'pm') {\n      hour += 12\n      return s.hour(hour, goFwd)\n    }\n    return s\n  },\n\n  //some hard-coded times of day, like 'noon'\n  dayTime: function (str, goFwd) {\n    if (str !== undefined) {\n      const times = {\n        morning: '7:00',\n        breakfast: '7:00',\n        noon: '12:00',\n        lunch: '12:00',\n        afternoon: '14:00',\n        evening: '18:00',\n        dinner: '18:00',\n        night: '23:00',\n        midnight: '00:00'\n      }\n      let s = this.clone()\n      str = str || ''\n      str = str.toLowerCase()\n      if (times.hasOwnProperty(str) === true) {\n        s = s.time(times[str], goFwd)\n      }\n      return s\n    }\n    let h = this.hour()\n    if (h < 6) {\n      return 'night'\n    }\n    if (h < 12) {\n      //until noon\n      return 'morning'\n    }\n    if (h < 17) {\n      //until 5pm\n      return 'afternoon'\n    }\n    if (h < 22) {\n      //until 10pm\n      return 'evening'\n    }\n    return 'night'\n  },\n\n  //parse a proper iso string\n  iso: function (num) {\n    if (num !== undefined) {\n      return this.set(num)\n    }\n    return this.format('iso')\n  }\n}\nexport default methods\n", "import { date as _date } from '../set/set.js'\nimport { aliases, short, long } from '../../data/days.js'\nimport walkTo from '../set/walk.js'\n\nconst methods = {\n  // # day in the month\n  date: function (num, goFwd) {\n    if (num !== undefined) {\n      let s = this.clone()\n      num = parseInt(num, 10)\n      if (num) {\n        s.epoch = _date(s, num, goFwd)\n      }\n      return s\n    }\n    return this.d.getDate()\n  },\n\n  //like 'wednesday' (hard!)\n  day: function (input, goFwd) {\n    if (input === undefined) {\n      return this.d.getDay()\n    }\n    let original = this.clone()\n    let want = input\n    // accept 'wednesday'\n    if (typeof input === 'string') {\n      input = input.toLowerCase()\n      if (aliases.hasOwnProperty(input)) {\n        want = aliases[input]\n      } else {\n        want = short().indexOf(input)\n        if (want === -1) {\n          want = long().indexOf(input)\n        }\n      }\n    }\n    //move approx\n    let day = this.d.getDay()\n    let diff = day - want\n    if (goFwd === true && diff > 0) {\n      diff = diff - 7\n    }\n    if (goFwd === false && diff < 0) {\n      diff = diff + 7\n    }\n    let s = this.subtract(diff, 'days')\n    //tighten it back up\n    walkTo(s, {\n      hour: original.hour(),\n      minute: original.minute(),\n      second: original.second()\n    })\n    return s\n  },\n\n  //these are helpful name-wrappers\n  dayName: function (input, goFwd) {\n    if (input === undefined) {\n      return long()[this.day()]\n    }\n    let s = this.clone()\n    s = s.day(input, goFwd)\n    return s\n  }\n}\nexport default methods\n", "/* eslint-disable no-console */\nimport { dayOfYear as _dayOfYear, week as _week, month as _month, year as _year } from '../set/set.js'\nimport { long } from '../../data/months.js'\nimport quarters from '../../data/quarters.js'\nimport seasons from '../../data/seasons.js'\nimport ms from '../../data/milliseconds.js'\n\nconst clearMinutes = (s) => {\n  s = s.minute(0)\n  s = s.second(0)\n  s = s.millisecond(1)\n  return s\n}\n\nconst methods = {\n  // day 0-366\n  dayOfYear: function (num, goFwd) {\n    if (num !== undefined) {\n      let s = this.clone()\n      s.epoch = _dayOfYear(s, num, goFwd)\n      return s\n    }\n    //days since newyears - jan 1st is 1, jan 2nd is 2...\n    let sum = 0\n    let month = this.d.getMonth()\n    let tmp\n    //count the num days in each month\n    for (let i = 1; i <= month; i++) {\n      tmp = new Date()\n      tmp.setDate(1)\n      tmp.setFullYear(this.d.getFullYear()) //the year matters, because leap-years\n      tmp.setHours(1)\n      tmp.setMinutes(1)\n      tmp.setMonth(i)\n      tmp.setHours(-2) //the last day of the month\n      sum += tmp.getDate()\n    }\n    return sum + this.d.getDate()\n  },\n\n  //since the start of the year\n  week: function (num, goFwd) {\n    // week-setter\n    if (num !== undefined) {\n      let s = this.clone()\n      s.epoch = _week(this, num, goFwd)\n      s = clearMinutes(s)\n      return s\n    }\n    //find-out which week it is\n    let tmp = this.clone()\n    tmp = tmp.month(0)\n    tmp = tmp.date(1)\n    tmp = clearMinutes(tmp)\n    tmp = tmp.day('monday')\n    //don't go into last-year\n    if (tmp.month() === 11 && tmp.date() >= 25) {\n      tmp = tmp.add(1, 'week')\n    }\n\n    // is first monday the 1st?\n    let toAdd = 1\n    if (tmp.date() === 1) {\n      toAdd = 0\n    }\n    tmp = tmp.minus(1, 'second')\n    const thisOne = this.epoch\n    //if the week technically hasn't started yet\n    if (tmp.epoch > thisOne) {\n      return 1\n    }\n    //speed it up, if we can\n    let i = 0\n    let skipWeeks = this.month() * 4\n    // console.log(ms.week+ \" \"+ skipWeeks);\n    tmp.epoch += ms.week * skipWeeks\n    i += skipWeeks\n    for (; i <= 52; i++) {\n      if (tmp.epoch > thisOne) {\n        return i + toAdd\n      }\n      tmp = tmp.add(1, 'week')\n    }\n    return 52\n  },\n  //either name or number\n  month: function (input, goFwd) {\n    if (input !== undefined) {\n      let s = this.clone()\n      s.epoch = _month(s, input, goFwd)\n      return s\n    }\n    return this.d.getMonth()\n  },\n  //'january'\n  monthName: function (input, goFwd) {\n    if (input !== undefined) {\n      let s = this.clone()\n      s = s.month(input, goFwd)\n      return s\n    }\n    return long()[this.month()]\n  },\n\n  //q1, q2, q3, q4\n  quarter: function (num, goFwd) {\n    if (num !== undefined) {\n      if (typeof num === 'string') {\n        num = num.replace(/^q/i, '')\n        num = parseInt(num, 10)\n      }\n      if (quarters[num]) {\n        let s = this.clone()\n        let month = quarters[num][0]\n        s = s.month(month, goFwd)\n        s = s.date(1, goFwd)\n        s = s.startOf('day')\n        return s\n      }\n    }\n    let month = this.d.getMonth()\n    for (let i = 1; i < quarters.length; i++) {\n      if (month < quarters[i][0]) {\n        return i - 1\n      }\n    }\n    return 4\n  },\n\n  //spring, summer, winter, fall\n  season: function (input, goFwd) {\n    let hem = 'north'\n    if (this.hemisphere() === 'South') {\n      hem = 'south'\n    }\n    if (input !== undefined) {    // setter\n      let s = this.clone()\n      for (let i = 0; i < seasons[hem].length; i++) {\n        if (input === seasons[hem][i][0]) {\n          s = s.month(seasons[hem][i][1], goFwd)\n          s = s.date(1)\n          s = s.startOf('day')\n        }\n      }\n      return s\n    }\n    let month = this.d.getMonth()\n    for (let i = 0; i < seasons[hem].length - 1; i++) {\n      if (month >= seasons[hem][i][1] && month < seasons[hem][i + 1][1]) {\n        return seasons[hem][i][0]\n      }\n    }\n    return hem === 'north' ? 'winter' : 'summer'\n  },\n\n  //the year number\n  year: function (num) {\n    if (num !== undefined) {\n      let s = this.clone()\n      s.epoch = _year(s, num)\n      return s\n    }\n    return this.d.getFullYear()\n  },\n\n  //bc/ad years\n  era: function (str) {\n    if (str !== undefined) {\n      let s = this.clone()\n      str = str.toLowerCase()\n      //TODO: there is no year-0AD i think. may have off-by-1 error here\n      let year = s.d.getFullYear()\n      //make '1992' into 1992bc..\n      if (str === 'bc' && year > 0) {\n        s.epoch = _year(s, year * -1)\n      }\n      //make '1992bc' into '1992'\n      if (str === 'ad' && year < 0) {\n        s.epoch = _year(s, year * -1)\n      }\n      return s\n    }\n    if (this.d.getFullYear() < 0) {\n      return 'BC'\n    }\n    return 'AD'\n  },\n\n  // 2019 -> 2010\n  decade: function (input) {\n    if (input !== undefined) {\n      input = String(input)\n      input = input.replace(/([0-9])'?s$/, '$1') //1950's\n      input = input.replace(/([0-9])(th|rd|st|nd)/, '$1') //fix ordinals\n      if (!input) {\n        console.warn('Spacetime: Invalid decade input')\n        return this\n      }\n      // assume 20th century?? for '70s'.\n      if (input.length === 2 && /[0-9][0-9]/.test(input)) {\n        input = '19' + input\n      }\n      let year = Number(input)\n      if (isNaN(year)) {\n        return this\n      }\n      // round it down to the decade\n      year = Math.floor(year / 10) * 10\n      return this.year(year) //.startOf('decade')\n    }\n    return this.startOf('decade').year()\n  },\n  // 1950 -> 19+1\n  century: function (input) {\n    if (input !== undefined) {\n      if (typeof input === 'string') {\n        input = input.replace(/([0-9])(th|rd|st|nd)/, '$1') //fix ordinals\n        input = input.replace(/([0-9]+) ?(b\\.?c\\.?|a\\.?d\\.?)/i, (a, b, c) => {\n          if (c.match(/b\\.?c\\.?/i)) {\n            b = '-' + b\n          }\n          return b\n        })\n        input = input.replace(/c$/, '') //20thC\n      }\n      let year = Number(input)\n      if (isNaN(input)) {\n        console.warn('Spacetime: Invalid century input')\n        return this\n      }\n      // there is no century 0\n      if (year === 0) {\n        year = 1\n      }\n      if (year >= 0) {\n        year = (year - 1) * 100\n      } else {\n        year = (year + 1) * 100\n      }\n      return this.year(year)\n    }\n    // century getter\n    let num = this.startOf('century').year()\n    num = Math.floor(num / 100)\n    if (num < 0) {\n      return num - 1\n    }\n    return num + 1\n  },\n  // 2019 -> 2+1\n  millenium: function (input) {\n    if (input !== undefined) {\n      if (typeof input === 'string') {\n        input = input.replace(/([0-9])(th|rd|st|nd)/, '$1') //fix ordinals\n        input = Number(input)\n        if (isNaN(input)) {\n          console.warn('Spacetime: Invalid millenium input')\n          return this\n        }\n      }\n      if (input > 0) {\n        input -= 1\n      }\n      let year = input * 1000\n      // there is no year 0\n      if (year === 0) {\n        year = 1\n      }\n      return this.year(year)\n    }\n    // get the current millenium\n    let num = Math.floor(this.year() / 1000)\n    if (num >= 0) {\n      num += 1\n    }\n    return num\n  }\n}\nexport default methods\n", "import timeFns from './01-time.js'\nimport dateFns from './02-date.js'\nimport yearFns from './03-year.js'\n\nconst methods = Object.assign({}, timeFns, dateFns, yearFns)\n\n//aliases\nmethods.milliseconds = methods.millisecond\nmethods.seconds = methods.second\nmethods.minutes = methods.minute\nmethods.hours = methods.hour\nmethods.hour24 = methods.hour\nmethods.h12 = methods.hour12\nmethods.h24 = methods.hour24\nmethods.days = methods.day\n\nconst addMethods = Space => {\n  //hook the methods into prototype\n  Object.keys(methods).forEach(k => {\n    Space.prototype[k] = methods[k]\n  })\n}\n\nexport default addMethods\n", "import monthLength from '../../data/monthLengths.js'\nimport { isLeapYear } from '../../fns.js'\n\nconst getMonthLength = function (month, year) {\n  if (month === 1 && isLeapYear(year)) {\n    return 29\n  }\n  return monthLength[month]\n}\n\n//month is the one thing we 'model/compute'\n//- because ms-shifting can be off by enough\nconst rollMonth = (want, old) => {\n  //increment year\n  if (want.month > 0) {\n    let years = parseInt(want.month / 12, 10)\n    want.year = old.year() + years\n    want.month = want.month % 12\n  } else if (want.month < 0) {\n    let m = Math.abs(want.month)\n    let years = parseInt(m / 12, 10)\n    if (m % 12 !== 0) {\n      years += 1\n    }\n    want.year = old.year() - years\n    //ignore extras\n    want.month = want.month % 12\n    want.month = want.month + 12\n    if (want.month === 12) {\n      want.month = 0\n    }\n  }\n  return want\n}\n\n// briefly support day=-2 (this does not need to be perfect.)\nconst rollDaysDown = (want, old, sum) => {\n  want.year = old.year()\n  want.month = old.month()\n  let date = old.date()\n  want.date = date - Math.abs(sum)\n  while (want.date < 1) {\n    want.month -= 1\n    if (want.month < 0) {\n      want.month = 11\n      want.year -= 1\n    }\n    let max = getMonthLength(want.month, want.year)\n    want.date += max\n  }\n  return want\n}\n\n// briefly support day=33 (this does not need to be perfect.)\nconst rollDaysUp = (want, old, sum) => {\n  let year = old.year()\n  let month = old.month()\n  let max = getMonthLength(month, year)\n  while (sum > max) {\n    sum -= max\n    month += 1\n    if (month >= 12) {\n      month -= 12\n      year += 1\n    }\n    max = getMonthLength(month, year)\n  }\n  want.month = month\n  want.date = sum\n  return want\n}\n\nexport const months = rollMonth\nexport const days = rollDaysUp\nexport const daysBack = rollDaysDown\n", "import walkTo from './set/walk.js'\nimport ms from '../data/milliseconds.js'\nimport monthLength from '../data/monthLengths.js'\nimport { months, daysBack, days } from './set/_model.js'\nimport { normalize } from '../fns.js'\n// this logic is a bit of a mess,\n// but briefly:\n// millisecond-math, and some post-processing covers most-things\n// we 'model' the calendar here only a little bit\n// and that usually works-out...\n\nconst order = ['millisecond', 'second', 'minute', 'hour', 'date', 'month']\nlet keep = {\n  second: order.slice(0, 1),\n  minute: order.slice(0, 2),\n  quarterhour: order.slice(0, 2),\n  hour: order.slice(0, 3),\n  date: order.slice(0, 4),\n  month: order.slice(0, 4),\n  quarter: order.slice(0, 4),\n  season: order.slice(0, 4),\n  year: order,\n  decade: order,\n  century: order\n}\nkeep.week = keep.hour\nkeep.season = keep.date\nkeep.quarter = keep.date\n\n// Units need to be dst adjuested\nconst dstAwareUnits = {\n  year: true,\n  quarter: true,\n  season: true,\n  month: true,\n  week: true,\n  date: true\n}\n\nconst keepDate = {\n  month: true,\n  quarter: true,\n  season: true,\n  year: true\n}\n\nconst addMethods = (SpaceTime) => {\n  SpaceTime.prototype.add = function (num, unit) {\n    let s = this.clone()\n\n    if (!unit || num === 0) {\n      return s //don't bother\n    }\n    let old = this.clone()\n    unit = normalize(unit)\n    if (unit === 'millisecond') {\n      s.epoch += num\n      return s\n    }\n    // support 'fortnight' alias\n    if (unit === 'fortnight') {\n      num *= 2\n      unit = 'week'\n    }\n    //move forward by the estimated milliseconds (rough)\n    if (ms[unit]) {\n      s.epoch += ms[unit] * num\n    } else if (unit === 'week' || unit === 'weekend') {\n      s.epoch += ms.day * (num * 7)\n    } else if (unit === 'quarter' || unit === 'season') {\n      s.epoch += ms.month * (num * 3)\n    } else if (unit === 'quarterhour') {\n      s.epoch += ms.minute * 15 * num\n    }\n    //now ensure our milliseconds/etc are in-line\n    let want = {}\n    if (keep[unit]) {\n      keep[unit].forEach((u) => {\n        want[u] = old[u]()\n      })\n    }\n\n    if (dstAwareUnits[unit]) {\n      const diff = old.timezone().current.offset - s.timezone().current.offset\n      s.epoch += diff * 3600 * 1000\n    }\n\n    //ensure month/year has ticked-over\n    if (unit === 'month') {\n      want.month = old.month() + num\n      //month is the one unit we 'model' directly\n      want = months(want, old)\n    }\n    //support coercing a week, too\n    if (unit === 'week') {\n      let sum = old.date() + (num * 7)\n      if (sum <= 28 && sum > 1) {\n        want.date = sum\n      }\n    }\n    if (unit === 'weekend' && s.dayName() !== 'saturday') {\n      s = s.day('saturday', true) //ensure it's saturday\n    }\n    //support 25-hour day-changes on dst-changes\n    else if (unit === 'date') {\n      if (num < 0) {\n        want = daysBack(want, old, num)\n      } else {\n        //specify a naive date number, if it's easy to do...\n        let sum = old.date() + num\n        // ok, model this one too\n        want = days(want, old, sum)\n      }\n      //manually punt it if we haven't moved at all..\n      if (num !== 0 && old.isSame(s, 'day')) {\n        want.date = old.date() + num\n      }\n    }\n    // ensure a quarter is 3 months over\n    else if (unit === 'quarter') {\n      want.month = old.month() + (num * 3)\n      want.year = old.year()\n      // handle rollover\n      if (want.month < 0) {\n        let years = Math.floor(want.month / 12)\n        let remainder = want.month + (Math.abs(years) * 12)\n        want.month = remainder\n        want.year += years\n      } else if (want.month >= 12) {\n        let years = Math.floor(want.month / 12)\n        want.month = want.month % 12\n        want.year += years\n      }\n      want.date = old.date()\n    }\n    //ensure year has changed (leap-years)\n    else if (unit === 'year') {\n      let wantYear = old.year() + num\n      let haveYear = s.year()\n      if (haveYear < wantYear) {\n        let toAdd = Math.floor(num / 4) || 1 //approx num of leap-days\n        s.epoch += Math.abs(ms.day * toAdd)\n      } else if (haveYear > wantYear) {\n        let toAdd = Math.floor(num / 4) || 1 //approx num of leap-days\n        s.epoch += ms.day * toAdd\n      }\n    }\n    //these are easier\n    else if (unit === 'decade') {\n      want.year = s.year() + 10\n    } else if (unit === 'century') {\n      want.year = s.year() + 100\n    }\n    //keep current date, unless the month doesn't have it.\n    if (keepDate[unit]) {\n      let max = monthLength[want.month]\n      want.date = old.date()\n      if (want.date > max) {\n        want.date = max\n      }\n    }\n    if (Object.keys(want).length > 1) {\n      walkTo(s, want)\n    }\n    return s\n  }\n\n  //subtract is only add *-1\n  SpaceTime.prototype.subtract = function (num, unit) {\n    let s = this.clone()\n    return s.add(num * -1, unit)\n  }\n  //add aliases\n  SpaceTime.prototype.minus = SpaceTime.prototype.subtract\n  SpaceTime.prototype.plus = SpaceTime.prototype.add\n}\n\nexport default addMethods\n", "//make a string, for easy comparison between dates\nconst print = {\n  millisecond: (s) => {\n    return s.epoch\n  },\n  second: (s) => {\n    return [s.year(), s.month(), s.date(), s.hour(), s.minute(), s.second()].join('-')\n  },\n  minute: (s) => {\n    return [s.year(), s.month(), s.date(), s.hour(), s.minute()].join('-')\n  },\n  hour: (s) => {\n    return [s.year(), s.month(), s.date(), s.hour()].join('-')\n  },\n  day: (s) => {\n    return [s.year(), s.month(), s.date()].join('-')\n  },\n  week: (s) => {\n    return [s.year(), s.week()].join('-')\n  },\n  month: (s) => {\n    return [s.year(), s.month()].join('-')\n  },\n  quarter: (s) => {\n    return [s.year(), s.quarter()].join('-')\n  },\n  year: (s) => {\n    return s.year()\n  }\n}\nprint.date = print.day\n\nconst addMethods = (SpaceTime) => {\n  SpaceTime.prototype.isSame = function (b, unit, tzAware = true) {\n    let a = this\n    if (!unit) {\n      return null\n    }\n    // support swapped params\n    if (typeof b === 'string' && typeof unit === 'object') {\n      let tmp = b\n      b = unit\n      unit = tmp\n    }\n    if (typeof b === 'string' || typeof b === 'number') {\n      b = new SpaceTime(b, this.timezone.name)\n    }\n    //support 'seconds' aswell as 'second'\n    unit = unit.replace(/s$/, '')\n\n    // make them the same timezone for proper comparison\n    if (tzAware === true && a.tz !== b.tz) {\n      b = b.clone()\n      b.tz = a.tz\n    }\n    if (print[unit]) {\n      return print[unit](a) === print[unit](b)\n    }\n    return null\n  }\n}\n\nexport default addMethods\n", "import { beADate, getEpoch } from '../fns.js'\n\nconst addMethods = SpaceTime => {\n  const methods = {\n    isAfter: function (d) {\n      d = beADate(d, this)\n      let epoch = getEpoch(d)\n      if (epoch === null) {\n        return null\n      }\n      return this.epoch > epoch\n    },\n    isBefore: function (d) {\n      d = beADate(d, this)\n      let epoch = getEpoch(d)\n      if (epoch === null) {\n        return null\n      }\n      return this.epoch < epoch\n    },\n    isEqual: function (d) {\n      d = beADate(d, this)\n      let epoch = getEpoch(d)\n      if (epoch === null) {\n        return null\n      }\n      return this.epoch === epoch\n    },\n    isBetween: function (start, end, isInclusive = false) {\n      start = beADate(start, this)\n      end = beADate(end, this)\n      let startEpoch = getEpoch(start)\n      if (startEpoch === null) {\n        return null\n      }\n      let endEpoch = getEpoch(end)\n      if (endEpoch === null) {\n        return null\n      }\n      if (isInclusive) {\n        return this.isBetween(start, end) || this.isEqual(start) || this.isEqual(end);\n      }\n      return startEpoch < this.epoch && this.epoch < endEpoch\n    }\n  }\n\n  //hook them into proto\n  Object.keys(methods).forEach(k => {\n    SpaceTime.prototype[k] = methods[k]\n  })\n}\n\nexport default addMethods\n", "import { isObject, isBoolean } from '../fns.js'\nimport { set as setD } from '../data/days.js'\nimport { set as setM } from '../data/months.js'\nimport { set as setTcf } from '../data/caseFormat.js'\nimport { set as setAmpm } from '../data/ampm.js'\nimport { set as setDistance } from '../data/distance.js'\nimport { set as setUnits } from '../data/units.js'\n\nconst addMethods = SpaceTime => {\n  const methods = {\n    i18n: function (data) {\n      //change the day names\n      if (isObject(data.days)) {\n        setD(data.days)\n      }\n      //change the month names\n      if (isObject(data.months)) {\n        setM(data.months)\n      }\n\n      //change the display style of the month / day names\n      if (isBoolean(data.useTitleCase)) {\n        setTcf(data.useTitleCase)\n      }\n\n      //change am and pm strings\n      if (isObject(data.ampm)) {\n        setAmpm(data.ampm)\n      }\n\n      //change distance strings\n      if(isObject(data.distance)){\n        setDistance(data.distance)\n      }\n\n      //change units strings\n      if(isObject(data.units)){\n        setUnits(data.units)\n      }\n\n      return this\n    }\n  }\n\n  //hook them into proto\n  Object.keys(methods).forEach(k => {\n    SpaceTime.prototype[k] = methods[k]\n  })\n}\n\nexport default addMethods\n", "import quickOffset from './timezone/quick.js'\nimport findTz from './timezone/find.js'\nimport handleInput from './input/index.js'\nimport methods from './methods.js'\nimport zones from '../zonefile/unpack.js'\nimport queryFns from './methods/query/index.js'\nimport addFns from './methods/add.js'\nimport sameFns from './methods/same.js'\nimport compareFns from './methods/compare.js'\nimport i18nFns from './methods/i18n.js'\n\nlet timezones = zones\n// fake timezone-support, for fakers (es5 class)\nconst SpaceTime = function (input, tz, options = {}) {\n  // the holy moment\n  this.epoch = null\n  // the shift for the given timezone\n  this.tz = findTz(tz, timezones)\n  // whether to output warnings to console\n  this.silent = typeof options.silent !== 'undefined' ? options.silent : true\n  // favour british interpretation of 02/02/2018, etc\n  this.british = options.dmy || options.british\n\n  // does the week start on sunday, or monday:\n  this._weekStart = 1 // default to monday\n  if (options.weekStart !== undefined) {\n    this._weekStart = options.weekStart\n  }\n  // the reference today date object, (for testing)\n  this._today = {}\n  if (options.today !== undefined) {\n    this._today = options.today\n  }\n  // dunno if this is a good idea, or not\n  // Object.defineProperty(this, 'parsers', {\n  //   enumerable: false,\n  //   writable: true,\n  //   value: parsers\n  // })\n  // add getter/setters\n  Object.defineProperty(this, 'd', {\n    // return a js date object\n    get: function () {\n      let offset = quickOffset(this)\n      // every computer is somewhere- get this computer's built-in offset\n      let bias = new Date(this.epoch).getTimezoneOffset() || 0\n      // movement\n      let shift = bias + (offset * 60) //in minutes\n      shift = shift * 60 * 1000 //in ms\n      // remove this computer's offset\n      let epoch = this.epoch + shift\n      let d = new Date(epoch)\n      return d\n    }\n  })\n  // add this data on the object, to allow adding new timezones\n  Object.defineProperty(this, 'timezones', {\n    get: () => timezones,\n    set: (obj) => {\n      timezones = obj\n      return obj\n    }\n  })\n  // parse the various formats\n  let tmp = handleInput(this, input)\n  this.epoch = tmp.epoch\n  if (tmp.tz) {\n    this.tz = tmp.tz\n  }\n}\n\n// (add instance methods to prototype)\nObject.keys(methods).forEach((k) => {\n  SpaceTime.prototype[k] = methods[k]\n})\n\n// ¯\\_(ツ)_/¯\nSpaceTime.prototype.clone = function () {\n  return new SpaceTime(this.epoch, this.tz, {\n    silent: this.silent,\n    weekStart: this._weekStart,\n    today: this._today,\n    parsers: this.parsers\n  })\n}\n\n/**\n * @deprecated use toNativeDate()\n * @returns native date object at the same epoch\n */\nSpaceTime.prototype.toLocalDate = function () {\n  return this.toNativeDate()\n}\n\n/**\n * @returns native date object at the same epoch\n */\nSpaceTime.prototype.toNativeDate = function () {\n  return new Date(this.epoch)\n}\n\n// append more methods\nqueryFns(SpaceTime)\naddFns(SpaceTime)\nsameFns(SpaceTime)\ncompareFns(SpaceTime)\ni18nFns(SpaceTime)\n\nexport default SpaceTime\n", "import Spacetime from './spacetime.js'\n// const timezones = require('../data');\n\nconst whereIts = (a, b) => {\n  let start = new Spacetime(null)\n  let end = new Spacetime(null)\n  start = start.time(a)\n  //if b is undefined, use as 'within one hour'\n  if (b) {\n    end = end.time(b)\n  } else {\n    end = start.add(59, 'minutes')\n  }\n\n  let startHour = start.hour()\n  let endHour = end.hour()\n  let tzs = Object.keys(start.timezones).filter((tz) => {\n    if (tz.indexOf('/') === -1) {\n      return false\n    }\n    let m = new Spacetime(null, tz)\n    let hour = m.hour()\n    //do 'calendar-compare' not real-time-compare\n    if (hour >= startHour && hour <= endHour) {\n      //test minutes too, if applicable\n      if (hour === startHour && m.minute() < start.minute()) {\n        return false\n      }\n      if (hour === endHour && m.minute() > end.minute()) {\n        return false\n      }\n      return true\n    }\n    return false\n  })\n  return tzs\n}\nexport default whereIts\n", "export default '7.6.2'", "import Spacetime from './spacetime.js'\nimport whereIts from './whereIts.js'\nimport version from './_version.js'\n\nconst main = (input, tz, options) => new Spacetime(input, tz, options)\n\n// set all properties of a given 'today' object\nconst setToday = function (s) {\n  let today = s._today || {}\n  Object.keys(today).forEach((k) => {\n    s = s[k](today[k])\n  })\n  return s\n}\n\n//some helper functions on the main method\nmain.now = (tz, options) => {\n  let s = new Spacetime(new Date().getTime(), tz, options)\n  s = setToday(s)\n  return s\n}\nmain.today = (tz, options) => {\n  let s = new Spacetime(new Date().getTime(), tz, options)\n  s = setToday(s)\n  return s.startOf('day')\n}\nmain.tomorrow = (tz, options) => {\n  let s = new Spacetime(new Date().getTime(), tz, options)\n  s = setToday(s)\n  return s.add(1, 'day').startOf('day')\n}\nmain.yesterday = (tz, options) => {\n  let s = new Spacetime(new Date().getTime(), tz, options)\n  s = setToday(s)\n  return s.subtract(1, 'day').startOf('day')\n}\nmain.extend = function (obj = {}) {\n  Object.keys(obj).forEach((k) => {\n    Spacetime.prototype[k] = obj[k]\n  })\n  return this\n}\nmain.timezones = function () {\n  let s = new Spacetime()\n  return s.timezones\n}\nmain.max = function (tz, options) {\n  let s = new Spacetime(null, tz, options)\n  s.epoch = 8640000000000000\n  return s\n}\nmain.min = function (tz, options) {\n  let s = new Spacetime(null, tz, options)\n  s.epoch = -8640000000000000\n  return s\n}\n\n//find tz by time\nmain.whereIts = whereIts\nmain.version = version\n\n//aliases:\nmain.plugin = main.extend\nexport default main\n", "const BASE = 36;\nconst seq = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\nconst cache = seq.split('').reduce(function (h, c, i) {\n  h[c] = i;\n  return h\n}, {});\n\n// 0, 1, 2, ..., A, B, C, ..., 00, 01, ... AA, AB, AC, ..., AAA, AAB, ...\nconst toAlphaCode = function (n) {\n  if (seq[n] !== undefined) {\n    return seq[n]\n  }\n  let places = 1;\n  let range = BASE;\n  let s = '';\n  for (; n >= range; n -= range, places++, range *= BASE) {}\n  while (places--) {\n    const d = n % BASE;\n    s = String.fromCharCode((d < 10 ? 48 : 55) + d) + s;\n    n = (n - d) / BASE;\n  }\n  return s\n};\n\nconst fromAlphaCode = function (s) {\n  if (cache[s] !== undefined) {\n    return cache[s]\n  }\n  let n = 0;\n  let places = 1;\n  let range = BASE;\n  let pow = 1;\n  for (; places < s.length; n += range, places++, range *= BASE) {}\n  for (let i = s.length - 1; i >= 0; i--, pow *= BASE) {\n    let d = s.charCodeAt(i) - 48;\n    if (d > 10) {\n      d -= 7;\n    }\n    n += d * pow;\n  }\n  return n\n};\n\nvar encoding = {\n  toAlphaCode,\n  fromAlphaCode\n};\n\nconst symbols = function (t) {\n  //... process these lines\n  const reSymbol = new RegExp('([0-9A-Z]+):([0-9A-Z]+)');\n  for (let i = 0; i < t.nodes.length; i++) {\n    const m = reSymbol.exec(t.nodes[i]);\n    if (!m) {\n      t.symCount = i;\n      break\n    }\n    t.syms[encoding.fromAlphaCode(m[1])] = encoding.fromAlphaCode(m[2]);\n  }\n  //remove from main node list\n  t.nodes = t.nodes.slice(t.symCount, t.nodes.length);\n};\nvar parseSymbols = symbols;\n\n// References are either absolute (symbol) or relative (1 - based)\nconst indexFromRef = function (trie, ref, index) {\n  const dnode = encoding.fromAlphaCode(ref);\n  if (dnode < trie.symCount) {\n    return trie.syms[dnode]\n  }\n  return index + dnode + 1 - trie.symCount\n};\n\nconst toArray = function (trie) {\n  const all = [];\n  const crawl = (index, pref) => {\n    let node = trie.nodes[index];\n    if (node[0] === '!') {\n      all.push(pref);\n      node = node.slice(1); //ok, we tried. remove it.\n    }\n    const matches = node.split(/([A-Z0-9,]+)/g);\n    for (let i = 0; i < matches.length; i += 2) {\n      const str = matches[i];\n      const ref = matches[i + 1];\n      if (!str) {\n        continue\n      }\n      const have = pref + str;\n      //branch's end\n      if (ref === ',' || ref === undefined) {\n        all.push(have);\n        continue\n      }\n      const newIndex = indexFromRef(trie, ref, index);\n      crawl(newIndex, have);\n    }\n  };\n  crawl(0, '');\n  return all\n};\n\n//PackedTrie - Trie traversal of the Trie packed-string representation.\nconst unpack$2 = function (str) {\n  const trie = {\n    nodes: str.split(';'),\n    syms: [],\n    symCount: 0\n  };\n  //process symbols, if they have them\n  if (str.match(':')) {\n    parseSymbols(trie);\n  }\n  return toArray(trie)\n};\n\nvar traverse = unpack$2;\n\nconst unpack = function (str) {\n  if (!str) {\n    return {}\n  }\n  //turn the weird string into a key-value object again\n  const obj = str.split('|').reduce((h, s) => {\n    const arr = s.split('¦');\n    h[arr[0]] = arr[1];\n    return h\n  }, {});\n  const all = {};\n  Object.keys(obj).forEach(function (cat) {\n    const arr = traverse(obj[cat]);\n    //special case, for botched-boolean\n    if (cat === 'true') {\n      cat = true;\n    }\n    for (let i = 0; i < arr.length; i++) {\n      const k = arr[i];\n      if (all.hasOwnProperty(k) === true) {\n        if (Array.isArray(all[k]) === false) {\n          all[k] = [all[k], cat];\n        } else {\n          all[k].push(cat);\n        }\n      } else {\n        all[k] = cat;\n      }\n    }\n  });\n  return all\n};\n\nvar unpack$1 = unpack;\n\n// these are the folk heuristics that timezones use to set their dst change dates\n// for example, the US changes:\n// the second Sunday of March -> first Sunday of November\n// http://www.webexhibits.org/daylightsaving/g.html\nlet patterns = {\n  usa: '2nd-sun-mar-2h|1st-sun-nov-2h',// (From 1987 to 2006)\n  // mexico\n  mex: '1st-sun-apr-2h|last-sun-oct-2h',\n\n  // European Union zone\n  eu0: 'last-sun-mar-0h|last-sun-oct-1h',\n  eu1: 'last-sun-mar-1h|last-sun-oct-2h',\n  eu2: 'last-sun-mar-2h|last-sun-oct-3h',\n  eu3: 'last-sun-mar-3h|last-sun-oct-4h',\n  //greenland\n  green: 'last-sat-mar-22h|last-sat-oct-23h',\n\n  // australia\n  aus: '1st-sun-apr-3h|1st-sun-oct-2h',\n  //lord howe australia\n  lhow: '1st-sun-apr-2h|1st-sun-oct-2h',\n  // new zealand\n  chat: '1st-sun-apr-3h|last-sun-sep-2h', //technically 3:45h -> 2:45h\n  // new Zealand, antarctica \n  nz: '1st-sun-apr-3h|last-sun-sep-2h',\n  // casey - antarctica\n  ant: '2nd-sun-mar-0h|1st-sun-oct-0h',\n  // troll - antarctica\n  troll: '3rd-sun-mar-1h|last-sun-oct-3h',\n\n  //jordan\n  jord: 'last-fri-feb-0h|last-fri-oct-1h',\n  // lebanon\n  leb: 'last-sun-mar-0h|last-sun-oct-0h',\n  // syria\n  syr: 'last-fri-mar-0h|last-fri-oct-0h',\n  //israel\n  // Start: Last Friday before April 2 -> The Sunday between Rosh Hashana and Yom Kippur\n  isr: 'last-fri-mar-2h|last-sun-oct-2h',\n  //palestine\n  pal: 'last-sun-mar-0h|last-fri-oct-1h',\n\n  // el aaiun\n  //this one seems to be on arabic calendar?\n  saha: 'last-sun-mar-3h|1st-sun-may-2h',\n\n  // paraguay\n  par: 'last-sun-mar-0h|1st-sun-oct-0h',\n  //cuba\n  cuba: '2nd-sun-mar-0h|1st-sun-nov-1h',\n  //chile\n  chile: '1st-sun-apr-0h|1st-sun-sep-0h',\n  //easter island\n  east: '1st-sat-apr-22h|1st-sat-sep-22h',\n  //fiji\n  fiji: '3rd-sun-jan-3h|2nd-sun-nov-2h',\n};\n\nvar dstPatterns = patterns;\n\nvar pcked = {\"Africa\":{\"Abidjan\":[\"true¦a5bouake,coordinated universal4daloa,g1san ped0utc,yamoussouk0zulu;ro;h0mt,reenwich mean2;!a0;!na; ti3;b4frica0tlantic/st_helena;!/0;accra,ba1conakry,dakar,freetown,lo0nouakchott,ouagadougou,timbuktu;me;mako,njul;idjan,obo\",\"Greenwich Mean\",\"n\"],\"Algiers\":[\"true¦a8b6c3dz2or5s1t0;ebessa,iaret;etif,idi bel abbes;!a;e0hlef,onstantine;ntral europe0t;an;a0iskra,lida,oumerdas;b ezzouar,tna;frica,lg0nnaba;eria,iers\",\"Central European\",\"n\"],\"Bissau\":[\"true¦africa,b2coordinated universal1g0utc,zulu;mt,nb,reenwich mean0uinea b1w; time;issau\",\"Greenwich Mean\",\"n\"],\"Cairo\":[\"true¦a6bani suwayf,c5damanhur,e2giza,halw8i1kafr ad dawwar,luxor,new c5port said,qina,s0tanta,zagazig;hibin al kawm,ohag,uez;dku,smail8;astern europe5et,g0;!y0;!pt;airo;frica,l2s0;w0yut;an; 1exandr0;ia;fayyum,m0;a0inya;hallah al kubra,nsurah\",\"Eastern European\",\"n\"],\"Casablanca\":[\"true¦aCcasablanDfBkenitAm6oujda angad,rabat,sa4t1we0;stern europe2t;angier,e0;ma7tou0;an;fi,le0;! al jadida;a1ekn4o0;hammedia,rocco;!r0;!rakesh;ra;es;fri0gadir,l hoceima;ca\",\"Morocco Standard\",\"n\",\"saha\"],\"Ceuta\":[\"true¦africa,brussels,c0europe central,madrid,paris,romance;e0openhagen;ntral european,t,uta0;!melilla\",\"Central European\",\"n\",\"eu2\"],\"El_Aaiun\":[\"true¦afri3casablan3e2laayoune,morocco,we0;stern 0t;european,sahara;h,l_aaiun,sh;ca\",\"Morocco Standard\",\"n\",\"saha\"],\"Johannesburg\":[\"true¦africaIbEcAd9east londBharare,johannesHk7newcastDp6r5s3tembisa,uitenhage,v2w1za0;!f;elkom,itbank;anderbijlpark,ereeniging;ast,o0prings;uth africa,weto;andBichards bay,oodepoort;aarl,ietermaritzAort elizabeth,retoria;lerk0ruger0;sdorp;iepsloot,urb5;a1enturi0;on;pe town,rletonvil0;le;enoni,loemfontein,o1rakp0;an;ks0tshabelo;burg;! southern,/m0;aseru,babane\",\"South Africa\",\"s\"],\"Juba\":[\"true¦a3c2juba,s0winejok;outh sudan,s0;!d;at,entral a0;frica\",\"Central Africa\",\"n\"],\"Khartoum\":[\"true¦a7c6el 5k3ny4omdurm2port sud2s0wad medani;d0inga,ud1;!n;an;ass0hartoum,osti;ala;dae3fasher,obeid;at,entral af1;d damaz1f0l qadarif;rica;in\",\"Central Africa\",\"n\"],\"Lagos\":[\"true¦aVbTcReQgPiLjKkaIlGmDnnewi,oAport harcourt,s9u7w0zar8; c3a2est0; 0ern3;a3c1;rBst,t;entral0; a0;frica;gep,muah0yo;ia;a7hagamu,okoto;kDn1w0yo;er3o;do,itsha;a0in5ubi;idugu0kurdi;ri;agos,ek0;ki;du0no,tsi0;na;imeLos;badan,jebu ode,k1l0seHwo;a orangun,eDor7;eHi8ot ekp0;ene;ombe,usau;bute ikorodu,fon alaaye,nugu;alabar,d,hakwama,o0;d,ngo;auchi,en0;in;b8do7frica1ku0tani;re;! western,/0;b2douala,kinsha1l0malabo,niamey,porto-novo;ibre2uanda;sa;angui,razza0;ville; ekiti;a,eoku1u0;ja;ta\",\"West Africa\",\"n\"],\"Maputo\":[\"true¦africa7beiCc6ma4na2quelimaAwindhoek,z0;imbabwe,w0;!e;ca2m0;ibia,pu1;puto,to0;la;at,entral africa,himoio;! central,/0;b2gaboro1hara4kigali,lu0;bumbashi,saka;ne;lanty1ujumbu0;ra;re\",\"Central Africa\",\"s\"],\"Monrovia\":[\"true¦africa,coordinated universal3g2l0monrov1utc,zulu;br,iber0r;ia;mt,reenwich mean0; time\",\"Greenwich Mean\",\"n\"],\"Nairobi\":[\"true¦africa8e4indian/2kisumu,m1na0thika,yt;irobi,kuru;a1ombasa,yt;antananarivo,comoro,ma0;yotte; 2a0ldoret;st0t; 0ern 0;africa;! eastern,/0;a1d0kampala,mogadishu;ar_es_salaam,jibouti;ddis_ababa,sm0;a0e0;ra\",\"East Africa\",\"n\"],\"Ndjamena\":[\"true¦africaAchad,n8t7w0; c3a2est0; 0ern3;a3c1;st,t;entral0; a0;frica;cd,d;'d0d0;jamena;! western\",\"West Africa\",\"n\"],\"Sao_Tome\":[\"true¦africa,coordinated universal5g4s0utc,zulu;ao1t0;!p; 0_0;to2;mt,reenwich mean0; ti0;me\",\"Greenwich Mean\",\"n\"],\"Tripoli\":[\"true¦a4benghazi,e3l1misrat5t0zawi2;arhuna,ripoli;by,ib0y;ya;astern european,et;frica,l khums,z zawiy0;ah\",\"Eastern European\",\"n\"],\"Tunis\":[\"true¦africa,ce3sfax,t0;n,un0;!is0;!ia;ntral european,t\",\"Central European\",\"n\"],\"Windhoek\":[\"true¦africa3c2na0windhoek;!m0;!ibia;at,entral africa;! central\",\"Central Africa\",\"s\"]},\"America\":{\"Adak\":[\"true¦a1h0nwt,us/aleutian;awaii s3dt,st;dak,leutian0merica/atka;! 0;islands,s0;tandard time\",\"Aleutian Standard\",\"n\",\"usa\"],\"Anchorage\":[\"true¦a0us/alaska;h6k5laska0merica,nchorage;! 1n0;! s1;s0t1;tandard t0;ime;dt,st,t;dt,st\",\"Alaska\",\"n\",\"usa\"],\"Araguaina\":[\"true¦araguaina,br1e0palmas,tocantins; south america s4ast south america;a0t;silia0zil;! 0;s0t1;tandard t0;ime\",\"Brasilia\",\"n\"],\"Argentina/Buenos_Aires\":[\"true¦a0buenos 4;merica/2r0;!g0;!e2;arge1buenos_0;aires;ntina\",\"Argentina\",\"s\"],\"Argentina/Catamarca\":[\"true¦a0c2;merica/0rgentina;argentina/comodrivadavia,c0;atamarca\",\"Argentina\",\"s\"],\"Argentina/Cordoba\":[\"true¦a0c2;merica/0rgentina;c0rosario;ordoba\",\"Argentina\",\"s\"],\"Argentina/Jujuy\":[\"true¦a0j1;merica/j0rgentina;ujuy\",\"Argentina\",\"s\"],\"Argentina/La_Rioja\":[\"true¦ar1b0city of b0la rioja;uenos aires;gentina0st,t;! 0;standard t0t0;ime\",\"Argentina\",\"s\"],\"Argentina/Mendoza\":[\"true¦a0m1;merica/m0rgentina;endoza\",\"Argentina\",\"s\"],\"Argentina/Rio_Gallegos\":[\"true¦ar1b0city of b0rio_gallegos;uenos aires;gentina0st,t;! 0;standard t0t0;ime\",\"Argentina\",\"s\"],\"Argentina/Salta\":[\"true¦ar1b0city of b0salta;uenos aires;gentina0st,t;! 0;standard t0t0;ime\",\"Argentina\",\"s\"],\"Argentina/San_Juan\":[\"true¦ar1b0city of b0san juan;uenos aires;gentina0st,t;! time\",\"Argentina\",\"s\"],\"Argentina/San_Luis\":[\"true¦ar1b0city of b0san luis;uenos aires;gentina0st,t;! time\",\"Argentina\",\"s\"],\"Argentina/Tucuman\":[\"true¦ar1b0city of b0tucuman;uenos aires;gentina0st,t;! time\",\"Argentina\",\"s\"],\"Argentina/Ushuaia\":[\"true¦ar1b0city of b0ushuaia;uenos aires;gentina0st,t;! time\",\"Argentina\",\"s\"],\"Asuncion\":[\"true¦asuncion,c3p0san lorenzo;araguay1ry,y0;!st,t;! time;apiata,iudad del este\",\"Paraguay\",\"s\",\"par\"],\"Bahia\":[\"true¦b2camacari,e1feira de santa0itabu0salvador,vitoria da conquista;na; south america s5ast south america;ahia,r0;a0t;silia0zil;! 0;s0t1;tandard t0;ime\",\"Brasilia\",\"n\"],\"Bahia_Banderas\":[\"true¦bah7c2guadalajara,m0;exico0onterrey;! city;entral 0st;mexic0standard 2;an,o0;! 0;time;ia_0ía de 0;banderas\",\"Central Mexico\",\"n\",\"mex\"],\"Barbados\":[\"true¦a1b0;arbados,b,rb;st,tlantic standard time\",\"Atlantic\",\"n\"],\"Belem\":[\"true¦ananindeua,b2e1macapa,par0;auapebas,á east amapá; south america s5ast south america;elem,r0;a0t;silia0zil;! 0;s0t1;tandard t0;ime\",\"Brasilia\",\"n\"],\"Belize\":[\"true¦b1c0;entral standard time,st;elize,lz,z\",\"Central\",\"n\"],\"Boa_Vista\":[\"true¦am3boa vista,c0roraima;entral brazil0uiaba;!ian0;! s3;azon0t;! 0;s0t1;tandard t0;ime\",\"Amazon\",\"n\"],\"Bogota\":[\"true¦armenGbBc7dosquebradas,floridablanca,i6m5neiva,p3s1v0;alledupar,illavicencio;anta marCincelejo,o0;acha,ledad;a0erei9opayan;lmi8sto;anizales,edellin,onterA;bague,taguei;a2o0ucu6;!l0st,t;!omb6;li,rtagena;arran3ello,ogo2u0;caramanga,enaventu0;ra;ta;cabermeja,quilla;ia\",\"Colombia\",\"n\"],\"Boise\":[\"true¦america4boise,idaho,m0;ountain0pt,st,t;! 0;id,standard t0t0;ime;! mountain\",\"Mountain\",\"n\",\"usa\"],\"Cambridge_Bay\":[\"true¦america4cambridge bay,m0;ddt,ountain0st,t;! 0;standard t0t0;ime;! mountain\",\"Mountain\",\"n\",\"usa\"],\"Campo_Grande\":[\"true¦am0brazil,campo grande,mato grosso do sul;azon standard time,t\",\"Amazon\",\"s\"],\"Cancun\":[\"true¦cancun,e0mexico,quintana roo;astern standard time,st\",\"Eastern\",\"n\"],\"Caracas\":[\"true¦alto barinKbarJcDguaBm8p7san6turmeFv0;alencia,e0;!n0t;!ezuela0;! 0n;standard t0t0;ime; cristobal,ta teresa del tuy;eta4uerto la cruz;a0ucumpiz;raca0turin;ibo,y;ren8ti0;re;a4iudad 2o1u0;a,m2;ro;bolivar,guay0;ana;bim1rac1;in0quisimeto,uta;as\",\"Venezuela\",\"n\"],\"Cayenne\":[\"true¦cayenne,french guiana3g0;f1u0;f,iana;!t;! time\",\"French Guiana\",\"n\"],\"Chicago\":[\"true¦aWbTcRdQfort worth,gPhOiMk00lJmCn8o7plano,s4t2us1wi0;chiGsconsW;/02a;ex0ulsa;!as;a0hreveport,ou4t 1;int 0n antonio;louGpaul;klahoXmaha,verland park;ashLe1or0;th dako7;braska,w 0;orleans,south me6;adisMe5i1o0;biHntgomery;lwaukee,nne1ss0;issippi,ouri;apol6so0;ta;mph4;aredo,i0ouisiana,ubb1;ncoln,ttle r0;ock;llino0owa,rving;is;oustAunts5;arland,rand prairie;allAes moines;dt,entral0hicago,orpus christi,st,t;! time;aton rouge,rowns0;vil0;le;laba8m5r1ust0;in;k1lingt0;on;ans0;as;arillo,erica0;! 0;central;ma\",\"Central\",\"n\",\"usa\"],\"Chihuahua\":[\"true¦chihuahua,h5la paz,m0;azatlan,exic1ountain 0;mexico,standard time (mexico);an pacific1o0;! pacific;! time;ep0np0p0;mx\",\"Mexican Pacific\",\"n\",\"mex\"],\"Costa_Rica\":[\"true¦c0sjmt;entral standard time,osta rica,r0st;!i\",\"Central\",\"n\"],\"Cuiaba\":[\"true¦am0brazil,cuiaba,mato grosso,varzea grande;azon standard time,t\",\"Amazon\",\"s\"],\"Danmarkshavn\":[\"true¦coordinated universal2d1g0utc,zulu;mt,reenwich mean1;anmarkshavn,enmark; time\",\"Greenwich Mean\",\"n\"],\"Dawson\":[\"true¦canada,dawson,m2y0;d0pt,wt;dt,t;ountain standard time,st\",\"Mountain\",\"n\"],\"Dawson_Creek\":[\"true¦canada,dawson creek,m1p0;pt,wt;ountain standard time,st,t\",\"Mountain\",\"n\"],\"Denver\":[\"true¦a5colorado springs,denver,el paso,m1navajo,salt lake,us0;/6a;dt,ountain0st,t;! 0;standard t0t0;ime;lbuquerque,merica0urora;! 0/shiprock;mountain\",\"Mountain\",\"n\",\"usa\"],\"Detroit\":[\"true¦america4detroit,e0grand rapids,us/michigan;astern0pt,st,t,wt;! 0;mi,standard t0t0;ime;! eastern\",\"Eastern\",\"n\",\"usa\"],\"Edmonton\":[\"true¦a6ca4edmonton,m0;ountain0st,t;! 0;standard t0t0;ime;lgary,nada0;!/1;lberta,merica 0;mountain\",\"Mountain\",\"n\",\"usa\"],\"Eirunepe\":[\"true¦a0brazil,eirunepe;c0mazonas west;re0t;! 0;standard t0t0;ime\",\"Acre\",\"n\"],\"El_Salvador\":[\"true¦c2el1s0;an0lv,oyapango,v; salvador;entral standard time,st\",\"Central\",\"n\"],\"Fort_Nelson\":[\"true¦british columbia,canada,fort nelson,m0;ountain standard time,st,t\",\"Mountain\",\"n\"],\"Fortaleza\":[\"true¦br5ca4e3fortaleza,imperatriz,j2m0natal,sao luis,teresina;a0ossoro;picernpb,racanau;oao pessoa,uazeiro do norte; south america s5ast south america;mpina grande,ucaia;a0t;silia0zil;! 0;s0t1;tandard t0;ime\",\"Brasilia\",\"s\"],\"Glace_Bay\":[\"true¦a1ca0glace_bay;nada,pe breton;st,t0;!lantic0;! 0;standard t0t0;ime\",\"Atlantic\",\"n\",\"usa\"],\"Goose_Bay\":[\"true¦a0canada,goose_bay,labrador,npt;st,t0;!lantic0;! 0;standard t0t0;ime\",\"Atlantic\",\"n\",\"usa\"],\"Grand_Turk\":[\"true¦america eastern,e2grand turk,kmt,t0;c0urks and caicos;!a;astern0st,t;! 0;standard t0t0;ime\",\"Eastern\",\"n\",\"usa\"],\"Guatemala\":[\"true¦c2g0mixco,villa nueva;t0uatemala;!m;entral standard time,st\",\"Central\",\"n\"],\"Guayaquil\":[\"true¦cuenca,ec2guayaquil,ma1q0santo domingo de los colorados;mt,uito;chala,nta;!t,u0;!ador0;! 0;mainland,time\",\"Ecuador\",\"n\"],\"Guyana\":[\"true¦g0;eorgetown,uy1y0;!t;!ana0;! time\",\"Guyana\",\"n\"],\"Halifax\":[\"true¦a4ca2halifax,n1p0;ei,rince edward island;ew brunswick,ova scotia;!nada0;!/atlantic;dt,st,t0;!lantic0;! 0;ns,standard t0t0;ime\",\"Atlantic\",\"n\",\"usa\"],\"Havana\":[\"true¦arroyo naranjo,bBc3diez de octubre,guantanDh1las tunas,pinar del rio,sant0;a clara,iago de cuba;avana,cu,e0n0olguin;cu;amaguey,i5u0;!b0;!a0;! 0;standard t0t0;ime;e0udad camilo cie0;nfueg1;ay1oyer0;os;amo\",\"Cuba\",\"n\",\"cuba\"],\"Hermosillo\":[\"true¦ciudad obregon,h1mexic0nogales,sonora;an pacific standard time,o;ermosillo,npmx\",\"Mexican Pacific\",\"n\"],\"Indiana/Indianapolis\":[\"true¦america2crawford,dadukmn,eastern in,i4p0star1us/east-indiana;erry,i0ulaski;ke;!/0;fort_wayne,i0;ndiana0;!polis\",\"Eastern\",\"n\",\"usa\"],\"Indiana/Knox\":[\"true¦america1c0indiana,knox,us/indiana-starke;entral standard time,st;!/knox_in\",\"Central\",\"n\",\"usa\"],\"Indiana/Marengo\":[\"true¦america,e0indiana,marengo;astern standard time,st\",\"Eastern\",\"n\",\"usa\"],\"Indiana/Petersburg\":[\"true¦america,e0indiana,petersburg;astern standard time,st\",\"Eastern\",\"n\",\"usa\"],\"Indiana/Tell_City\":[\"true¦america,c0indiana,tell_city;entral standard time,st\",\"Central\",\"n\",\"usa\"],\"Indiana/Vevay\":[\"true¦america,e0indiana,vevay;astern standard time,st\",\"Eastern\",\"n\",\"usa\"],\"Indiana/Vincennes\":[\"true¦america,e0indiana,vincennes;astern standard time,st\",\"Eastern\",\"n\",\"usa\"],\"Indiana/Winamac\":[\"true¦america,e0indiana,winamac;astern standard time,st\",\"Eastern\",\"n\",\"usa\"],\"Inuvik\":[\"true¦america mountain,canada,inuvik,m0pddt;ountain0st,t;! 0;standard t0t0;ime\",\"Mountain\",\"n\",\"usa\"],\"Iqaluit\":[\"true¦america eastern,canada,e0iqaluit;astern0ddt,st,t;! 0;standard t0t0;ime\",\"Eastern\",\"n\",\"usa\"],\"Jamaica\":[\"true¦e3j1k0new k0;ingston;am0m;!aica;astern standard time,st\",\"Eastern\",\"n\"],\"Juneau\":[\"true¦a0juneau;k5laska0merica;! 1n0;! s1;juneau area,s0t1;tandard t0;ime;st,t\",\"Alaska\",\"n\",\"usa\"],\"Kentucky/Louisville\":[\"true¦america0eastern 4k3l2wayne;!/0;k1l0;ouisville;entuc0;ky\",\"Eastern\",\"n\",\"usa\"],\"Kentucky/Monticello\":[\"true¦america,e0kentucky,monticello;astern standard time,st\",\"Eastern\",\"n\",\"usa\"],\"La_Paz\":[\"true¦bo1cochabamba,la paz,oruro,s0;anta cruz de la sierra,ucre;!l0t;!ivia0;! time\",\"Bolivia\",\"s\"],\"Lima\":[\"true¦arequiDc9huancCi8juliaca,lima,p2sant1t0;acna,rujillo;a anita   los ficus,iago de sur8;e0iura,ucallA;!r0t;!u0;! 0;standard t0t0;ime;ca,quitos;allao,hi1us0;co;cl0mbote;ayo;pa\",\"Peru\",\"s\"],\"Los_Angeles\":[\"true¦a05ba03c00fWgarden grove,hTirviSlMmoJnIoFp9r8s1tacoma,us0washington state;/06a;a1eattle,f,p0tocktTunrise manor;okaPringH;cramenHn0; 1ta 0;aTclariV;bernardiRdiego,fran0jo4;!cisco;ancho cucamonga,ePiver7;a0dt,ort7st,t;cific1radi0;se;! 0;standard t0t0;ime;ak1cean0regFxnard;side;land;evada,orth las8;des1reno0; valley;to;a3o0;ng6s0; 0_0;angeles;!s0; vegas;ne;enders1untington0; beach;on;onta2re0;mont,s0;no;na;ali1hula vis0;ta;!f1;ja calif0kersfield;ornia;merica0naheim;! 0;pacific\",\"Pacific\",\"n\",\"usa\"],\"Maceio\":[\"true¦a6br1e0maceio; south america s3ast south america;asilia0t;! 0;s0t1;tandard t0;ime;lagoassergipe,racaju\",\"Brasilia\",\"n\"],\"Managua\":[\"true¦c3man2ni0;!c0;!ar0;agua;entral standard time,st\",\"Central\",\"n\"],\"Manaus\":[\"true¦am4brazil3c0manaus;entral brazil0uiaba;!ian0;! s5;!/we2;azon0t;! 1as ea0;st;s0t1;tandard t0;ime\",\"Amazon\",\"s\"],\"Martinique\":[\"true¦a3f1m0;a1q,tq;fmt,ort de france,rench ma0;rtinique;st,tlantic standard time\",\"Atlantic\",\"n\"],\"Matamoros\":[\"true¦america central,c2heroica ma1m0nuevo laredo,reynosa;a0exico;tamoros;entral0st,t;! 0;standard t0t0;ime\",\"Central\",\"n\",\"usa\"],\"Mazatlan\":[\"true¦cAh8l7m0tep4;azatlAexic1ountain 0;mexico,standard time (mexico);an pacific 2o0;! pacif0/bajasur;ic;standard t0t0;ime;a paz,os mochis;np0p0;mx;hihuahua,uliac0;an\",\"Mexican Pacific\",\"n\",\"mex\"],\"Menominee\":[\"true¦america4c0menominee,wisconsin;entral0st,t;! 0;standard t0t0;ime;! central\",\"Central\",\"n\",\"usa\"],\"Merida\":[\"true¦c3guadalajara,m0;e0onterrey;rida,xico0;! city;ampeche4entral 0st;mexic0standard 2;an,o0;! 0;time;!yucatán\",\"Central Mexico\",\"n\",\"mex\"],\"Metlakatla\":[\"true¦a0metlakatla;k5laska0merica;! 1n0;! s1;annette island,s0t1;tandard t0;ime;st,t\",\"Alaska\",\"n\",\"usa\"],\"Mexico_City\":[\"true¦a0Lb0JcYduran0Cecatepec de morel0AguThSiQjalis0Nleon de los alda06mInHoGpEqDs9t4uruap04v2x1yucat04za0;catec0Cpop03;alapa de enriqu0Pi0Lochimil0L;e0illahermosa;nustiano carranza,racruz;a3e7la1o0uxt03;luUna02;huac,l0quepaque,xca01;nepant00pW;bas0Emaulip04pachuZ;an0oledad de graciano sanch0H; luis potosi,t0;a maria chimal0iago de q1;huQ;ueretaG;achuca de soIoza rica de7ue0;bSrto vallar04;axaJjo de agua;aucalpan07icolas romeCuevo le06;agdalena contrerUex4i2o0x;nterrey,rel0;ia,os;choHguel0; h5;!ico0;! 0/general,_0;city;rap5xtapalu9zta0;cUpalapa;idalJ;a1erre0stavo adolfo made0;ro;dalajara,naj0;ua0;to;ampeche,eFhiCiudad Ao3st,u0wt;au1ernava0;ca;htemoc,titlan izcalli;a4l2yo0;ac0;an;i0onia del valle;ma;cEhui0tzacoalc2;la;lopez mate0nezahualcoyotl;os;ap1lpancin0;go;as;laya,ntral 0;mexic0standard 2;an,o0;! 0;time;enito6uenavis0;ta;capulco3guascalientes,lvaro obreg2zcapotz0;al0;co;on; de0; juar0;ez\",\"Central Mexico\",\"n\",\"mex\"],\"Miquelon\":[\"true¦hBmAp8s0;aint pierre2pm,t pierre 0;& miquelon 0a5;s2t3;! 0;a2s0;tandard t0;ime;nd1;ierre0m; m0;iquelon;npm,pm\",\"St. Pierre & Miquelon\",\"n\",\"usa\"],\"Moncton\":[\"true¦a0canada,hepm,moncton,new brunswick;st,t0;!lantic0;! 0;standard t0t0;ime\",\"Atlantic\",\"n\",\"usa\"],\"Monterrey\":[\"true¦c8g6m3sa1t0victoria de durango;ampico,orreon;ltillo,n0; nicolas de los garza,ta catarina;exico1on0;clova,terrey;! city;omez palacio,uadal0;ajara,upe;entral 1iudad 0st;apodaca,general escobedo,madero,victoria;mexic0standard 2;an,o0;! 0;time\",\"Central Mexico\",\"n\",\"mex\"],\"Montevideo\":[\"true¦montevideo5u0;r1y0;!st,t;uguay0y;! 0;s1t2;! s0;tandard t0;ime\",\"Uruguay\",\"s\"],\"New_York\":[\"true¦a0Rb0Oc0Hd0Ge0Bf07g05hialeah,i02j00kZlexingtonYmUnMoKpIquHrDsAt7u5v3w0yonkers;ashington1est 0inston salem,orcD;raEvirgin04;! dc;ermont,irginia0;! beach;nited states,s0;!/0Ma;a0enne1he bronx,oleD;llaha0mpa;ssee;outh 1t0; petersburg,aten3;bo0CcC;a2hode1ichmo06och0;ester; is03;lei2;eens,intana roo;ennsylvanNhiladelphNittsbur0rovidence;gh;hio,rlan0;do;ew3or1y0;!c;folk,th c0;aroliE; 1_yo0a0port news;rk;hampshiXje8york0;! staT;a1eads,i0;ami,chig1;ine,nhatt0ryMssachusetts;an;! fayetO;entucky,nox9;acks2e0;rsey;ndia1r0;on5;na;eorg0reensboro;ia;ayette1l0ort lauderda2;!orida;vil0;le;ast0dt,st,t; flatbush,ern0;! 0;standard t0t0;ime;elawa9urham;ape coral,h3incinnati,leve1o0;lumbus,nnecticut;la0;nd;a0esapeake;rlot0ttanooga;te;altimo1o0rooklyn,uffalo;st4;re;kr2merica0tlanta;! 0;eastern;on\",\"Eastern\",\"n\",\"usa\"],\"Nipigon\":[\"true¦america eastern,canada,e0nipigon;astern0st,t;! 0;standard t0t0;ime\",\"Eastern\",\"n\",\"usa\"],\"Nome\":[\"true¦a0no5;k5laska0merica;! 1n0;! s1;s0ti1west;tandard ti0;me;st,t\",\"Alaska\",\"n\",\"usa\"],\"Noronha\":[\"true¦atlantic islands,brazil3f0n4;ernando de noronha 0nt;standard t0t0;ime;!/den0;oronha\",\"Fernando de Noronha\",\"n\"],\"North_Dakota/Beulah\":[\"true¦america,beulah,c0north dakota;entral standard time,st\",\"Central\",\"n\",\"usa\"],\"North_Dakota/Center\":[\"true¦america,c1merc0north dakota,oliv0;er;ent0st;er,ral standard time\",\"Central\",\"n\",\"usa\"],\"North_Dakota/New_Salem\":[\"true¦america,c1n0;ew_salem,orth dakota;entral standard time,st\",\"Central\",\"n\",\"usa\"],\"Nuuk\":[\"true¦america3g1nuuk,wg0;st,t;l,r0;eenland,l;!/godthab\",\"West Greenland\",\"n\",\"green\"],\"Ojinaga\":[\"true¦america5c4m0ojinaga;ountain0st,t;! 0;standard t0t0;ime;hihuahua,iudad juarez;! mountain\",\"Mountain\",\"n\",\"usa\"],\"Panama\":[\"true¦a3coral h,e2pa0san miguelito;!n0;!ama;astern standard time,st;merica/0t2;at1c0;aym1oral_harbour;ikok0;an\",\"Eastern\",\"n\"],\"Pangnirtung\":[\"true¦a4baffin island,canada,e0nunavit,pangnirtung;astern0st,t;! 0;standard t0t0;ime;ddt,merica eastern\",\"Eastern\",\"n\",\"usa\"],\"Paramaribo\":[\"true¦paramaribo,s0;r2ur0;!iname0;! time;!t\",\"Suriname\",\"n\"],\"Phoenix\":[\"true¦aAc8g6idaho,m4n3phoenix,s2t1u0wyoming;s/arAtah;empe,ucsC;cottsd4inaloa,onora;ayarit,ew mexico;aryv2esa,o0st,t,wt;nta6untain standard time;ilbert,lend0;ale;h0olorado;andler,ihuahua;merica2r0;izo0;na;!/crest0;on\",\"Mountain\",\"n\"],\"Port-au-Prince\":[\"true¦america eastern,cAe6h4p0;etionville,ort0; 0-au-1;au 0de paix;prince;aiti,t0;!i;astern0st,t;! 0;standard t0t0;ime;arrefour,roix des bouquets\",\"Eastern\",\"n\",\"usa\"],\"Porto_Velho\":[\"true¦am5brazil,c2porto0rondônia; 0_0;velho;entral brazil0uiaba;!ian0;! s3;azon0t;! 0;s0t1;tandard t0;ime\",\"Amazon\",\"n\"],\"Puerto_Rico\":[\"true¦a2bayam9p0;r0uerto rico;!i;merica0st,tlantic standard time;!/0;a5blanc-sabl4curacao,dominica,g3kralendijk,lower_princes,m2port_of_spa1st_0torto7virg1;barthelemy,kitts,lucia,thomas,vincent;in;arigot,ontserrat;renada,uadeloupe;on;n0ruba;guil0tigua;la\",\"Atlantic\",\"n\"],\"Punta_Arenas\":[\"true¦c0punta arenas,region of magallanes;hile0lt;! standard time\",\"Chile\",\"s\"],\"Rainy_River\":[\"true¦america4c0ft frances,rainy river;entral0st,t;! 0;standard t0t0;ime;! central\",\"Central\",\"n\",\"usa\"],\"Rankin_Inlet\":[\"true¦america4c0rankin inlet;ddt,entral0st,t;! 0;standard t0t0;ime;! central\",\"Central\",\"n\",\"usa\"],\"Recife\":[\"true¦aAbr4caruaru,e3jaboatao2olinda,p0;aulista,e0;rnambuco,trolina;! dos guararapes; south america s4ast south a6;a0t;silia0zil;! 0;s0t1;tandard t0;ime;merica\",\"Brasilia\",\"n\"],\"Regina\":[\"true¦c2regina,s0;askat0k;c2oon;anada0entral standard time,st;!/saskatc0;hewan\",\"Central\",\"n\"],\"Resolute\":[\"true¦america4c0resolute;entral0st,t;! 0;standard t0t0;ime;! central\",\"Central\",\"n\",\"usa\"],\"Rio_Branco\":[\"true¦a1brazil0rio branco;!/1;c1merica/porto_0;acre;re0t;! 0;standard t0t0;ime\",\"Acre\",\"s\"],\"Santarem\":[\"true¦br1e0pará west,santarem; south america s4ast south america;a0t;silia0zil;! 0;s0t1;tandard t0;ime\",\"Brasilia\",\"n\"],\"Santiago\":[\"true¦aAc4iquique,la pintana,puente alto,rancagua,san3t1v0;alparaiso,ina del mar;alca0emuco;!huano; bernardo,tiago;h1l0oncepcion;!st,t;ile0l;! 0/continental;standard t0t0;ime;ntofagasta,rica\",\"Chile\",\"s\",\"chile\"],\"Santo_Domingo\":[\"true¦a8bella vista,do6la romana,s0;an0dmt; pedro de macoris,t0;iago de los caballeros,o domingo0;! 0;e0oe0;ste;!m0;!inican republic;st,tlantic standard time\",\"Atlantic\",\"n\"],\"Sao_Paulo\":[\"true¦a16b0Tc0Md0Je0Hf0Fg0Ahortol09i05j02l01mXnVosasco,pLriFs4ta3uber2v0;i0olta redon1A;amao,la velha,tor16;a0Ml06;boao da ser00uba10;a2e1oroNu0;maLzano;rXte lago0L;nt4o 0;bernardo do campo,carl03jo0leopolLpaulo,vicE;ao de meriti,se0;! do0; rio p8s camp00;a 1o0; andDs;barbara d'oes0Pluz0Tmar0T;beirao 3o0;! 0;cla0de janei0g6ver7;ro;das nev07p0;reto;asso fun8e7iraci6lanalti0Oo4r0;aia g1esidente prud0;en0G;ran0;de;nta grossa,rto aleg0;re;caW;lotYtro0F;do;iteroi,ov0;aJo hamburgo;a1o0;gi das cruzSntes clarD;ri0ua;l07n6;imei2ondri08;acarei,oinville,u0;iz de fo0ndi9;ra;ndaia2patin1ta0;bor6pevi,quaquece1;ga;tuG;andY;o3ravat2uaru0;ja,lh0;os;ai;iSvernador valadarC;loria5oz do0ran2; iguacu; south america sHast south ameri0mbu;ca;i0uque de caxi8;adema,vi0;noN;a1o0uriti2;ntagem,tK;choeiro de itapemirDmp1no3rapicui0scavel,xias do sul;ba;in1os dos goytacaz0;es;as;aBe7lumenau,r0;!a0st,t;!silia1zil0;!/east;! 0;s0t1;tandard t0;ime;l1t0;im;ford roxo,o horizon0;te;rueri,uru;lvora4merica3na2parecida de goi0;an0;ia;polis;na;da\",\"Brasilia\",\"s\"],\"Scoresbysund\":[\"true¦e3greenland2h0ittoqqortoormiit,scoresbysund;e0neg;eg,g;! eastern;ast greenland1g0;st,t;! 0;standard t0t0;ime\",\"East Greenland\",\"n\",\"eu0\"],\"Sitka\":[\"true¦a0sitka;k6laska0merica;! 1n0;! st2;s0t2;itka area,t0;andard t0;ime;st,t\",\"Alaska\",\"n\",\"usa\"],\"St_Johns\":[\"true¦canada7h5n0st johns;d3ewfoundland0st,t;! 0;labrador,standard t0t0;ime;dt,t;e0n0tn;tn;!/newfoundland\",\"Newfoundland\",\"n\",\"usa\"],\"Swift_Current\":[\"true¦c1s0;askatchewan,wift current;anada,entral standard time,st\",\"Central\",\"n\"],\"Tegucigalpa\":[\"true¦c2h0san pedro sula,tegucigalpa;n0onduras;!d;entral standard time,st\",\"Central\",\"n\"],\"Thule\":[\"true¦a0pituffik,thule;st,t0;!lantic0;! 0;standard t0t0;ime\",\"Atlantic\",\"n\",\"usa\"],\"Thunder_Bay\":[\"true¦canada,e0thunder bay;astern0st,t;! time\",\"Eastern\",\"n\",\"usa\"],\"Tijuana\":[\"true¦america8baja california,eAh6mexic4p0tijuana;acific0st,t;! 0;standard t0t0;ime;ali,o0;!/bajanorte;e0n0;nomx; pacific,/0;e0santa_isabel;nsenada\",\"Pacific\",\"n\",\"usa\"],\"Toronto\":[\"true¦americaGbEcaBe7gatineIhamilFkitchener,l4m3nepe2o0quebec,richmond hill,toronto,vaugh2windsor;n5sh0tt0;awa;an;arkham,ississauga,oF;avFon0;don on0gueuil;tario;astern0st,t;! 0;standard t0t0;ime;!n0;!ada0;!/7;arrie,ramp0;ton; 4/0;mo1nass0;au;ntre0;al;eastern\",\"Eastern\",\"n\",\"usa\"],\"Vancouver\":[\"true¦america 9b7ca5ladn4okanagan,p1surrey,v0yukon;ancouv3ictor7;acific0st,t;! 0;bc,standard time;er;!nada0;!/2;ritish columb0urnaby;ia;pacific\",\"Pacific\",\"n\",\"usa\"],\"Whitehorse\":[\"true¦canada1m0whitehorse,yst;ountain standard time,st;!/yukon\",\"Mountain\",\"n\"],\"Winnipeg\":[\"true¦america 7c2m1w0;est m0innipeg;anitoba;anada3entral0st,t;! 0;standard t0t0;ime;!/0;central\",\"Central\",\"n\",\"usa\"],\"Yakutat\":[\"true¦a0y4;k6laska0merica;! 1n0;! s2;s1t2y0;akutat;tandard t0;ime;st,t\",\"Alaska\",\"n\",\"usa\"],\"Yellowknife\":[\"true¦america mountain,canada,m0yellowknife;ountain0st,t;! 0;standard t0t0;ime\",\"Mountain\",\"n\",\"usa\"]},\"Antarctica\":{\"Casey\":[\"true¦antarctica,cas0;ey,t\",\"Casey\",\"s\",\"ant\"],\"Davis\":[\"true¦a1dav0;is,t;ntarctica,q,ta\",\"Davis\",\"s\"],\"Macquarie\":[\"true¦a2canberra,eastern australia6m0sydney;acquarie0elbourne;! island;e4ntarctica,us0; east0tralia eastern;!ern0;! standard0; time;st,t\",\"Eastern Australia\",\"s\",\"aus\"],\"Mawson\":[\"true¦antarctica,maw0;son,t\",\"Mawson\",\"s\"],\"Rothera\":[\"true¦a1b0city of b0rothera;uenos aires;ntarctica1r0;gentina,st,t;!/palmer\",\"Argentina\",\"s\"],\"Troll\":[\"true¦antarctica,g2troll0;! 0;research station,t1;mt,reenwich mean t0;ime\",\"Troll\",\"s\",\"troll\"],\"Vostok\":[\"true¦antarctica,vost0;!ok\",\"Vostok\",\"s\"]},\"Asia\":{\"Almaty\":[\"true¦a6central asia,east kazakhstan time,k2nur sultan,p1s0taraz,ust kamenogorsk;emey,hymkent;avlodar,etropavl;a0z;ragandy,z0;!akhstan0;! eastern;lm1s0;ia,tana;a0t; ata,ty\",\"East Kazakhstan\",\"n\"],\"Amman\":[\"true¦a2eet,irbid,jo0russeifa,wadi as sir,zarqa;!r0;!d1;mm0sia;an\",\"Eastern European\",\"n\",\"jord\"],\"Anadyr\":[\"true¦a0petropavlovsk kamchatsky;na0sia;dyr0t;! time\",\"Anadyr\",\"n\"],\"Aqtau\":[\"true¦a1kazakhstan western,mangghystaū/mankis3tashkent,west 0;asia,kazakhstan5;lm2q1s0;hgabat,ia;tau;a0t; ata,-ata0; time\",\"West Kazakhstan\",\"n\"],\"Aqtobe\":[\"true¦a1kazakhstan western,tashkent,west 0;asia,kazakhstan5;kto5lm2qt1s0;hgabat,ia;o3ö3;a0t; ata,-ata0; time;be\",\"West Kazakhstan\",\"n\"],\"Ashgabat\":[\"true¦as4t0;km,m2urkmen0;a4istan0;! time;!st,t;hga1ia0;!/ashkhabad;bat\",\"Turkmenistan\",\"n\"],\"Atyrau\":[\"true¦a1gur'yev,kazakhstan western,tashkent,west 0;asia,kazakhstan6;lm3s2t0;irau,yra0;u,ū;hgabat,ia;a0t; ata,-ata0; time\",\"West Kazakhstan\",\"n\"],\"Baghdad\":[\"true¦a6ba5dihok,erbil,i3k2mosul,na1r0;amadi,iyadh;jaf,sirC;arbala,irkuk,uwait;q,r0;aq,q;ghdad,sr9;bu ghurayb,d diw6l 5rab1s0; sulaym5ia,t;!i0;a0c;!n0;! time;amar2basrah al qadim2falluj2hill2kut,mawsil al jadid2;an0;iy0;ah\",\"Arabian\",\"n\"],\"Baku\":[\"true¦a0baku,ganja,lankaran,sumqayit;sia,z0;!e0t;!rbaijan0;! time\",\"Azerbaijan\",\"n\"],\"Bangkok\":[\"true¦asiaAbangkok,ch7h5i3jakarta,mueang nontha8na2pak kret,s0udon thani;amut prakan,e0i racha,outh east0; asia;khon ratchasima,m di9;ct,ndochina0;! time;a0ue;iphong,noi,t y2;iang m1on 0;buri;ai;!/0;phnom_pe0vientiane;nh\",\"Indochina\",\"n\"],\"Barnaul\":[\"true¦a3b2kra0north a3;snoyarsk0t;! time;arnaul,iysk;sia\",\"Krasnoyarsk\",\"n\"],\"Beirut\":[\"true¦asia,bei3e2l0ra's bay3;b0ebanon;!n;astern european time,et,urope eastern;rut\",\"Eastern European\",\"n\",\"leb\"],\"Bishkek\":[\"true¦asia,bishkek,k0osh;g2yrgy0;stan,zstan0;! time;!t,z\",\"Kyrgyzstan\",\"n\"],\"Brunei\":[\"true¦asia,b0;dt,n2r0;n,unei0;! darussalam time;!t\",\"Brunei Darussalam\",\"n\"],\"Chita\":[\"true¦asia,chita,yak0;t,utsk0;! time\",\"Yakutsk\",\"n\"],\"Choibalsan\":[\"true¦as2choibalsan,dornodsükhbaatar,mongol2ula0;anbaatar0t;! time;ia\",\"Ulaanbaatar\",\"n\"],\"Colombo\":[\"true¦as6c4dehiwala mount lavin6i2kolkata,lk1m0new delhi,sri lanka;oratuwa,umb4;!a;ndia0st;! time,n;henn0olombo;ai;ia\",\"India\",\"n\"],\"Damascus\":[\"true¦a4d3eet,h2latak5sy0;!r0;!ia;am3oms;amascus,eir ez zor;leppo,r raqq1s0;ia;ah\",\"Eastern European\",\"n\",\"syr\"],\"Dhaka\":[\"true¦asiaGbDcBd9jess8khul7mymensingh,na4pa3ra2s1t0;angail,ungi;aid8hib4ylhet;jshahi,ng7;b3ltan,r naogaon;gar5r0t3;ayan0singdi;ganj;na;ore;haka,inaj0;pur;hattogram,o0;milla,x's bazar;a0d,gd,ogra,st;gerhat,ngladesh0rishal;! time;!/dacca\",\"Bangladesh\",\"n\"],\"Dili\":[\"true¦asia,dili,east timor1tl0;!s,t;! time\",\"East Timor\",\"s\"],\"Dubai\":[\"true¦a5dubai,g3mus1om0ras al khaim2sharj2;!an,n;aff0c5;ah;st,ulf0;! time;bu dhabi,jm2rabi2sia0;!/musc0;at;an\",\"Gulf\",\"n\"],\"Dushanbe\":[\"true¦asia,dushanbe,t0;ajikistan1j0;!k,t;! time\",\"Tajikistan\",\"n\"],\"Famagusta\":[\"true¦asia,e0famagusta,northern cyprus;astern european time,et,urope eastern\",\"Eastern European\",\"n\",\"eu3\"],\"Gaza\":[\"true¦asia,eet,gaza2p0;alestine,s0;!e;! strip\",\"Eastern European\",\"n\",\"pal\"],\"Hebron\":[\"true¦asia,e0hebron,west bank;ast jerusalem,et\",\"Eastern European\",\"n\",\"pal\"],\"Ho_Chi_Minh\":[\"true¦asia7bien hoa,can tho,da 5ho3nha tr6qui nh8rach gia,sa dec,thi xa phu my,v0;ietnam1n0ung tau;!m;! south; chi 0_chi_0;minh;lat,n0;ang;!/saig0;on\",\"Indochina\",\"n\"],\"Hong_Kong\":[\"true¦asia,h0kowloon,tsuen wan;k3ong0; kong1_k0k0;ong;! time;!g,st,t\",\"Hong Kong\",\"n\"],\"Hovd\":[\"true¦as4bayan-ölgiigovi-altaihovduvszavkhan,hov2west0; 0ern 0;mongol2;d0t;! time;ia\",\"Hovd\",\"n\"],\"Irkutsk\":[\"true¦a2brat3irk0north asia east,ulan ude;t,utsk0;! time;ngar0sia;sk\",\"Irkutsk\",\"n\"],\"Jakarta\":[\"true¦aZbTcRdepQiNjKkediri,lJmGpArengasdengklQs4t2w0yogyakM;est0ib; indoneXern indonesia time;a0egal;n4sikmal3;ema4itubondo,outh tan3u0;kabumi,medaSra0;b0kF;aya;ge0;raO;a4e1robolinggo,urw0;akAokerto;ka1ma0rcut;laKtangsiantar;long2nbaru;daIl3mulaIruI;a1ed0;an;diun,laF;embaE;a0ember;k0mbi,vasumatra;arta;d1ndonesia0;! western;!n;ok;i0urug;ampea,bino5leungsir,mahi,putat,rebon;a1e0injai,ogor;kasi,ngkulu;nd0tam;a0u1; aceh,r lampu0;ng;sia\",\"Western Indonesia\",\"s\"],\"Jayapura\":[\"true¦a2east1indonesia eastern,jayapura,m0new guinea,wit;alukus,oluccas; indones1ern indonesia time;mbon,s0;ia\",\"Eastern Indonesia\",\"s\"],\"Jerusalem\":[\"true¦as7beersheba,haifa,i2j0petah tiqwa,rishon leziyyon,tel 9west je1;e0mt;rusalem;d3l,s0;r0t;!ael0;! time;dt,t;hdod,ia0;!/tel_0;aviv\",\"Israel\",\"n\",\"isr\"],\"Kabul\":[\"true¦a1herat,jalalabad,ka0mazar e sharif;bul,ndahar;f0sia;!g0t;!hanistan0;! time\",\"Afghanistan\",\"n\"],\"Kamchatka\":[\"true¦a2kamchatka,pet0;ropavlovsk0t; kamchatsky,-kamchatski time;nadyr,sia\",\"Petropavlovsk-Kamchatski\",\"n\"],\"Karachi\":[\"true¦asia,bLchiniKdera ghaziIfaisalHgujraGhyderHislamHjhang sadr,kElaDm8nawabshah,okaBp4quetta,ra3s0;a1h0ialkJukkN;ahkIekhupu9;ddiqEhiwal,rgodha;him yarEwalpindi;ak1eshawar,k0;!t;!istan0;! time;a3i1u0;lt9zaffar7;ngo0rpur khas;ra;lir cantonment,rd6;hore,rkana;a0otli;moke,rachi,s8;n5t;abad; kh0;an;ot;a1himber,ure0;wala;hawalp0ttagram;ur\",\"Pakistan\",\"n\"],\"Kathmandu\":[\"true¦asia3biratnagar,kath4n1p0;atan,okhara;epal,p0;!l,t;!/kat0;mandu\",\"Nepal\",\"n\"],\"Khandyga\":[\"true¦asia,khandyga,yak0;t,utsk0;! time\",\"Yakutsk\",\"n\"],\"Kolkata\":[\"true¦0:3D;1:3L;2:2D;3:3M;4:3J;a35b2Dc24d1We1Uf1Sg1Fh1Ci18j13k0Pl0Km0Cn05odis3KpVquthbull3DrNsFt9u8v5warang2Myamun1P;a6el1Ui5;jayawa2Vsakha0HzianagC;doda2Orana11;daip0jja23lhasn1ttar pradesh;a8eXh7iru5umk0;chirap0Mnelve2p5vottiy0;a39p0;ane,iruvananthapur0Noothuku2Yriss0;mb5njo1X;ar0L;aBecunder4h9i8lst,o7r1Fu5;jan37r5;at,endr1C;l2Znip2N;k3liguKngrau2rJ;ahj1Zi5ri2Oya0L;mo1Mvaji07;har1Xlem,mbh24ng2t04ug0Y;a6e0Eoh5;iItak;ebare2i9j7m5nc1Gtl0Aurke37;ag5g5p0;und08;a5kot;hmund26sth2A;ch0p0;a9imp8roddat0u5;ducher23n5rn17;a5e;sa;ri;li,n7rbha6t5;ia2Vna;ni;chku2Ti5;ha2Gp21;a7e6izam4o5;i1Vwrang2B;l0Sw del0Y;di2Kg7i0Ejaf2Fn5re2Oshik,vi mumb15;ded,g5;i,loi j1V;ercoil,p0;a8eerut,irz25o7u5yso0Y;lugu,mb10rwa1Izaffar5;n1p0;nghyr,rad4;chili7d6harasht1Fleg07n5thu1Fu;ga0Iip0;hya,ur0V;patnG;a7u5;cknow,dhia5;na;l bahadur5t0; n1;aDhaBo8u5;kat6lt5rno1P;a2i;pal2;l5rWta,zhikode;h1Nka1Kl5;am;nd5ragp0;wa;kina13l8marOnp0r5shmir,tih3;i6na5ol ba18;l,tV;mn1;lakuric03y11;a6han5odNunagadh;si;b0Rip0l6m5;mu,n1shedp0;andh3gGna;chalkaranji,mph0In5st;!d5;!ia5o00;! time,n;a6is3ospet,u5;b2g2;o0Hp0ridw3;aChazi4o9reater noi0Mu6wali5y04;or;jar0OlbarQnt0rg6wa5;ha12;aon;rak6sa5;ba;hp0;juw8n5ya;dh6g5;an1;in1;aka;ar5iroz4;id4rukh4;l5taw0M;loF;aAe8h6indigul,ombOurg5;!ap0;anb0Uul5;ia;hra dun,l5was;hi;rbhan5vange8;ga;a09h8o5uttack;ch6imbato5;re;in;a6enn5;ai;nd5pL;a5i0C;!nn1;aNeKhBi9or7rahm04u5;landshahr,rh5;anp0;iv2;li;d3har sharif,jZkan07l5;asp0imoC;aAi7op6u5;baneshw3sav5;al;l6wan5;di,i;ai,wa6;g6ratp0tpa5vn1yand3;ra;alp0;l5ngaluru;gaum,la5;ry;hAli,r6thin5;da;a6ddham5eilly;an;n1s5;at;a6rai5;gh;ramp0;gQhmLizawl,jmKkoRlHmDnantCrrBs6urang4va5;di;ans8ia5;!/ca5;lcut5;ta;ol;ah;ap0;arnath,batt0r5;ava5its3o9;ti;ur;appuz6i5lah4w3;garh;ha;er;adn1ed4;ab5;ad;ag3;ar;arta5ra;la\",\"India\",\"n\"],\"Krasnoyarsk\":[\"true¦a2kra0north a2;snoyarsk0t;! time;sia\",\"Krasnoyarsk\",\"n\"],\"Kuala_Lumpur\":[\"true¦aHbukit mertajGgeorge town,ipoh,johor bahFk8m4petali3s0taipiE;e1hah alFu0;ba1ngai petani;paBremb7;ng jaya;ala1y0;!s,t;cca,ysia0;! time;ampung baru suba5la5ota bha6ua0;la1nt0;an; 0_l1;l0terengganu;umpur;ng;ru;am;lor setar,sia\",\"Malaysia\",\"s\"],\"Kuching\":[\"true¦asia,k4m2s0tawau;a0ibu;bahsarawak,ndakan;alaysia0iri,yt;! time;ota kinabalu,uching\",\"Malaysia\",\"n\"],\"Macau\":[\"true¦asia6beiji5c2hong ko5m0urumqi;ac0o;!au;h0st;ina0ongqi1;! time;ng;!/macao\",\"China\",\"n\"],\"Magadan\":[\"true¦asia,mag0;adan0t;! time\",\"Magadan\",\"n\"],\"Makassar\":[\"true¦asiaBba8c5denpa4indonesia central,k3l2ma1palu,s0wita;amarinda,ulawesi;kas2nado,taram;abuan bajo,oa jan7;endari,up8;sar;e0ity of bal3;lebesbalinusa,ntral indonesia0;! time;l0njarmasin;ikpap0;an;!/ujung_pand0;ang\",\"Central Indonesia\",\"s\"],\"Manila\":[\"true¦a04bWcRdaPgeneral santOiMlJmCnaBoAp4quezIsan1ta0zamboanga;clobZguig,rlac,ytE; 1t0;a ro2ol;fernando,jose del monte,pab02;a3h1uerto prince0;sa;!ilippine0l,st,t; time,s;gadiRnalanoy,s0;ay,ig;longapo,rmoc;ga,votQ;a0eycauayN;balacat,gugpo poblaci4kati,l3n0;da1ila,silingLtamp0;ay;luyong,ue;ingDol6;on;a1egaspi,i0ucena;bertad,pa;pu lapu,s p4;l0mus;igCoiI;os;smar0v5;inB;a0ebu,otabato;b1gayan de oro,in5l0;amba,ooc6;anatu5uy0;ao;a4inan2u0;d0tu2;ta;!gon0;an;co1guio,tang0;as;lod,or;n0sia;geles,tipo0;lo\",\"Philippine\",\"n\"],\"Nicosia\":[\"true¦a5cy3e0n2;astern european time,et,urope0; eastern,/n0;ico2;!p0;!rus;sia\",\"Eastern European\",\"n\",\"eu3\"],\"Novokuznetsk\":[\"true¦a5k2no0prokop'yev1;rth a4vokuznet0;sk;emerovo,ra0;snoyarsk0t;! time;sia\",\"Krasnoyarsk\",\"n\"],\"Novosibirsk\":[\"true¦as3no0siber3;rth central as2v0;osibirsk0t;! time;ia\",\"Novosibirsk\",\"n\"],\"Omsk\":[\"true¦asia,oms0;k0t;! time\",\"Omsk\",\"n\"],\"Oral\":[\"true¦a2kazakhstan western,oral,tashkent,west 0;asia,kazakhstan0;! 4;lm1s0;hgabat,ia;a0t; ata,-ata 0;time\",\"West Kazakhstan\",\"n\"],\"Pontianak\":[\"true¦asia,b2indonesia western,pontianak,tanjung pinang,w0;est0ib; b0ern indonesia time;orneo\",\"Western Indonesia\",\"n\"],\"Pyongyang\":[\"true¦asia,chongjin,h7k4n3p2s0won8;ariw0eoul,inuiAunch'0;on;rk,yongya7;amp'o,orth korea;a1orea0p,st;!n time;eso3nggye;a1ungnam,ye0;san;e1mhu0;ng;ju\",\"Korean\",\"n\"],\"Qatar\":[\"true¦a2doha,kuwait,qa0riyadh;!t0;!ar;r2s0;ia0t;!/bahrain; rayyan,ab0;!i0;a0c;!n0;! time\",\"Arabian\",\"n\"],\"Qostanay\":[\"true¦a2central asia,east kazakhstan time,k0qo1;azakhstan eastern,o0;stanay;lmt,s0;ia,tana\",\"East Kazakhstan\",\"n\"],\"Qyzylorda\":[\"true¦a4k1qy2tashkent,west 0;asia,kazakhstan7;azakhstan western,y0zyl-1;zyl0;orda;lm1s0;hgabat,ia;a0t; ata,-ata0; time\",\"West Kazakhstan\",\"n\"],\"Riyadh\":[\"true¦a9burayd8dammam,ha7jedd8k6me5najran,riyadh,s4ta3y0;anbu,e0;!m0;!en;'if,buk;ultan3yot;cca,dina;hamis mush6uw6;'il,far al batin;ah;bha,l 8ntarctica/syowa,rab4s0;ia0t;!/0;aden,kuw0;ait;!i0;a0c;!n0;! time;hufuf,jubayl,kharj,mubarraz\",\"Arabian\",\"n\"],\"Sakhalin\":[\"true¦asia,sak0yuzhno sakhalinsk;halin0t;! 0;island,time\",\"Sakhalin\",\"n\"],\"Samarkand\":[\"true¦asia,bukhara,nukus,qarshi,samarkand,uz0;bekistan0t;! 0;time,west\",\"Uzbekistan\",\"n\"],\"Seoul\":[\"true¦aPbuMchHdaeGgChwaseoRiBjeAk7m6pohaFrok,s2u1wonJy0;aCeosu;ijeongbuQlsL;e1outh korea,u0;nEwH;joAo0;ngnamMul;asGokpo;imhae,or0r,st,wangmyo7;!ea0;!n time;ju,on8;cCksBn6;angneu2oyaEu1wa0;ng5;mi,ns8riD;ng;gu,je4;angw3eon2in1un0;che2;ju;an,gju7;on;c1s0;an;heon3;n0sia;san1ya0;ng0; si\",\"Korean\",\"n\"],\"Shanghai\":[\"true¦0:3J;1:36;2:34;3:37;4:3D;a3Cb31c2Nd2He30f2Cg26h1Qji1Ek1Bl0Ym0Wn0Tordos,p0Pq0Lrizh10s08t01u3FwSxLyEz5;aoCh6i5ouc3unyi;bo,go0;a7en6ouk2u5; c3h31maWzh2;g2Vj1Izh2;b1Vng5o3E;jiakou5zh2;! shi xuanhua qu;ya0z27;an9i7u5;ci,e18n5;c3fu;b4c9n5ya0;cZgk2;c3g5ji,t2Q;j17qu1sh16zh2;i6uc5;ha0;a6n5uyi0;di,gt2Lh1Gi0pu,t2Lx13ya0;m17n5;!g5ni0t0Eya0;t1ya0;aBe9u5;h6so0w1Cx5zh2;i,ue;a5u;i,n;i0Hn5;sh1zh2;fang5nxi1;di1;a8i6ong5;chuans0XhDli02sh1;an5eli0;j4sh10;i6ng5;gu,sh1;an,hec1Wyu1zh2;anmi0hAi8u5;i5zh2;h5zh2;ua;c5pi0;hu1;a7en6i5uangya14;jiaz15qi,y1;gli,ya0zh0G;n6o5s0I;gu1xi0;g5t2;h1Pqiu,rKyu;i5uan1J;aFn5o14qih1Y;g5huangdH;dGh1L;an0Ting7rc,u5;ti1yang5;! H;ding0QxZ;an5eijYingbo;ch5ji0ni0to0ya0;a0o0;entoug2ianRuda5;njU;aEi8u5;anc3o6qi5;ao;he,ya0;a7jPn5upansh02;fTxia 5yi;chengguanI;n0Do5;c3y5;a0u1;i0Wn5ohek2;g5zh2;fa0;ai6un5;mi0sh1;fe0yu1;'1aAe9l4n6u5xi;jCt0U;an,c3g5i0zh2;de5li0zh2;zhE;ya0;musi,n8o5xi0;j6z5;uo;ia0;g5shG;m7xi;aGeCkt,oBu5;a6i0Dlan ergi,m5n1;en;i7ng5y4;ga0s5;hi;'1b9n1;hhot,ng ko0;bi,f7ga0ng5ze;sh5ya0;ui;ei;i7n5rb4;d1g5;u,zh2;c3k2l0F;a9u5;an6i5li;l4ya0zh2;g5k2;do0yu1zh2;nsu,opi0;en7o6u5;ji1shQx4zh2;sh1;d2g5;hua0;a6eNong5;gu1hR;d6lian5ndo0qi0to0;!g;o5uk2;nghN;angHh5n,st,t;aAen7i5n,oZuG;fe0na5;! time;g5zh2;d5zho0;e,u;ng6o5;ya0zh2;ch7de,sh6zh5;i,ou;a,u;un;zh2;a9e5;i6n5;gbu,xi;'1h5ji0;ai;i7o5yan nur;di0t2;ou;c3sh1y4;an;he0;nDsia5;!/5;ch8harb4kashg6u5;rumqi;ar;in;o5ungki0;ng5;qi0;da,qi0sh5ya0;an,un;ng\",\"China\",\"n\"],\"Singapore\":[\"true¦asia,kuala lumpur,s0woodlands;g0ingapore;!p,t\",\"Singapore\",\"s\"],\"Srednekolymsk\":[\"true¦asia,chokurdakh,sre0;dnekolymsk,t\",\"Srednekolymsk\",\"n\"],\"Taipei\":[\"true¦asia,banqiao,cst,h7k5roc,t0;a1w0;!n;i0oyu1;ch2n0pei,w0;an;aohsi0eel0;ung;sinchu,ualien\",\"Taipei\",\"n\"],\"Tashkent\":[\"true¦a3namangan,qo`q4tashkent,uz0;!b0t;!ekistan0;! east;ndij0sia;on\",\"Uzbekistan\",\"n\"],\"Tbilisi\":[\"true¦asia,ge1kuta0tbil0;isi;!o0t;!rgia0;!n\",\"Georgia\",\"n\"],\"Tehran\":[\"true¦aQbMgorgWhamViKkCmaBn8orumiy7pasragad branch,q4rasht,s2t1varam6yazd,za0;hedVnjV;abHehrU;a0hirRirjT;bzevar,nandEri,v3;a0om;rchak,zv0;in;eh;a0eyshabur;jaf0zar0;ab4;layer,shh3;a4erman3ho0;meyni sDrram0wy;ab0sC;ad;!shah;h1r0;aj;riz;r0sfahB;!an,dt,n,st;a2irjand,o0uk9;jnu0ruje0;rd;b3ndar abbas;b4hv3m2r1sia,zads0;hahr;ak,dabil;ol;az;ad0;an\",\"Iran\",\"n\"],\"Thimphu\":[\"true¦asia2b0thimphu;hutan,t0;!n;!/thimbu\",\"Bhutan\",\"n\"],\"Tokyo\":[\"true¦0:11;1:1A;2:10;a18ch16fu0Zgifu14h0Oi0Ij0FkZmTnMoKsFt9u8waka05y3;a6o3;k3no;kaic1Co3;ha2su0;maKo;ji,tsun0F;aka7o3sukuba;k5makom05y3;a2o3;hOna0ta;oro03us0Qyo;m0Jrazu0sa1tsu1;a5end00hi4o0u3;i10zu0;monose1zuo0;ita2k3ppoLsebo;ai,u06;dawa05i0Wka3sa0t0E;ya2za1;a6eyaga0Qi3umazu;i4shi3; tokyo0Inomiya ha2;ga0R;g3ha,ra0G;a3oX;no,o0sa1;a5i3orio0;na3to,yaza1;mirinkOto;chiDeb4tsu3;do,m8ya2;as0J;aBi9o7u3y6;mam5r4shi3;ro;ashi1e,ume;oto;be,c0Dfu,ri3shigaK;ya2;shiwa3takyushu;da;gosVkogawacho honmKmirenjaku,na8s5wa3;g3sa1;oe,uc07;hi01u3;g3kabe;ai;zaY;ap4dt,oetJp3st;!n;an;bara1chi4ta3wa1zu3;mi;ha5n3;omi3;ya;ra;a8i3oncho;meBr4t3;acR;a4os3;a1hi2;kaNtsu0;chi5kodate,mam3;at3;su;nohe,o3;ji;ji8ku3;i6o0s3ya2;hi2;ma;ka; sD;!sa7;i3ofu;ba,g6;geoshimo,k7mag5njo,omori,s3tsugi;ahika3ia;wa;asa1;ki;as4i3;ta;hi\",\"Japan\",\"n\"],\"Tomsk\":[\"true¦asia,oms0tomsk;k,t\",\"Omsk\",\"n\"],\"Ulaanbaatar\":[\"true¦asia3m1ula0;anbaatar,n 3t;n0ongolia;!g;!/ulan_0;bator\",\"Ulaanbaatar\",\"n\"],\"Ust-Nera\":[\"true¦asia,ust-nera,vla0;divostok,t\",\"Vladivostok\",\"n\"],\"Vladivostok\":[\"true¦asia,k1vla0;divostok,t;habarovsk0omsomolsk on amur;! vtoroy\",\"Vladivostok\",\"n\"],\"Yakutsk\":[\"true¦asia,blagoveshchen1yak0;t,ut0;sk\",\"Yakutsk\",\"n\"],\"Yangon\":[\"true¦asia4b3kyain seikgyi township,m0nay pyi taw,pathein,sittwe,yang5;a1eiktila,m0onywa;!r,t;ndalay,wlamyine;ago,urma;!/rango0;on\",\"Myanmar\",\"n\"],\"Yekaterinburg\":[\"true¦asia,chelyabin7eka5k4magnitogor7nizhn3or2perm,s1tyumen,ufa,yek0zlatoust;a4t;terlitamak,urgut;e3sk;evartov3y tagil;amensk ural'skiy,urgan;teri0;nburg;sk\",\"Yekaterinburg\",\"n\"],\"Yerevan\":[\"true¦a0caucasus,yerevan;m2rm0s1;!en0;ia;!t\",\"Armenia\",\"n\"]},\"Atlantic\":{\"Azores\":[\"true¦a0hmt;tlantic,zo0;res,st,t\",\"Azores\",\"n\",\"eu0\"],\"Bermuda\":[\"true¦a2b0;ermuda,m0;!u;st,t0;!lantic\",\"Atlantic\",\"n\",\"usa\"],\"Canary\":[\"true¦atlantic,canary1europe western,las palmas de gran canaria,santa cruz de tenerife,we0;stern european,t;! islands\",\"Western European\",\"n\",\"eu1\"],\"Cape_Verde\":[\"true¦atlantic,c0;a1pv,v0;!t;bo verde0pe verde;! is\",\"Cape Verde\",\"n\"],\"Faroe\":[\"true¦atlantic2f0;aroe0o,ro;! islands;!/faeroe\",\"Western European\",\"n\",\"eu1\"],\"Madeira\":[\"true¦atlantic,europe western,madeira1we0;stern european,t;! islands\",\"Western European\",\"n\",\"eu1\"],\"Reykjavik\":[\"true¦atlantic,coordinated universal3g2i0reykjavik,utc,zulu;celand,s0;!l;mt,reenwich mean0; time\",\"Greenwich Mean\",\"n\"],\"South_Georgia\":[\"true¦atlantic,gs1s0;gs,outh georgia;!t\",\"South Georgia\",\"n\"],\"Stanley\":[\"true¦atlantic,f0stanley;alkland1k0lk;!st,t;! island0;!s\",\"Falkland Islands\",\"s\"]},\"Australia\":{\"Adelaide\":[\"true¦a2cen0south 1; 0tral 0;australia;c2delaide,ustralia0;! 0/south,n 0;central;dt,st,t\",\"Central Australia\",\"s\",\"aus\"],\"Brisbane\":[\"true¦a1brisbane0gold coa5logan,q4townsville;! time;e3ustralia0;!/q1n east0;!ern;ueensland;st\",\"Brisbane\",\"s\"],\"Broken_Hill\":[\"true¦a1broken_hill,cen0y3; australia standard time,tral australia;c2delaide,ustralia0;! central,/y0;ancowinna;st,t\",\"Central Australia\",\"s\",\"aus\"],\"Darwin\":[\"true¦a0darwin,northern territory;cst,ustralia0;!/north,n central\",\"Australian Central\",\"s\"],\"Eucla\":[\"true¦a0cw4eucla;cw4us0; central w1tralia0;!n central western;!e0;st;dt,st,t\",\"Australian Central Western\",\"s\"],\"Hobart\":[\"true¦a0canberra,eastern austral5hobart,king island,melbourne,sydney,t4;e8us0; east5tralia0;! 3/0n 3;currie,t0;asman0;ia;easte1;!e0;rn;dt,st,t\",\"Eastern Australia\",\"s\",\"aus\"],\"Lindeman\":[\"true¦a0brisbane time,lindeman,whitsunday islands;est,ustralia0;!n eastern\",\"Brisbane\",\"s\"],\"Lord_Howe\":[\"true¦australia3l0;h1ord howe0;! island;dt,st,t;!/lhi\",\"Lord Howe\",\"s\",\"lhow\"],\"Melbourne\":[\"true¦a0canberra,eastern austral4geelong,melbourne,sydney,v3;e7us0; east4tralia0;! 2/v0n 2;ictor0;ia;easte1;!e0;rn;dt,st,t\",\"Eastern Australia\",\"s\",\"aus\"],\"Perth\":[\"true¦a4perth,w0; 2est0; 1ern australia0;! time;australia;ustralia1w0;dt,st,t;! weste1/west,n west0;!e0;rn\",\"Western Australia\",\"s\"],\"Sydney\":[\"true¦a0c5eastern australia time,melbourne,new south wales,sydney,wollongong;e8u0;!s0;! east4tralia0;! 2/0n 2;act,c0nsw;anberra;easte1;!e0;rn;dt,st,t\",\"Eastern Australia\",\"s\",\"aus\"]},\"Etc\":{\"GMT\":[\"true¦coordinated universal3etc2g0utc,zulu;mt,reenwich0;! mean1;!/greenwich; time\",\"Greenwich Mean\",\"n\"],\"UTC\":[\"true¦coordinated universal7etc2g1u0z4;ct,n5tc;mt,reenwich mean5;!/0;u1z0;ulu;ct,n0;iversal; time\",\"Greenwich Mean\",\"n\"]},\"Europe\":{\"Amsterdam\":[\"true¦a9brussels,c6e4groning7madrid,n2paris,ro1t0utrecht;he hague,ilburg;mance,t9;etherlands,l0;!d;indhov2urope0;! central;e1openhag0;en;ntral european,st,t;lmere stad,m0;s0t;terdam\",\"Central European\",\"n\",\"eu2\"],\"Andorra\":[\"true¦a3brussels,c1europe0madrid,paris,romance;! central;e0openhagen;ntral european,st,t;d,nd0;!orra\",\"Central European\",\"n\",\"eu2\"],\"Astrakhan\":[\"true¦astrakh1europe,m0russi1st petersburg,volgograd time;oscow,sk;an\",\"Moscow\",\"n\"],\"Athens\":[\"true¦athens,e1gr0thessaloniki;!c,eece;astern european,et,urope0;! eastern\",\"Eastern European\",\"n\",\"eu3\"],\"Belgrade\":[\"true¦b9c7europe3madrid,n2p1romance,s0;i,lovenia,vn;aris,risti4;is,ovi sad;! central,/0;ljublja1podgorica,s0zagreb;arajevo,kopje;na;e0openhagen;ntral european,st,t;elgrade,russels\",\"Central European\",\"n\",\"eu2\"],\"Brussels\":[\"true¦antwerp6b3c1europe0gent,liege,madrid,paris,romance;! central;e0harleroi,openhag4;ntral european,st,t;e0mt,russels;!l0;!gium;en\",\"Central European\",\"n\",\"eu2\"],\"Bucharest\":[\"true¦b5c4e2gala1iasi,oradea,ploies1ro0timisoara;!mania,u;ti;astern european,et,urope0;! eastern;luj napoca,onstanta,raiova;ra0ucharest;ila,sov\",\"Eastern European\",\"n\",\"eu3\"],\"Budapest\":[\"true¦b6c3debrec4europe2hu0madrid,paris,romance;!n0;!gary;! central;e1openhag0;en;ntral european,st,t;russels,udapest\",\"Central European\",\"n\",\"eu2\"],\"Busingen\":[\"true¦b5c3de2europe1germa0madrid,paris,romance,saxo0;ny;! central,/berlin;!u;e0openhag3;ntral european,st,t;avaria,r0using1;em0ussels;en\",\"Central European\",\"n\",\"eu2\"],\"Chisinau\":[\"true¦chisinau,e2m0;d0oldova;!a;astern european,et,urope0;! eastern,/tiraspol\",\"Eastern European\",\"n\",\"eu2\"],\"Copenhagen\":[\"true¦arhus,brussels,c2d1europe0madrid,paris,romance;! central;enmark,k,nk;e0mt,openhagen;ntral european,st,t\",\"Central European\",\"n\",\"eu2\"],\"Dublin\":[\"true¦ace,british8cork,d7e6g5i3l0tse,waterford;i0ond1;merick,sb0;on;e,r0st;eland,l;alway,mt,reenwich mean2;dinburgh,ire,urope;mt,ublin; time\",\"Irish\",\"n\",\"eu1\"],\"Gibraltar\":[\"true¦b5c3europe2gi0madrid,paris,romance;!b0;!raltar;! central;e0openhagen;ntral european,st,t;dst,russels,st\",\"Central European\",\"n\",\"eu2\"],\"Helsinki\":[\"true¦e3fi1helsinki,t0vantaa;ampere,urku;!n0;!land;astern european,et,spoo,urope0;! eastern,/mariehamn\",\"Eastern European\",\"n\",\"eu3\"],\"Istanbul\":[\"true¦aYbScQdOeKgJiHkFmBosmAs4t1u0v07zeytinburnu;eskuedWmr9;arsus,r1ur0;!kZ;!abzon,t;a3i1ultan0;beyJgazi;sIv0;as,erek;msun,n0;cakteBliurfa;aniye;a1er0uratpaH;kezefendi,sin;l0niF;atQte6;a0irikkale,onPutahP;hramanmaras,rabaglGyseS;sJzmi0;r,t;aziantep,ebze;lazig,rzurum,s1uro0;pe;en0kiC;l8yurt;eniz0iyarbakB;li;ankaEor0;lu,um;a1ur0;sa;gcil2hcelievl1likes5sak4t0;ikent,mB;er;ar;d7n4rnavutko3sia/is2ta0;seh0;ir;tanbul;ey;kara,ta0;k0l0;ya;a1iyam0;an;na,paza0;ri\",\"Turkey\",\"n\"],\"Kaliningrad\":[\"true¦e0kaliningrad;astern european,et,urope\",\"Eastern European\",\"n\"],\"Kiev\":[\"true¦bila tserkLcherIdGeDhorlCivano frankivHk8l7m5odessa,poltaLriv4sumy,ternopil,u2vinnyts1z0;aporizhzh0hytomyr;ya;a,kr0;!ai0;ne;a0ykolayE;ki5riu8;ut9vC;amyanske,h1iev,r0yB;emenchuk,opyv1yvyy rih;ark9erson,mel0;nytskyy;ivka;astern european,et,urope0;! eastern,/simfero0;pol;nipro,onet0;sk;kasy,ni0;h0vtsi;iv;va\",\"Eastern European\",\"n\",\"eu3\"],\"Kirov\":[\"true¦europe,kirov,m0russian,st petersburg,volgograd time;oscow,sk\",\"Moscow\",\"n\"],\"Lisbon\":[\"true¦amadora,europe5lisbon,p2we0;st0t;! europe,ern european;ort0rt,t;o,ugal0;! mainland;! western\",\"Western European\",\"n\",\"eu1\"],\"London\":[\"true¦a0Ob0Ac07d03eXgThRiOj00kingston upon hull,lJmHnBoxSp9reading,s1w0yF;arwick0Aig00olverha7;heffield,o3t2u1w0;an4iH;ffolk,nderland,rr0IsYttL;afNoke on tre0C;meZuth0;a1end on 0;sea;mptG;ly0orts0restF;mouth;ew4o0;r0ttinghamT;th0wC; y0amptonR;orkV;castle upon tyne,port;ancheQi0;dlan4lton keynes;ancaRdn,e2i1o0ut5;nd4;ncolnPsb3verW;e0icesterJ;ds;psw1slingt0;on;ich;ampJert0;fordI;b2l1mt0reenwich mean M;! standard L;asgow,oucesterF;!-eF;dinburgh,s4urope0;!/0;belNguernsMisle_of_m1j0;ersL;an;sex;erby2o1u0;blin,dlH;rset;!sh5;a1ity of westmin0oventry,rawlE;ster;mbridge1rdiff;eAir9lack7r2st,uckingham0;sh0;ire;adford,e3i0;st4tish0;! 0;time;nt;po0;ol;kenhead,mingham;l1xl0;ey;fast;berdeen,rchway\",\"British\",\"n\",\"eu1\"],\"Luxembourg\":[\"true¦brussels,c3europe2lu0madrid,paris,romance;!x0;!embourg;! central;e0openhagen;ntral european,st,t\",\"Central European\",\"n\",\"eu2\"],\"Madrid\":[\"true¦aRbOcJeGfuenDgCjerez de la frontera,lBm8ovieFp6romance,s1terrassa,v0wemt,zaragoza;alladol9igo;a1evilla,pain0;! mainland;badell,n0; sebastiHt0; marti,ander,s montjuic;a0uente de vallecas;lma,mpIris;a0ostolLurcK;dr0laga;id;atiJeganI;asteiz/vitorGijon,ran1;carral el par1labr0;ada;do;ixample,lche,s1urope0;! centr2;!p;a3e1iudad line0openhagen;al;ntral europe0st,t;an;rabanchel,stello de la pla7;a0ilbao,russels,urgos;da0rce0sque;lo4; coru3l0;cala de henar1icante,mer0;ia;es;na\",\"Central European\",\"n\",\"eu2\"],\"Malta\":[\"true¦brussels,c3europe2m0paris,romance;a0lt,t;drid,lta;! central;e0openhagen;ntral european,st,t\",\"Central European\",\"n\",\"eu2\"],\"Minsk\":[\"true¦b4europe,h3m1russian,st petersburg,v0;iteb4olgograd time;ahily0in3osc0sk;ow;omyel,rodna;abruy0elarus,lr,rest,y;sk\",\"Moscow\",\"n\"],\"Monaco\":[\"true¦brussels,c3europe2m0paris,romance;adrid,c0onaco;!o;! central;e0openhagen;ntral european,st,t\",\"Central European\",\"n\",\"eu2\"],\"Moscow\":[\"true¦ar0Db0Ac07dzerzh06europe,fet,grozn05ivano04kYlipet0FmRnNorel,pKrFs8t6v2w-su,y0zelenograd;a0oshkar oW;roslavl,sene02;asyl'evsky ostrIelikiMladi2o0ykhino zhulebT;l0ronezh;gograd Pogda;kavkaz,m08;a0uQver;ganrog,mbD;a4ever3hakhty,molen06ochi,t0yktyvkR; 4a0;ryy osk0vrop0;ol;nSodvT;int 0rX;petersburg;ostov na donu,u1y0;azLbP;!s0;!sia0;!n;e1odolUsk0;ov;nza,trozavodS;a2izhn0ovorossiyR;ekamQi0;y novM;berezhnyye chelny,l'chik;a3dst,oscow1s0urmJ;d,k;! 0;time;khachka1r'0;ino;la;a2himki,ostroma,rasno0urG;d0gvargeisky;ar;l1z0;an;ininsk5uga;vo;yy;in8;entraln1he0;boksary,repovets;iy;el1ry0;an3;gorod;khangel'1mav0;ir;sk\",\"Moscow\",\"n\"],\"Oslo\":[\"true¦a6b5c3europe2madrid,oslo,paris,romance,s0;j0valbard and jan 6;!m;! central;e0openhag4;ntral european,st,t;erg2russels;rctic/longyearby1tlantic/jan_0;may0;en\",\"Central European\",\"n\",\"eu2\"],\"Paris\":[\"true¦bIcFeuropeEfrBl9m7n5paris,r3s0toulouH;aint 1t0; 0rasbourg;etienne;e0oman9;ims,nn1;ant0i7ormandy;es;a0et,ontpellier;drid,rsei1;e havre,i0yon;lle;!a0;!n0;ce;! central;e0openhagen;ntral european,rgy pontoi0st,t;se;ordeaux,russels\",\"Central European\",\"n\",\"eu2\"],\"Prague\":[\"true¦br6c4europe2madrid,ostr3p1romance,s0;k,lovakia,vk;aris,mt,rague;! central,/bratisl0;ava;e0openhagen;ntral european,st,t;no,ussels\",\"Central European\",\"n\",\"eu2\"],\"Riga\":[\"true¦e2kalt,l0riga;atvia,st,v0;!a;ast2e1urope0;! eastern;st,t; europe,ern european\",\"Eastern European\",\"n\",\"eu3\"],\"Rome\":[\"true¦bIcEeuropeCfloreBgenoa,mAnaples,p7r5sicily,t3v0;a0eroK;!t0;!ican city;aran4rieste,u0;rin,scany;mt,om0;a4e;a1ra0;to;dova,lermo,ris;adrid,essiAil6;nce;! central,/0;san_marino,vatic3;atan5e1o0;penhagen,rsica;ntral europe0st,t;an;ari,olog2r0;esc0ussels;ia;na\",\"Central European\",\"n\",\"eu2\"],\"Samara\":[\"true¦europe,izhevsk,s0togliatti on the volga;am0yzran;ara,t\",\"Samara\",\"n\"],\"Saratov\":[\"true¦balakovo,europe,izhevsk,sa0;m0ratov;ara,t\",\"Samara\",\"n\"],\"Sofia\":[\"true¦b2e0imt,plovdiv,sof4varna;astern european,et,urope0;! eastern;g2u0;lgar0rgas;ia;!r\",\"Eastern European\",\"n\",\"eu3\"],\"Stockholm\":[\"true¦brussels,c5europe4goeteborg,ma3paris,romance,s0;e1tockholm,we0;!d4;!t;drid,lmoe;! central;e1openhag0;en;ntral european,st,t\",\"Central European\",\"n\",\"eu2\"],\"Tallinn\":[\"true¦e0tallinn;astern european,e2st1urope0;! eastern;!onia;!t\",\"Eastern European\",\"n\",\"eu3\"],\"Tirane\":[\"true¦al4brussels,c2europe1madrid,paris,romance,tiran0;a,e;! central;e0openhagen;ntral european,st,t;!b0;!ania\",\"Central European\",\"n\",\"eu2\"],\"Ulyanovsk\":[\"true¦europe,m0russian,st petersburg,ulyanovsk,volgograd 2;oscow0sk;! 0;time\",\"Moscow\",\"n\"],\"Uzhgorod\":[\"true¦e0ruthenia,uzhgorod;astern european,et,urope0;! eastern\",\"Eastern European\",\"n\",\"eu3\"],\"Vienna\":[\"true¦a4brussels,c1donaustadt,europe0favorit2graz,linz,madrid,paris,romance,vienna;! central;e1openhag0;en;ntral european,st,t;t,u0;stria,t\",\"Central European\",\"n\",\"eu2\"],\"Vilnius\":[\"true¦e3k2l0vilnius;ithuania,t0;!u;aunas,laipeda;astern european,et,urope0;! eastern\",\"Eastern European\",\"n\",\"eu3\"],\"Volgograd\":[\"true¦europe,m2russian,st petersburg,vol0;gograd0t,zhskiy;! time;oscow,sk\",\"Moscow\",\"n\"],\"Warsaw\":[\"true¦bKcHeuropeGgCkAl8m7p4r3s2torun,w0zabrze;ars0rocl0;aw;osnowiec,zczec6;adIomanA;aris,l,o0raga poludnie;l0znD;!and;adrid,okot3;odz,ubl0;in;ato2iel3rak0;ow;d2li0;wi0;ce;ansk,ynia;! central;e0openhagen,zestochowa;ntral europe0st,t;an;i2russels,y0;dgoszcz,t0;om;alystok,elsko biala\",\"Central European\",\"n\",\"eu2\"],\"Zaporozhye\":[\"true¦e3luhansk2sevastopol,zapor0;izhia lugansk,ozh0;'ye,ye;! east;astern european,et,urope0;! eastern\",\"Eastern European\",\"n\",\"eu3\"],\"Zurich\":[\"true¦brussels,c4europe2geneve,li0madrid,paris,romance,swiss time,zurich;!e0;!chtenstein;! central,/0;busin1vaduz;e1openha0;gen;ntral european,st,t\",\"Central European\",\"n\",\"eu2\"]},\"Indian\":{\"Chagos\":[\"true¦british indian ocean territory,c4i0;ndian1o0;!t;! 0;c0ocean;hagos\",\"Indian Ocean\",\"n\"],\"Christmas\":[\"true¦c0indian;hristmas1x0;!r,t;! island\",\"Christmas Island\",\"s\"],\"Cocos\":[\"true¦c0indian;c2ocos0;! island0;!s;!k,t\",\"Cocos Islands\",\"n\"],\"Kerguelen\":[\"true¦a5french southern2indian,kerguelen1tf0;!t;!st paul4;! 0;& antarctic time,and antarctic0;! lands;msterdam0tf; island\",\"French Southern & Antarctic\",\"s\"],\"Mahe\":[\"true¦indian,mahe,s0;c0eychelles,yc;!t\",\"Seychelles\",\"n\"],\"Maldives\":[\"true¦indian,m0;aldives,dv,v0;!t\",\"Maldives\",\"n\"],\"Mauritius\":[\"true¦indian,m0port louis;auritius,u0;!s,t\",\"Mauritius\",\"n\"],\"Reunion\":[\"true¦indian,r0;e0éu1;t,u0;nion\",\"Réunion\",\"s\"]},\"Pacific\":{\"Apia\":[\"true¦apia,pacific,s2w0;est s1s0;!m,t;amoa\",\"West Samoa\",\"s\"],\"Auckland\":[\"true¦a2christchurch,manukau,n0pacific,wellington;ew zea2orth shore,z0;!dt,l,mt,st,t;ntarctica/1uck0;land;mcmurdo,south_pole\",\"New Zealand\",\"s\",\"nz\"],\"Bougainville\":[\"true¦bougainville,guinea2p0;a0gt;cific,pua new guinea;!n\",\"Papua New Guinea\",\"s\"],\"Chatham\":[\"true¦cha0nz-chat,pacific;dt,st,t0;!ham0;! 0;islands,time\",\"Chatham\",\"s\",\"chat\"],\"Chuuk\":[\"true¦chu2pacific0;!/0;truk,y2;t,uk0;!/truky0;ap\",\"Chuuk\",\"n\"],\"Easter\":[\"true¦chile/easter4e0pacific;as0mt;st,t0;!er0;! 0;island\",\"Easter Island\",\"s\",\"east\"],\"Efate\":[\"true¦efate,pacific,v0;anuatu,u0;!t\",\"Vanuatu\",\"n\"],\"Fakaofo\":[\"true¦fakaofo,pacific,t0;k0okelau;!l,t\",\"Tokelau\",\"n\"],\"Fiji\":[\"true¦f0pacific;iji,j0;!i,st,t\",\"Fiji\",\"s\",\"fiji\"],\"Funafuti\":[\"true¦funafuti,pacific,t0;uv1v0;!t;!alu\",\"Tuvalu\",\"n\"],\"Galapagos\":[\"true¦co1gal0pacific;apagos,t,ápagos islands;lombia,st,t\",\"Colombia\",\"n\"],\"Gambier\":[\"true¦gam0pacific;bier0t;! islands\",\"Gambier\",\"n\"],\"Guadalcanal\":[\"true¦guadalcanal,pacific,s0;b1lb,olomon0;! islands;!t\",\"Solomon Islands\",\"n\"],\"Guam\":[\"true¦ch5guam,m4northern mariana islands,p2west0; 0ern 0;pacific;acific0ort moresby;!/saipan;np,p;amorro,st\",\"Chamorro\",\"n\"],\"Honolulu\":[\"true¦aleutian4h1pacific0us/hawaii;!/johnston;a0onolulu,st;dt,st,t,waii0;! aleutian;! islands\",\"Hawaii-Aleutian\",\"n\"],\"Kanton\":[\"true¦kanton,p0;acific1ho0;enix islands,t;!/enderbury\",\"Phoenix Islands\",\"n\"],\"Kiritimati\":[\"true¦ki1lin0pacific;e islands,t;!r0;!i0;bati,timati0;! island\",\"Line Islands\",\"n\"],\"Kosrae\":[\"true¦kos0pacific;rae,t\",\"Kosrae\",\"n\"],\"Kwajalein\":[\"true¦kwajalein,m0pacific;arshall islands,ht\",\"Marshall Islands\",\"n\"],\"Majuro\":[\"true¦m0pacific;a1h0;!l,t;juro,rshall islands\",\"Marshall Islands\",\"n\"],\"Marquesas\":[\"true¦mar0pacific;quesas0t;! islands\",\"Marquesas\",\"n\"],\"Nauru\":[\"true¦n0pacific;auru,r0;!t,u\",\"Nauru\",\"n\"],\"Niue\":[\"true¦n0pacific;iu1u0;!t;!e\",\"Niue\",\"n\"],\"Norfolk\":[\"true¦n0pacific;f1orfolk0;! island;!dt,k,t\",\"Norfolk Island\",\"n\",\"aus\"],\"Noumea\":[\"true¦n0pacific;c0ew caledonia,oumea;!l,t\",\"New Caledonia\",\"n\"],\"Pago_Pago\":[\"true¦m5pa1s0us/sa4;a3st;cific0go_pago;!/0;m1sa0;moa;idway\",\"Samoa\",\"n\"],\"Palau\":[\"true¦p0;a1lw,w0;!t;cific,lau\",\"Palau\",\"n\"],\"Pitcairn\":[\"true¦p0;acific,cn,itcairn,n,st\",\"Pitcairn\",\"n\"],\"Pohnpei\":[\"true¦french polynesia,p0;acific1f,o0yf;hnpei0nt;!/ponape\",\"Ponape\",\"n\"],\"Port_Moresby\":[\"true¦antarctica/dumontd6dumont-d'6guinea5p0;a3g2ng,ort0; 0_0;moresby;!t;cific,pua new guinea;!n;urville\",\"Papua New Guinea\",\"s\"],\"Rarotonga\":[\"true¦c0pacific,rarotonga;k2o0;k,ok0;! islands;!t\",\"Cook Islands\",\"n\"],\"Tahiti\":[\"true¦pacific,society islands,tah0;iti,t\",\"Tahiti\",\"n\"],\"Tarawa\":[\"true¦gil0pacific,tarawa;bert islands,t\",\"Gilbert Islands\",\"n\"],\"Tongatapu\":[\"true¦nuku'alofa,pacific,to0;!n0t;!ga0;!tapu\",\"Tonga\",\"s\"],\"Wake\":[\"true¦pacific,u2wak0;e0t;! island;m0s minor outlying islands;!i\",\"Wake Island\",\"n\"],\"Wallis\":[\"true¦pacific,w0;allis1f0lf;!t;! 0;&0and0; futuna\",\"Wallis & Futuna\",\"n\"]}};\n\n// strings that don't pack properly\nvar misc = {\n  'gmt+0': ['Etc/GMT'],\n  'gmt-0': ['Etc/GMT'],\n  gmt0: ['Etc/GMT'],\n  'etc/gmt+0': ['Etc/GMT'],\n  'etc/gmt-0': ['Etc/GMT'],\n  'etc/gmt0': ['Etc/GMT'],\n  'msk+00': ['Europe/Moscow'],\n  'msk-01 - kaliningrad': ['Europe/Kaliningrad'],\n  'msk+00 - moscow area': ['Europe/Moscow'],\n  'msk+00 - crimea': ['Europe/Kiev'],\n  'msk+00 - volgograd': ['Europe/Volgograd'],\n  'msk+00 - kirov': ['Europe/Kirov'],\n  'msk+01 - astrakhan': ['Europe/Astrakhan'],\n  'msk+01 - saratov': ['Europe/Saratov'],\n  'msk+01 - ulyanovsk': ['Europe/Ulyanovsk'],\n  'msk+01 - samaraudmurtia': ['Europe/Samara'],\n  'msk+02 - urals': ['Asia/Yekaterinburg'],\n  'msk+03': ['Asia/Omsk'],\n  'msk+04 - novosibirsk': ['Asia/Novosibirsk'],\n  'msk+04 - altai': ['Asia/Barnaul'],\n  'msk+04': ['Asia/Tomsk'],\n  'msk+04 - kemerovo': ['Asia/Novokuznetsk'],\n  'msk+04 - krasnoyarsk area': ['Asia/Krasnoyarsk'],\n  'msk+05 - irkutskburyatia': ['Asia/Irkutsk'],\n  'msk+06 - zabaykalsky': ['Asia/Chita'],\n  'msk+06 - lena river': ['Asia/Yakutsk'],\n  'msk+06 - tomponskyust-maysky': ['Asia/Khandyga'],\n  'msk+07 - amur river': ['Asia/Vladivostok'],\n  'msk+07 - oymyakonsky': ['Asia/Ust-Nera'],\n  'msk+08 - magadan': ['Asia/Magadan'],\n  'msk+08 - sakhalin island': ['Asia/Sakhalin'],\n  'msk+08 - sakha (e) north kuril is': ['Asia/Srednekolymsk'],\n  'msk+09': ['Asia/Kamchatka'],\n  'msk+09 - bering sea': ['Asia/Anadyr'],\n  \"russia time zone 11\": [\"Asia/Anadyr\"],\n  \"russia time zone 10\": [\"Asia/Srednekolymsk\"],\n  \"russia time zone 3\": [\"Europe/Samara\"],\n  \"coordinated universal time-09\": [\"Pacific/Gambier\"],\n  \"utc-09\": [\"Pacific/Gambier\"],\n  \"coordinated universal time-08\": [\"Pacific/Pitcairn\"]\n};\n\nconst addEtc = function (zones) {\n  for (let i = 0; i <= 14; i += 1) {\n    zones[`Etc/GMT-${i}`] = {\n      offset: i,\n      meta: `gmt-${i}`,\n      hem: 'n'//sorry\n    };\n    zones[`Etc/GMT+${i}`] = {\n      offset: i * -1,\n      meta: `gmt+${i}`,\n      hem: 'n'//sorry\n    };\n  }\n};\n\nvar addUTC = addEtc;\n\n// unpack our lexicon of words\nlet zones = {};\nlet lexicon = Object.assign({}, misc);\nObject.keys(pcked).forEach(top => {\n  Object.keys(pcked[top]).forEach(name => {\n    let [words, meta, hem, dst] = pcked[top][name];\n    let id = `${top}/${name}`;\n    zones[id] = { meta, hem };\n    let keys = Object.keys(unpack$1(words));\n    keys.forEach(k => {\n      lexicon[k] = lexicon[k] || [];\n      lexicon[k].push(id);\n      // use iana aliases\n      if (k.match(/\\//)) {\n        let arr = k.split(/\\//);\n        let last = arr[arr.length - 1].toLowerCase();\n        lexicon[last] = lexicon[last] || [];\n        lexicon[last].push(id);\n      }\n    });\n    zones[id].wordCount = keys.length;\n    if (dst) {\n      zones[id].dst = dstPatterns[dst].split(/\\|/);\n    }\n  });\n});\n\naddUTC(zones);\n\nconst unique = function (arr) {\n  let obj = {};\n  for (let i = 0; i < arr.length; i += 1) {\n    obj[arr[i]] = true;\n  }\n  return Object.keys(obj)\n};\n\n// sort by num of aliases\nObject.keys(lexicon).forEach(k => {\n  if (lexicon[k].length > 1) {\n    lexicon[k] = unique(lexicon[k]);\n    lexicon[k] = lexicon[k].sort((a, b) => {\n      if (zones[a].wordCount > zones[b].wordCount) {\n        return -1\n      } else if (zones[a].wordCount < zones[b].wordCount) {\n        return 1\n      }\n      return 0\n    });\n  }\n});\n\n// console.log(zones['Etc/GMT+4'])\n\n//try to match these against iana form\nconst one = (str) => {\n  str = str.toLowerCase();\n  str = str.replace(/^in /g, '');\n  str = str.replace(/ time/g, '');\n  str = str.replace(/ (standard|daylight|summer)/g, '');\n  str = str.replace(/ - .*/g, ''); //`Eastern Time - US & Canada`\n  str = str.replace(/, .*/g, ''); //`mumbai, india`\n  str = str.replace(/\\./g, '');//st. petersberg\n  return str.trim()\n};\n\n//some more aggressive transformations\nconst two = function (str) {\n  str = str.replace(/\\b(east|west|north|south)ern/g, '$1');\n  str = str.replace(/\\b(africa|america|australia)n/g, '$1');\n  str = str.replace(/\\beuropean/g, 'europe');\n  str = str.replace(/\\islands/g, 'island');\n  str = str.replace(/.*\\//g, '');\n  return str.trim()\n};\n// even-more agressive\nconst three = function (str) {\n  str = str.replace(/\\(.*\\)/, '');//anything in brackets\n  str = str.replace(/  +/g, ' ');//extra spaces\n  return str.trim()\n};\n\nvar normalize = { one, two, three };\n\nconst isOffset = /^([-+]?[0-9]+)h(r?s)?$/i;\nconst isNumber = /^([-+]?[0-9]+)$/;\nconst utcOffset = /utc([\\-+]?[0-9]+)$/i;\nconst gmtOffset = /gmt([\\-+]?[0-9]+)$/i;\n\nconst toIana = function (num) {\n  num = Number(num);\n  if (num > -13 && num < 13) {\n    num = num * -1; //it's opposite!\n    num = (num > 0 ? '+' : '') + num; //add plus sign\n    return 'Etc/GMT' + num\n  }\n  return null\n};\n\nconst parseOffset = function (tz) {\n  // '+5hrs'\n  let m = tz.match(isOffset);\n  if (m !== null) {\n    return toIana(m[1])\n  }\n  // 'utc+5'\n  m = tz.match(utcOffset);\n  if (m !== null) {\n    return toIana(m[1])\n  }\n  // 'GMT-5' (not opposite)\n  m = tz.match(gmtOffset);\n  if (m !== null) {\n    let num = Number(m[1]) * -1;\n    return toIana(num)\n  }\n  // '+5'\n  m = tz.match(isNumber);\n  if (m !== null) {\n    return toIana(m[1])\n  }\n  return null\n};\nvar parseOffset$1 = parseOffset;\n\n// match some text to an iana code\nconst find = function (str) {\n  // perfect id match\n  if (zones.hasOwnProperty(str)) {\n    return str\n  }\n  // lookup known word\n  if (lexicon.hasOwnProperty(str)) {\n    return lexicon[str]\n  }\n  // -8hrs\n  if (/[0-9]/.test(str)) {\n    let etc = parseOffset$1(str);\n    if (etc) {\n      return [etc]\n    }\n  }\n  // try a sequence of normalization steps\n  str = normalize.one(str);\n  if (lexicon.hasOwnProperty(str)) {\n    return lexicon[str]\n  }\n  str = normalize.two(str);\n  if (lexicon.hasOwnProperty(str)) {\n    return lexicon[str]\n  }\n  str = normalize.three(str);\n  if (lexicon.hasOwnProperty(str)) {\n    return lexicon[str]\n  }\n  return null\n};\n\nvar find$1 = find;\n\nvar metas = {\n  \"India\": {\n    \"std\": [\"IST\", 5.5],\n    \"long\": \"(UTC+05:30) Chennai, Kolkata, Mumbai, New Delhi\"\n  },\n  \"China\": {\n    \"std\": [\"CST\", 8],\n    \"long\": \"(UTC+08:00) Beijing, Chongqing, Hong Kong, Urumqi\"\n  },\n  \"Central European\": {\n    \"std\": [\"CET\", 1],\n    \"dst\": [\"CEST\", 2, \"Central European Summer Time\"],\n    \"long\": \"(UTC+01:00) Brussels, Copenhagen, Madrid, Paris\"\n  },\n  \"Atlantic\": {\n    \"dupe\": true,\n    \"std\": [\"AST\", -4],\n    \"dst\": [\"ADT\", -3],\n    \"long\": \"(UTC-04:00) Atlantic Time (Canada)\"\n  },\n  \"Greenwich Mean\": {\n    \"std\": [\"GMT\", 0],\n    \"long\": \"(UTC) Coordinated Universal Time\"\n  },\n  \"Eastern European\": {\n    \"std\": [\"EET\", 2],\n    \"dst\": [\"EEST\", 3, \"Eastern European Summer Time\"\n    ]\n  },\n  \"Central\": {\n    \"dupe\": true,\n    \"std\": [\"CST\", -6],\n    \"dst\": [\"CDT\", -5],\n    \"long\": \"(UTC-06:00) Central Time (US & Canada)\"\n  },\n  \"Eastern\": {\n    \"std\": [\"EST\", -5],\n    \"dst\": [\"EDT\", -4],\n    \"long\": \"(UTC-05:00) Eastern Time (US & Canada)\"\n  },\n  \"Argentina\": {\n    \"std\": [\"ART\", -3],\n    \"long\": \"(UTC-03:00) City of Buenos Aires\"\n  },\n  \"East Africa\": {\n    \"std\": [\"EAT\", 3],\n    \"long\": \"(UTC+03:00) Nairobi\"\n  },\n  \"West Africa\": {\n    \"std\": [\"WAT\", 1],\n    \"long\": \"(UTC+01:00) West Central Africa\"\n  },\n  \"Moscow\": {\n    \"std\": [\"MSK\", 3],\n    \"long\": \"(UTC+03:00) Moscow, St. Petersburg\"\n  },\n  \"Brasilia\": {\n    \"std\": [\"BRT\", -3],\n    \"long\": \"(UTC-03:00) Brasilia\"\n  },\n  \"Mountain\": {\n    \"std\": [\"MST\", -7],\n    \"dst\": [\"MDT\", -6],\n    \"long\": \"(UTC-07:00) Mountain Time (US & Canada)\"\n  },\n  \"Central Africa\": {\n    \"std\": [\"CAT\", 2],\n    \"long\": \"(UTC+02:00) Windhoek\"\n  },\n  \"Arabian\": {\n    \"std\": [\"AST\", 3],\n    \"long\": \"(UTC+03:00) Kuwait, Riyadh\"\n  },\n  \"Alaska\": {\n    \"std\": [\"AKST\", -9],\n    \"dst\": [\"AKDT\", -8],\n    \"long\": \"(UTC-09:00) Alaska\"\n  },\n  \"British\": {\n    \"std\": [\"GMT\", 0],\n    \"dst\": [\"BST\", 1, \"British Summer Time\"],\n    \"long\": \"(UTC+00:00) Dublin, Edinburgh, Lisbon, London\"\n  },\n  \"Irish\": {\n    \"std\": [\"GMT\", 0],\n    \"dst\": [\"IST\", 1, \"Irish Standard Time\"]\n  },\n  \"West Kazakhstan\": {\n    \"std\": [\"ALMT\", 5],\n    \"long\": \"(UTC+05:00) Ashgabat, Tashkent\"\n  },\n  \"Eastern Australia\": {\n    \"std\": [\"AEST\", 10],\n    \"dst\": [\"AEDT\", 11, \"Australian Eastern Daylight Time\"],\n    \"long\": \"(UTC+10:00) Canberra, Melbourne, Sydney\"\n  },\n  \"Western European\": {\n    \"std\": [\"WET\", 0],\n    \"dst\": [\"WEST\", 1, \"Western European Summer Time\"]\n  },\n  \"Indochina\": {\n    \"std\": [\"ICT\", 7],\n    \"long\": \"(UTC+07:00) Bangkok, Hanoi, Jakarta\"\n  },\n  \"Central Mexico\": {\n    \"long\": \"(UTC-06:00) Guadalajara, Mexico City, Monterrey\",\n    \"std\": [\"CST\", -6],\n    \"dst\": [\"CDT\", -5, \"Central Daylight Time\"\n    ]\n  },\n  \"South Africa\": {\n    \"std\": [\"SAST\", 2],\n    \"long\": \"(UTC+02:00) Harare, Pretoria\"\n  },\n  \"Krasnoyarsk\": {\n    \"std\": [\"KRAT\", 7],\n    \"long\": \"(UTC+07:00) Krasnoyarsk\"\n  },\n  \"Yakutsk\": {\n    \"std\": [\"YAKT\", 9],\n    \"long\": \"(UTC+09:00) Yakutsk\"\n  },\n  \"Pacific\": {\n    \"std\": [\"PST\", -8],\n    \"dst\": [\"PDT\", -7],\n    \"long\": \"(UTC-08:00) Pacific Time (US & Canada)\"\n  },\n  \"Amazon\": {\n    \"std\": [\"AMT\", -4],\n    \"long\": \"(UTC-04:00) Cuiaba\"\n  },\n  \"Morocco Standard\": {\n    \"offset\": 1,\n    \"long\": \"(UTC+00:00) Casablanca\",\n    \"std\": [\"WET\", 1],\n    \"dst\": [\"WEST\", 0, \"Western European Summer Time\"\n    ]\n  },\n  \"Gulf\": {\n    \"std\": [\"GST\", 4],\n    \"long\": \"(UTC+04:00) Abu Dhabi, Muscat\"\n  },\n  \"Samara\": {\n    \"std\": [\"SAMT\", 4],\n    \"long\": \"(UTC+04:00) Izhevsk, Samara\"\n  },\n  \"Uzbekistan\": {\n    \"std\": [\"UZT\", 5]\n  },\n  \"East Kazakhstan\": {\n    \"std\": [\"ALMT\", 6],\n    \"long\": \"(UTC+06:00) Astana\"\n  },\n  \"Omsk\": {\n    \"std\": [\"OMST\", 6],\n    \"long\": \"(UTC+06:00) Omsk\"\n  },\n  \"Western Indonesia\": {\n    \"std\": [\"WIB\", 7]\n  },\n  \"Ulaanbaatar\": {\n    \"std\": [\"ULAT\", 8],\n    \"long\": \"(UTC+08:00) Ulaanbaatar\"\n  },\n  \"Malaysia\": {\n    \"std\": [\"MYT\", 8]\n  },\n  \"Korean\": {\n    \"std\": [\"KST\", 9],\n    \"long\": \"(UTC+09:00) Seoul\"\n  },\n  \"Central Australia\": {\n    \"std\": [\"ACST\", 9.5],\n    \"dst\": [\"ACDT\", 10.5, \"Australian Central Daylight Time\"],\n    \"long\": \"(UTC+09:30) Adelaide\"\n  },\n  \"Brisbane\": {\n    \"dupe\": true,\n    \"std\": [\"AEST\", 10]\n  },\n  \"Vladivostok\": {\n    \"std\": [\"VLAT\", 10],\n    \"long\": \"(UTC+10:00) Vladivostok\"\n  },\n  \"Chamorro\": {\n    \"std\": [\"ChST\", 10],\n    \"long\": \"(UTC+10:00) Guam, Port Moresby\"\n  },\n  \"Papua New Guinea\": {\n    \"std\": [\"PGT\", 11]\n  },\n  \"New Zealand\": {\n    \"std\": [\"NZST\", 12],\n    \"dst\": [\"NZDT\", 13],\n    \"long\": \"(UTC+12:00) Auckland, Wellington\"\n  },\n  \"Marshall Islands\": {\n    \"std\": [\"MHT\", 12]\n  },\n  \"Samoa\": {\n    \"std\": [\"SST\", -11],\n    \"long\": \"(UTC+13:00) Samoa\"\n  },\n  \"Hawaii-Aleutian\": {\n    \"std\": [\"HAST\", -9],\n    \"dst\": [\"HADT\", -8],\n    \"long\": \"(UTC-09:00) Aleutian Islands\"\n  },\n  \"Mexican Pacific\": {\n    \"std\": [\"HNPMX\", -7],\n    \"dst\": [\"HEPMX\", -6],\n    \"long\": \"(UTC-07:00) Chihuahua, La Paz, Mazatlan\"\n  },\n  \"Colombia\": {\n    \"std\": [\"COT\", -5]\n  },\n  \"Acre\": {\n    \"std\": [\"ACT\", -5]\n  },\n  \"Chile\": {\n    \"dupe\": true,\n    \"std\": [\"CLT\", -3],\n    \"dst\": [\"CLST\", -4, \"Chile Summer Time\"\n    ]\n  },\n  \"Troll\": {\n    \"dupe\": true,\n    \"std\": [\"GMT\", 0]\n  },\n  \"East Greenland\": {\n    \"std\": [\"HNEG\", 0],\n    \"dst\": [\"HEEG\", 1, \"East Greenland Summer Time\"\n    ]\n  },\n  \"Israel\": {\n    \"std\": [\"IST\", 2],\n    \"dst\": [\"IDT\", 3],\n    \"long\": \"(UTC+02:00) Jerusalem\"\n  },\n  \"Syowa\": {\n    \"std\": [\"SYOT\", 3]\n  },\n  \"Turkey\": {\n    \"std\": [\"TRT\", 3],\n    \"long\": \"(UTC+03:00) Istanbul\"\n  },\n  \"Iran\": {\n    \"std\": [\"IRST\", 3.5],\n    \"dst\": [\"IRDT\", 4.5],\n    \"long\": \"(UTC+03:30) Tehran\"\n  },\n  \"Azerbaijan\": {\n    \"std\": [\"AZT\", 4],\n    \"long\": \"(UTC+04:00) Baku\"\n  },\n  \"Georgia\": {\n    \"std\": [\"GET\", 4],\n    \"long\": \"(UTC+04:00) Tbilisi\"\n  },\n  \"Armenia\": {\n    \"std\": [\"AMT\", 4],\n    \"long\": \"(UTC+04:00) Yerevan\"\n  },\n  \"Seychelles\": {\n    \"std\": [\"SCT\", 4]\n  },\n  \"Mauritius\": {\n    \"std\": [\"MUT\", 4],\n    \"long\": \"(UTC+04:00) Port Louis\"\n  },\n  \"Réunion\": {\n    \"std\": [\"RET\", 4]\n  },\n  \"Afghanistan\": {\n    \"std\": [\"AFT\", 4.5],\n    \"long\": \"(UTC+04:30) Kabul\"\n  },\n  \"Mawson\": {\n    \"std\": [\"MAWT\", 5]\n  },\n  \"Turkmenistan\": {\n    \"std\": [\"TMT\", 5]\n  },\n  \"Tajikistan\": {\n    \"std\": [\"TJT\", 5]\n  },\n  \"Pakistan\": {\n    \"std\": [\"PKT\", 5],\n    \"long\": \"(UTC+05:00) Islamabad, Karachi\"\n  },\n  \"Yekaterinburg\": {\n    \"std\": [\"YEKT\", 5],\n    \"long\": \"(UTC+05:00) Ekaterinburg\"\n  },\n  \"French Southern & Antarctic\": {\n    \"std\": [\"TFT\", 5]\n  },\n  \"Maldives\": {\n    \"std\": [\"MVT\", 5]\n  },\n  \"Nepal\": {\n    \"std\": [\"NPT\", 5.75],\n    \"long\": \"(UTC+05:45) Kathmandu\"\n  },\n  \"Vostok\": {\n    \"std\": [\"MSK+4\", 6]\n  },\n  \"Kyrgyzstan\": {\n    \"std\": [\"KGT\", 6]\n  },\n  \"Bangladesh\": {\n    \"std\": [\"BST\", 6],\n    \"long\": \"(UTC+06:00) Dhaka\"\n  },\n  \"Bhutan\": {\n    \"std\": [\"BT\", 6]\n  },\n  \"Indian Ocean\": {\n    \"std\": [\"IOT\", 6]\n  },\n  \"Myanmar\": {\n    \"std\": [\"MMT\", 6.5],\n    \"long\": \"(UTC+06:30) Yangon (Rangoon)\"\n  },\n  \"Cocos Islands\": {\n    \"std\": [\"CCT\", 6.5]\n  },\n  \"Davis\": {\n    \"std\": [\"DAVT\", 7]\n  },\n  \"Hovd\": {\n    \"std\": [\"HOVT\", 7],\n    \"long\": \"(UTC+07:00) Hovd\"\n  },\n  \"Novosibirsk\": {\n    \"std\": [\"NOVT\", 7],\n    \"long\": \"(UTC+07:00) Novosibirsk\"\n  },\n  \"Christmas Island\": {\n    \"std\": [\"CXT\", 7]\n  },\n  \"Brunei Darussalam\": {\n    \"std\": [\"BNT\", 8]\n  },\n  \"Hong Kong\": {\n    \"std\": [\"HKT\", 8]\n  },\n  \"Irkutsk\": {\n    \"std\": [\"IRKT\", 8],\n    \"long\": \"(UTC+08:00) Irkutsk\"\n  },\n  \"Central Indonesia\": {\n    \"std\": [\"WITA\", 8]\n  },\n  \"Philippine\": {\n    \"std\": [\"PHST\", 8]\n  },\n  \"Singapore\": {\n    \"std\": [\"SGT\", 8],\n    \"long\": \"(UTC+08:00) Kuala Lumpur, Singapore\"\n  },\n  \"Taipei\": {\n    \"std\": [\"CST\", 8],\n    \"long\": \"(UTC+08:00) Taipei\"\n  },\n  \"Western Australia\": {\n    \"std\": [\"AWST\", 8],\n    \"long\": \"(UTC+08:00) Perth\"\n  },\n  \"Australian Central Western\": {\n    \"std\": [\"ACWST\", 8.75],\n    \"long\": \"(UTC+08:45) Eucla\"\n  },\n  \"East Timor\": {\n    \"std\": [\"TLT\", 9]\n  },\n  \"Eastern Indonesia\": {\n    \"std\": [\"WIT\", 9]\n  },\n  \"Japan\": {\n    \"std\": [\"JST\", 9],\n    \"long\": \"(UTC+09:00) Osaka, Sapporo, Tokyo\"\n  },\n  \"Palau\": {\n    \"std\": [\"PWT\", 9]\n  },\n  \"Australian Central\": {\n    \"dupe\": true,\n    \"std\": [\"ACST\", 9.5]\n  },\n  \"Dumont-d’Urville\": {\n    \"std\": [\"CLST\", 10]\n  },\n  \"Chuuk\": {\n    \"std\": [\"CHUT\", 10]\n  },\n  \"Lord Howe\": {\n    \"std\": [\"LHST\", 10.5],\n    \"dst\": [\"LHDT\", 11.5],\n    \"long\": \"(UTC+10:30) Lord Howe Island\"\n  },\n  \"Casey\": {\n    \"std\": [\"CAST\", 11],\n    \"dst\": [\"CAST\", 8, \"Casey Summer Time\"\n    ]\n  },\n  \"Magadan\": {\n    \"std\": [\"MAGT\", 11],\n    \"long\": \"(UTC+11:00) Magadan\"\n  },\n  \"Sakhalin\": {\n    \"std\": [\"SAKT\", 11],\n    \"long\": \"(UTC+11:00) Sakhalin\"\n  },\n  \"Srednekolymsk\": {\n    \"std\": [\"SRET\", 11],\n    \"long\": \"(UTC+11:00) Chokurdakh\"\n  },\n  \"Vanuatu\": {\n    \"std\": [\"VUT\", 11]\n  },\n  \"Solomon Islands\": {\n    \"std\": [\"SBT\", 11]\n  },\n  \"Kosrae\": {\n    \"std\": [\"KOST\", 11]\n  },\n  \"New Caledonia\": {\n    \"std\": [\"NCT\", 11]\n  },\n  \"Ponape\": {\n    \"std\": [\"PONT\", 11]\n  },\n  \"Anadyr\": {\n    \"std\": [\"ANAT\", 12],\n    \"long\": \"(UTC+12:00) Anadyr, Petropavlovsk-Kamchatsky\"\n  },\n  \"Petropavlovsk-Kamchatski\": {\n    \"std\": [\"PETT\", 12],\n    \"long\": \"(UTC+12:00) Anadyr, Petropavlovsk-Kamchatsky\"\n  },\n  \"Fiji\": {\n    \"std\": [\"FJT\", 12],\n    \"dst\": [\"FJT\", 13, \"Fiji Summer Time\"],\n    \"long\": \"(UTC+12:00) Fiji\"\n  },\n  \"Tuvalu\": {\n    \"std\": [\"TVT\", 12]\n  },\n  \"Nauru\": {\n    \"std\": [\"NRT\", 12]\n  },\n  \"Norfolk Island\": {\n    \"std\": [\"NFT\", 12],\n    \"dst\": [\"NFDT\", 11],\n    \"long\": \"(UTC+11:00) Norfolk Island\"\n  },\n  \"Gilbert Islands\": {\n    \"std\": [\"GILT\", 12]\n  },\n  \"Wake Island\": {\n    \"std\": [\"WAKT\", 12]\n  },\n  \"Wallis & Futuna\": {\n    \"std\": [\"WFT\", 12]\n  },\n  \"Chatham\": {\n    \"std\": [\"CHAST\", 12.75],\n    \"dst\": [\"CHADT\", 13.75],\n    \"long\": \"(UTC+12:45) Chatham Islands\"\n  },\n  \"West Samoa\": {\n    \"std\": [\"WST\", 13],\n    \"dst\": [\"WST\", 14, \"West Samoa Summer Time\"\n    ]\n  },\n  \"Phoenix Islands\": {\n    \"std\": [\"PHOT\", 13]\n  },\n  \"Tokelau\": {\n    \"std\": [\"TKT\", 13]\n  },\n  \"Tonga\": {\n    \"std\": [\"TOT\", 13],\n    \"long\": \"(UTC+13:00) Nuku'alofa\"\n  },\n  \"Line Islands\": {\n    \"std\": [\"LINT\", 14],\n    \"long\": \"(UTC+14:00) Kiritimati Island\"\n  },\n  \"Niue\": {\n    \"std\": [\"NUT\", -11]\n  },\n  \"Cook Islands\": {\n    \"std\": [\"CKT\", -10]\n  },\n  \"Tahiti\": {\n    \"std\": [\"TAHT\", -10]\n  },\n  \"Marquesas\": {\n    \"std\": [\"MART\", -9.5],\n    \"long\": \"(UTC-09:30) Marquesas Islands\"\n  },\n  \"Aleutian Standard\": {\n    \"iso\": \"(UTC-10:00) Aleutian Islands\",\n    \"std\": [\"HST\", -10],\n    \"dst\": [\"HDT\", -9, \"Hawaii Daylight Time\"\n    ]\n  },\n  \"Gambier\": {\n    \"std\": [\"GAMT\", -9],\n    \"long\": \"(UTC-09:00) Coordinated Universal Time-09\"\n  },\n  \"Pitcairn\": {\n    \"std\": [\"PST\", -8],\n    \"long\": \"(UTC-08:00) Coordinated Universal Time-08\"\n  },\n  \"Northwest Mexico\": {\n    \"std\": [\"HNNOMX\", -6],\n    \"dst\": [\"HENOMX\", -5],\n    \"long\": \"(UTC-08:00) Baja California\"\n  },\n  \"Easter Island\": {\n    \"std\": [\"EAST\", -6],\n    \"dst\": [\"EASST\", -5, \"Easter Island Summer Time\"],\n    \"long\": \"(UTC-06:00) Easter Island\"\n  },\n  \"Ecuador\": {\n    \"std\": [\"ECT\", -5]\n  },\n  \"Cuba\": {\n    \"std\": [\"HNCU\", -5],\n    \"dst\": [\"HECU\", -4],\n    \"long\": \"(UTC-05:00) Havana\"\n  },\n  \"Peru\": {\n    \"std\": [\"PET\", -5]\n  },\n  \"Paraguay\": {\n    \"std\": [\"PYT\", -4],\n    \"dst\": [\"PYST\", -3, \"Paraguay Summer Time\"],\n    \"long\": \"(UTC-04:00) Asuncion\"\n  },\n  \"Venezuela\": {\n    \"std\": [\"VET\", -4],\n    \"long\": \"(UTC-04:00) Caracas\"\n  },\n  \"Guyana\": {\n    \"std\": [\"GYT\", -4]\n  },\n  \"Bolivia\": {\n    \"std\": [\"BOT\", -4]\n  },\n  \"Newfoundland\": {\n    \"std\": [\"HNTN\", -3.5],\n    \"dst\": [\"HETN\", -2.5],\n    \"long\": \"(UTC-03:30) Newfoundland\"\n  },\n  \"French Guiana\": {\n    \"std\": [\"GFT\", -3]\n  },\n  \"West Greenland\": {\n    \"std\": [\"WGT\", -3],\n    \"dst\": [\"WGST\", -2, \"West Greenland Summer Time\"],\n    \"long\": \"(UTC-03:00) Greenland\"\n  },\n  \"St. Pierre & Miquelon\": {\n    \"std\": [\"HNPM\", -3],\n    \"dst\": [\"HEPM\", -2],\n    \"long\": \"(UTC-03:00) Saint Pierre and Miquelon\"\n  },\n  \"Uruguay\": {\n    \"std\": [\"UYT\", -3],\n    \"long\": \"(UTC-03:00) Montevideo\"\n  },\n  \"Suriname\": {\n    \"std\": [\"SRT\", -3]\n  },\n  \"Falkland Islands\": {\n    \"std\": [\"FKST\", -3]\n  },\n  \"Fernando de Noronha\": {\n    \"std\": [\"FNT\", -2]\n  },\n  \"South Georgia\": {\n    \"std\": [\"GST\", -2]\n  },\n  \"Azores\": {\n    \"std\": [\"AZOT\", -1],\n    \"dst\": [\"AZOST\", 0, \"Azores Summer Time\"],\n    \"long\": \"(UTC-01:00) Azores\"\n  },\n  \"Cape Verde\": {\n    \"std\": [\"CVT\", -1],\n    \"long\": \"(UTC-01:00) Cabo Verde Is.\"\n  }\n};\n\n// const metas = require('../../data/05-metazones')\n// import offsets from './offsets.js'\n\nfor (let i = 0; i <= 14; i += 1) {\n  metas[`gmt-${i}`] = {\n    name: `Etc/GMT-${i}`,\n    std: [`GMT-${i}`, i],\n    long: `(UTC-${i}:00) Coordinated Universal Time`\n  };\n  metas[`gmt+${i}`] = {\n    name: `Etc/GMT+${i}`,\n    std: [`GMT+${i}`, -i],\n    long: `(UTC+${i}:00) Coordinated Universal Time`\n  };\n}\n\nconst display = function (id) {\n  if (!id) {\n    return null\n  }\n  if (!zones[id]) {\n    console.error(`missing id ${id}`);\n    return null\n  }\n  let metaName = zones[id].meta;\n  if (!metas[metaName]) {\n    console.error(`missing tz-meta ${metaName}`);\n  }\n  let meta = metas[metaName] || {};\n  let dst = null;\n  if (zones[id].dst && meta.dst) {\n    let [abbr, offset, name] = meta.dst;\n    name = name || `${metaName} Daylight Time`;\n    let [start, end] = zones[id].dst || [];\n    dst = { abbr, offset, name, start, end };\n  }\n\n  let [abbr, offset] = meta.std;\n  let name = meta.name || `${metaName} Time`;\n  let long = meta.long || `(UTC+${offset}:00) ${name}`;\n  return {\n    name: name,\n    iana: id,\n    standard: { abbr, offset, name: meta.name || `${metaName} Standard Time`, },\n    daylight: dst || null,\n    long: long,\n  }\n};\nvar display$1 = display;\n\nvar version = '1.5.2';\n\nconst soft = function (str) {\n  let ids = find$1(str) || [];\n  if (typeof ids === 'string') {\n    ids = [ids];\n  }\n  ids = ids.map((id) => display$1(id));\n  return ids\n};\nsoft.prototype.version = version;\n// export { find, display, version }\n\nexport { soft as default };\n"],
  "mappings": "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",
  "names": ["year", "month", "zones", "format", "timezone", "zones", "year", "normalize", "hours", "minutes", "order", "year", "normalize", "diff", "parseOffset", "zones", "parseOffset_default", "year", "parseOffset_default", "month", "date", "time", "year", "parseOffset_default", "year", "parseArray", "parseObject", "parseNumber", "defaults", "short", "long", "set", "set", "short", "year", "month", "date", "aliases", "fmt", "mapping", "o", "units", "normalize", "normalize", "normalize", "diff", "diff", "units", "set", "set", "diff", "units", "diff", "units", "year", "normalize", "short", "long", "normalize", "titleCase", "zones", "units", "fmt", "year", "date", "short", "long", "validate", "diff", "month", "set", "methods", "minute", "hour", "methods", "short", "long", "diff", "methods", "month", "year", "methods", "month", "year", "date", "months", "order", "addMethods", "SpaceTime", "normalize", "diff", "months", "addMethods", "SpaceTime", "addMethods", "SpaceTime", "methods", "addMethods", "SpaceTime", "methods", "set", "main", "all", "zones", "normalize", "isOffset", "isNumber", "utcOffset", "gmtOffset", "toIana", "parseOffset", "abbr", "offset", "name", "long", "timezones", "now", "isObject"]
}
